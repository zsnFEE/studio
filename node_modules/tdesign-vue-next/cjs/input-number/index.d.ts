import { TdInputNumberProps } from './type';
import './style';
export * from './type';
export type InputNumberProps = TdInputNumberProps;
export declare const InputNumber: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdInputNumberProps["align"]>;
            validator(val: TdInputNumberProps["align"]): boolean;
        };
        allowInputOverLimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoWidth: BooleanConstructor;
        decimalPlaces: {
            type: import("vue").PropType<TdInputNumberProps["decimalPlaces"]>;
            default: TdInputNumberProps["decimalPlaces"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdInputNumberProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdInputNumberProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdInputNumberProps["label"]>;
        };
        largeNumber: BooleanConstructor;
        max: {
            type: import("vue").PropType<TdInputNumberProps["max"]>;
            default: TdInputNumberProps["max"];
        };
        min: {
            type: import("vue").PropType<TdInputNumberProps["min"]>;
            default: TdInputNumberProps["min"];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdInputNumberProps["size"]>;
            default: TdInputNumberProps["size"];
            validator(val: TdInputNumberProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdInputNumberProps["status"]>;
            default: TdInputNumberProps["status"];
            validator(val: TdInputNumberProps["status"]): boolean;
        };
        step: {
            type: import("vue").PropType<TdInputNumberProps["step"]>;
            default: TdInputNumberProps["step"];
        };
        suffix: {
            type: import("vue").PropType<TdInputNumberProps["suffix"]>;
        };
        theme: {
            type: import("vue").PropType<TdInputNumberProps["theme"]>;
            default: TdInputNumberProps["theme"];
            validator(val: TdInputNumberProps["theme"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdInputNumberProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdInputNumberProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdInputNumberProps["onBlur"]>;
        onChange: import("vue").PropType<TdInputNumberProps["onChange"]>;
        onEnter: import("vue").PropType<TdInputNumberProps["onEnter"]>;
        onFocus: import("vue").PropType<TdInputNumberProps["onFocus"]>;
        onKeydown: import("vue").PropType<TdInputNumberProps["onKeydown"]>;
        onKeypress: import("vue").PropType<TdInputNumberProps["onKeypress"]>;
        onKeyup: import("vue").PropType<TdInputNumberProps["onKeyup"]>;
        onValidate: import("vue").PropType<TdInputNumberProps["onValidate"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdInputNumberProps["align"]>;
            validator(val: TdInputNumberProps["align"]): boolean;
        };
        allowInputOverLimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoWidth: BooleanConstructor;
        decimalPlaces: {
            type: import("vue").PropType<TdInputNumberProps["decimalPlaces"]>;
            default: TdInputNumberProps["decimalPlaces"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdInputNumberProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdInputNumberProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdInputNumberProps["label"]>;
        };
        largeNumber: BooleanConstructor;
        max: {
            type: import("vue").PropType<TdInputNumberProps["max"]>;
            default: TdInputNumberProps["max"];
        };
        min: {
            type: import("vue").PropType<TdInputNumberProps["min"]>;
            default: TdInputNumberProps["min"];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdInputNumberProps["size"]>;
            default: TdInputNumberProps["size"];
            validator(val: TdInputNumberProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdInputNumberProps["status"]>;
            default: TdInputNumberProps["status"];
            validator(val: TdInputNumberProps["status"]): boolean;
        };
        step: {
            type: import("vue").PropType<TdInputNumberProps["step"]>;
            default: TdInputNumberProps["step"];
        };
        suffix: {
            type: import("vue").PropType<TdInputNumberProps["suffix"]>;
        };
        theme: {
            type: import("vue").PropType<TdInputNumberProps["theme"]>;
            default: TdInputNumberProps["theme"];
            validator(val: TdInputNumberProps["theme"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdInputNumberProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdInputNumberProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdInputNumberProps["onBlur"]>;
        onChange: import("vue").PropType<TdInputNumberProps["onChange"]>;
        onEnter: import("vue").PropType<TdInputNumberProps["onEnter"]>;
        onFocus: import("vue").PropType<TdInputNumberProps["onFocus"]>;
        onKeydown: import("vue").PropType<TdInputNumberProps["onKeydown"]>;
        onKeypress: import("vue").PropType<TdInputNumberProps["onKeypress"]>;
        onKeyup: import("vue").PropType<TdInputNumberProps["onKeyup"]>;
        onValidate: import("vue").PropType<TdInputNumberProps["onValidate"]>;
    }>>, {
        disabled: boolean;
        value: import("./type").InputNumberValue;
        max: import("./type").InputNumberValue;
        min: import("./type").InputNumberValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        largeNumber: boolean;
        step: import("./type").InputNumberValue;
        decimalPlaces: import("./type").InputNumberDecimalPlaces;
        placeholder: string;
        theme: "normal" | "row" | "column";
        modelValue: import("./type").InputNumberValue;
        readonly: boolean;
        autoWidth: boolean;
        allowInputOverLimit: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<TdInputNumberProps["align"]>;
            validator(val: TdInputNumberProps["align"]): boolean;
        };
        allowInputOverLimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoWidth: BooleanConstructor;
        decimalPlaces: {
            type: import("vue").PropType<TdInputNumberProps["decimalPlaces"]>;
            default: TdInputNumberProps["decimalPlaces"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdInputNumberProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdInputNumberProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdInputNumberProps["label"]>;
        };
        largeNumber: BooleanConstructor;
        max: {
            type: import("vue").PropType<TdInputNumberProps["max"]>;
            default: TdInputNumberProps["max"];
        };
        min: {
            type: import("vue").PropType<TdInputNumberProps["min"]>;
            default: TdInputNumberProps["min"];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdInputNumberProps["size"]>;
            default: TdInputNumberProps["size"];
            validator(val: TdInputNumberProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdInputNumberProps["status"]>;
            default: TdInputNumberProps["status"];
            validator(val: TdInputNumberProps["status"]): boolean;
        };
        step: {
            type: import("vue").PropType<TdInputNumberProps["step"]>;
            default: TdInputNumberProps["step"];
        };
        suffix: {
            type: import("vue").PropType<TdInputNumberProps["suffix"]>;
        };
        theme: {
            type: import("vue").PropType<TdInputNumberProps["theme"]>;
            default: TdInputNumberProps["theme"];
            validator(val: TdInputNumberProps["theme"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdInputNumberProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdInputNumberProps["value"]>;
            default: TdInputNumberProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdInputNumberProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdInputNumberProps["onBlur"]>;
        onChange: import("vue").PropType<TdInputNumberProps["onChange"]>;
        onEnter: import("vue").PropType<TdInputNumberProps["onEnter"]>;
        onFocus: import("vue").PropType<TdInputNumberProps["onFocus"]>;
        onKeydown: import("vue").PropType<TdInputNumberProps["onKeydown"]>;
        onKeypress: import("vue").PropType<TdInputNumberProps["onKeypress"]>;
        onKeyup: import("vue").PropType<TdInputNumberProps["onKeyup"]>;
        onValidate: import("vue").PropType<TdInputNumberProps["onValidate"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").InputNumberValue;
        max: import("./type").InputNumberValue;
        min: import("./type").InputNumberValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        largeNumber: boolean;
        step: import("./type").InputNumberValue;
        decimalPlaces: import("./type").InputNumberDecimalPlaces;
        placeholder: string;
        theme: "normal" | "row" | "column";
        modelValue: import("./type").InputNumberValue;
        readonly: boolean;
        autoWidth: boolean;
        allowInputOverLimit: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<TdInputNumberProps["align"]>;
        validator(val: TdInputNumberProps["align"]): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: import("vue").PropType<TdInputNumberProps["decimalPlaces"]>;
        default: TdInputNumberProps["decimalPlaces"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: import("vue").PropType<TdInputNumberProps["format"]>;
    };
    inputProps: {
        type: import("vue").PropType<TdInputNumberProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdInputNumberProps["label"]>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: import("vue").PropType<TdInputNumberProps["max"]>;
        default: TdInputNumberProps["max"];
    };
    min: {
        type: import("vue").PropType<TdInputNumberProps["min"]>;
        default: TdInputNumberProps["min"];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    size: {
        type: import("vue").PropType<TdInputNumberProps["size"]>;
        default: TdInputNumberProps["size"];
        validator(val: TdInputNumberProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdInputNumberProps["status"]>;
        default: TdInputNumberProps["status"];
        validator(val: TdInputNumberProps["status"]): boolean;
    };
    step: {
        type: import("vue").PropType<TdInputNumberProps["step"]>;
        default: TdInputNumberProps["step"];
    };
    suffix: {
        type: import("vue").PropType<TdInputNumberProps["suffix"]>;
    };
    theme: {
        type: import("vue").PropType<TdInputNumberProps["theme"]>;
        default: TdInputNumberProps["theme"];
        validator(val: TdInputNumberProps["theme"]): boolean;
    };
    tips: {
        type: import("vue").PropType<TdInputNumberProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdInputNumberProps["value"]>;
        default: TdInputNumberProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdInputNumberProps["value"]>;
        default: TdInputNumberProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdInputNumberProps["defaultValue"]>;
    };
    onBlur: import("vue").PropType<TdInputNumberProps["onBlur"]>;
    onChange: import("vue").PropType<TdInputNumberProps["onChange"]>;
    onEnter: import("vue").PropType<TdInputNumberProps["onEnter"]>;
    onFocus: import("vue").PropType<TdInputNumberProps["onFocus"]>;
    onKeydown: import("vue").PropType<TdInputNumberProps["onKeydown"]>;
    onKeypress: import("vue").PropType<TdInputNumberProps["onKeypress"]>;
    onKeyup: import("vue").PropType<TdInputNumberProps["onKeyup"]>;
    onValidate: import("vue").PropType<TdInputNumberProps["onValidate"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    disabled: boolean;
    value: import("./type").InputNumberValue;
    max: import("./type").InputNumberValue;
    min: import("./type").InputNumberValue;
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    largeNumber: boolean;
    step: import("./type").InputNumberValue;
    decimalPlaces: import("./type").InputNumberDecimalPlaces;
    placeholder: string;
    theme: "normal" | "row" | "column";
    modelValue: import("./type").InputNumberValue;
    readonly: boolean;
    autoWidth: boolean;
    allowInputOverLimit: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default InputNumber;

import { TdListProps, TdListItemProps, TdListItemMetaProps } from './type';
import './style';
export * from './type';
export type ListProps = TdListProps;
export type ListItemProps = TdListItemProps;
export type ListItemMetaProps = TdListItemMetaProps;
export declare const List: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<TdListProps["asyncLoading"]>;
        };
        footer: {
            type: import("vue").PropType<TdListProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<TdListProps["header"]>;
        };
        layout: {
            type: import("vue").PropType<TdListProps["layout"]>;
            default: TdListProps["layout"];
            validator(val: TdListProps["layout"]): boolean;
        };
        scroll: {
            type: import("vue").PropType<TdListProps["scroll"]>;
        };
        size: {
            type: import("vue").PropType<TdListProps["size"]>;
            default: TdListProps["size"];
            validator(val: TdListProps["size"]): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<TdListProps["onLoadMore"]>;
        onScroll: import("vue").PropType<TdListProps["onScroll"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<TdListProps["asyncLoading"]>;
        };
        footer: {
            type: import("vue").PropType<TdListProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<TdListProps["header"]>;
        };
        layout: {
            type: import("vue").PropType<TdListProps["layout"]>;
            default: TdListProps["layout"];
            validator(val: TdListProps["layout"]): boolean;
        };
        scroll: {
            type: import("vue").PropType<TdListProps["scroll"]>;
        };
        size: {
            type: import("vue").PropType<TdListProps["size"]>;
            default: TdListProps["size"];
            validator(val: TdListProps["size"]): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<TdListProps["onLoadMore"]>;
        onScroll: import("vue").PropType<TdListProps["onScroll"]>;
    }>>, {
        split: boolean;
        layout: "vertical" | "horizontal";
        size: "small" | "medium" | "large";
        stripe: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<TdListProps["asyncLoading"]>;
        };
        footer: {
            type: import("vue").PropType<TdListProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<TdListProps["header"]>;
        };
        layout: {
            type: import("vue").PropType<TdListProps["layout"]>;
            default: TdListProps["layout"];
            validator(val: TdListProps["layout"]): boolean;
        };
        scroll: {
            type: import("vue").PropType<TdListProps["scroll"]>;
        };
        size: {
            type: import("vue").PropType<TdListProps["size"]>;
            default: TdListProps["size"];
            validator(val: TdListProps["size"]): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<TdListProps["onLoadMore"]>;
        onScroll: import("vue").PropType<TdListProps["onScroll"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        split: boolean;
        layout: "vertical" | "horizontal";
        size: "small" | "medium" | "large";
        stripe: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<TdListProps["asyncLoading"]>;
    };
    footer: {
        type: import("vue").PropType<TdListProps["footer"]>;
    };
    header: {
        type: import("vue").PropType<TdListProps["header"]>;
    };
    layout: {
        type: import("vue").PropType<TdListProps["layout"]>;
        default: TdListProps["layout"];
        validator(val: TdListProps["layout"]): boolean;
    };
    scroll: {
        type: import("vue").PropType<TdListProps["scroll"]>;
    };
    size: {
        type: import("vue").PropType<TdListProps["size"]>;
        default: TdListProps["size"];
        validator(val: TdListProps["size"]): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<TdListProps["onLoadMore"]>;
    onScroll: import("vue").PropType<TdListProps["onScroll"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    split: boolean;
    layout: "vertical" | "horizontal";
    size: "small" | "medium" | "large";
    stripe: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ListItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdListItemProps["action"]>;
        };
        content: {
            type: import("vue").PropType<TdListItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdListItemProps["default"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdListItemProps["action"]>;
        };
        content: {
            type: import("vue").PropType<TdListItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdListItemProps["default"]>;
        };
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdListItemProps["action"]>;
        };
        content: {
            type: import("vue").PropType<TdListItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdListItemProps["default"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<TdListItemProps["action"]>;
    };
    content: {
        type: import("vue").PropType<TdListItemProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdListItemProps["default"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ListItemMeta: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<TdListItemMetaProps["avatar"]>;
        };
        description: {
            type: import("vue").PropType<TdListItemMetaProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdListItemMetaProps["image"]>;
        };
        title: {
            type: import("vue").PropType<TdListItemMetaProps["title"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<TdListItemMetaProps["avatar"]>;
        };
        description: {
            type: import("vue").PropType<TdListItemMetaProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdListItemMetaProps["image"]>;
        };
        title: {
            type: import("vue").PropType<TdListItemMetaProps["title"]>;
        };
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<TdListItemMetaProps["avatar"]>;
        };
        description: {
            type: import("vue").PropType<TdListItemMetaProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdListItemMetaProps["image"]>;
        };
        title: {
            type: import("vue").PropType<TdListItemMetaProps["title"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    avatar: {
        type: import("vue").PropType<TdListItemMetaProps["avatar"]>;
    };
    description: {
        type: import("vue").PropType<TdListItemMetaProps["description"]>;
    };
    image: {
        type: import("vue").PropType<TdListItemMetaProps["image"]>;
    };
    title: {
        type: import("vue").PropType<TdListItemMetaProps["title"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;

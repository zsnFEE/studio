import { TdMenuProps, TdHeadMenuProps, TdSubmenuProps, TdMenuItemProps } from './type';
import './style';
export * from './type';
export type MenuProps = TdMenuProps;
export type HeadMenuProps = TdHeadMenuProps;
export type SubmenuProps = TdSubmenuProps;
export type MenuItemProps = TdMenuItemProps;
export declare const Menu: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        onCollapsed: FunctionConstructor;
        collapsed: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<TdMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandMutex: BooleanConstructor;
        expandType: {
            type: import("vue").PropType<TdMenuProps["expandType"]>;
            default: TdMenuProps["expandType"];
            validator(val: TdMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdMenuProps["theme"]>;
            default: TdMenuProps["theme"];
            validator(val: TdMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdMenuProps["defaultValue"]>;
        };
        width: {
            type: import("vue").PropType<TdMenuProps["width"]>;
            default: string;
        };
        onChange: import("vue").PropType<TdMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdMenuProps["onExpand"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        onCollapsed: FunctionConstructor;
        collapsed: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<TdMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandMutex: BooleanConstructor;
        expandType: {
            type: import("vue").PropType<TdMenuProps["expandType"]>;
            default: TdMenuProps["expandType"];
            validator(val: TdMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdMenuProps["theme"]>;
            default: TdMenuProps["theme"];
            validator(val: TdMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdMenuProps["defaultValue"]>;
        };
        width: {
            type: import("vue").PropType<TdMenuProps["width"]>;
            default: string;
        };
        onChange: import("vue").PropType<TdMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdMenuProps["onExpand"]>;
    }>>, {
        value: import("./type").MenuValue;
        width: string | number | (string | number)[];
        expanded: import("./type").MenuValue[];
        expandMutex: boolean;
        theme: "dark" | "light";
        modelValue: import("./type").MenuValue;
        defaultExpanded: import("./type").MenuValue[];
        expandType: "popup" | "normal";
        collapsed: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        onCollapsed: FunctionConstructor;
        collapsed: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<TdMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandMutex: BooleanConstructor;
        expandType: {
            type: import("vue").PropType<TdMenuProps["expandType"]>;
            default: TdMenuProps["expandType"];
            validator(val: TdMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdMenuProps["theme"]>;
            default: TdMenuProps["theme"];
            validator(val: TdMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdMenuProps["value"]>;
            default: TdMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdMenuProps["defaultValue"]>;
        };
        width: {
            type: import("vue").PropType<TdMenuProps["width"]>;
            default: string;
        };
        onChange: import("vue").PropType<TdMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdMenuProps["onExpand"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").MenuValue;
        width: string | number | (string | number)[];
        expanded: import("./type").MenuValue[];
        expandMutex: boolean;
        theme: "dark" | "light";
        modelValue: import("./type").MenuValue;
        defaultExpanded: import("./type").MenuValue[];
        expandType: "popup" | "normal";
        collapsed: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onCollapsed: FunctionConstructor;
    collapsed: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<TdMenuProps["expanded"]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<TdMenuProps["defaultExpanded"]>;
        default: any[];
    };
    expandMutex: BooleanConstructor;
    expandType: {
        type: import("vue").PropType<TdMenuProps["expandType"]>;
        default: TdMenuProps["expandType"];
        validator(val: TdMenuProps["expandType"]): boolean;
    };
    logo: {
        type: import("vue").PropType<TdMenuProps["logo"]>;
    };
    operations: {
        type: import("vue").PropType<TdMenuProps["operations"]>;
    };
    theme: {
        type: import("vue").PropType<TdMenuProps["theme"]>;
        default: TdMenuProps["theme"];
        validator(val: TdMenuProps["theme"]): boolean;
    };
    value: {
        type: import("vue").PropType<TdMenuProps["value"]>;
        default: TdMenuProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdMenuProps["value"]>;
        default: TdMenuProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdMenuProps["defaultValue"]>;
    };
    width: {
        type: import("vue").PropType<TdMenuProps["width"]>;
        default: string;
    };
    onChange: import("vue").PropType<TdMenuProps["onChange"]>;
    onExpand: import("vue").PropType<TdMenuProps["onExpand"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").MenuValue;
    width: string | number | (string | number)[];
    expanded: import("./type").MenuValue[];
    expandMutex: boolean;
    theme: "dark" | "light";
    modelValue: import("./type").MenuValue;
    defaultExpanded: import("./type").MenuValue[];
    expandType: "popup" | "normal";
    collapsed: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const HeadMenu: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        expanded: {
            type: import("vue").PropType<TdHeadMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdHeadMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandType: {
            type: import("vue").PropType<TdHeadMenuProps["expandType"]>;
            default: TdHeadMenuProps["expandType"];
            validator(val: TdHeadMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdHeadMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdHeadMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdHeadMenuProps["theme"]>;
            default: TdHeadMenuProps["theme"];
            validator(val: TdHeadMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdHeadMenuProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdHeadMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdHeadMenuProps["onExpand"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        expanded: {
            type: import("vue").PropType<TdHeadMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdHeadMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandType: {
            type: import("vue").PropType<TdHeadMenuProps["expandType"]>;
            default: TdHeadMenuProps["expandType"];
            validator(val: TdHeadMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdHeadMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdHeadMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdHeadMenuProps["theme"]>;
            default: TdHeadMenuProps["theme"];
            validator(val: TdHeadMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdHeadMenuProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdHeadMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdHeadMenuProps["onExpand"]>;
    }>>, {
        value: import("./type").MenuValue;
        expanded: import("./type").MenuValue[];
        theme: "dark" | "light";
        modelValue: import("./type").MenuValue;
        defaultExpanded: import("./type").MenuValue[];
        expandType: "popup" | "normal";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        expanded: {
            type: import("vue").PropType<TdHeadMenuProps["expanded"]>;
            default: any;
        };
        defaultExpanded: {
            type: import("vue").PropType<TdHeadMenuProps["defaultExpanded"]>;
            default: any[];
        };
        expandType: {
            type: import("vue").PropType<TdHeadMenuProps["expandType"]>;
            default: TdHeadMenuProps["expandType"];
            validator(val: TdHeadMenuProps["expandType"]): boolean;
        };
        logo: {
            type: import("vue").PropType<TdHeadMenuProps["logo"]>;
        };
        operations: {
            type: import("vue").PropType<TdHeadMenuProps["operations"]>;
        };
        theme: {
            type: import("vue").PropType<TdHeadMenuProps["theme"]>;
            default: TdHeadMenuProps["theme"];
            validator(val: TdHeadMenuProps["theme"]): boolean;
        };
        value: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdHeadMenuProps["value"]>;
            default: TdHeadMenuProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdHeadMenuProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdHeadMenuProps["onChange"]>;
        onExpand: import("vue").PropType<TdHeadMenuProps["onExpand"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").MenuValue;
        expanded: import("./type").MenuValue[];
        theme: "dark" | "light";
        modelValue: import("./type").MenuValue;
        defaultExpanded: import("./type").MenuValue[];
        expandType: "popup" | "normal";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    expanded: {
        type: import("vue").PropType<TdHeadMenuProps["expanded"]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<TdHeadMenuProps["defaultExpanded"]>;
        default: any[];
    };
    expandType: {
        type: import("vue").PropType<TdHeadMenuProps["expandType"]>;
        default: TdHeadMenuProps["expandType"];
        validator(val: TdHeadMenuProps["expandType"]): boolean;
    };
    logo: {
        type: import("vue").PropType<TdHeadMenuProps["logo"]>;
    };
    operations: {
        type: import("vue").PropType<TdHeadMenuProps["operations"]>;
    };
    theme: {
        type: import("vue").PropType<TdHeadMenuProps["theme"]>;
        default: TdHeadMenuProps["theme"];
        validator(val: TdHeadMenuProps["theme"]): boolean;
    };
    value: {
        type: import("vue").PropType<TdHeadMenuProps["value"]>;
        default: TdHeadMenuProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdHeadMenuProps["value"]>;
        default: TdHeadMenuProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdHeadMenuProps["defaultValue"]>;
    };
    onChange: import("vue").PropType<TdHeadMenuProps["onChange"]>;
    onExpand: import("vue").PropType<TdHeadMenuProps["onExpand"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").MenuValue;
    expanded: import("./type").MenuValue[];
    theme: "dark" | "light";
    modelValue: import("./type").MenuValue;
    defaultExpanded: import("./type").MenuValue[];
    expandType: "popup" | "normal";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const Submenu: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdSubmenuProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdSubmenuProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdSubmenuProps["icon"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdSubmenuProps["popupProps"]>;
        };
        title: {
            type: import("vue").PropType<TdSubmenuProps["title"]>;
        };
        value: {
            type: import("vue").PropType<TdSubmenuProps["value"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdSubmenuProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdSubmenuProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdSubmenuProps["icon"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdSubmenuProps["popupProps"]>;
        };
        title: {
            type: import("vue").PropType<TdSubmenuProps["title"]>;
        };
        value: {
            type: import("vue").PropType<TdSubmenuProps["value"]>;
        };
    }>>, {
        disabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdSubmenuProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdSubmenuProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdSubmenuProps["icon"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdSubmenuProps["popupProps"]>;
        };
        title: {
            type: import("vue").PropType<TdSubmenuProps["title"]>;
        };
        value: {
            type: import("vue").PropType<TdSubmenuProps["value"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<TdSubmenuProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdSubmenuProps["default"]>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<TdSubmenuProps["icon"]>;
    };
    popupProps: {
        type: import("vue").PropType<TdSubmenuProps["popupProps"]>;
    };
    title: {
        type: import("vue").PropType<TdSubmenuProps["title"]>;
    };
    value: {
        type: import("vue").PropType<TdSubmenuProps["value"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const MenuItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdMenuItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdMenuItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdMenuItemProps["icon"]>;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdMenuItemProps["router"]>;
        };
        routerLink: BooleanConstructor;
        target: {
            type: import("vue").PropType<TdMenuItemProps["target"]>;
            default: TdMenuItemProps["target"];
            validator(val: TdMenuItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdMenuItemProps["to"]>;
        };
        value: {
            type: import("vue").PropType<TdMenuItemProps["value"]>;
        };
        onClick: import("vue").PropType<TdMenuItemProps["onClick"]>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdMenuItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdMenuItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdMenuItemProps["icon"]>;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdMenuItemProps["router"]>;
        };
        routerLink: BooleanConstructor;
        target: {
            type: import("vue").PropType<TdMenuItemProps["target"]>;
            default: TdMenuItemProps["target"];
            validator(val: TdMenuItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdMenuItemProps["to"]>;
        };
        value: {
            type: import("vue").PropType<TdMenuItemProps["value"]>;
        };
        onClick: import("vue").PropType<TdMenuItemProps["onClick"]>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, {
        disabled: boolean;
        replace: boolean;
        target: "_self" | "_blank" | "_parent" | "_top";
        href: string;
        routerLink: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdMenuItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdMenuItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdMenuItemProps["icon"]>;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdMenuItemProps["router"]>;
        };
        routerLink: BooleanConstructor;
        target: {
            type: import("vue").PropType<TdMenuItemProps["target"]>;
            default: TdMenuItemProps["target"];
            validator(val: TdMenuItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdMenuItemProps["to"]>;
        };
        value: {
            type: import("vue").PropType<TdMenuItemProps["value"]>;
        };
        onClick: import("vue").PropType<TdMenuItemProps["onClick"]>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        replace: boolean;
        target: "_self" | "_blank" | "_parent" | "_top";
        href: string;
        routerLink: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<TdMenuItemProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdMenuItemProps["default"]>;
    };
    disabled: BooleanConstructor;
    href: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: import("vue").PropType<TdMenuItemProps["icon"]>;
    };
    replace: BooleanConstructor;
    router: {
        type: import("vue").PropType<TdMenuItemProps["router"]>;
    };
    routerLink: BooleanConstructor;
    target: {
        type: import("vue").PropType<TdMenuItemProps["target"]>;
        default: TdMenuItemProps["target"];
        validator(val: TdMenuItemProps["target"]): boolean;
    };
    to: {
        type: import("vue").PropType<TdMenuItemProps["to"]>;
    };
    value: {
        type: import("vue").PropType<TdMenuItemProps["value"]>;
    };
    onClick: import("vue").PropType<TdMenuItemProps["onClick"]>;
}>> & {
    onClick?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", {
    disabled: boolean;
    replace: boolean;
    target: "_self" | "_blank" | "_parent" | "_top";
    href: string;
    routerLink: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const MenuGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<import("./type").TdMenuGroupProps["title"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<import("./type").TdMenuGroupProps["title"]>;
        };
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<import("./type").TdMenuGroupProps["title"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<import("./type").TdMenuGroupProps["title"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;

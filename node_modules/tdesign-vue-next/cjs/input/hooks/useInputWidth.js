/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-040b3cbb.js');
require('../../config-provider/hooks/useConfig.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../_chunks/dep-682444b3.js');
var index = require('../../_chunks/dep-b048575a.js');
require('@babel/runtime/helpers/defineProperty');
require('../../_chunks/dep-0f5dd876.js');
require('../../_chunks/dep-ee4f84a5.js');
require('../../_chunks/dep-66f974a3.js');
require('dayjs');
require('../../_chunks/dep-5e94db90.js');
require('../../_chunks/dep-2f309208.js');
require('../../_chunks/dep-7154c044.js');
require('../../_chunks/dep-3e1aa2e0.js');
require('../../_chunks/dep-79f734cc.js');
require('../../_chunks/dep-63ff6e12.js');
require('../../_chunks/dep-020c2a7e.js');
require('../../_chunks/dep-79cd6be1.js');
require('../../_chunks/dep-41b6fe49.js');
require('../../_chunks/dep-ce0157af.js');
require('../../_chunks/dep-06f7d92f.js');
require('../../_chunks/dep-0c415789.js');
require('../../_chunks/dep-57045e93.js');
require('../../_chunks/dep-c66679ef.js');
require('../../_chunks/dep-3df90229.js');
require('../../_chunks/dep-93426c60.js');
require('../../_chunks/dep-c6c5ec69.js');
require('../../_chunks/dep-1ec17e27.js');
require('../../_chunks/dep-15b276e6.js');
require('../../_chunks/dep-4d3ddec0.js');
require('../../_chunks/dep-d0f125b5.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');

var ANIMATION_TIME = 100;
function useInputWidth(props, inputRef, innerValue) {
  var _toRefs = Vue.toRefs(props),
    autoWidth = _toRefs.autoWidth,
    placeholder = _toRefs.placeholder;
  var inputPreRef = Vue.ref(null);
  var observerTimer = Vue.ref(null);
  var updateInputWidth = function updateInputWidth() {
    if (!inputPreRef.value || !inputRef.value) return;
    inputRef.value.style.width = getComputedStyle(inputPreRef.value).width;
  };
  index.useResizeObserver(inputPreRef, function () {
    if (autoWidth.value) {
      observerTimer.value = setTimeout(function () {
        updateInputWidth();
        clearTimeout(observerTimer.value);
      }, ANIMATION_TIME);
    }
  });
  Vue.onBeforeUnmount(function () {
    clearTimeout(observerTimer.value);
  });
  var addListeners = function addListeners() {
    Vue.watch([innerValue, placeholder], function () {
      if (!autoWidth.value) return;
      Vue.nextTick(function () {
        updateInputWidth();
      });
    }, {
      immediate: true
    });
  };
  Vue.onMounted(function () {
    if (autoWidth.value) {
      addListeners();
    }
  });
  return {
    inputPreRef: inputPreRef
  };
}

exports.useInputWidth = useInputWidth;
//# sourceMappingURL=useInputWidth.js.map

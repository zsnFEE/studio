import { TdSelectInputProps } from './type';
import './style';
export * from './type';
export type SelectInputProps = TdSelectInputProps;
export declare const SelectInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./hooks").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectInputProps["collapsedItems"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdSelectInputProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectInputProps["inputValue"]>;
            default: TdSelectInputProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectInputProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectInputProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectInputProps["label"]>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<TdSelectInputProps["panel"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectInputProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdSelectInputProps["size"]>;
            default: TdSelectInputProps["size"];
            validator(val: TdSelectInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectInputProps["status"]>;
            default: TdSelectInputProps["status"];
            validator(val: TdSelectInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectInputProps["suffixIcon"]>;
        };
        tag: {
            type: import("vue").PropType<TdSelectInputProps["tag"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectInputProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectInputProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectInputProps["value"]>;
            default: TdSelectInputProps["value"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectInputProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdSelectInputProps["onBlur"]>;
        onClear: import("vue").PropType<TdSelectInputProps["onClear"]>;
        onEnter: import("vue").PropType<TdSelectInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectInputProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectInputProps["onInputChange"]>;
        onMouseenter: import("vue").PropType<TdSelectInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdSelectInputProps["onMouseleave"]>;
        onPaste: import("vue").PropType<TdSelectInputProps["onPaste"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectInputProps["onPopupVisibleChange"]>;
        onTagChange: import("vue").PropType<TdSelectInputProps["onTagChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./hooks").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectInputProps["collapsedItems"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdSelectInputProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectInputProps["inputValue"]>;
            default: TdSelectInputProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectInputProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectInputProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectInputProps["label"]>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<TdSelectInputProps["panel"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectInputProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdSelectInputProps["size"]>;
            default: TdSelectInputProps["size"];
            validator(val: TdSelectInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectInputProps["status"]>;
            default: TdSelectInputProps["status"];
            validator(val: TdSelectInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectInputProps["suffixIcon"]>;
        };
        tag: {
            type: import("vue").PropType<TdSelectInputProps["tag"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectInputProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectInputProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectInputProps["value"]>;
            default: TdSelectInputProps["value"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectInputProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdSelectInputProps["onBlur"]>;
        onClear: import("vue").PropType<TdSelectInputProps["onClear"]>;
        onEnter: import("vue").PropType<TdSelectInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectInputProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectInputProps["onInputChange"]>;
        onMouseenter: import("vue").PropType<TdSelectInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdSelectInputProps["onMouseleave"]>;
        onPaste: import("vue").PropType<TdSelectInputProps["onPaste"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectInputProps["onPopupVisibleChange"]>;
        onTagChange: import("vue").PropType<TdSelectInputProps["onTagChange"]>;
    }>>, {
        disabled: boolean;
        value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
        loading: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        readonly: boolean;
        autoWidth: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        allowInput: boolean;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./hooks").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectInputProps["collapsedItems"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdSelectInputProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectInputProps["inputValue"]>;
            default: TdSelectInputProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectInputProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectInputProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectInputProps["label"]>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<TdSelectInputProps["panel"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectInputProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdSelectInputProps["size"]>;
            default: TdSelectInputProps["size"];
            validator(val: TdSelectInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectInputProps["status"]>;
            default: TdSelectInputProps["status"];
            validator(val: TdSelectInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectInputProps["suffixIcon"]>;
        };
        tag: {
            type: import("vue").PropType<TdSelectInputProps["tag"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectInputProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectInputProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectInputProps["value"]>;
            default: TdSelectInputProps["value"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectInputProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdSelectInputProps["onBlur"]>;
        onClear: import("vue").PropType<TdSelectInputProps["onClear"]>;
        onEnter: import("vue").PropType<TdSelectInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectInputProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectInputProps["onInputChange"]>;
        onMouseenter: import("vue").PropType<TdSelectInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdSelectInputProps["onMouseleave"]>;
        onPaste: import("vue").PropType<TdSelectInputProps["onPaste"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectInputProps["onPopupVisibleChange"]>;
        onTagChange: import("vue").PropType<TdSelectInputProps["onTagChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
        loading: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        readonly: boolean;
        autoWidth: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        allowInput: boolean;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: import("vue").PropType<import("./hooks").SelectInputValueDisplayOptions>;
    };
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<TdSelectInputProps["collapsedItems"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<TdSelectInputProps["inputProps"]>;
    };
    inputValue: {
        type: import("vue").PropType<TdSelectInputProps["inputValue"]>;
        default: TdSelectInputProps["inputValue"];
    };
    defaultInputValue: {
        type: import("vue").PropType<TdSelectInputProps["defaultInputValue"]>;
    };
    keys: {
        type: import("vue").PropType<TdSelectInputProps["keys"]>;
    };
    label: {
        type: import("vue").PropType<TdSelectInputProps["label"]>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<TdSelectInputProps["panel"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<TdSelectInputProps["popupProps"]>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<TdSelectInputProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    reserveKeyword: BooleanConstructor;
    size: {
        type: import("vue").PropType<TdSelectInputProps["size"]>;
        default: TdSelectInputProps["size"];
        validator(val: TdSelectInputProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdSelectInputProps["status"]>;
        default: TdSelectInputProps["status"];
        validator(val: TdSelectInputProps["status"]): boolean;
    };
    suffix: {
        type: import("vue").PropType<TdSelectInputProps["suffix"]>;
    };
    suffixIcon: {
        type: import("vue").PropType<TdSelectInputProps["suffixIcon"]>;
    };
    tag: {
        type: import("vue").PropType<TdSelectInputProps["tag"]>;
    };
    tagInputProps: {
        type: import("vue").PropType<TdSelectInputProps["tagInputProps"]>;
    };
    tagProps: {
        type: import("vue").PropType<TdSelectInputProps["tagProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdSelectInputProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdSelectInputProps["value"]>;
        default: TdSelectInputProps["value"];
    };
    valueDisplay: {
        type: import("vue").PropType<TdSelectInputProps["valueDisplay"]>;
    };
    onBlur: import("vue").PropType<TdSelectInputProps["onBlur"]>;
    onClear: import("vue").PropType<TdSelectInputProps["onClear"]>;
    onEnter: import("vue").PropType<TdSelectInputProps["onEnter"]>;
    onFocus: import("vue").PropType<TdSelectInputProps["onFocus"]>;
    onInputChange: import("vue").PropType<TdSelectInputProps["onInputChange"]>;
    onMouseenter: import("vue").PropType<TdSelectInputProps["onMouseenter"]>;
    onMouseleave: import("vue").PropType<TdSelectInputProps["onMouseleave"]>;
    onPaste: import("vue").PropType<TdSelectInputProps["onPaste"]>;
    onPopupVisibleChange: import("vue").PropType<TdSelectInputProps["onPopupVisibleChange"]>;
    onTagChange: import("vue").PropType<TdSelectInputProps["onTagChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    disabled: boolean;
    value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
    loading: boolean;
    multiple: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    readonly: boolean;
    autoWidth: boolean;
    autofocus: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    allowInput: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default SelectInput;

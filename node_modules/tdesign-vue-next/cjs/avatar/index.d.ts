import { TdAvatarProps, TdAvatarGroupProps } from './type';
import './style';
export * from './type';
export type AvatarProps = TdAvatarProps;
export type AvatarGroupProps = TdAvatarGroupProps;
export declare const Avatar: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdAvatarProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdAvatarProps["default"]>;
        };
        hideOnLoadFailed: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdAvatarProps["icon"]>;
        };
        image: {
            type: StringConstructor;
            default: string;
        };
        imageProps: {
            type: import("vue").PropType<TdAvatarProps["imageProps"]>;
        };
        shape: {
            type: import("vue").PropType<TdAvatarProps["shape"]>;
            default: TdAvatarProps["shape"];
            validator(val: TdAvatarProps["shape"]): boolean;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
        onError: import("vue").PropType<TdAvatarProps["onError"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdAvatarProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdAvatarProps["default"]>;
        };
        hideOnLoadFailed: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdAvatarProps["icon"]>;
        };
        image: {
            type: StringConstructor;
            default: string;
        };
        imageProps: {
            type: import("vue").PropType<TdAvatarProps["imageProps"]>;
        };
        shape: {
            type: import("vue").PropType<TdAvatarProps["shape"]>;
            default: TdAvatarProps["shape"];
            validator(val: TdAvatarProps["shape"]): boolean;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
        onError: import("vue").PropType<TdAvatarProps["onError"]>;
    }>>, {
        image: string;
        size: string;
        alt: string;
        shape: import("..").ShapeEnum;
        hideOnLoadFailed: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdAvatarProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdAvatarProps["default"]>;
        };
        hideOnLoadFailed: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdAvatarProps["icon"]>;
        };
        image: {
            type: StringConstructor;
            default: string;
        };
        imageProps: {
            type: import("vue").PropType<TdAvatarProps["imageProps"]>;
        };
        shape: {
            type: import("vue").PropType<TdAvatarProps["shape"]>;
            default: TdAvatarProps["shape"];
            validator(val: TdAvatarProps["shape"]): boolean;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
        onError: import("vue").PropType<TdAvatarProps["onError"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        image: string;
        size: string;
        alt: string;
        shape: import("..").ShapeEnum;
        hideOnLoadFailed: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<TdAvatarProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdAvatarProps["default"]>;
    };
    hideOnLoadFailed: BooleanConstructor;
    icon: {
        type: import("vue").PropType<TdAvatarProps["icon"]>;
    };
    image: {
        type: StringConstructor;
        default: string;
    };
    imageProps: {
        type: import("vue").PropType<TdAvatarProps["imageProps"]>;
    };
    shape: {
        type: import("vue").PropType<TdAvatarProps["shape"]>;
        default: TdAvatarProps["shape"];
        validator(val: TdAvatarProps["shape"]): boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    onError: import("vue").PropType<TdAvatarProps["onError"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    image: string;
    size: string;
    alt: string;
    shape: import("..").ShapeEnum;
    hideOnLoadFailed: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const AvatarGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        cascading: {
            type: import("vue").PropType<TdAvatarGroupProps["cascading"]>;
            default: TdAvatarGroupProps["cascading"];
            validator(val: TdAvatarGroupProps["cascading"]): boolean;
        };
        collapseAvatar: {
            type: import("vue").PropType<TdAvatarGroupProps["collapseAvatar"]>;
        };
        max: {
            type: NumberConstructor;
        };
        popupProps: {
            type: import("vue").PropType<TdAvatarGroupProps["popupProps"]>;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        cascading: {
            type: import("vue").PropType<TdAvatarGroupProps["cascading"]>;
            default: TdAvatarGroupProps["cascading"];
            validator(val: TdAvatarGroupProps["cascading"]): boolean;
        };
        collapseAvatar: {
            type: import("vue").PropType<TdAvatarGroupProps["collapseAvatar"]>;
        };
        max: {
            type: NumberConstructor;
        };
        popupProps: {
            type: import("vue").PropType<TdAvatarGroupProps["popupProps"]>;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        size: string;
        cascading: import("./type").CascadingValue;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        cascading: {
            type: import("vue").PropType<TdAvatarGroupProps["cascading"]>;
            default: TdAvatarGroupProps["cascading"];
            validator(val: TdAvatarGroupProps["cascading"]): boolean;
        };
        collapseAvatar: {
            type: import("vue").PropType<TdAvatarGroupProps["collapseAvatar"]>;
        };
        max: {
            type: NumberConstructor;
        };
        popupProps: {
            type: import("vue").PropType<TdAvatarGroupProps["popupProps"]>;
        };
        size: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        size: string;
        cascading: import("./type").CascadingValue;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    cascading: {
        type: import("vue").PropType<TdAvatarGroupProps["cascading"]>;
        default: TdAvatarGroupProps["cascading"];
        validator(val: TdAvatarGroupProps["cascading"]): boolean;
    };
    collapseAvatar: {
        type: import("vue").PropType<TdAvatarGroupProps["collapseAvatar"]>;
    };
    max: {
        type: NumberConstructor;
    };
    popupProps: {
        type: import("vue").PropType<TdAvatarGroupProps["popupProps"]>;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: string;
    cascading: import("./type").CascadingValue;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Avatar;

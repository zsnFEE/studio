import { TdPopupProps } from './type';
declare const _default: import("vue").DefineComponent<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<TdPopupProps["attach"]>;
        default: TdPopupProps["attach"];
    };
    content: {
        type: import("vue").PropType<TdPopupProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdPopupProps["default"]>;
    };
    delay: {
        type: import("vue").PropType<TdPopupProps["delay"]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<TdPopupProps["overlayClassName"]>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<TdPopupProps["overlayInnerClassName"]>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<TdPopupProps["overlayInnerStyle"]>;
    };
    overlayStyle: {
        type: import("vue").PropType<TdPopupProps["overlayStyle"]>;
    };
    placement: {
        type: import("vue").PropType<TdPopupProps["placement"]>;
        default: string;
    };
    popperOptions: {
        type: import("vue").PropType<TdPopupProps["popperOptions"]>;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<TdPopupProps["trigger"]>;
        default: TdPopupProps["trigger"];
        validator(val: TdPopupProps["trigger"]): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<TdPopupProps["triggerElement"]>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onOverlayClick: import("vue").PropType<TdPopupProps["onOverlayClick"]>;
    onScroll: import("vue").PropType<TdPopupProps["onScroll"]>;
    onScrollToBottom: import("vue").PropType<TdPopupProps["onScrollToBottom"]>;
    onVisibleChange: import("vue").PropType<TdPopupProps["onVisibleChange"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<TdPopupProps["attach"]>;
        default: TdPopupProps["attach"];
    };
    content: {
        type: import("vue").PropType<TdPopupProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdPopupProps["default"]>;
    };
    delay: {
        type: import("vue").PropType<TdPopupProps["delay"]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<TdPopupProps["overlayClassName"]>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<TdPopupProps["overlayInnerClassName"]>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<TdPopupProps["overlayInnerStyle"]>;
    };
    overlayStyle: {
        type: import("vue").PropType<TdPopupProps["overlayStyle"]>;
    };
    placement: {
        type: import("vue").PropType<TdPopupProps["placement"]>;
        default: string;
    };
    popperOptions: {
        type: import("vue").PropType<TdPopupProps["popperOptions"]>;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<TdPopupProps["trigger"]>;
        default: TdPopupProps["trigger"];
        validator(val: TdPopupProps["trigger"]): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<TdPopupProps["triggerElement"]>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onOverlayClick: import("vue").PropType<TdPopupProps["onOverlayClick"]>;
    onScroll: import("vue").PropType<TdPopupProps["onScroll"]>;
    onScrollToBottom: import("vue").PropType<TdPopupProps["onScrollToBottom"]>;
    onVisibleChange: import("vue").PropType<TdPopupProps["onVisibleChange"]>;
}>>, {
    disabled: boolean;
    visible: boolean;
    modelValue: boolean;
    attach: import("..").AttachNode;
    placement: import("./type").PopupPlacement;
    trigger: "focus" | "click" | "mousedown" | "hover" | "context-menu";
    expandAnimation: boolean;
    destroyOnClose: boolean;
    hideEmptyPopup: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}, {}>;
export default _default;

import { TdTimelineProps } from './type';
import './style';
export * from './type';
export type TimelineProps = TdTimelineProps;
export declare const Timeline: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<TdTimelineProps["labelAlign"]>;
            default: TdTimelineProps["labelAlign"];
            validator(val: TdTimelineProps["labelAlign"]): boolean;
        };
        layout: {
            type: import("vue").PropType<TdTimelineProps["layout"]>;
            default: TdTimelineProps["layout"];
            validator(val: TdTimelineProps["layout"]): boolean;
        };
        mode: {
            type: import("vue").PropType<TdTimelineProps["mode"]>;
            default: TdTimelineProps["mode"];
            validator(val: TdTimelineProps["mode"]): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<TdTimelineProps["theme"]>;
            default: TdTimelineProps["theme"];
            validator(val: TdTimelineProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<TdTimelineProps["labelAlign"]>;
            default: TdTimelineProps["labelAlign"];
            validator(val: TdTimelineProps["labelAlign"]): boolean;
        };
        layout: {
            type: import("vue").PropType<TdTimelineProps["layout"]>;
            default: TdTimelineProps["layout"];
            validator(val: TdTimelineProps["layout"]): boolean;
        };
        mode: {
            type: import("vue").PropType<TdTimelineProps["mode"]>;
            default: TdTimelineProps["mode"];
            validator(val: TdTimelineProps["mode"]): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<TdTimelineProps["theme"]>;
            default: TdTimelineProps["theme"];
            validator(val: TdTimelineProps["theme"]): boolean;
        };
    }>>, {
        reverse: boolean;
        layout: "vertical" | "horizontal";
        mode: "same" | "alternate";
        theme: "default" | "dot";
        labelAlign: "left" | "right" | "top" | "bottom" | "alternate";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<TdTimelineProps["labelAlign"]>;
            default: TdTimelineProps["labelAlign"];
            validator(val: TdTimelineProps["labelAlign"]): boolean;
        };
        layout: {
            type: import("vue").PropType<TdTimelineProps["layout"]>;
            default: TdTimelineProps["layout"];
            validator(val: TdTimelineProps["layout"]): boolean;
        };
        mode: {
            type: import("vue").PropType<TdTimelineProps["mode"]>;
            default: TdTimelineProps["mode"];
            validator(val: TdTimelineProps["mode"]): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<TdTimelineProps["theme"]>;
            default: TdTimelineProps["theme"];
            validator(val: TdTimelineProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        layout: "vertical" | "horizontal";
        mode: "same" | "alternate";
        theme: "default" | "dot";
        labelAlign: "left" | "right" | "top" | "bottom" | "alternate";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    labelAlign: {
        type: import("vue").PropType<TdTimelineProps["labelAlign"]>;
        default: TdTimelineProps["labelAlign"];
        validator(val: TdTimelineProps["labelAlign"]): boolean;
    };
    layout: {
        type: import("vue").PropType<TdTimelineProps["layout"]>;
        default: TdTimelineProps["layout"];
        validator(val: TdTimelineProps["layout"]): boolean;
    };
    mode: {
        type: import("vue").PropType<TdTimelineProps["mode"]>;
        default: TdTimelineProps["mode"];
        validator(val: TdTimelineProps["mode"]): boolean;
    };
    reverse: BooleanConstructor;
    theme: {
        type: import("vue").PropType<TdTimelineProps["theme"]>;
        default: TdTimelineProps["theme"];
        validator(val: TdTimelineProps["theme"]): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    reverse: boolean;
    layout: "vertical" | "horizontal";
    mode: "same" | "alternate";
    theme: "default" | "dot";
    labelAlign: "left" | "right" | "top" | "bottom" | "alternate";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const TimelineItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["content"]>;
        };
        dot: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dot"]>;
        };
        dotColor: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dotColor"]>;
            default: string;
        };
        label: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["label"]>;
        };
        labelAlign: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["labelAlign"]>;
            validator(val: import("./type").TdTimelineItemProps["labelAlign"]): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<import("./type").TdTimelineItemProps["onClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["content"]>;
        };
        dot: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dot"]>;
        };
        dotColor: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dotColor"]>;
            default: string;
        };
        label: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["label"]>;
        };
        labelAlign: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["labelAlign"]>;
            validator(val: import("./type").TdTimelineItemProps["labelAlign"]): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<import("./type").TdTimelineItemProps["onClick"]>;
    }>>, {
        loading: boolean;
        dotColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["content"]>;
        };
        dot: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dot"]>;
        };
        dotColor: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["dotColor"]>;
            default: string;
        };
        label: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["label"]>;
        };
        labelAlign: {
            type: import("vue").PropType<import("./type").TdTimelineItemProps["labelAlign"]>;
            validator(val: import("./type").TdTimelineItemProps["labelAlign"]): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<import("./type").TdTimelineItemProps["onClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        loading: boolean;
        dotColor: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: NumberConstructor;
    };
    content: {
        type: import("vue").PropType<import("./type").TdTimelineItemProps["content"]>;
    };
    dot: {
        type: import("vue").PropType<import("./type").TdTimelineItemProps["dot"]>;
    };
    dotColor: {
        type: import("vue").PropType<import("./type").TdTimelineItemProps["dotColor"]>;
        default: string;
    };
    label: {
        type: import("vue").PropType<import("./type").TdTimelineItemProps["label"]>;
    };
    labelAlign: {
        type: import("vue").PropType<import("./type").TdTimelineItemProps["labelAlign"]>;
        validator(val: import("./type").TdTimelineItemProps["labelAlign"]): boolean;
    };
    loading: BooleanConstructor;
    onClick: import("vue").PropType<import("./type").TdTimelineItemProps["onClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    loading: boolean;
    dotColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Timeline;

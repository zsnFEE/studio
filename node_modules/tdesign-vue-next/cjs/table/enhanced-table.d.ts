import { TdEnhancedTableProps, PrimaryTableCol, TableRowData, TdPrimaryTableProps } from './type';
declare const _default: import("vue").DefineComponent<{
    beforeDragSort: {
        type: import("vue").PropType<TdEnhancedTableProps["beforeDragSort"]>;
    };
    expandedTreeNodes: {
        type: import("vue").PropType<TdEnhancedTableProps["expandedTreeNodes"]>;
        default: TdEnhancedTableProps["expandedTreeNodes"];
    };
    defaultExpandedTreeNodes: {
        type: import("vue").PropType<TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
        default: () => TdEnhancedTableProps["defaultExpandedTreeNodes"];
    };
    tree: {
        type: import("vue").PropType<TdEnhancedTableProps["tree"]>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
    };
    onAbnormalDragSort: import("vue").PropType<TdEnhancedTableProps["onAbnormalDragSort"]>;
    onExpandedTreeNodesChange: import("vue").PropType<TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
    onTreeExpandChange: import("vue").PropType<TdEnhancedTableProps["onTreeExpandChange"]>;
    asyncLoading: {
        type: import("vue").PropType<TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<TdPrimaryTableProps["columns"]>;
        default: () => TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<TdPrimaryTableProps["displayColumns"]>;
        default: TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<TdPrimaryTableProps["dragSort"]>;
        validator(val: TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["expandIcon"]>;
        default: TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["expandedRowKeys"]>;
        default: TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<TdPrimaryTableProps["filterValue"]>;
        default: TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["selectedRowKeys"]>;
        default: TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<TdPrimaryTableProps["sort"]>;
        default: TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    beforeDragSort: {
        type: import("vue").PropType<TdEnhancedTableProps["beforeDragSort"]>;
    };
    expandedTreeNodes: {
        type: import("vue").PropType<TdEnhancedTableProps["expandedTreeNodes"]>;
        default: TdEnhancedTableProps["expandedTreeNodes"];
    };
    defaultExpandedTreeNodes: {
        type: import("vue").PropType<TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
        default: () => TdEnhancedTableProps["defaultExpandedTreeNodes"];
    };
    tree: {
        type: import("vue").PropType<TdEnhancedTableProps["tree"]>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
    };
    onAbnormalDragSort: import("vue").PropType<TdEnhancedTableProps["onAbnormalDragSort"]>;
    onExpandedTreeNodesChange: import("vue").PropType<TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
    onTreeExpandChange: import("vue").PropType<TdEnhancedTableProps["onTreeExpandChange"]>;
    asyncLoading: {
        type: import("vue").PropType<TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<TdPrimaryTableProps["columns"]>;
        default: () => TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<TdPrimaryTableProps["displayColumns"]>;
        default: TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<TdPrimaryTableProps["dragSort"]>;
        validator(val: TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["expandIcon"]>;
        default: TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["expandedRowKeys"]>;
        default: TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<TdPrimaryTableProps["filterValue"]>;
        default: TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["selectedRowKeys"]>;
        default: TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<TdPrimaryTableProps["sort"]>;
        default: TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, {
    sort: import("./type").TableSort;
    data: TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: PrimaryTableCol<TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
    expandedTreeNodes: (string | number)[];
    defaultExpandedTreeNodes: (string | number)[];
}, {}>;
export default _default;

import { PropType } from 'vue';
import { BaseTableProps } from './types';
export declare const BASE_TABLE_EVENTS: string[];
export declare const BASE_TABLE_ALL_EVENTS: string[];
export interface TableListeners {
    [key: string]: Function;
}
declare const _default: import("vue").DefineComponent<{
    renderExpandedRow: PropType<BaseTableProps["renderExpandedRow"]>;
    onLeafColumnsChange: PropType<BaseTableProps["onLeafColumnsChange"]>;
    thDraggable: BooleanConstructor;
    activeRowKeys: {
        type: PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    columns: {
        type: PropType<import("./type").TdBaseTableProps["columns"]>;
        default: () => import("./type").TdBaseTableProps["columns"];
    };
    data: {
        type: PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onCellClick: PropType<import("./type").TdBaseTableProps["onCellClick"]>;
    onColumnResizeChange: PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "show-element-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: PropType<BaseTableProps["renderExpandedRow"]>;
    onLeafColumnsChange: PropType<BaseTableProps["onLeafColumnsChange"]>;
    thDraggable: BooleanConstructor;
    activeRowKeys: {
        type: PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    columns: {
        type: PropType<import("./type").TdBaseTableProps["columns"]>;
        default: () => import("./type").TdBaseTableProps["columns"];
    };
    data: {
        type: PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onCellClick: PropType<import("./type").TdBaseTableProps["onCellClick"]>;
    onColumnResizeChange: PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, {
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    thDraggable: boolean;
}, {}>;
export default _default;

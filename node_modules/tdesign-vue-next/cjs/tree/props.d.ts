import { TdTreeProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    activable: BooleanConstructor;
    activeMultiple: BooleanConstructor;
    actived: {
        type: PropType<TdTreeProps["actived"]>;
        default: TdTreeProps["actived"];
    };
    defaultActived: {
        type: PropType<TdTreeProps["defaultActived"]>;
    };
    allowDrop: {
        type: PropType<TdTreeProps["allowDrop"]>;
    };
    allowFoldNodeOnFilter: BooleanConstructor;
    checkProps: {
        type: PropType<TdTreeProps["checkProps"]>;
    };
    checkStrictly: BooleanConstructor;
    checkable: BooleanConstructor;
    data: {
        type: PropType<TdTreeProps["data"]>;
        default: () => TdTreeProps["data"];
    };
    disableCheck: {
        type: PropType<TdTreeProps["disableCheck"]>;
        default: TdTreeProps["disableCheck"];
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    empty: {
        type: PropType<TdTreeProps["empty"]>;
        default: TdTreeProps["empty"];
    };
    expandAll: BooleanConstructor;
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    expanded: {
        type: PropType<TdTreeProps["expanded"]>;
        default: TdTreeProps["expanded"];
    };
    defaultExpanded: {
        type: PropType<TdTreeProps["defaultExpanded"]>;
        default: () => TdTreeProps["defaultExpanded"];
    };
    filter: {
        type: PropType<TdTreeProps["filter"]>;
    };
    height: {
        type: PropType<TdTreeProps["height"]>;
    };
    hover: BooleanConstructor;
    icon: {
        type: PropType<TdTreeProps["icon"]>;
        default: TdTreeProps["icon"];
    };
    keys: {
        type: PropType<TdTreeProps["keys"]>;
    };
    label: {
        type: PropType<TdTreeProps["label"]>;
        default: TdTreeProps["label"];
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: PropType<TdTreeProps["line"]>;
        default: TdTreeProps["line"];
    };
    load: {
        type: PropType<TdTreeProps["load"]>;
    };
    maxHeight: {
        type: PropType<TdTreeProps["maxHeight"]>;
    };
    operations: {
        type: PropType<TdTreeProps["operations"]>;
    };
    scroll: {
        type: PropType<TdTreeProps["scroll"]>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: PropType<TdTreeProps["value"]>;
        default: TdTreeProps["value"];
    };
    modelValue: {
        type: PropType<TdTreeProps["value"]>;
        default: TdTreeProps["value"];
    };
    defaultValue: {
        type: PropType<TdTreeProps["defaultValue"]>;
        default: () => TdTreeProps["defaultValue"];
    };
    valueMode: {
        type: PropType<TdTreeProps["valueMode"]>;
        default: TdTreeProps["valueMode"];
        validator(val: TdTreeProps["valueMode"]): boolean;
    };
    onActive: PropType<TdTreeProps["onActive"]>;
    onChange: PropType<TdTreeProps["onChange"]>;
    onClick: PropType<TdTreeProps["onClick"]>;
    onDragEnd: PropType<TdTreeProps["onDragEnd"]>;
    onDragLeave: PropType<TdTreeProps["onDragLeave"]>;
    onDragOver: PropType<TdTreeProps["onDragOver"]>;
    onDragStart: PropType<TdTreeProps["onDragStart"]>;
    onDrop: PropType<TdTreeProps["onDrop"]>;
    onExpand: PropType<TdTreeProps["onExpand"]>;
    onLoad: PropType<TdTreeProps["onLoad"]>;
    onScroll: PropType<TdTreeProps["onScroll"]>;
};
export default _default;

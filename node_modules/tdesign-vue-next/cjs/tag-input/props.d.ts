import { TdTagInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<TdTagInputProps["collapsedItems"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: PropType<TdTagInputProps["excessTagsDisplayType"]>;
        default: TdTagInputProps["excessTagsDisplayType"];
        validator(val: TdTagInputProps["excessTagsDisplayType"]): boolean;
    };
    inputProps: {
        type: PropType<TdTagInputProps["inputProps"]>;
    };
    inputValue: {
        type: PropType<TdTagInputProps["inputValue"]>;
        default: TdTagInputProps["inputValue"];
    };
    defaultInputValue: {
        type: PropType<TdTagInputProps["defaultInputValue"]>;
        default: TdTagInputProps["defaultInputValue"];
    };
    label: {
        type: PropType<TdTagInputProps["label"]>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<TdTagInputProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    size: {
        type: PropType<TdTagInputProps["size"]>;
        default: TdTagInputProps["size"];
        validator(val: TdTagInputProps["size"]): boolean;
    };
    status: {
        type: PropType<TdTagInputProps["status"]>;
        validator(val: TdTagInputProps["status"]): boolean;
    };
    suffix: {
        type: PropType<TdTagInputProps["suffix"]>;
    };
    suffixIcon: {
        type: PropType<TdTagInputProps["suffixIcon"]>;
    };
    tag: {
        type: PropType<TdTagInputProps["tag"]>;
    };
    tagProps: {
        type: PropType<TdTagInputProps["tagProps"]>;
    };
    tips: {
        type: PropType<TdTagInputProps["tips"]>;
    };
    value: {
        type: PropType<TdTagInputProps["value"]>;
        default: TdTagInputProps["value"];
    };
    modelValue: {
        type: PropType<TdTagInputProps["value"]>;
        default: TdTagInputProps["value"];
    };
    defaultValue: {
        type: PropType<TdTagInputProps["defaultValue"]>;
        default: () => TdTagInputProps["defaultValue"];
    };
    valueDisplay: {
        type: PropType<TdTagInputProps["valueDisplay"]>;
    };
    onBlur: PropType<TdTagInputProps["onBlur"]>;
    onChange: PropType<TdTagInputProps["onChange"]>;
    onClear: PropType<TdTagInputProps["onClear"]>;
    onClick: PropType<TdTagInputProps["onClick"]>;
    onDragSort: PropType<TdTagInputProps["onDragSort"]>;
    onEnter: PropType<TdTagInputProps["onEnter"]>;
    onFocus: PropType<TdTagInputProps["onFocus"]>;
    onInputChange: PropType<TdTagInputProps["onInputChange"]>;
    onMouseenter: PropType<TdTagInputProps["onMouseenter"]>;
    onMouseleave: PropType<TdTagInputProps["onMouseleave"]>;
    onPaste: PropType<TdTagInputProps["onPaste"]>;
    onRemove: PropType<TdTagInputProps["onRemove"]>;
};
export default _default;

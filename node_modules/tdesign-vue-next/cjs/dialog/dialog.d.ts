declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("./type").TdDialogProps["attach"]>;
    };
    body: {
        type: import("vue").PropType<import("./type").TdDialogProps["body"]>;
    };
    cancelBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["cancelBtn"]>;
    };
    closeBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["closeBtn"]>;
        default: import("./type").TdDialogProps["closeBtn"];
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["confirmBtn"]>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<import("./type").TdDialogProps["default"]>;
    };
    destroyOnClose: BooleanConstructor;
    dialogClassName: {
        type: StringConstructor;
        default: string;
    };
    dialogStyle: {
        type: import("vue").PropType<import("./type").TdDialogProps["dialogStyle"]>;
    };
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<import("./type").TdDialogProps["footer"]>;
        default: import("./type").TdDialogProps["footer"];
    };
    header: {
        type: import("vue").PropType<import("./type").TdDialogProps["header"]>;
        default: import("./type").TdDialogProps["header"];
    };
    lazy: BooleanConstructor;
    mode: {
        type: import("vue").PropType<import("./type").TdDialogProps["mode"]>;
        default: import("./type").TdDialogProps["mode"];
        validator(val: import("./type").TdDialogProps["mode"]): boolean;
    };
    placement: {
        type: import("vue").PropType<import("./type").TdDialogProps["placement"]>;
        default: import("./type").TdDialogProps["placement"];
        validator(val: import("./type").TdDialogProps["placement"]): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdDialogProps["theme"]>;
        default: import("./type").TdDialogProps["theme"];
        validator(val: import("./type").TdDialogProps["theme"]): boolean;
    };
    top: {
        type: import("vue").PropType<import("./type").TdDialogProps["top"]>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<import("./type").TdDialogProps["width"]>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onBeforeClose: import("vue").PropType<import("./type").TdDialogProps["onBeforeClose"]>;
    onBeforeOpen: import("vue").PropType<import("./type").TdDialogProps["onBeforeOpen"]>;
    onCancel: import("vue").PropType<import("./type").TdDialogProps["onCancel"]>;
    onClose: import("vue").PropType<import("./type").TdDialogProps["onClose"]>;
    onCloseBtnClick: import("vue").PropType<import("./type").TdDialogProps["onCloseBtnClick"]>;
    onClosed: import("vue").PropType<import("./type").TdDialogProps["onClosed"]>;
    onConfirm: import("vue").PropType<import("./type").TdDialogProps["onConfirm"]>;
    onEscKeydown: import("vue").PropType<import("./type").TdDialogProps["onEscKeydown"]>;
    onOpened: import("vue").PropType<import("./type").TdDialogProps["onOpened"]>;
    onOverlayClick: import("vue").PropType<import("./type").TdDialogProps["onOverlayClick"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("./type").TdDialogProps["attach"]>;
    };
    body: {
        type: import("vue").PropType<import("./type").TdDialogProps["body"]>;
    };
    cancelBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["cancelBtn"]>;
    };
    closeBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["closeBtn"]>;
        default: import("./type").TdDialogProps["closeBtn"];
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<import("./type").TdDialogProps["confirmBtn"]>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<import("./type").TdDialogProps["default"]>;
    };
    destroyOnClose: BooleanConstructor;
    dialogClassName: {
        type: StringConstructor;
        default: string;
    };
    dialogStyle: {
        type: import("vue").PropType<import("./type").TdDialogProps["dialogStyle"]>;
    };
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<import("./type").TdDialogProps["footer"]>;
        default: import("./type").TdDialogProps["footer"];
    };
    header: {
        type: import("vue").PropType<import("./type").TdDialogProps["header"]>;
        default: import("./type").TdDialogProps["header"];
    };
    lazy: BooleanConstructor;
    mode: {
        type: import("vue").PropType<import("./type").TdDialogProps["mode"]>;
        default: import("./type").TdDialogProps["mode"];
        validator(val: import("./type").TdDialogProps["mode"]): boolean;
    };
    placement: {
        type: import("vue").PropType<import("./type").TdDialogProps["placement"]>;
        default: import("./type").TdDialogProps["placement"];
        validator(val: import("./type").TdDialogProps["placement"]): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdDialogProps["theme"]>;
        default: import("./type").TdDialogProps["theme"];
        validator(val: import("./type").TdDialogProps["theme"]): boolean;
    };
    top: {
        type: import("vue").PropType<import("./type").TdDialogProps["top"]>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<import("./type").TdDialogProps["width"]>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onBeforeClose: import("vue").PropType<import("./type").TdDialogProps["onBeforeClose"]>;
    onBeforeOpen: import("vue").PropType<import("./type").TdDialogProps["onBeforeOpen"]>;
    onCancel: import("vue").PropType<import("./type").TdDialogProps["onCancel"]>;
    onClose: import("vue").PropType<import("./type").TdDialogProps["onClose"]>;
    onCloseBtnClick: import("vue").PropType<import("./type").TdDialogProps["onCloseBtnClick"]>;
    onClosed: import("vue").PropType<import("./type").TdDialogProps["onClosed"]>;
    onConfirm: import("vue").PropType<import("./type").TdDialogProps["onConfirm"]>;
    onEscKeydown: import("vue").PropType<import("./type").TdDialogProps["onEscKeydown"]>;
    onOpened: import("vue").PropType<import("./type").TdDialogProps["onOpened"]>;
    onOverlayClick: import("vue").PropType<import("./type").TdDialogProps["onOverlayClick"]>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    footer: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    mode: "normal" | "modal" | "modeless" | "full-screen";
    draggable: boolean;
    visible: boolean;
    lazy: boolean;
    header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: "default" | "success" | "warning" | "danger" | "info";
    placement: "center" | "top";
    destroyOnClose: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    confirmLoading: boolean;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmOnEnter: boolean;
    dialogClassName: string;
    showInAttachedElement: boolean;
}, {}>;
export default _default;

/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isArray = require('../../_chunks/dep-ce0157af.js');
var isObject = require('../../_chunks/dep-63ff6e12.js');
var isNumber = require('../../_chunks/dep-d47112ce.js');
var isEmpty = require('../../_chunks/dep-5dc144d2.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-79f734cc.js');
require('../../_chunks/dep-41b6fe49.js');
require('../../_chunks/dep-15b276e6.js');
require('../../_chunks/dep-06f7d92f.js');
require('../../_chunks/dep-0c415789.js');
require('../../_chunks/dep-3e1aa2e0.js');
require('../../_chunks/dep-79cd6be1.js');
require('../../_chunks/dep-7154c044.js');
require('../../_chunks/dep-4d3ddec0.js');

function getSingleContent(cascaderContext) {
  var value = cascaderContext.value,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    showAllLevels = cascaderContext.showAllLevels;
  if (multiple || value !== 0 && !value) return "";
  if (isArray.isArray(value)) return "";
  var node = treeStore && treeStore.getNodes(value);
  if (!(node && node.length)) {
    return value;
  }
  var path = node && node[0].getPath();
  if (path && path.length) {
    return showAllLevels ? path.map(function (node2) {
      return node2.label;
    }).join(" / ") : path.at(-1).label;
  }
  return value;
}
function getMultipleContent(cascaderContext) {
  var value = cascaderContext.value,
    multiple = cascaderContext.multiple,
    treeStore = cascaderContext.treeStore,
    showAllLevels = cascaderContext.showAllLevels;
  if (!multiple) return [];
  if (multiple && !isArray.isArray(value)) return [];
  var node = treeStore && treeStore.getNodes(value);
  if (!node) return [];
  return value.map(function (item) {
    var _node2$;
    var node2 = treeStore.getNodes(item);
    return showAllLevels ? getFullPathLabel(node2[0]) : (_node2$ = node2[0]) === null || _node2$ === void 0 ? void 0 : _node2$.label;
  }).filter(function (item) {
    return !!item;
  });
}
function getPanels(treeNodes) {
  var panels = [];
  treeNodes.forEach(function (node) {
    if (panels[node.level]) {
      panels[node.level].push(node);
    } else {
      panels[node.level] = [node];
    }
  });
  return panels;
}
function getFullPathLabel(node) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
  return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
    return node2.label;
  }).join(separator);
}
var getTreeValue = function getTreeValue(value) {
  var treeValue = [];
  if (isArray.isArray(value)) {
    if (value.length > 0 && isObject.isObject(value[0])) {
      treeValue = value.map(function (val) {
        return val.value;
      });
    } else if (value.length) {
      treeValue = value;
    }
  } else if (!isEmptyValues(value)) {
    if (isObject.isObject(value)) {
      treeValue = [value.value];
    } else {
      treeValue = [value];
    }
  }
  return treeValue;
};
var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
  if (valueType === "single") {
    return value;
  }
  var val = value;
  if (multiple) {
    return val.map(function (item) {
      return item.at(-1);
    });
  }
  return val.at(-1);
};
function isEmptyValues(value) {
  if (isNumber.isNumber(value) && !isNaN(value)) return false;
  return isEmpty.isEmpty(value);
}
function isValueInvalid(value, cascaderContext) {
  var multiple = cascaderContext.multiple,
    showAllLevels = cascaderContext.showAllLevels,
    valueType = cascaderContext.valueType;
  return multiple && !isArray.isArray(value) || !multiple && isArray.isArray(value) && valueType === "single" && !showAllLevels;
}

exports.getCascaderValue = getCascaderValue;
exports.getFullPathLabel = getFullPathLabel;
exports.getMultipleContent = getMultipleContent;
exports.getPanels = getPanels;
exports.getSingleContent = getSingleContent;
exports.getTreeValue = getTreeValue;
exports.isEmptyValues = isEmptyValues;
exports.isValueInvalid = isValueInvalid;
//# sourceMappingURL=helper.js.map

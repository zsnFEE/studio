/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var select_option = require('../option.js');
var select_optionGroup = require('../option-group.js');
var select_props = require('../props.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-040b3cbb.js');
var index$1 = require('../../_chunks/dep-9b6bbd57.js');
var index = require('../../_chunks/dep-ac087407.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../_chunks/dep-682444b3.js');
require('@babel/runtime/helpers/defineProperty');
var select_hooks_usePanelVirtualScroll = require('../hooks/usePanelVirtualScroll.js');
var select_consts_index = require('../consts/index.js');
var omit = require('../../_chunks/dep-f29f22c2.js');
var configProvider_hooks_useConfig = require('../../config-provider/hooks/useConfig.js');
require('../option-props.js');
require('../../checkbox/index.js');
require('../../checkbox/checkbox.js');
require('../../checkbox/props.js');
require('../../_chunks/dep-8848ca1b.js');
require('../../_chunks/dep-ffd5bd7c.js');
require('../../_chunks/dep-1532a597.js');
require('../../_chunks/dep-79f734cc.js');
require('../../_chunks/dep-41b6fe49.js');
require('../../_chunks/dep-e4a93457.js');
require('../../_chunks/dep-0e845ebd.js');
require('../../_chunks/dep-6097d12c.js');
require('../../_chunks/dep-00be0637.js');
require('../../_chunks/dep-2544aa61.js');
require('../../_chunks/dep-7cb54b29.js');
require('../../_chunks/dep-15ce91d8.js');
require('../../_chunks/dep-ce0157af.js');
require('../../_chunks/dep-baaf07d6.js');
require('../../checkbox/consts/index.js');
require('../../checkbox/hooks/useCheckboxLazyLoad.js');
require('../../_chunks/dep-dd949e1b.js');
require('../../checkbox/hooks/useKeyboardEvent.js');
require('../../_chunks/dep-4045ff88.js');
require('../../_chunks/dep-c6c5ec69.js');
require('../../_chunks/dep-0f5dd876.js');
require('../../_chunks/dep-0a9c2d75.js');
require('../../_chunks/dep-3e1aa2e0.js');
require('../../_chunks/dep-63ff6e12.js');
require('../../_chunks/dep-eada02ce.js');
require('../../_chunks/dep-d388e00e.js');
require('../../_chunks/dep-27e5c925.js');
require('../../_chunks/dep-13d731e3.js');
require('../../_chunks/dep-ee4f84a5.js');
require('../../_chunks/dep-66f974a3.js');
require('dayjs');
require('../../_chunks/dep-5e94db90.js');
require('../../_chunks/dep-2f309208.js');
require('../../_chunks/dep-7154c044.js');
require('../../_chunks/dep-020c2a7e.js');
require('../../_chunks/dep-79cd6be1.js');
require('../../_chunks/dep-06f7d92f.js');
require('../../_chunks/dep-0c415789.js');
require('../../_chunks/dep-57045e93.js');
require('../../_chunks/dep-c66679ef.js');
require('../../_chunks/dep-3df90229.js');
require('../../_chunks/dep-93426c60.js');
require('../../_chunks/dep-1ec17e27.js');
require('../../_chunks/dep-15b276e6.js');
require('../../_chunks/dep-4d3ddec0.js');
require('../../_chunks/dep-d0f125b5.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../../checkbox/group.js');
require('../../checkbox/checkbox-group-props.js');
require('../../_chunks/dep-cfa5d4ff.js');
require('../../_chunks/dep-1607fcdf.js');
require('../../_chunks/dep-70bb30fa.js');
require('../../_chunks/dep-816a752f.js');
require('../../_chunks/dep-2ab243e3.js');
require('../../_chunks/dep-0ff81c06.js');
require('../utils/index.js');
require('../option-group-props.js');
require('../../_chunks/dep-bd33cda1.js');
require('../../_chunks/dep-421d07b8.js');
require('../../_chunks/dep-c78b3175.js');

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var SelectPanel = Vue.defineComponent({
  name: "TSelectPanel",
  props: {
    inputValue: select_props["default"].inputValue,
    panelTopContent: select_props["default"].panelTopContent,
    panelBottomContent: select_props["default"].panelBottomContent,
    empty: select_props["default"].empty,
    creatable: select_props["default"].creatable,
    loading: select_props["default"].loading,
    loadingText: select_props["default"].loadingText,
    multiple: select_props["default"].multiple,
    filterable: select_props["default"].filterable,
    filter: select_props["default"].filter,
    scroll: select_props["default"].scroll,
    keys: select_props["default"].keys
  },
  setup: function setup(props, _ref) {
    var expose = _ref.expose;
    var COMPONENT_NAME = index.usePrefixClass("select");
    var renderTNodeJSX = index$1.useTNodeJSX();
    var renderDefaultTNode = index$1.useTNodeDefault();
    var _useConfig = configProvider_hooks_useConfig.useConfig("select"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var tSelect = Vue.inject(select_consts_index.selectInjectKey);
    var innerRef = Vue.ref(null);
    var keys = Vue.computed(function () {
      return props.keys;
    });
    var popupContentRef = Vue.computed(function () {
      return tSelect.value.popupContentRef.value;
    });
    var showCreateOption = Vue.computed(function () {
      return props.creatable && props.filterable && props.inputValue;
    });
    var displayOptions = Vue.computed(function () {
      return tSelect.value.displayOptions;
    });
    var _usePanelVirtualScrol = select_hooks_usePanelVirtualScroll.usePanelVirtualScroll({
        scroll: props.scroll,
        popupContentRef: popupContentRef,
        options: displayOptions
      }),
      trs = _usePanelVirtualScrol.trs,
      visibleData = _usePanelVirtualScrol.visibleData,
      handleRowMounted = _usePanelVirtualScrol.handleRowMounted,
      isVirtual = _usePanelVirtualScrol.isVirtual,
      panelStyle = _usePanelVirtualScrol.panelStyle,
      cursorStyle = _usePanelVirtualScrol.cursorStyle;
    var isEmpty = Vue.computed(function () {
      return !displayOptions.value.length;
    });
    var renderCreateOption = function renderCreateOption() {
      return Vue.createVNode("ul", {
        "class": ["".concat(COMPONENT_NAME.value, "__create-option"), "".concat(COMPONENT_NAME.value, "__list")]
      }, [Vue.createVNode(select_option["default"], {
        "value": props.inputValue,
        "label": "".concat(props.inputValue),
        "createAble": true,
        "class": "".concat(COMPONENT_NAME.value, "__create-option--special")
      }, null)]);
    };
    var _renderOptionsContent = function renderOptionsContent(options) {
      return Vue.createVNode("ul", {
        "class": "".concat(COMPONENT_NAME.value, "__list")
      }, [options.map(function (item, index) {
        var _props$scroll, _props$scroll2;
        if (item.children) {
          var _slot;
          return Vue.createVNode(select_optionGroup["default"], {
            "label": item.group,
            "divider": item.divider
          }, _isSlot(_slot = _renderOptionsContent(item.children)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        }
        var defaultOmit = ["index", "$index", "className", "tagName"];
        var _ref2 = keys.value || {},
          value = _ref2.value,
          label = _ref2.label,
          disabled = _ref2.disabled;
        var shouldOmitContent = [value, label, disabled].includes("content");
        var option = omit.omit(item, defaultOmit.concat(shouldOmitContent ? "content" : []));
        return Vue.createVNode(select_option["default"], Vue.mergeProps(option, isVirtual.value ? {
          rowIndex: item.$index,
          trs: trs,
          scrollType: (_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type,
          isVirtual: isVirtual.value,
          bufferSize: (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.bufferSize,
          key: "".concat(item.$index || "", "_").concat(index, "_").concat(item.value)
        } : {
          key: "".concat(index, "_").concat(item.value)
        }, {
          "index": index,
          "multiple": props.multiple,
          "onRowMounted": handleRowMounted
        }), item.slots);
      })]);
    };
    var dropdownInnerSize = Vue.computed(function () {
      return {
        small: "s",
        medium: "m",
        large: "l"
      }[tSelect.value.size];
    });
    expose({
      innerRef: innerRef,
      visibleData: visibleData,
      isVirtual: isVirtual,
      displayOptions: displayOptions
    });
    var renderPanel = function renderPanel(options, extraStyle) {
      return Vue.createVNode("div", {
        "ref": innerRef,
        "class": ["".concat(COMPONENT_NAME.value, "__dropdown-inner"), "".concat(COMPONENT_NAME.value, "__dropdown-inner--size-").concat(dropdownInnerSize.value)],
        "style": extraStyle
      }, [showCreateOption.value && renderCreateOption(), props.loading && renderDefaultTNode("loadingText", {
        defaultNode: Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__loading-tips")
        }, [t(globalConfig.value.loadingText)])
      }), !props.loading && isEmpty.value && !showCreateOption.value && Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__empty")
      }, [renderTNodeJSX("empty") || t(globalConfig.value.empty)]), !isEmpty.value && _renderOptionsContent(options)]);
    };
    return function () {
      return isVirtual.value ? Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), Vue.createVNode("div", null, [Vue.createVNode("div", {
        "style": cursorStyle.value
      }, null), renderPanel(visibleData.value, panelStyle.value)]), renderTNodeJSX("panelBottomContent")]) : Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), renderPanel(displayOptions.value), renderTNodeJSX("panelBottomContent")]);
    };
  }
});

exports["default"] = SelectPanel;
//# sourceMappingURL=select-panel.js.map

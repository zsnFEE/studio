import { TdDatePickerProps, TdDateRangePickerProps, TdDatePickerPanelProps, TdDateRangePickerPanelProps } from './type';
import './style';
export * from './type';
export type DatePickerProps = TdDatePickerProps;
export interface DatePickerPanelProps extends TdDatePickerPanelProps, Pick<TdDatePickerProps, 'modelValue'> {
}
export type DateRangePickerProps = TdDateRangePickerProps;
export interface DateRangePickerPanelProps extends TdDateRangePickerPanelProps, Pick<TdDateRangePickerProps, 'modelValue'> {
}
export declare const DatePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdDatePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        multiple: BooleanConstructor;
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
            default: TdDatePickerProps["placeholder"];
        };
        popupProps: {
            type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdDatePickerProps["size"]>;
            default: TdDatePickerProps["size"];
            validator(val: TdDatePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDatePickerProps["status"]>;
            default: TdDatePickerProps["status"];
            validator(val: TdDatePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDatePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdDatePickerProps["valueType"]>;
            default: TdDatePickerProps["valueType"];
        };
        onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
        onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdDatePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        multiple: BooleanConstructor;
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
            default: TdDatePickerProps["placeholder"];
        };
        popupProps: {
            type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdDatePickerProps["size"]>;
            default: TdDatePickerProps["size"];
            validator(val: TdDatePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDatePickerProps["status"]>;
            default: TdDatePickerProps["status"];
            validator(val: TdDatePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDatePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdDatePickerProps["valueType"]>;
            default: TdDatePickerProps["valueType"];
        };
        onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
        onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
    }>>, {
        disabled: boolean;
        value: import("./type").DateValue | import("./type").DateMultipleValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        valueType: import("./type").DatePickerValueType;
        enableTimePicker: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
        placeholder: string;
        modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        needConfirm: boolean;
        defaultTime: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdDatePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        multiple: BooleanConstructor;
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
            default: TdDatePickerProps["placeholder"];
        };
        popupProps: {
            type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdDatePickerProps["size"]>;
            default: TdDatePickerProps["size"];
            validator(val: TdDatePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDatePickerProps["status"]>;
            default: TdDatePickerProps["status"];
            validator(val: TdDatePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDatePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdDatePickerProps["valueType"]>;
            default: TdDatePickerProps["valueType"];
        };
        onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
        onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").DateValue | import("./type").DateMultipleValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        valueType: import("./type").DatePickerValueType;
        enableTimePicker: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
        placeholder: string;
        modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        needConfirm: boolean;
        defaultTime: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdDatePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<TdDatePickerProps["mode"]>;
        default: TdDatePickerProps["mode"];
        validator(val: TdDatePickerProps["mode"]): boolean;
    };
    multiple: BooleanConstructor;
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
        default: TdDatePickerProps["placeholder"];
    };
    popupProps: {
        type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
        default: TdDatePickerProps["presetsPlacement"];
        validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
    };
    size: {
        type: import("vue").PropType<TdDatePickerProps["size"]>;
        default: TdDatePickerProps["size"];
        validator(val: TdDatePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdDatePickerProps["status"]>;
        default: TdDatePickerProps["status"];
        validator(val: TdDatePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdDatePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
        default: TdDatePickerProps["defaultValue"];
    };
    valueDisplay: {
        type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
    };
    valueType: {
        type: import("vue").PropType<TdDatePickerProps["valueType"]>;
        default: TdDatePickerProps["valueType"];
    };
    onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
    onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").DateValue | import("./type").DateMultipleValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    valueType: import("./type").DatePickerValueType;
    enableTimePicker: boolean;
    multiple: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
    placeholder: string;
    modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
    readonly: boolean;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    needConfirm: boolean;
    defaultTime: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const DatePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
    }>>, {
        disabled: boolean;
        value: import("./type").DateValue | import("./type").DateMultipleValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
        modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        defaultTime: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
            default: TdDatePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDatePickerProps["value"]>;
            default: TdDatePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<TdDatePickerProps["mode"]>;
            default: TdDatePickerProps["mode"];
            validator(val: TdDatePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDatePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
            default: TdDatePickerProps["presetsPlacement"];
            validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").DateValue | import("./type").DateMultipleValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
        modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        defaultTime: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
    onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
    onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
    onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
    onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
    onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
    value: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
        default: TdDatePickerProps["defaultValue"];
    };
    modelValue: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    disableDate: {
        type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    mode: {
        type: import("vue").PropType<TdDatePickerProps["mode"]>;
        default: TdDatePickerProps["mode"];
        validator(val: TdDatePickerProps["mode"]): boolean;
    };
    presets: {
        type: import("vue").PropType<TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
        default: TdDatePickerProps["presetsPlacement"];
        validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").DateValue | import("./type").DateMultipleValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    enableTimePicker: boolean;
    defaultValue: import("./type").DateValue | import("./type").DateMultipleValue;
    modelValue: import("./type").DateValue | import("./type").DateMultipleValue;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    defaultTime: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const DateRangePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultTime"]>;
            default: () => TdDateRangePickerProps["defaultTime"];
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: import("vue").PropType<TdDateRangePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDateRangePickerProps["placeholder"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdDateRangePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<TdDateRangePickerProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<TdDateRangePickerProps["size"]>;
            default: TdDateRangePickerProps["size"];
            validator(val: TdDateRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDateRangePickerProps["status"]>;
            default: TdDateRangePickerProps["status"];
            validator(val: TdDateRangePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDateRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        valueType: {
            type: import("vue").PropType<TdDateRangePickerProps["valueType"]>;
            validator(val: TdDateRangePickerProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdDateRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDateRangePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDateRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdDateRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdDateRangePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerProps["onPresetClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultTime"]>;
            default: () => TdDateRangePickerProps["defaultTime"];
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: import("vue").PropType<TdDateRangePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDateRangePickerProps["placeholder"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdDateRangePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<TdDateRangePickerProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<TdDateRangePickerProps["size"]>;
            default: TdDateRangePickerProps["size"];
            validator(val: TdDateRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDateRangePickerProps["status"]>;
            default: TdDateRangePickerProps["status"];
            validator(val: TdDateRangePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDateRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        valueType: {
            type: import("vue").PropType<TdDateRangePickerProps["valueType"]>;
            validator(val: TdDateRangePickerProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdDateRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDateRangePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDateRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdDateRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdDateRangePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerProps["onPresetClick"]>;
    }>>, {
        disabled: boolean;
        value: import("./type").DateRangeValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        cancelRangeSelectLimit: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").DateRangeValue;
        modelValue: import("./type").DateRangeValue;
        readonly: boolean;
        separator: string;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        needConfirm: boolean;
        defaultTime: string[];
        panelPreselection: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultTime"]>;
            default: () => TdDateRangePickerProps["defaultTime"];
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: import("vue").PropType<TdDateRangePickerProps["label"]>;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        needConfirm: {
            type: BooleanConstructor;
            default: boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<TdDateRangePickerProps["placeholder"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdDateRangePickerProps["popupProps"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["prefixIcon"]>;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<TdDateRangePickerProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<TdDateRangePickerProps["size"]>;
            default: TdDateRangePickerProps["size"];
            validator(val: TdDateRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdDateRangePickerProps["status"]>;
            default: TdDateRangePickerProps["status"];
            validator(val: TdDateRangePickerProps["status"]): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<TdDateRangePickerProps["suffixIcon"]>;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdDateRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        valueType: {
            type: import("vue").PropType<TdDateRangePickerProps["valueType"]>;
            validator(val: TdDateRangePickerProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdDateRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdDateRangePickerProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdDateRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdDateRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdDateRangePickerProps["onPick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerProps["onPresetClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").DateRangeValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        cancelRangeSelectLimit: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").DateRangeValue;
        modelValue: import("./type").DateRangeValue;
        readonly: boolean;
        separator: string;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        needConfirm: boolean;
        defaultTime: string[];
        panelPreselection: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<TdDateRangePickerProps["defaultTime"]>;
        default: () => TdDateRangePickerProps["defaultTime"];
    };
    disableDate: {
        type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<TdDateRangePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
        default: TdDateRangePickerProps["mode"];
        validator(val: TdDateRangePickerProps["mode"]): boolean;
    };
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<TdDateRangePickerProps["placeholder"]>;
    };
    popupProps: {
        type: import("vue").PropType<TdDateRangePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<TdDateRangePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
        default: TdDateRangePickerProps["presetsPlacement"];
        validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<TdDateRangePickerProps["rangeInputProps"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<TdDateRangePickerProps["size"]>;
        default: TdDateRangePickerProps["size"];
        validator(val: TdDateRangePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdDateRangePickerProps["status"]>;
        default: TdDateRangePickerProps["status"];
        validator(val: TdDateRangePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<TdDateRangePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdDateRangePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdDateRangePickerProps["value"]>;
        default: TdDateRangePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdDateRangePickerProps["value"]>;
        default: TdDateRangePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
        default: () => TdDateRangePickerProps["defaultValue"];
    };
    valueType: {
        type: import("vue").PropType<TdDateRangePickerProps["valueType"]>;
        validator(val: TdDateRangePickerProps["valueType"]): boolean;
    };
    onBlur: import("vue").PropType<TdDateRangePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdDateRangePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDateRangePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<TdDateRangePickerProps["onFocus"]>;
    onInput: import("vue").PropType<TdDateRangePickerProps["onInput"]>;
    onPick: import("vue").PropType<TdDateRangePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<TdDateRangePickerProps["onPresetClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").DateRangeValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    enableTimePicker: boolean;
    cancelRangeSelectLimit: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: import("./type").DateRangeValue;
    modelValue: import("./type").DateRangeValue;
    readonly: boolean;
    separator: string;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    needConfirm: boolean;
    defaultTime: string[];
    panelPreselection: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const DateRangePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerPanelProps["defaultTime"]>;
            default: () => TdDateRangePickerPanelProps["defaultTime"];
        };
        onCellClick: import("vue").PropType<TdDateRangePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDateRangePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDateRangePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDateRangePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDateRangePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDateRangePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerPanelProps["defaultTime"]>;
            default: () => TdDateRangePickerPanelProps["defaultTime"];
        };
        onCellClick: import("vue").PropType<TdDateRangePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDateRangePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDateRangePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDateRangePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDateRangePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDateRangePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        disabled: boolean;
        value: import("./type").DateRangeValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        defaultValue: import("./type").DateRangeValue;
        modelValue: import("./type").DateRangeValue;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        defaultTime: string[];
        panelPreselection: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<TdDateRangePickerPanelProps["defaultTime"]>;
            default: () => TdDateRangePickerPanelProps["defaultTime"];
        };
        onCellClick: import("vue").PropType<TdDateRangePickerPanelProps["onCellClick"]>;
        onChange: import("vue").PropType<TdDateRangePickerPanelProps["onChange"]>;
        onConfirm: import("vue").PropType<TdDateRangePickerPanelProps["onConfirm"]>;
        onMonthChange: import("vue").PropType<TdDateRangePickerPanelProps["onMonthChange"]>;
        onPanelClick: import("vue").PropType<TdDateRangePickerPanelProps["onPanelClick"]>;
        onPresetClick: import("vue").PropType<TdDateRangePickerPanelProps["onPresetClick"]>;
        onTimeChange: import("vue").PropType<TdDateRangePickerPanelProps["onTimeChange"]>;
        onYearChange: import("vue").PropType<TdDateRangePickerPanelProps["onYearChange"]>;
        value: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
            default: () => TdDateRangePickerProps["defaultValue"];
        };
        modelValue: {
            type: import("vue").PropType<TdDateRangePickerProps["value"]>;
            default: TdDateRangePickerProps["value"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        disableDate: {
            type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
            default: TdDateRangePickerProps["mode"];
            validator(val: TdDateRangePickerProps["mode"]): boolean;
        };
        presets: {
            type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
        };
        presetsPlacement: {
            type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
            default: TdDateRangePickerProps["presetsPlacement"];
            validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").DateRangeValue;
        format: string;
        mode: "date" | "month" | "year" | "quarter" | "week";
        enableTimePicker: boolean;
        defaultValue: import("./type").DateRangeValue;
        modelValue: import("./type").DateRangeValue;
        presetsPlacement: "left" | "right" | "top" | "bottom";
        defaultTime: string[];
        panelPreselection: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    defaultTime: {
        type: import("vue").PropType<TdDateRangePickerPanelProps["defaultTime"]>;
        default: () => TdDateRangePickerPanelProps["defaultTime"];
    };
    onCellClick: import("vue").PropType<TdDateRangePickerPanelProps["onCellClick"]>;
    onChange: import("vue").PropType<TdDateRangePickerPanelProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDateRangePickerPanelProps["onConfirm"]>;
    onMonthChange: import("vue").PropType<TdDateRangePickerPanelProps["onMonthChange"]>;
    onPanelClick: import("vue").PropType<TdDateRangePickerPanelProps["onPanelClick"]>;
    onPresetClick: import("vue").PropType<TdDateRangePickerPanelProps["onPresetClick"]>;
    onTimeChange: import("vue").PropType<TdDateRangePickerPanelProps["onTimeChange"]>;
    onYearChange: import("vue").PropType<TdDateRangePickerPanelProps["onYearChange"]>;
    value: {
        type: import("vue").PropType<TdDateRangePickerProps["value"]>;
        default: TdDateRangePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDateRangePickerProps["defaultValue"]>;
        default: () => TdDateRangePickerProps["defaultValue"];
    };
    modelValue: {
        type: import("vue").PropType<TdDateRangePickerProps["value"]>;
        default: TdDateRangePickerProps["value"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    disableDate: {
        type: import("vue").PropType<TdDateRangePickerProps["disableDate"]>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDateRangePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<TdDateRangePickerProps["mode"]>;
        default: TdDateRangePickerProps["mode"];
        validator(val: TdDateRangePickerProps["mode"]): boolean;
    };
    presets: {
        type: import("vue").PropType<TdDateRangePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDateRangePickerProps["presetsPlacement"]>;
        default: TdDateRangePickerProps["presetsPlacement"];
        validator(val: TdDateRangePickerProps["presetsPlacement"]): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDateRangePickerProps["timePickerProps"]>;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").DateRangeValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    enableTimePicker: boolean;
    defaultValue: import("./type").DateRangeValue;
    modelValue: import("./type").DateRangeValue;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    defaultTime: string[];
    panelPreselection: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default DatePicker;

import type { DateValue, TdDatePickerPanelProps } from './type';
declare const _default: import("vue").DefineComponent<{
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
    onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
    onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
    onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
    onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
    onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
    value: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["value"]>;
        default: import("./type").TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["defaultValue"]>;
        default: import("./type").TdDatePickerProps["defaultValue"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["value"]>;
        default: import("./type").TdDatePickerProps["value"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    disableDate: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["disableDate"]>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: import("./type").TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    mode: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["mode"]>;
        default: import("./type").TdDatePickerProps["mode"];
        validator(val: import("./type").TdDatePickerProps["mode"]): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["presetsPlacement"]>;
        default: import("./type").TdDatePickerProps["presetsPlacement"];
        validator(val: import("./type").TdDatePickerProps["presetsPlacement"]): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["timePickerProps"]>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    onCellClick: import("vue").PropType<TdDatePickerPanelProps["onCellClick"]>;
    onChange: import("vue").PropType<TdDatePickerPanelProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerPanelProps["onConfirm"]>;
    onMonthChange: import("vue").PropType<TdDatePickerPanelProps["onMonthChange"]>;
    onPanelClick: import("vue").PropType<TdDatePickerPanelProps["onPanelClick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerPanelProps["onPresetClick"]>;
    onTimeChange: import("vue").PropType<TdDatePickerPanelProps["onTimeChange"]>;
    onYearChange: import("vue").PropType<TdDatePickerPanelProps["onYearChange"]>;
    value: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["value"]>;
        default: import("./type").TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["defaultValue"]>;
        default: import("./type").TdDatePickerProps["defaultValue"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["value"]>;
        default: import("./type").TdDatePickerProps["value"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    disableDate: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["disableDate"]>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: import("./type").TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    mode: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["mode"]>;
        default: import("./type").TdDatePickerProps["mode"];
        validator(val: import("./type").TdDatePickerProps["mode"]): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["presetsPlacement"]>;
        default: import("./type").TdDatePickerProps["presetsPlacement"];
        validator(val: import("./type").TdDatePickerProps["presetsPlacement"]): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("./type").TdDatePickerProps["timePickerProps"]>;
    };
}>>, {
    disabled: boolean;
    value: DateValue | import("./type").DateMultipleValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    enableTimePicker: boolean;
    defaultValue: DateValue | import("./type").DateMultipleValue;
    modelValue: DateValue | import("./type").DateMultipleValue;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    defaultTime: string;
}, {}>;
export default _default;

import { PropType } from 'vue';
import { TdUploadProps, UploadFile } from '../type';
import { CommonDisplayFileProps } from '../types';
import { UploadDragEvents } from '../hooks/useDrag';
export interface DraggerProps extends CommonDisplayFileProps {
    trigger?: TdUploadProps['trigger'];
    triggerUpload?: (e: MouseEvent) => void;
    uploadFiles?: (toFiles?: UploadFile[]) => void;
    cancelUpload?: (context: {
        e: MouseEvent;
        file: UploadFile;
    }) => void;
    dragEvents: UploadDragEvents;
}
declare const _default: import("vue").DefineComponent<{
    trigger: PropType<DraggerProps["trigger"]>;
    triggerUpload: PropType<DraggerProps["triggerUpload"]>;
    uploadFiles: PropType<DraggerProps["uploadFiles"]>;
    cancelUpload: PropType<DraggerProps["cancelUpload"]>;
    dragEvents: PropType<DraggerProps["dragEvents"]>;
    accept: StringConstructor;
    files: PropType<CommonDisplayFileProps["files"]>;
    toUploadFiles: PropType<CommonDisplayFileProps["toUploadFiles"]>;
    displayFiles: PropType<CommonDisplayFileProps["displayFiles"]>;
    theme: PropType<CommonDisplayFileProps["theme"]>;
    abridgeName: PropType<CommonDisplayFileProps["abridgeName"]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<CommonDisplayFileProps["status"]>;
    locale: PropType<CommonDisplayFileProps["locale"]>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<CommonDisplayFileProps["onPasteFileChange"]>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<CommonDisplayFileProps["tipsClasses"]>;
    errorClasses: PropType<CommonDisplayFileProps["errorClasses"]>;
    placeholderClass: PropType<CommonDisplayFileProps["placeholderClass"]>;
    showUploadProgress: BooleanConstructor;
    default: PropType<CommonDisplayFileProps["default"]>;
    fileListDisplay: PropType<CommonDisplayFileProps["fileListDisplay"]>;
    onRemove: PropType<CommonDisplayFileProps["onRemove"]>;
    imageViewerProps: PropType<CommonDisplayFileProps["imageViewerProps"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    trigger: PropType<DraggerProps["trigger"]>;
    triggerUpload: PropType<DraggerProps["triggerUpload"]>;
    uploadFiles: PropType<DraggerProps["uploadFiles"]>;
    cancelUpload: PropType<DraggerProps["cancelUpload"]>;
    dragEvents: PropType<DraggerProps["dragEvents"]>;
    accept: StringConstructor;
    files: PropType<CommonDisplayFileProps["files"]>;
    toUploadFiles: PropType<CommonDisplayFileProps["toUploadFiles"]>;
    displayFiles: PropType<CommonDisplayFileProps["displayFiles"]>;
    theme: PropType<CommonDisplayFileProps["theme"]>;
    abridgeName: PropType<CommonDisplayFileProps["abridgeName"]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<CommonDisplayFileProps["status"]>;
    locale: PropType<CommonDisplayFileProps["locale"]>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<CommonDisplayFileProps["onPasteFileChange"]>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<CommonDisplayFileProps["tipsClasses"]>;
    errorClasses: PropType<CommonDisplayFileProps["errorClasses"]>;
    placeholderClass: PropType<CommonDisplayFileProps["placeholderClass"]>;
    showUploadProgress: BooleanConstructor;
    default: PropType<CommonDisplayFileProps["default"]>;
    fileListDisplay: PropType<CommonDisplayFileProps["fileListDisplay"]>;
    onRemove: PropType<CommonDisplayFileProps["onRemove"]>;
    imageViewerProps: PropType<CommonDisplayFileProps["imageViewerProps"]>;
}>>, {
    disabled: boolean;
    uploading: boolean;
    autoUpload: boolean;
    uploadPastedFiles: boolean;
    showUploadProgress: boolean;
}, {}>;
export default _default;

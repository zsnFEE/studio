import { TdAlertProps } from './type';
import './style';
export * from './type';
export type AlertProps = TdAlertProps;
export declare const Alert: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<TdAlertProps["close"]>;
            default: TdAlertProps["close"];
        };
        closeBtn: {
            type: import("vue").PropType<TdAlertProps["closeBtn"]>;
            default: TdAlertProps["closeBtn"];
        };
        default: {
            type: import("vue").PropType<TdAlertProps["default"]>;
        };
        icon: {
            type: import("vue").PropType<TdAlertProps["icon"]>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<TdAlertProps["message"]>;
        };
        operation: {
            type: import("vue").PropType<TdAlertProps["operation"]>;
        };
        theme: {
            type: import("vue").PropType<TdAlertProps["theme"]>;
            default: TdAlertProps["theme"];
            validator(val: TdAlertProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAlertProps["title"]>;
        };
        onClose: import("vue").PropType<TdAlertProps["onClose"]>;
        onClosed: import("vue").PropType<TdAlertProps["onClosed"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<TdAlertProps["close"]>;
            default: TdAlertProps["close"];
        };
        closeBtn: {
            type: import("vue").PropType<TdAlertProps["closeBtn"]>;
            default: TdAlertProps["closeBtn"];
        };
        default: {
            type: import("vue").PropType<TdAlertProps["default"]>;
        };
        icon: {
            type: import("vue").PropType<TdAlertProps["icon"]>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<TdAlertProps["message"]>;
        };
        operation: {
            type: import("vue").PropType<TdAlertProps["operation"]>;
        };
        theme: {
            type: import("vue").PropType<TdAlertProps["theme"]>;
            default: TdAlertProps["theme"];
            validator(val: TdAlertProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAlertProps["title"]>;
        };
        onClose: import("vue").PropType<TdAlertProps["onClose"]>;
        onClosed: import("vue").PropType<TdAlertProps["onClosed"]>;
    }>>, {
        close: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "error" | "success" | "warning" | "info";
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        maxLine: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<TdAlertProps["close"]>;
            default: TdAlertProps["close"];
        };
        closeBtn: {
            type: import("vue").PropType<TdAlertProps["closeBtn"]>;
            default: TdAlertProps["closeBtn"];
        };
        default: {
            type: import("vue").PropType<TdAlertProps["default"]>;
        };
        icon: {
            type: import("vue").PropType<TdAlertProps["icon"]>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<TdAlertProps["message"]>;
        };
        operation: {
            type: import("vue").PropType<TdAlertProps["operation"]>;
        };
        theme: {
            type: import("vue").PropType<TdAlertProps["theme"]>;
            default: TdAlertProps["theme"];
            validator(val: TdAlertProps["theme"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAlertProps["title"]>;
        };
        onClose: import("vue").PropType<TdAlertProps["onClose"]>;
        onClosed: import("vue").PropType<TdAlertProps["onClosed"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        close: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "error" | "success" | "warning" | "info";
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        maxLine: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    close: {
        type: import("vue").PropType<TdAlertProps["close"]>;
        default: TdAlertProps["close"];
    };
    closeBtn: {
        type: import("vue").PropType<TdAlertProps["closeBtn"]>;
        default: TdAlertProps["closeBtn"];
    };
    default: {
        type: import("vue").PropType<TdAlertProps["default"]>;
    };
    icon: {
        type: import("vue").PropType<TdAlertProps["icon"]>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<TdAlertProps["message"]>;
    };
    operation: {
        type: import("vue").PropType<TdAlertProps["operation"]>;
    };
    theme: {
        type: import("vue").PropType<TdAlertProps["theme"]>;
        default: TdAlertProps["theme"];
        validator(val: TdAlertProps["theme"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdAlertProps["title"]>;
    };
    onClose: import("vue").PropType<TdAlertProps["onClose"]>;
    onClosed: import("vue").PropType<TdAlertProps["onClosed"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    close: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: "error" | "success" | "warning" | "info";
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    maxLine: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Alert;

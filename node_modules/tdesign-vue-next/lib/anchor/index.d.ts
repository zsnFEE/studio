import { TdAnchorProps, TdAnchorTargetProps, TdAnchorItemProps } from './type';
import './style';
export * from './type';
export type AnchorProps = TdAnchorProps;
export type AnchorTargetProps = TdAnchorTargetProps;
export type AnchorItemProps = TdAnchorItemProps;
export declare const Anchor: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<TdAnchorProps["affixProps"]>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<TdAnchorProps["container"]>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<TdAnchorProps["cursor"]>;
        };
        size: {
            type: import("vue").PropType<TdAnchorProps["size"]>;
            default: TdAnchorProps["size"];
            validator(val: TdAnchorProps["size"]): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdAnchorProps["onChange"]>;
        onClick: import("vue").PropType<TdAnchorProps["onClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<TdAnchorProps["affixProps"]>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<TdAnchorProps["container"]>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<TdAnchorProps["cursor"]>;
        };
        size: {
            type: import("vue").PropType<TdAnchorProps["size"]>;
            default: TdAnchorProps["size"];
            validator(val: TdAnchorProps["size"]): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdAnchorProps["onChange"]>;
        onClick: import("vue").PropType<TdAnchorProps["onClick"]>;
    }>>, {
        size: "small" | "medium" | "large";
        container: import("..").ScrollContainer;
        bounds: number;
        targetOffset: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<TdAnchorProps["affixProps"]>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<TdAnchorProps["container"]>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<TdAnchorProps["cursor"]>;
        };
        size: {
            type: import("vue").PropType<TdAnchorProps["size"]>;
            default: TdAnchorProps["size"];
            validator(val: TdAnchorProps["size"]): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdAnchorProps["onChange"]>;
        onClick: import("vue").PropType<TdAnchorProps["onClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        size: "small" | "medium" | "large";
        container: import("..").ScrollContainer;
        bounds: number;
        targetOffset: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    affixProps: {
        type: import("vue").PropType<TdAnchorProps["affixProps"]>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<TdAnchorProps["container"]>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<TdAnchorProps["cursor"]>;
    };
    size: {
        type: import("vue").PropType<TdAnchorProps["size"]>;
        default: TdAnchorProps["size"];
        validator(val: TdAnchorProps["size"]): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<TdAnchorProps["onChange"]>;
    onClick: import("vue").PropType<TdAnchorProps["onClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: "small" | "medium" | "large";
    container: import("..").ScrollContainer;
    bounds: number;
    targetOffset: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const AnchorItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<TdAnchorItemProps["target"]>;
            default: TdAnchorItemProps["target"];
            validator(val: TdAnchorItemProps["target"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAnchorItemProps["title"]>;
            default: string;
        };
        customScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<TdAnchorItemProps["target"]>;
            default: TdAnchorItemProps["target"];
            validator(val: TdAnchorItemProps["target"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAnchorItemProps["title"]>;
            default: string;
        };
        customScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        target: "_self" | "_blank" | "_parent" | "_top";
        title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        customScroll: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<TdAnchorItemProps["target"]>;
            default: TdAnchorItemProps["target"];
            validator(val: TdAnchorItemProps["target"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdAnchorItemProps["title"]>;
            default: string;
        };
        customScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        target: "_self" | "_blank" | "_parent" | "_top";
        title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        customScroll: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    href: {
        type: StringConstructor;
        required: boolean;
        validator(v: string): boolean;
    };
    target: {
        type: import("vue").PropType<TdAnchorItemProps["target"]>;
        default: TdAnchorItemProps["target"];
        validator(val: TdAnchorItemProps["target"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdAnchorItemProps["title"]>;
        default: string;
    };
    customScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    target: "_self" | "_blank" | "_parent" | "_top";
    title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    customScroll: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const AnchorTarget: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        tag: string;
        id: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        tag: string;
        id: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    tag: string;
    id: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Anchor;

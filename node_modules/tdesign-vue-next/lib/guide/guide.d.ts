import { TdGuideProps } from './type';
declare const _default: import("vue").DefineComponent<{
    counter: {
        type: import("vue").PropType<TdGuideProps["counter"]>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<TdGuideProps["finishButtonProps"]>;
    };
    hideCounter: BooleanConstructor;
    hidePrev: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<TdGuideProps["mode"]>;
        default: TdGuideProps["mode"];
        validator(val: TdGuideProps["mode"]): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<TdGuideProps["nextButtonProps"]>;
    };
    prevButtonProps: {
        type: import("vue").PropType<TdGuideProps["prevButtonProps"]>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<TdGuideProps["skipButtonProps"]>;
    };
    steps: {
        type: import("vue").PropType<TdGuideProps["steps"]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<TdGuideProps["onChange"]>;
    onFinish: import("vue").PropType<TdGuideProps["onFinish"]>;
    onNextStepClick: import("vue").PropType<TdGuideProps["onNextStepClick"]>;
    onPrevStepClick: import("vue").PropType<TdGuideProps["onPrevStepClick"]>;
    onSkip: import("vue").PropType<TdGuideProps["onSkip"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    counter: {
        type: import("vue").PropType<TdGuideProps["counter"]>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<TdGuideProps["finishButtonProps"]>;
    };
    hideCounter: BooleanConstructor;
    hidePrev: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<TdGuideProps["mode"]>;
        default: TdGuideProps["mode"];
        validator(val: TdGuideProps["mode"]): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<TdGuideProps["nextButtonProps"]>;
    };
    prevButtonProps: {
        type: import("vue").PropType<TdGuideProps["prevButtonProps"]>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<TdGuideProps["skipButtonProps"]>;
    };
    steps: {
        type: import("vue").PropType<TdGuideProps["steps"]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<TdGuideProps["onChange"]>;
    onFinish: import("vue").PropType<TdGuideProps["onFinish"]>;
    onNextStepClick: import("vue").PropType<TdGuideProps["onNextStepClick"]>;
    onPrevStepClick: import("vue").PropType<TdGuideProps["onPrevStepClick"]>;
    onSkip: import("vue").PropType<TdGuideProps["onSkip"]>;
}>>, {
    mode: "dialog" | "popup";
    modelValue: number;
    current: number;
    zIndex: number;
    showOverlay: boolean;
    highlightPadding: number;
    hideCounter: boolean;
    hidePrev: boolean;
    hideSkip: boolean;
}, {}>;
export default _default;

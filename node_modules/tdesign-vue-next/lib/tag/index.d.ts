import { TdTagProps, TdCheckTagProps, TdCheckTagGroupProps } from './type';
import './style';
export * from './type';
export type TagProps = TdTagProps;
export type CheckTagProps = TdCheckTagProps;
export type CheckTagGroupProps = TdCheckTagGroupProps;
export declare const Tag: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdTagProps["icon"]>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<TdTagProps["maxWidth"]>;
        };
        shape: {
            type: import("vue").PropType<TdTagProps["shape"]>;
            default: TdTagProps["shape"];
            validator(val: TdTagProps["shape"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdTagProps["size"]>;
            default: TdTagProps["size"];
            validator(val: TdTagProps["size"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdTagProps["theme"]>;
            default: TdTagProps["theme"];
            validator(val: TdTagProps["theme"]): boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<TdTagProps["variant"]>;
            default: TdTagProps["variant"];
            validator(val: TdTagProps["variant"]): boolean;
        };
        onClick: import("vue").PropType<TdTagProps["onClick"]>;
        onClose: import("vue").PropType<TdTagProps["onClose"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdTagProps["icon"]>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<TdTagProps["maxWidth"]>;
        };
        shape: {
            type: import("vue").PropType<TdTagProps["shape"]>;
            default: TdTagProps["shape"];
            validator(val: TdTagProps["shape"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdTagProps["size"]>;
            default: TdTagProps["size"];
            validator(val: TdTagProps["size"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdTagProps["theme"]>;
            default: TdTagProps["theme"];
            validator(val: TdTagProps["theme"]): boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<TdTagProps["variant"]>;
            default: TdTagProps["variant"];
            validator(val: TdTagProps["variant"]): boolean;
        };
        onClick: import("vue").PropType<TdTagProps["onClick"]>;
        onClose: import("vue").PropType<TdTagProps["onClose"]>;
    }>>, {
        disabled: boolean;
        color: string;
        icon: (h: typeof import("vue").h) => import("..").TNodeReturnValue;
        size: import("..").SizeEnum;
        title: string;
        theme: "default" | "primary" | "success" | "warning" | "danger";
        variant: "outline" | "dark" | "light" | "light-outline";
        shape: "mark" | "round" | "square";
        closable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<TdTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<TdTagProps["icon"]>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<TdTagProps["maxWidth"]>;
        };
        shape: {
            type: import("vue").PropType<TdTagProps["shape"]>;
            default: TdTagProps["shape"];
            validator(val: TdTagProps["shape"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdTagProps["size"]>;
            default: TdTagProps["size"];
            validator(val: TdTagProps["size"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdTagProps["theme"]>;
            default: TdTagProps["theme"];
            validator(val: TdTagProps["theme"]): boolean;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<TdTagProps["variant"]>;
            default: TdTagProps["variant"];
            validator(val: TdTagProps["variant"]): boolean;
        };
        onClick: import("vue").PropType<TdTagProps["onClick"]>;
        onClose: import("vue").PropType<TdTagProps["onClose"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        color: string;
        icon: (h: typeof import("vue").h) => import("..").TNodeReturnValue;
        size: import("..").SizeEnum;
        title: string;
        theme: "default" | "primary" | "success" | "warning" | "danger";
        variant: "outline" | "dark" | "light" | "light-outline";
        shape: "mark" | "round" | "square";
        closable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closable: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<TdTagProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdTagProps["default"]>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<TdTagProps["icon"]>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<TdTagProps["maxWidth"]>;
    };
    shape: {
        type: import("vue").PropType<TdTagProps["shape"]>;
        default: TdTagProps["shape"];
        validator(val: TdTagProps["shape"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdTagProps["size"]>;
        default: TdTagProps["size"];
        validator(val: TdTagProps["size"]): boolean;
    };
    theme: {
        type: import("vue").PropType<TdTagProps["theme"]>;
        default: TdTagProps["theme"];
        validator(val: TdTagProps["theme"]): boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: import("vue").PropType<TdTagProps["variant"]>;
        default: TdTagProps["variant"];
        validator(val: TdTagProps["variant"]): boolean;
    };
    onClick: import("vue").PropType<TdTagProps["onClick"]>;
    onClose: import("vue").PropType<TdTagProps["onClose"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    color: string;
    icon: (h: typeof import("vue").h) => import("..").TNodeReturnValue;
    size: import("..").SizeEnum;
    title: string;
    theme: "default" | "primary" | "success" | "warning" | "danger";
    variant: "outline" | "dark" | "light" | "light-outline";
    shape: "mark" | "round" | "square";
    closable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const CheckTag: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdCheckTagProps["checkedProps"]>;
        };
        content: {
            type: import("vue").PropType<TdCheckTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCheckTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdCheckTagProps["size"]>;
            default: TdCheckTagProps["size"];
            validator(val: TdCheckTagProps["size"]): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagProps["value"]>;
        };
        onChange: import("vue").PropType<TdCheckTagProps["onChange"]>;
        onClick: import("vue").PropType<TdCheckTagProps["onClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdCheckTagProps["checkedProps"]>;
        };
        content: {
            type: import("vue").PropType<TdCheckTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCheckTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdCheckTagProps["size"]>;
            default: TdCheckTagProps["size"];
            validator(val: TdCheckTagProps["size"]): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagProps["value"]>;
        };
        onChange: import("vue").PropType<TdCheckTagProps["onChange"]>;
        onClick: import("vue").PropType<TdCheckTagProps["onClick"]>;
    }>>, {
        disabled: boolean;
        size: import("..").SizeEnum;
        checked: boolean;
        defaultChecked: boolean;
        modelValue: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdCheckTagProps["checkedProps"]>;
        };
        content: {
            type: import("vue").PropType<TdCheckTagProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCheckTagProps["default"]>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdCheckTagProps["size"]>;
            default: TdCheckTagProps["size"];
            validator(val: TdCheckTagProps["size"]): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagProps["value"]>;
        };
        onChange: import("vue").PropType<TdCheckTagProps["onChange"]>;
        onClick: import("vue").PropType<TdCheckTagProps["onClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        size: import("..").SizeEnum;
        checked: boolean;
        defaultChecked: boolean;
        modelValue: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    checkedProps: {
        type: import("vue").PropType<TdCheckTagProps["checkedProps"]>;
    };
    content: {
        type: import("vue").PropType<TdCheckTagProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdCheckTagProps["default"]>;
    };
    disabled: BooleanConstructor;
    size: {
        type: import("vue").PropType<TdCheckTagProps["size"]>;
        default: TdCheckTagProps["size"];
        validator(val: TdCheckTagProps["size"]): boolean;
    };
    uncheckedProps: {
        type: import("vue").PropType<TdCheckTagProps["uncheckedProps"]>;
    };
    value: {
        type: import("vue").PropType<TdCheckTagProps["value"]>;
    };
    onChange: import("vue").PropType<TdCheckTagProps["onChange"]>;
    onClick: import("vue").PropType<TdCheckTagProps["onClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    size: import("..").SizeEnum;
    checked: boolean;
    defaultChecked: boolean;
    modelValue: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const CheckTagGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["checkedProps"]>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdCheckTagGroupProps["options"]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["defaultValue"]>;
            default: () => TdCheckTagGroupProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdCheckTagGroupProps["onChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["checkedProps"]>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdCheckTagGroupProps["options"]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["defaultValue"]>;
            default: () => TdCheckTagGroupProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdCheckTagGroupProps["onChange"]>;
    }>>, {
        value: import("./type").CheckTagGroupValue;
        multiple: boolean;
        defaultValue: import("./type").CheckTagGroupValue;
        modelValue: import("./type").CheckTagGroupValue;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["checkedProps"]>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdCheckTagGroupProps["options"]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdCheckTagGroupProps["uncheckedProps"]>;
        };
        value: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
            default: TdCheckTagGroupProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCheckTagGroupProps["defaultValue"]>;
            default: () => TdCheckTagGroupProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdCheckTagGroupProps["onChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").CheckTagGroupValue;
        multiple: boolean;
        defaultValue: import("./type").CheckTagGroupValue;
        modelValue: import("./type").CheckTagGroupValue;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checkedProps: {
        type: import("vue").PropType<TdCheckTagGroupProps["checkedProps"]>;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<TdCheckTagGroupProps["options"]>;
    };
    uncheckedProps: {
        type: import("vue").PropType<TdCheckTagGroupProps["uncheckedProps"]>;
    };
    value: {
        type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
        default: TdCheckTagGroupProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdCheckTagGroupProps["value"]>;
        default: TdCheckTagGroupProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdCheckTagGroupProps["defaultValue"]>;
        default: () => TdCheckTagGroupProps["defaultValue"];
    };
    onChange: import("vue").PropType<TdCheckTagGroupProps["onChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").CheckTagGroupValue;
    multiple: boolean;
    defaultValue: import("./type").CheckTagGroupValue;
    modelValue: import("./type").CheckTagGroupValue;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Tag;

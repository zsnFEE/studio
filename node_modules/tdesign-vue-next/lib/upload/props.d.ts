import { TdUploadProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    abridgeName: {
        type: PropType<TdUploadProps["abridgeName"]>;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeAllFilesUpload: {
        type: PropType<TdUploadProps["beforeAllFilesUpload"]>;
    };
    beforeUpload: {
        type: PropType<TdUploadProps["beforeUpload"]>;
    };
    cancelUploadButton: {
        type: PropType<TdUploadProps["cancelUploadButton"]>;
    };
    data: {
        type: PropType<TdUploadProps["data"]>;
    };
    default: {
        type: PropType<TdUploadProps["default"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    dragContent: {
        type: PropType<TdUploadProps["dragContent"]>;
    };
    draggable: {
        type: BooleanConstructor;
        default: any;
    };
    fileListDisplay: {
        type: PropType<TdUploadProps["fileListDisplay"]>;
    };
    files: {
        type: PropType<TdUploadProps["files"]>;
        default: TdUploadProps["files"];
    };
    defaultFiles: {
        type: PropType<TdUploadProps["defaultFiles"]>;
        default: () => TdUploadProps["defaultFiles"];
    };
    format: {
        type: PropType<TdUploadProps["format"]>;
    };
    formatRequest: {
        type: PropType<TdUploadProps["formatRequest"]>;
    };
    formatResponse: {
        type: PropType<TdUploadProps["formatResponse"]>;
    };
    headers: {
        type: PropType<TdUploadProps["headers"]>;
    };
    imageViewerProps: {
        type: PropType<TdUploadProps["imageViewerProps"]>;
    };
    inputAttributes: {
        type: PropType<TdUploadProps["inputAttributes"]>;
    };
    isBatchUpload: BooleanConstructor;
    locale: {
        type: PropType<TdUploadProps["locale"]>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: PropType<TdUploadProps["method"]>;
        default: TdUploadProps["method"];
        validator(val: TdUploadProps["method"]): boolean;
    };
    mockProgressDuration: {
        type: NumberConstructor;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: PropType<TdUploadProps["requestMethod"]>;
    };
    showImageFileName: {
        type: BooleanConstructor;
        default: boolean;
    };
    showThumbnail: BooleanConstructor;
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: PropType<TdUploadProps["sizeLimit"]>;
    };
    status: {
        type: PropType<TdUploadProps["status"]>;
        validator(val: TdUploadProps["status"]): boolean;
    };
    theme: {
        type: PropType<TdUploadProps["theme"]>;
        default: TdUploadProps["theme"];
        validator(val: TdUploadProps["theme"]): boolean;
    };
    tips: {
        type: PropType<TdUploadProps["tips"]>;
    };
    trigger: {
        type: PropType<TdUploadProps["trigger"]>;
    };
    triggerButtonProps: {
        type: PropType<TdUploadProps["triggerButtonProps"]>;
    };
    uploadAllFilesInOneRequest: BooleanConstructor;
    uploadButton: {
        type: PropType<TdUploadProps["uploadButton"]>;
    };
    uploadPastedFiles: {
        type: BooleanConstructor;
        default: boolean;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: PropType<TdUploadProps["value"]>;
        default: TdUploadProps["value"];
    };
    modelValue: {
        type: PropType<TdUploadProps["value"]>;
        default: TdUploadProps["value"];
    };
    defaultValue: {
        type: PropType<TdUploadProps["defaultValue"]>;
        default: () => TdUploadProps["defaultValue"];
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: PropType<TdUploadProps["onCancelUpload"]>;
    onChange: PropType<TdUploadProps["onChange"]>;
    onDragenter: PropType<TdUploadProps["onDragenter"]>;
    onDragleave: PropType<TdUploadProps["onDragleave"]>;
    onDrop: PropType<TdUploadProps["onDrop"]>;
    onFail: PropType<TdUploadProps["onFail"]>;
    onOneFileFail: PropType<TdUploadProps["onOneFileFail"]>;
    onOneFileSuccess: PropType<TdUploadProps["onOneFileSuccess"]>;
    onPreview: PropType<TdUploadProps["onPreview"]>;
    onProgress: PropType<TdUploadProps["onProgress"]>;
    onRemove: PropType<TdUploadProps["onRemove"]>;
    onSelectChange: PropType<TdUploadProps["onSelectChange"]>;
    onSuccess: PropType<TdUploadProps["onSuccess"]>;
    onValidate: PropType<TdUploadProps["onValidate"]>;
    onWaitingUploadFilesChange: PropType<TdUploadProps["onWaitingUploadFilesChange"]>;
};
export default _default;

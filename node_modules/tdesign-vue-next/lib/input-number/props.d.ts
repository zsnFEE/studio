import { TdInputNumberProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    align: {
        type: PropType<TdInputNumberProps["align"]>;
        validator(val: TdInputNumberProps["align"]): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: PropType<TdInputNumberProps["decimalPlaces"]>;
        default: TdInputNumberProps["decimalPlaces"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: PropType<TdInputNumberProps["format"]>;
    };
    inputProps: {
        type: PropType<TdInputNumberProps["inputProps"]>;
    };
    label: {
        type: PropType<TdInputNumberProps["label"]>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: PropType<TdInputNumberProps["max"]>;
        default: TdInputNumberProps["max"];
    };
    min: {
        type: PropType<TdInputNumberProps["min"]>;
        default: TdInputNumberProps["min"];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    size: {
        type: PropType<TdInputNumberProps["size"]>;
        default: TdInputNumberProps["size"];
        validator(val: TdInputNumberProps["size"]): boolean;
    };
    status: {
        type: PropType<TdInputNumberProps["status"]>;
        default: TdInputNumberProps["status"];
        validator(val: TdInputNumberProps["status"]): boolean;
    };
    step: {
        type: PropType<TdInputNumberProps["step"]>;
        default: TdInputNumberProps["step"];
    };
    suffix: {
        type: PropType<TdInputNumberProps["suffix"]>;
    };
    theme: {
        type: PropType<TdInputNumberProps["theme"]>;
        default: TdInputNumberProps["theme"];
        validator(val: TdInputNumberProps["theme"]): boolean;
    };
    tips: {
        type: PropType<TdInputNumberProps["tips"]>;
    };
    value: {
        type: PropType<TdInputNumberProps["value"]>;
        default: TdInputNumberProps["value"];
    };
    modelValue: {
        type: PropType<TdInputNumberProps["value"]>;
        default: TdInputNumberProps["value"];
    };
    defaultValue: {
        type: PropType<TdInputNumberProps["defaultValue"]>;
    };
    onBlur: PropType<TdInputNumberProps["onBlur"]>;
    onChange: PropType<TdInputNumberProps["onChange"]>;
    onEnter: PropType<TdInputNumberProps["onEnter"]>;
    onFocus: PropType<TdInputNumberProps["onFocus"]>;
    onKeydown: PropType<TdInputNumberProps["onKeydown"]>;
    onKeypress: PropType<TdInputNumberProps["onKeypress"]>;
    onKeyup: PropType<TdInputNumberProps["onKeyup"]>;
    onValidate: PropType<TdInputNumberProps["onValidate"]>;
};
export default _default;

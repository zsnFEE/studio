import type { TdBreadcrumbProps } from './type';
declare const _default: import("vue").DefineComponent<{
    ellipsis: {
        type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
    };
    itemsAfterCollapse: {
        type: NumberConstructor;
        default: any;
    };
    itemsBeforeCollapse: {
        type: NumberConstructor;
        default: any;
    };
    maxItemWidth: {
        type: StringConstructor;
        default: any;
    };
    maxItems: {
        type: NumberConstructor;
        default: any;
    };
    options: {
        type: import("vue").PropType<TdBreadcrumbProps["options"]>;
    };
    separator: {
        type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
    };
    theme: {
        type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
        default: TdBreadcrumbProps["theme"];
        validator(val: TdBreadcrumbProps["theme"]): boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ellipsis: {
        type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
    };
    itemsAfterCollapse: {
        type: NumberConstructor;
        default: any;
    };
    itemsBeforeCollapse: {
        type: NumberConstructor;
        default: any;
    };
    maxItemWidth: {
        type: StringConstructor;
        default: any;
    };
    maxItems: {
        type: NumberConstructor;
        default: any;
    };
    options: {
        type: import("vue").PropType<TdBreadcrumbProps["options"]>;
    };
    separator: {
        type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
    };
    theme: {
        type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
        default: TdBreadcrumbProps["theme"];
        validator(val: TdBreadcrumbProps["theme"]): boolean;
    };
}>>, {
    theme: "light";
    maxItems: number;
    itemsBeforeCollapse: number;
    itemsAfterCollapse: number;
    maxItemWidth: string;
}, {}>;
export default _default;

import { TdQRCodeProps } from './type';
import './style';
export type QRCodeProps = TdQRCodeProps;
export * from './type';
export declare const QRCode: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        bgColor: {
            type: StringConstructor;
            default: string;
        };
        borderless: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconSize: {
            type: import("vue").PropType<TdQRCodeProps["iconSize"]>;
            default: TdQRCodeProps["iconSize"];
        };
        level: {
            type: import("vue").PropType<TdQRCodeProps["level"]>;
            default: TdQRCodeProps["level"];
            validator(val: TdQRCodeProps["level"]): boolean;
        };
        size: {
            type: NumberConstructor;
            default: number;
        };
        status: {
            type: import("vue").PropType<TdQRCodeProps["status"]>;
            default: TdQRCodeProps["status"];
            validator(val: TdQRCodeProps["status"]): boolean;
        };
        statusRender: {
            type: import("vue").PropType<TdQRCodeProps["statusRender"]>;
        };
        type: {
            type: import("vue").PropType<TdQRCodeProps["type"]>;
            default: TdQRCodeProps["type"];
            validator(val: TdQRCodeProps["type"]): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        onRefresh: import("vue").PropType<TdQRCodeProps["onRefresh"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        bgColor: {
            type: StringConstructor;
            default: string;
        };
        borderless: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconSize: {
            type: import("vue").PropType<TdQRCodeProps["iconSize"]>;
            default: TdQRCodeProps["iconSize"];
        };
        level: {
            type: import("vue").PropType<TdQRCodeProps["level"]>;
            default: TdQRCodeProps["level"];
            validator(val: TdQRCodeProps["level"]): boolean;
        };
        size: {
            type: NumberConstructor;
            default: number;
        };
        status: {
            type: import("vue").PropType<TdQRCodeProps["status"]>;
            default: TdQRCodeProps["status"];
            validator(val: TdQRCodeProps["status"]): boolean;
        };
        statusRender: {
            type: import("vue").PropType<TdQRCodeProps["statusRender"]>;
        };
        type: {
            type: import("vue").PropType<TdQRCodeProps["type"]>;
            default: TdQRCodeProps["type"];
            validator(val: TdQRCodeProps["type"]): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        onRefresh: import("vue").PropType<TdQRCodeProps["onRefresh"]>;
    }>>, {
        value: string;
        color: string;
        type: "canvas" | "svg";
        icon: string;
        size: number;
        status: import("./type").QRStatus;
        level: "M" | "Q" | "L" | "H";
        borderless: boolean;
        iconSize: number | {
            width: number;
            height: number;
        };
        bgColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        bgColor: {
            type: StringConstructor;
            default: string;
        };
        borderless: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconSize: {
            type: import("vue").PropType<TdQRCodeProps["iconSize"]>;
            default: TdQRCodeProps["iconSize"];
        };
        level: {
            type: import("vue").PropType<TdQRCodeProps["level"]>;
            default: TdQRCodeProps["level"];
            validator(val: TdQRCodeProps["level"]): boolean;
        };
        size: {
            type: NumberConstructor;
            default: number;
        };
        status: {
            type: import("vue").PropType<TdQRCodeProps["status"]>;
            default: TdQRCodeProps["status"];
            validator(val: TdQRCodeProps["status"]): boolean;
        };
        statusRender: {
            type: import("vue").PropType<TdQRCodeProps["statusRender"]>;
        };
        type: {
            type: import("vue").PropType<TdQRCodeProps["type"]>;
            default: TdQRCodeProps["type"];
            validator(val: TdQRCodeProps["type"]): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        onRefresh: import("vue").PropType<TdQRCodeProps["onRefresh"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: string;
        color: string;
        type: "canvas" | "svg";
        icon: string;
        size: number;
        status: import("./type").QRStatus;
        level: "M" | "Q" | "L" | "H";
        borderless: boolean;
        iconSize: number | {
            width: number;
            height: number;
        };
        bgColor: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    bgColor: {
        type: StringConstructor;
        default: string;
    };
    borderless: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    iconSize: {
        type: import("vue").PropType<TdQRCodeProps["iconSize"]>;
        default: TdQRCodeProps["iconSize"];
    };
    level: {
        type: import("vue").PropType<TdQRCodeProps["level"]>;
        default: TdQRCodeProps["level"];
        validator(val: TdQRCodeProps["level"]): boolean;
    };
    size: {
        type: NumberConstructor;
        default: number;
    };
    status: {
        type: import("vue").PropType<TdQRCodeProps["status"]>;
        default: TdQRCodeProps["status"];
        validator(val: TdQRCodeProps["status"]): boolean;
    };
    statusRender: {
        type: import("vue").PropType<TdQRCodeProps["statusRender"]>;
    };
    type: {
        type: import("vue").PropType<TdQRCodeProps["type"]>;
        default: TdQRCodeProps["type"];
        validator(val: TdQRCodeProps["type"]): boolean;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    onRefresh: import("vue").PropType<TdQRCodeProps["onRefresh"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    color: string;
    type: "canvas" | "svg";
    icon: string;
    size: number;
    status: import("./type").QRStatus;
    level: "M" | "Q" | "L" | "H";
    borderless: boolean;
    iconSize: number | {
        width: number;
        height: number;
    };
    bgColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default QRCode;

import { TdDescriptionsProps } from './type';
declare const _default: import("vue").DefineComponent<{
    bordered: BooleanConstructor;
    colon: BooleanConstructor;
    column: {
        type: NumberConstructor;
        default: number;
    };
    contentStyle: {
        type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
    };
    itemLayout: {
        type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
        default: TdDescriptionsProps["itemLayout"];
        validator(val: TdDescriptionsProps["itemLayout"]): boolean;
    };
    items: {
        type: import("vue").PropType<TdDescriptionsProps["items"]>;
    };
    labelStyle: {
        type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
    };
    layout: {
        type: import("vue").PropType<TdDescriptionsProps["layout"]>;
        default: TdDescriptionsProps["layout"];
        validator(val: TdDescriptionsProps["layout"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdDescriptionsProps["size"]>;
        default: TdDescriptionsProps["size"];
        validator(val: TdDescriptionsProps["size"]): boolean;
    };
    tableLayout: {
        type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
        default: TdDescriptionsProps["tableLayout"];
        validator(val: TdDescriptionsProps["tableLayout"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdDescriptionsProps["title"]>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bordered: BooleanConstructor;
    colon: BooleanConstructor;
    column: {
        type: NumberConstructor;
        default: number;
    };
    contentStyle: {
        type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
    };
    itemLayout: {
        type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
        default: TdDescriptionsProps["itemLayout"];
        validator(val: TdDescriptionsProps["itemLayout"]): boolean;
    };
    items: {
        type: import("vue").PropType<TdDescriptionsProps["items"]>;
    };
    labelStyle: {
        type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
    };
    layout: {
        type: import("vue").PropType<TdDescriptionsProps["layout"]>;
        default: TdDescriptionsProps["layout"];
        validator(val: TdDescriptionsProps["layout"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdDescriptionsProps["size"]>;
        default: TdDescriptionsProps["size"];
        validator(val: TdDescriptionsProps["size"]): boolean;
    };
    tableLayout: {
        type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
        default: TdDescriptionsProps["tableLayout"];
        validator(val: TdDescriptionsProps["tableLayout"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdDescriptionsProps["title"]>;
    };
}>>, {
    layout: "vertical" | "horizontal";
    size: import("..").SizeEnum;
    tableLayout: "fixed" | "auto";
    column: number;
    colon: boolean;
    itemLayout: "vertical" | "horizontal";
    bordered: boolean;
}, {}>;
export default _default;

import { PropType } from 'vue';
import type { AttachNode, TNode } from '../../common';
import { TooltipProps } from '../../tooltip';
export interface EllipsisProps {
    content: string | TNode;
    default: string | TNode;
    tooltipContent: string | number | TNode;
    placement: TooltipProps['placement'];
    attach?: AttachNode;
    tooltipProps: TooltipProps;
    zIndex: number;
}
declare const _default: import("vue").DefineComponent<{
    content: {
        type: PropType<EllipsisProps["content"]>;
    };
    default: {
        type: PropType<EllipsisProps["default"]>;
    };
    tooltipContent: {
        type: PropType<EllipsisProps["tooltipContent"]>;
    };
    placement: PropType<EllipsisProps["placement"]>;
    attach: PropType<EllipsisProps["attach"]>;
    tooltipProps: PropType<EllipsisProps["tooltipProps"]>;
    zIndex: NumberConstructor;
    overlayClassName: StringConstructor;
    classPrefix: {
        type: StringConstructor;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: PropType<EllipsisProps["content"]>;
    };
    default: {
        type: PropType<EllipsisProps["default"]>;
    };
    tooltipContent: {
        type: PropType<EllipsisProps["tooltipContent"]>;
    };
    placement: PropType<EllipsisProps["placement"]>;
    attach: PropType<EllipsisProps["attach"]>;
    tooltipProps: PropType<EllipsisProps["tooltipProps"]>;
    zIndex: NumberConstructor;
    overlayClassName: StringConstructor;
    classPrefix: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    classPrefix: string;
}, {}>;
export default _default;

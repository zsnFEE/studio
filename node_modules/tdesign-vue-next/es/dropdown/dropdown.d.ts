import { DropdownOption, TdDropdownProps } from './type';
declare const _default: import("vue").DefineComponent<{
    direction: {
        type: import("vue").PropType<TdDropdownProps["direction"]>;
        default: TdDropdownProps["direction"];
        validator(val: TdDropdownProps["direction"]): boolean;
    };
    disabled: BooleanConstructor;
    hideAfterItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxColumnWidth: {
        type: import("vue").PropType<TdDropdownProps["maxColumnWidth"]>;
        default: TdDropdownProps["maxColumnWidth"];
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minColumnWidth: {
        type: import("vue").PropType<TdDropdownProps["minColumnWidth"]>;
        default: TdDropdownProps["minColumnWidth"];
    };
    options: {
        type: import("vue").PropType<TdDropdownProps["options"]>;
        default: () => TdDropdownProps["options"];
    };
    panelBottomContent: {
        type: import("vue").PropType<TdDropdownProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: import("vue").PropType<TdDropdownProps["panelTopContent"]>;
    };
    placement: {
        type: import("vue").PropType<TdDropdownProps["placement"]>;
        default: TdDropdownProps["placement"];
        validator(val: TdDropdownProps["placement"]): boolean;
    };
    popupProps: {
        type: import("vue").PropType<TdDropdownProps["popupProps"]>;
    };
    trigger: {
        type: import("vue").PropType<TdDropdownProps["trigger"]>;
        default: TdDropdownProps["trigger"];
        validator(val: TdDropdownProps["trigger"]): boolean;
    };
    onClick: import("vue").PropType<TdDropdownProps["onClick"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    direction: {
        type: import("vue").PropType<TdDropdownProps["direction"]>;
        default: TdDropdownProps["direction"];
        validator(val: TdDropdownProps["direction"]): boolean;
    };
    disabled: BooleanConstructor;
    hideAfterItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxColumnWidth: {
        type: import("vue").PropType<TdDropdownProps["maxColumnWidth"]>;
        default: TdDropdownProps["maxColumnWidth"];
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minColumnWidth: {
        type: import("vue").PropType<TdDropdownProps["minColumnWidth"]>;
        default: TdDropdownProps["minColumnWidth"];
    };
    options: {
        type: import("vue").PropType<TdDropdownProps["options"]>;
        default: () => TdDropdownProps["options"];
    };
    panelBottomContent: {
        type: import("vue").PropType<TdDropdownProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: import("vue").PropType<TdDropdownProps["panelTopContent"]>;
    };
    placement: {
        type: import("vue").PropType<TdDropdownProps["placement"]>;
        default: TdDropdownProps["placement"];
        validator(val: TdDropdownProps["placement"]): boolean;
    };
    popupProps: {
        type: import("vue").PropType<TdDropdownProps["popupProps"]>;
    };
    trigger: {
        type: import("vue").PropType<TdDropdownProps["trigger"]>;
        default: TdDropdownProps["trigger"];
        validator(val: TdDropdownProps["trigger"]): boolean;
    };
    onClick: import("vue").PropType<TdDropdownProps["onClick"]>;
}>>, {
    disabled: boolean;
    options: DropdownOption[];
    maxHeight: number;
    direction: "left" | "right";
    placement: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    trigger: "focus" | "click" | "hover" | "context-menu";
    maxColumnWidth: string | number;
    minColumnWidth: string | number;
    hideAfterItemClick: boolean;
}, {}>;
export default _default;

import { TdRangeInputProps, TdRangeInputPopupProps } from './type';
import './style';
export * from './type';
export type RangeInputProps = TdRangeInputProps;
export type RangeInputPopupProps = TdRangeInputPopupProps;
export declare const RangeInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdRangeInputProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdRangeInputProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdRangeInputProps["placeholder"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdRangeInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdRangeInputProps["separator"]>;
            default: TdRangeInputProps["separator"];
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdRangeInputProps["size"]>;
            default: TdRangeInputProps["size"];
            validator(val: TdRangeInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdRangeInputProps["status"]>;
            default: TdRangeInputProps["status"];
            validator(val: TdRangeInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdRangeInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdRangeInputProps["suffixIcon"]>;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdRangeInputProps["defaultValue"]>;
            default: () => TdRangeInputProps["defaultValue"];
        };
        onBlur: import("vue").PropType<TdRangeInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdRangeInputProps["onChange"]>;
        onClear: import("vue").PropType<TdRangeInputProps["onClear"]>;
        onClick: import("vue").PropType<TdRangeInputProps["onClick"]>;
        onEnter: import("vue").PropType<TdRangeInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdRangeInputProps["onFocus"]>;
        onMouseenter: import("vue").PropType<TdRangeInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdRangeInputProps["onMouseleave"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdRangeInputProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdRangeInputProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdRangeInputProps["placeholder"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdRangeInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdRangeInputProps["separator"]>;
            default: TdRangeInputProps["separator"];
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdRangeInputProps["size"]>;
            default: TdRangeInputProps["size"];
            validator(val: TdRangeInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdRangeInputProps["status"]>;
            default: TdRangeInputProps["status"];
            validator(val: TdRangeInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdRangeInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdRangeInputProps["suffixIcon"]>;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdRangeInputProps["defaultValue"]>;
            default: () => TdRangeInputProps["defaultValue"];
        };
        onBlur: import("vue").PropType<TdRangeInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdRangeInputProps["onChange"]>;
        onClear: import("vue").PropType<TdRangeInputProps["onClear"]>;
        onClick: import("vue").PropType<TdRangeInputProps["onClick"]>;
        onEnter: import("vue").PropType<TdRangeInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdRangeInputProps["onFocus"]>;
        onMouseenter: import("vue").PropType<TdRangeInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdRangeInputProps["onMouseleave"]>;
    }>>, {
        disabled: boolean;
        value: import("./type").RangeInputValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").RangeInputValue;
        modelValue: import("./type").RangeInputValue;
        readonly: boolean;
        separator: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        borderless: boolean;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: import("vue").PropType<TdRangeInputProps["format"]>;
        };
        inputProps: {
            type: import("vue").PropType<TdRangeInputProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdRangeInputProps["placeholder"]>;
        };
        prefixIcon: {
            type: import("vue").PropType<TdRangeInputProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdRangeInputProps["separator"]>;
            default: TdRangeInputProps["separator"];
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<TdRangeInputProps["size"]>;
            default: TdRangeInputProps["size"];
            validator(val: TdRangeInputProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdRangeInputProps["status"]>;
            default: TdRangeInputProps["status"];
            validator(val: TdRangeInputProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdRangeInputProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdRangeInputProps["suffixIcon"]>;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdRangeInputProps["value"]>;
            default: TdRangeInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdRangeInputProps["defaultValue"]>;
            default: () => TdRangeInputProps["defaultValue"];
        };
        onBlur: import("vue").PropType<TdRangeInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdRangeInputProps["onChange"]>;
        onClear: import("vue").PropType<TdRangeInputProps["onClear"]>;
        onClick: import("vue").PropType<TdRangeInputProps["onClick"]>;
        onEnter: import("vue").PropType<TdRangeInputProps["onEnter"]>;
        onFocus: import("vue").PropType<TdRangeInputProps["onFocus"]>;
        onMouseenter: import("vue").PropType<TdRangeInputProps["onMouseenter"]>;
        onMouseleave: import("vue").PropType<TdRangeInputProps["onMouseleave"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").RangeInputValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        defaultValue: import("./type").RangeInputValue;
        modelValue: import("./type").RangeInputValue;
        readonly: boolean;
        separator: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        borderless: boolean;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activeIndex: {
        type: NumberConstructor;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: import("vue").PropType<TdRangeInputProps["format"]>;
    };
    inputProps: {
        type: import("vue").PropType<TdRangeInputProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdRangeInputProps["label"]>;
    };
    placeholder: {
        type: import("vue").PropType<TdRangeInputProps["placeholder"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<TdRangeInputProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    separator: {
        type: import("vue").PropType<TdRangeInputProps["separator"]>;
        default: TdRangeInputProps["separator"];
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: import("vue").PropType<TdRangeInputProps["size"]>;
        default: TdRangeInputProps["size"];
        validator(val: TdRangeInputProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdRangeInputProps["status"]>;
        default: TdRangeInputProps["status"];
        validator(val: TdRangeInputProps["status"]): boolean;
    };
    suffix: {
        type: import("vue").PropType<TdRangeInputProps["suffix"]>;
    };
    suffixIcon: {
        type: import("vue").PropType<TdRangeInputProps["suffixIcon"]>;
    };
    tips: {
        type: import("vue").PropType<TdRangeInputProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdRangeInputProps["value"]>;
        default: TdRangeInputProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdRangeInputProps["value"]>;
        default: TdRangeInputProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdRangeInputProps["defaultValue"]>;
        default: () => TdRangeInputProps["defaultValue"];
    };
    onBlur: import("vue").PropType<TdRangeInputProps["onBlur"]>;
    onChange: import("vue").PropType<TdRangeInputProps["onChange"]>;
    onClear: import("vue").PropType<TdRangeInputProps["onClear"]>;
    onClick: import("vue").PropType<TdRangeInputProps["onClick"]>;
    onEnter: import("vue").PropType<TdRangeInputProps["onEnter"]>;
    onFocus: import("vue").PropType<TdRangeInputProps["onFocus"]>;
    onMouseenter: import("vue").PropType<TdRangeInputProps["onMouseenter"]>;
    onMouseleave: import("vue").PropType<TdRangeInputProps["onMouseleave"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").RangeInputValue;
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    defaultValue: import("./type").RangeInputValue;
    modelValue: import("./type").RangeInputValue;
    readonly: boolean;
    separator: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    borderless: boolean;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const RangeInputPopup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["inputValue"]>;
            default: TdRangeInputPopupProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["defaultInputValue"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputPopupProps["label"]>;
        };
        panel: {
            type: import("vue").PropType<TdRangeInputPopupProps["panel"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["popupProps"]>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<TdRangeInputPopupProps["status"]>;
            default: TdRangeInputPopupProps["status"];
            validator(val: TdRangeInputPopupProps["status"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputPopupProps["tips"]>;
        };
        onInputChange: import("vue").PropType<TdRangeInputPopupProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdRangeInputPopupProps["onPopupVisibleChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["inputValue"]>;
            default: TdRangeInputPopupProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["defaultInputValue"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputPopupProps["label"]>;
        };
        panel: {
            type: import("vue").PropType<TdRangeInputPopupProps["panel"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["popupProps"]>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<TdRangeInputPopupProps["status"]>;
            default: TdRangeInputPopupProps["status"];
            validator(val: TdRangeInputPopupProps["status"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputPopupProps["tips"]>;
        };
        onInputChange: import("vue").PropType<TdRangeInputPopupProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdRangeInputPopupProps["onPopupVisibleChange"]>;
    }>>, {
        disabled: boolean;
        status: "error" | "default" | "success" | "warning";
        readonly: boolean;
        autoWidth: boolean;
        inputValue: import("./type").RangeInputValue;
        popupVisible: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["inputValue"]>;
            default: TdRangeInputPopupProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdRangeInputPopupProps["defaultInputValue"]>;
        };
        label: {
            type: import("vue").PropType<TdRangeInputPopupProps["label"]>;
        };
        panel: {
            type: import("vue").PropType<TdRangeInputPopupProps["panel"]>;
        };
        popupProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["popupProps"]>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputPopupProps["rangeInputProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<TdRangeInputPopupProps["status"]>;
            default: TdRangeInputPopupProps["status"];
            validator(val: TdRangeInputPopupProps["status"]): boolean;
        };
        tips: {
            type: import("vue").PropType<TdRangeInputPopupProps["tips"]>;
        };
        onInputChange: import("vue").PropType<TdRangeInputPopupProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdRangeInputPopupProps["onPopupVisibleChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        status: "error" | "default" | "success" | "warning";
        readonly: boolean;
        autoWidth: boolean;
        inputValue: import("./type").RangeInputValue;
        popupVisible: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    disabled: BooleanConstructor;
    inputValue: {
        type: import("vue").PropType<TdRangeInputPopupProps["inputValue"]>;
        default: TdRangeInputPopupProps["inputValue"];
    };
    defaultInputValue: {
        type: import("vue").PropType<TdRangeInputPopupProps["defaultInputValue"]>;
    };
    label: {
        type: import("vue").PropType<TdRangeInputPopupProps["label"]>;
    };
    panel: {
        type: import("vue").PropType<TdRangeInputPopupProps["panel"]>;
    };
    popupProps: {
        type: import("vue").PropType<TdRangeInputPopupProps["popupProps"]>;
    };
    popupVisible: BooleanConstructor;
    rangeInputProps: {
        type: import("vue").PropType<TdRangeInputPopupProps["rangeInputProps"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<TdRangeInputPopupProps["status"]>;
        default: TdRangeInputPopupProps["status"];
        validator(val: TdRangeInputPopupProps["status"]): boolean;
    };
    tips: {
        type: import("vue").PropType<TdRangeInputPopupProps["tips"]>;
    };
    onInputChange: import("vue").PropType<TdRangeInputPopupProps["onInputChange"]>;
    onPopupVisibleChange: import("vue").PropType<TdRangeInputPopupProps["onPopupVisibleChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    status: "error" | "default" | "success" | "warning";
    readonly: boolean;
    autoWidth: boolean;
    inputValue: import("./type").RangeInputValue;
    popupVisible: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default RangeInput;

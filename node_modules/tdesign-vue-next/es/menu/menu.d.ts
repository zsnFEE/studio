import { MenuValue } from './type';
declare const _default: import("vue").DefineComponent<{
    onCollapsed: FunctionConstructor;
    collapsed: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TdMenuProps["expanded"]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TdMenuProps["defaultExpanded"]>;
        default: any[];
    };
    expandMutex: BooleanConstructor;
    expandType: {
        type: import("vue").PropType<import("./type").TdMenuProps["expandType"]>;
        default: import("./type").TdMenuProps["expandType"];
        validator(val: import("./type").TdMenuProps["expandType"]): boolean;
    };
    logo: {
        type: import("vue").PropType<import("./type").TdMenuProps["logo"]>;
    };
    operations: {
        type: import("vue").PropType<import("./type").TdMenuProps["operations"]>;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdMenuProps["theme"]>;
        default: import("./type").TdMenuProps["theme"];
        validator(val: import("./type").TdMenuProps["theme"]): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TdMenuProps["value"]>;
        default: import("./type").TdMenuProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdMenuProps["value"]>;
        default: import("./type").TdMenuProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdMenuProps["defaultValue"]>;
    };
    width: {
        type: import("vue").PropType<import("./type").TdMenuProps["width"]>;
        default: string;
    };
    onChange: import("vue").PropType<import("./type").TdMenuProps["onChange"]>;
    onExpand: import("vue").PropType<import("./type").TdMenuProps["onExpand"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    onCollapsed: FunctionConstructor;
    collapsed: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TdMenuProps["expanded"]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TdMenuProps["defaultExpanded"]>;
        default: any[];
    };
    expandMutex: BooleanConstructor;
    expandType: {
        type: import("vue").PropType<import("./type").TdMenuProps["expandType"]>;
        default: import("./type").TdMenuProps["expandType"];
        validator(val: import("./type").TdMenuProps["expandType"]): boolean;
    };
    logo: {
        type: import("vue").PropType<import("./type").TdMenuProps["logo"]>;
    };
    operations: {
        type: import("vue").PropType<import("./type").TdMenuProps["operations"]>;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdMenuProps["theme"]>;
        default: import("./type").TdMenuProps["theme"];
        validator(val: import("./type").TdMenuProps["theme"]): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TdMenuProps["value"]>;
        default: import("./type").TdMenuProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdMenuProps["value"]>;
        default: import("./type").TdMenuProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdMenuProps["defaultValue"]>;
    };
    width: {
        type: import("vue").PropType<import("./type").TdMenuProps["width"]>;
        default: string;
    };
    onChange: import("vue").PropType<import("./type").TdMenuProps["onChange"]>;
    onExpand: import("vue").PropType<import("./type").TdMenuProps["onExpand"]>;
}>>, {
    value: MenuValue;
    width: string | number | (string | number)[];
    expanded: MenuValue[];
    expandMutex: boolean;
    theme: "dark" | "light";
    modelValue: MenuValue;
    defaultExpanded: MenuValue[];
    expandType: "popup" | "normal";
    collapsed: boolean;
}, {}>;
export default _default;

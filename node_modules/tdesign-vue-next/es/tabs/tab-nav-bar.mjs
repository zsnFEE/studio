/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, computed, onMounted, nextTick, watch, createVNode } from 'vue';
import { _ as _defineProperty } from '../_chunks/dep-0bd8597f.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-614f307d.mjs';
import props from './props.mjs';
import { u as usePrefixClass, o as useResizeObserver } from '../_chunks/dep-465c43e8.mjs';
import { debounce } from 'lodash-es';
import '../_chunks/dep-612a2c2b.mjs';
import '../_chunks/dep-15464fee.mjs';
import '../_chunks/dep-32b59907.mjs';
import '../_chunks/dep-d0add92f.mjs';
import '../_chunks/dep-d58b61b6.mjs';
import '../_chunks/dep-779bddf7.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-afae046d.mjs';
import '../_chunks/dep-8a6c1499.mjs';
import '../_chunks/dep-5c28ada1.mjs';
import '../_chunks/dep-d913bc66.mjs';
import '../_chunks/dep-1690abc9.mjs';
import '../_chunks/dep-62c11543.mjs';
import '../_chunks/dep-27c2b283.mjs';
import '../_chunks/dep-67238d91.mjs';

var TTabNavBar = defineComponent({
  props: {
    navs: {
      type: Array
    },
    placement: props.placement,
    value: props.value
  },
  setup: function setup(props) {
    var COMPONENT_NAME = usePrefixClass("tabs");
    var classPrefix = usePrefixClass();
    var barRef = ref();
    var navBarClass = computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__bar"), "".concat(classPrefix.value, "-is-").concat(props.placement)];
    });
    var navBarStyle = ref(null);
    var getStyle = function getStyle() {
      var isVertical = ["left", "right"].includes(props.placement.toLowerCase());
      var _ref = isVertical ? ["height", "top"] : ["width", "left"],
        _ref2 = _slicedToArray(_ref, 2),
        sizePropName = _ref2[0],
        offsetPropName = _ref2[1];
      var offset = 0;
      var i = 0;
      for (; i < props.navs.length; i++) {
        var _props$navs$i;
        if (props.navs[i].props.value === props.value) {
          break;
        }
        if ((_props$navs$i = props.navs[i]) !== null && _props$navs$i !== void 0 && _props$navs$i.el) {
          var sizeWithUnit = getComputedStyle(props.navs[i].el)[sizePropName];
          var size = parseFloat(sizeWithUnit);
          offset += size;
        }
      }
      if (!props.navs[i]) return {};
      return _defineProperty(_defineProperty({}, offsetPropName, "".concat(offset, "px")), sizePropName, props.navs[i].el ? getComputedStyle(props.navs[i].el)[sizePropName] : "0px");
    };
    var update = function update() {
      return navBarStyle.value = getStyle();
    };
    onMounted(function () {
      nextTick(function () {
        update();
      });
    });
    watch([function () {
      return props.navs;
    }, function () {
      return props.value;
    }, function () {
      return props.placement;
    }], function () {
      nextTick(function () {
        update();
      });
    });
    useResizeObserver(barRef, debounce(function () {
      update();
    }, 35));
    return function () {
      return createVNode("div", {
        "class": navBarClass.value,
        "style": navBarStyle.value,
        "ref": barRef
      }, null);
    };
  }
});

export { TTabNavBar as default };
//# sourceMappingURL=tab-nav-bar.mjs.map

declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["defaultTime"]>;
        default: () => import("./type").TdDateRangePickerProps["defaultTime"];
    };
    disableDate: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: import("./type").TdDateRangePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["mode"]>;
        default: import("./type").TdDateRangePickerProps["mode"];
        validator(val: import("./type").TdDateRangePickerProps["mode"]): boolean;
    };
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["placeholder"]>;
    };
    popupProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["presetsPlacement"]>;
        default: import("./type").TdDateRangePickerProps["presetsPlacement"];
        validator(val: import("./type").TdDateRangePickerProps["presetsPlacement"]): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["rangeInputProps"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["size"]>;
        default: import("./type").TdDateRangePickerProps["size"];
        validator(val: import("./type").TdDateRangePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["status"]>;
        default: import("./type").TdDateRangePickerProps["status"];
        validator(val: import("./type").TdDateRangePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["value"]>;
        default: import("./type").TdDateRangePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["value"]>;
        default: import("./type").TdDateRangePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["defaultValue"]>;
        default: () => import("./type").TdDateRangePickerProps["defaultValue"];
    };
    valueType: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["valueType"]>;
        validator(val: import("./type").TdDateRangePickerProps["valueType"]): boolean;
    };
    onBlur: import("vue").PropType<import("./type").TdDateRangePickerProps["onBlur"]>;
    onChange: import("vue").PropType<import("./type").TdDateRangePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<import("./type").TdDateRangePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<import("./type").TdDateRangePickerProps["onFocus"]>;
    onInput: import("vue").PropType<import("./type").TdDateRangePickerProps["onInput"]>;
    onPick: import("vue").PropType<import("./type").TdDateRangePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<import("./type").TdDateRangePickerProps["onPresetClick"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["defaultTime"]>;
        default: () => import("./type").TdDateRangePickerProps["defaultTime"];
    };
    disableDate: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: import("./type").TdDateRangePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["mode"]>;
        default: import("./type").TdDateRangePickerProps["mode"];
        validator(val: import("./type").TdDateRangePickerProps["mode"]): boolean;
    };
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["placeholder"]>;
    };
    popupProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["presetsPlacement"]>;
        default: import("./type").TdDateRangePickerProps["presetsPlacement"];
        validator(val: import("./type").TdDateRangePickerProps["presetsPlacement"]): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["rangeInputProps"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["size"]>;
        default: import("./type").TdDateRangePickerProps["size"];
        validator(val: import("./type").TdDateRangePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["status"]>;
        default: import("./type").TdDateRangePickerProps["status"];
        validator(val: import("./type").TdDateRangePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["value"]>;
        default: import("./type").TdDateRangePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["value"]>;
        default: import("./type").TdDateRangePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["defaultValue"]>;
        default: () => import("./type").TdDateRangePickerProps["defaultValue"];
    };
    valueType: {
        type: import("vue").PropType<import("./type").TdDateRangePickerProps["valueType"]>;
        validator(val: import("./type").TdDateRangePickerProps["valueType"]): boolean;
    };
    onBlur: import("vue").PropType<import("./type").TdDateRangePickerProps["onBlur"]>;
    onChange: import("vue").PropType<import("./type").TdDateRangePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<import("./type").TdDateRangePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<import("./type").TdDateRangePickerProps["onFocus"]>;
    onInput: import("vue").PropType<import("./type").TdDateRangePickerProps["onInput"]>;
    onPick: import("vue").PropType<import("./type").TdDateRangePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<import("./type").TdDateRangePickerProps["onPresetClick"]>;
}>>, {
    disabled: boolean;
    value: import("./type").DateRangeValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    enableTimePicker: boolean;
    cancelRangeSelectLimit: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: import("./type").DateRangeValue;
    modelValue: import("./type").DateRangeValue;
    readonly: boolean;
    separator: string;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    needConfirm: boolean;
    defaultTime: string[];
    panelPreselection: boolean;
}, {}>;
export default _default;

declare const _default: import("vue").DefineComponent<{
    close: {
        type: import("vue").PropType<import("./type").TdAlertProps["close"]>;
        default: import("./type").TdAlertProps["close"];
    };
    closeBtn: {
        type: import("vue").PropType<import("./type").TdAlertProps["closeBtn"]>;
        default: import("./type").TdAlertProps["closeBtn"];
    };
    default: {
        type: import("vue").PropType<import("./type").TdAlertProps["default"]>;
    };
    icon: {
        type: import("vue").PropType<import("./type").TdAlertProps["icon"]>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<import("./type").TdAlertProps["message"]>;
    };
    operation: {
        type: import("vue").PropType<import("./type").TdAlertProps["operation"]>;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdAlertProps["theme"]>;
        default: import("./type").TdAlertProps["theme"];
        validator(val: import("./type").TdAlertProps["theme"]): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TdAlertProps["title"]>;
    };
    onClose: import("vue").PropType<import("./type").TdAlertProps["onClose"]>;
    onClosed: import("vue").PropType<import("./type").TdAlertProps["onClosed"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    close: {
        type: import("vue").PropType<import("./type").TdAlertProps["close"]>;
        default: import("./type").TdAlertProps["close"];
    };
    closeBtn: {
        type: import("vue").PropType<import("./type").TdAlertProps["closeBtn"]>;
        default: import("./type").TdAlertProps["closeBtn"];
    };
    default: {
        type: import("vue").PropType<import("./type").TdAlertProps["default"]>;
    };
    icon: {
        type: import("vue").PropType<import("./type").TdAlertProps["icon"]>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<import("./type").TdAlertProps["message"]>;
    };
    operation: {
        type: import("vue").PropType<import("./type").TdAlertProps["operation"]>;
    };
    theme: {
        type: import("vue").PropType<import("./type").TdAlertProps["theme"]>;
        default: import("./type").TdAlertProps["theme"];
        validator(val: import("./type").TdAlertProps["theme"]): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TdAlertProps["title"]>;
    };
    onClose: import("vue").PropType<import("./type").TdAlertProps["onClose"]>;
    onClosed: import("vue").PropType<import("./type").TdAlertProps["onClosed"]>;
}>>, {
    close: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: "error" | "success" | "warning" | "info";
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    maxLine: number;
}, {}>;
export default _default;

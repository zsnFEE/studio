import { TdInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    align: {
        type: PropType<TdInputProps["align"]>;
        default: TdInputProps["align"];
        validator(val: TdInputProps["align"]): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: PropType<TdInputProps["format"]>;
    };
    inputClass: {
        type: PropType<TdInputProps["inputClass"]>;
    };
    label: {
        type: PropType<TdInputProps["label"]>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: PropType<TdInputProps["maxlength"]>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<TdInputProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    showClearIconOnEmpty: BooleanConstructor;
    showLimitNumber: BooleanConstructor;
    size: {
        type: PropType<TdInputProps["size"]>;
        default: TdInputProps["size"];
        validator(val: TdInputProps["size"]): boolean;
    };
    spellCheck: BooleanConstructor;
    status: {
        type: PropType<TdInputProps["status"]>;
        default: TdInputProps["status"];
        validator(val: TdInputProps["status"]): boolean;
    };
    suffix: {
        type: PropType<TdInputProps["suffix"]>;
    };
    suffixIcon: {
        type: PropType<TdInputProps["suffixIcon"]>;
    };
    tips: {
        type: PropType<TdInputProps["tips"]>;
    };
    type: {
        type: PropType<TdInputProps["type"]>;
        default: TdInputProps["type"];
        validator(val: TdInputProps["type"]): boolean;
    };
    value: {
        type: PropType<TdInputProps["value"]>;
        default: TdInputProps["value"];
    };
    modelValue: {
        type: PropType<TdInputProps["value"]>;
        default: TdInputProps["value"];
    };
    defaultValue: {
        type: PropType<TdInputProps["defaultValue"]>;
    };
    onBlur: PropType<TdInputProps["onBlur"]>;
    onChange: PropType<TdInputProps["onChange"]>;
    onClear: PropType<TdInputProps["onClear"]>;
    onClick: PropType<TdInputProps["onClick"]>;
    onCompositionend: PropType<TdInputProps["onCompositionend"]>;
    onCompositionstart: PropType<TdInputProps["onCompositionstart"]>;
    onEnter: PropType<TdInputProps["onEnter"]>;
    onFocus: PropType<TdInputProps["onFocus"]>;
    onKeydown: PropType<TdInputProps["onKeydown"]>;
    onKeypress: PropType<TdInputProps["onKeypress"]>;
    onKeyup: PropType<TdInputProps["onKeyup"]>;
    onMouseenter: PropType<TdInputProps["onMouseenter"]>;
    onMouseleave: PropType<TdInputProps["onMouseleave"]>;
    onPaste: PropType<TdInputProps["onPaste"]>;
    onValidate: PropType<TdInputProps["onValidate"]>;
    onWheel: PropType<TdInputProps["onWheel"]>;
};
export default _default;

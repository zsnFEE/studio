/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, watch, createVNode, mergeProps } from 'vue';
import { _ as _defineProperty } from '../../../_chunks/dep-0bd8597f.mjs';
import { Input } from '../../../input/index.mjs';
import '../../utils/index.mjs';
import { useBaseClassName } from '../../hooks/index.mjs';
import { c as useCommonClassName } from '../../../_chunks/dep-465c43e8.mjs';
import { g as getColorObject, C as Color } from '../../../_chunks/dep-baeee0c4.mjs';
import '../../../_chunks/dep-612a2c2b.mjs';
import '../../../_chunks/dep-15464fee.mjs';
import '../../../input/input.mjs';
import '../../../_chunks/dep-3ea2b330.mjs';
import 'tdesign-icons-vue-next';
import '../../../input/props.mjs';
import '../../../input/hooks/index.mjs';
import '../../../input/hooks/useInput.mjs';
import '../../../_chunks/dep-614f307d.mjs';
import '../../../_chunks/dep-32b59907.mjs';
import '../../../form/consts/index.mjs';
import 'lodash-es';
import '../../../_chunks/dep-d0add92f.mjs';
import '../../../_chunks/dep-d58b61b6.mjs';
import '../../../_chunks/dep-779bddf7.mjs';
import '../../../config-provider/hooks/useConfig.mjs';
import '../../../config-provider/utils/context.mjs';
import '../../../_chunks/dep-afae046d.mjs';
import '../../../_chunks/dep-8a6c1499.mjs';
import '../../../_chunks/dep-5c28ada1.mjs';
import '../../../_chunks/dep-d913bc66.mjs';
import '../../../_chunks/dep-1690abc9.mjs';
import '../../../_chunks/dep-62c11543.mjs';
import '../../../_chunks/dep-27c2b283.mjs';
import '../../../_chunks/dep-67238d91.mjs';
import '../../../input/hooks/useLengthLimit.mjs';
import '../../../_chunks/dep-6686ef20.mjs';
import '../../../_chunks/dep-6b6765a0.mjs';
import '../../../input/hooks/useInputEventHandler.mjs';
import '../../../input/hooks/useInputWidth.mjs';
import '../../../input/input-group.mjs';
import '../../../input/input-group-props.mjs';
import './style/css.mjs';
import '../../../_chunks/dep-102ee016.mjs';
import '../../../_chunks/dep-e5707621.mjs';

var DefaultTrigger = defineComponent({
  name: "DefaultTrigger",
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      "default": ""
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    borderless: {
      type: Boolean,
      "default": false
    },
    clearable: {
      type: Boolean,
      "default": false
    },
    inputProps: {
      type: Object,
      "default": function _default() {
        return {
          autoWidth: true
        };
      }
    },
    onTriggerChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    onTriggerClear: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    size: {
      type: String,
      "default": "medium"
    }
  },
  setup: function setup(props) {
    var baseClassName = useBaseClassName();
    var value = ref(props.color);
    var _useCommonClassName = useCommonClassName(),
      sizeClassNames = _useCommonClassName.SIZE;
    watch(function () {
      return [props.color];
    }, function () {
      return value.value = props.color;
    });
    var handleChange = function handleChange(input) {
      if (input !== props.color) {
        props.onTriggerChange(value.value, {
          color: getColorObject(new Color(input)),
          trigger: "input"
        });
      }
    };
    var handleClear = function handleClear(context) {
      var _props$onTriggerClear;
      return (_props$onTriggerClear = props.onTriggerClear) === null || _props$onTriggerClear === void 0 ? void 0 : _props$onTriggerClear.call(props, context);
    };
    return function () {
      var inputSlots = {
        label: function label() {
          return createVNode("div", {
            "class": ["".concat(baseClassName.value, "__trigger--default__color"), "".concat(baseClassName.value, "--bg-alpha")]
          }, [createVNode("span", {
            "class": ["color-inner", _defineProperty({}, sizeClassNames.value[props.size], props.size !== "medium")],
            "style": {
              background: value.value
            }
          }, null)]);
        }
      };
      return createVNode(Input, mergeProps({
        "borderless": props.borderless,
        "clearable": props.clearable,
        "size": props.size,
        "modelValue": value.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return value.value = $event;
        },
        "disabled": props.disabled,
        "onBlur": handleChange,
        "onChange": handleChange,
        "onClear": handleClear
      }, props.inputProps), inputSlots);
    };
  }
});

export { DefaultTrigger as default };
//# sourceMappingURL=index.mjs.map

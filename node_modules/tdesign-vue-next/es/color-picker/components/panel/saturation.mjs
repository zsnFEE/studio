/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, reactive, computed, nextTick, onMounted, onBeforeUnmount, createVNode } from 'vue';
import { S as SATURATION_PANEL_DEFAULT_WIDTH, d as SATURATION_PANEL_DEFAULT_HEIGHT } from '../../../_chunks/dep-102ee016.mjs';
import '../../utils/index.mjs';
import { useBaseClassName } from '../../hooks/index.mjs';
import baseProps from './base-props.mjs';
import { D as Draggable } from '../../../_chunks/dep-baeee0c4.mjs';
import '../../../_chunks/dep-465c43e8.mjs';
import 'lodash-es';
import '../../../_chunks/dep-d0add92f.mjs';
import '../../../_chunks/dep-32b59907.mjs';
import '../../../_chunks/dep-15464fee.mjs';
import '../../../_chunks/dep-d58b61b6.mjs';
import '../../../_chunks/dep-779bddf7.mjs';
import '../../../config-provider/hooks/useConfig.mjs';
import '../../../config-provider/utils/context.mjs';
import '../../../_chunks/dep-afae046d.mjs';
import '../../../_chunks/dep-8a6c1499.mjs';
import '../../../_chunks/dep-5c28ada1.mjs';
import '../../../_chunks/dep-614f307d.mjs';
import '../../../_chunks/dep-d913bc66.mjs';
import '../../../_chunks/dep-1690abc9.mjs';
import '../../../_chunks/dep-62c11543.mjs';
import '../../../_chunks/dep-27c2b283.mjs';
import '../../../_chunks/dep-612a2c2b.mjs';
import '../../../_chunks/dep-0bd8597f.mjs';
import '../../../_chunks/dep-67238d91.mjs';
import '../../../_chunks/dep-e5707621.mjs';

var SaturationPanel = defineComponent({
  name: "SaturationPanel",
  props: baseProps,
  setup: function setup(props) {
    var baseClassName = useBaseClassName();
    var refPanel = ref(null);
    var refThumb = ref(null);
    var dragInstance = ref(null);
    var panelRect = reactive({
      width: SATURATION_PANEL_DEFAULT_WIDTH,
      height: SATURATION_PANEL_DEFAULT_HEIGHT
    });
    var styles = computed(function () {
      var _props$color = props.color,
        saturation = _props$color.saturation,
        value = _props$color.value;
      var width = panelRect.width,
        height = panelRect.height;
      var top = Math.round((1 - value) * height);
      var left = Math.round(saturation * width);
      return {
        color: props.color.rgb,
        left: "".concat(left, "px"),
        top: "".concat(top, "px")
      };
    });
    var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
      var width = panelRect.width,
        height = panelRect.height;
      var x = coordinate.x,
        y = coordinate.y;
      var saturation = Math.round(x / width * 100);
      var value = Math.round((1 - y / height) * 100);
      return {
        saturation: saturation,
        value: value
      };
    };
    var handleDrag = function handleDrag(coordinate, isEnded) {
      if (props.disabled) {
        return;
      }
      var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
        saturation = _getSaturationAndValu.saturation,
        value = _getSaturationAndValu.value;
      props.onChange({
        saturation: saturation / 100,
        value: value / 100,
        addUsedColor: isEnded
      });
    };
    var handleDragEnd = function handleDragEnd(coordinate) {
      if (props.disabled) {
        return;
      }
      nextTick(function () {
        handleDrag(coordinate, true);
      });
    };
    var panelBackground = computed(function () {
      return "hsl(".concat(props.color.hue, ", 100%, 50%)");
    });
    onMounted(function () {
      panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
      panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
      dragInstance.value = new Draggable(refPanel.value, {
        start: function start() {
          panelRect.width = refPanel.value.offsetWidth;
          panelRect.height = refPanel.value.offsetHeight;
        },
        drag: function drag(coordinate) {
          handleDrag(coordinate);
        },
        end: handleDragEnd
      });
    });
    onBeforeUnmount(function () {
      dragInstance.value.destroy();
    });
    return function () {
      return createVNode("div", {
        "class": ["".concat(baseClassName.value, "__saturation")],
        "ref": refPanel,
        "style": {
          background: panelBackground.value
        }
      }, [createVNode("span", {
        "class": ["".concat(baseClassName.value, "__thumb")],
        "role": "slider",
        "tabindex": 0,
        "ref": refThumb,
        "style": styles.value
      }, null)]);
    };
  }
});

export { SaturationPanel as default };
//# sourceMappingURL=saturation.mjs.map

import { TdBreadcrumbProps, TdBreadcrumbItemProps } from './type';
import './style';
export * from './type';
export type BreadcrumbProps = TdBreadcrumbProps;
export type BreadcrumbItemProps = TdBreadcrumbItemProps;
export declare const Breadcrumb: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        ellipsis: {
            type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
        };
        itemsAfterCollapse: {
            type: NumberConstructor;
            default: any;
        };
        itemsBeforeCollapse: {
            type: NumberConstructor;
            default: any;
        };
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        maxItems: {
            type: NumberConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbProps["options"]>;
        };
        separator: {
            type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
        };
        theme: {
            type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
            default: TdBreadcrumbProps["theme"];
            validator(val: TdBreadcrumbProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        ellipsis: {
            type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
        };
        itemsAfterCollapse: {
            type: NumberConstructor;
            default: any;
        };
        itemsBeforeCollapse: {
            type: NumberConstructor;
            default: any;
        };
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        maxItems: {
            type: NumberConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbProps["options"]>;
        };
        separator: {
            type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
        };
        theme: {
            type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
            default: TdBreadcrumbProps["theme"];
            validator(val: TdBreadcrumbProps["theme"]): boolean;
        };
    }>>, {
        theme: "light";
        maxItems: number;
        itemsBeforeCollapse: number;
        itemsAfterCollapse: number;
        maxItemWidth: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        ellipsis: {
            type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
        };
        itemsAfterCollapse: {
            type: NumberConstructor;
            default: any;
        };
        itemsBeforeCollapse: {
            type: NumberConstructor;
            default: any;
        };
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        maxItems: {
            type: NumberConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbProps["options"]>;
        };
        separator: {
            type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
        };
        theme: {
            type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
            default: TdBreadcrumbProps["theme"];
            validator(val: TdBreadcrumbProps["theme"]): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        theme: "light";
        maxItems: number;
        itemsBeforeCollapse: number;
        itemsAfterCollapse: number;
        maxItemWidth: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    ellipsis: {
        type: import("vue").PropType<TdBreadcrumbProps["ellipsis"]>;
    };
    itemsAfterCollapse: {
        type: NumberConstructor;
        default: any;
    };
    itemsBeforeCollapse: {
        type: NumberConstructor;
        default: any;
    };
    maxItemWidth: {
        type: StringConstructor;
        default: any;
    };
    maxItems: {
        type: NumberConstructor;
        default: any;
    };
    options: {
        type: import("vue").PropType<TdBreadcrumbProps["options"]>;
    };
    separator: {
        type: import("vue").PropType<TdBreadcrumbProps["separator"]>;
    };
    theme: {
        type: import("vue").PropType<TdBreadcrumbProps["theme"]>;
        default: TdBreadcrumbProps["theme"];
        validator(val: TdBreadcrumbProps["theme"]): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    theme: "light";
    maxItems: number;
    itemsBeforeCollapse: number;
    itemsAfterCollapse: number;
    maxItemWidth: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const BreadcrumbItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isEllipsisItem: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdBreadcrumbItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdBreadcrumbItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdBreadcrumbItemProps["icon"]>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdBreadcrumbItemProps["router"]>;
        };
        target: {
            type: import("vue").PropType<TdBreadcrumbItemProps["target"]>;
            default: TdBreadcrumbItemProps["target"];
            validator(val: TdBreadcrumbItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdBreadcrumbItemProps["to"]>;
        };
        onClick: import("vue").PropType<TdBreadcrumbItemProps["onClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isEllipsisItem: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdBreadcrumbItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdBreadcrumbItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdBreadcrumbItemProps["icon"]>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdBreadcrumbItemProps["router"]>;
        };
        target: {
            type: import("vue").PropType<TdBreadcrumbItemProps["target"]>;
            default: TdBreadcrumbItemProps["target"];
            validator(val: TdBreadcrumbItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdBreadcrumbItemProps["to"]>;
        };
        onClick: import("vue").PropType<TdBreadcrumbItemProps["onClick"]>;
    }>>, {
        disabled: boolean;
        replace: boolean;
        target: "_self" | "_blank" | "_parent" | "_top";
        maxWidth: string;
        href: string;
        isEllipsisItem: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isEllipsisItem: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdBreadcrumbItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdBreadcrumbItemProps["default"]>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<TdBreadcrumbItemProps["icon"]>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<TdBreadcrumbItemProps["router"]>;
        };
        target: {
            type: import("vue").PropType<TdBreadcrumbItemProps["target"]>;
            default: TdBreadcrumbItemProps["target"];
            validator(val: TdBreadcrumbItemProps["target"]): boolean;
        };
        to: {
            type: import("vue").PropType<TdBreadcrumbItemProps["to"]>;
        };
        onClick: import("vue").PropType<TdBreadcrumbItemProps["onClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        replace: boolean;
        target: "_self" | "_blank" | "_parent" | "_top";
        maxWidth: string;
        href: string;
        isEllipsisItem: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isEllipsisItem: BooleanConstructor;
    content: {
        type: import("vue").PropType<TdBreadcrumbItemProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdBreadcrumbItemProps["default"]>;
    };
    disabled: BooleanConstructor;
    href: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: import("vue").PropType<TdBreadcrumbItemProps["icon"]>;
    };
    maxWidth: {
        type: StringConstructor;
        default: any;
    };
    replace: BooleanConstructor;
    router: {
        type: import("vue").PropType<TdBreadcrumbItemProps["router"]>;
    };
    target: {
        type: import("vue").PropType<TdBreadcrumbItemProps["target"]>;
        default: TdBreadcrumbItemProps["target"];
        validator(val: TdBreadcrumbItemProps["target"]): boolean;
    };
    to: {
        type: import("vue").PropType<TdBreadcrumbItemProps["to"]>;
    };
    onClick: import("vue").PropType<TdBreadcrumbItemProps["onClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    replace: boolean;
    target: "_self" | "_blank" | "_parent" | "_top";
    maxWidth: string;
    href: string;
    isEllipsisItem: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Breadcrumb;

import './style';
export * from './types';
export declare const TreeSelect: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["collapsedItems"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["data"]>;
            default: () => import("./type").TdTreeSelectProps["data"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["empty"]>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputValue"]>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["keys"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["loadingText"]>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panelBottomContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["size"]>;
            default: import("./type").TdTreeSelectProps["size"];
            validator(val: import("./type").TdTreeSelectProps["size"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffixIcon"]>;
        };
        tagProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["tagProps"]>;
        };
        treeProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["treeProps"]>;
        };
        value: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultValue"]>;
        };
        valueDisplay: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueType"]>;
            default: import("./type").TdTreeSelectProps["valueType"];
            validator(val: import("./type").TdTreeSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<import("./type").TdTreeSelectProps["onBlur"]>;
        onChange: import("vue").PropType<import("./type").TdTreeSelectProps["onChange"]>;
        onClear: import("vue").PropType<import("./type").TdTreeSelectProps["onClear"]>;
        onFocus: import("vue").PropType<import("./type").TdTreeSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<import("./type").TdTreeSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<import("./type").TdTreeSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<import("./type").TdTreeSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<import("./type").TdTreeSelectProps["onSearch"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["collapsedItems"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["data"]>;
            default: () => import("./type").TdTreeSelectProps["data"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["empty"]>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputValue"]>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["keys"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["loadingText"]>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panelBottomContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["size"]>;
            default: import("./type").TdTreeSelectProps["size"];
            validator(val: import("./type").TdTreeSelectProps["size"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffixIcon"]>;
        };
        tagProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["tagProps"]>;
        };
        treeProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["treeProps"]>;
        };
        value: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultValue"]>;
        };
        valueDisplay: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueType"]>;
            default: import("./type").TdTreeSelectProps["valueType"];
            validator(val: import("./type").TdTreeSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<import("./type").TdTreeSelectProps["onBlur"]>;
        onChange: import("vue").PropType<import("./type").TdTreeSelectProps["onChange"]>;
        onClear: import("vue").PropType<import("./type").TdTreeSelectProps["onClear"]>;
        onFocus: import("vue").PropType<import("./type").TdTreeSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<import("./type").TdTreeSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<import("./type").TdTreeSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<import("./type").TdTreeSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<import("./type").TdTreeSelectProps["onSearch"]>;
    }>>, {
        disabled: boolean;
        data: import("..").TreeOptionData[];
        value: import("./type").TreeSelectValue;
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean;
        valueType: "object" | "value";
        multiple: boolean;
        max: number;
        size: "small" | "medium" | "large";
        placeholder: string;
        modelValue: import("./type").TreeSelectValue;
        readonly: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        loadingText: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        filterable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["collapsedItems"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["data"]>;
            default: () => import("./type").TdTreeSelectProps["data"];
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["empty"]>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["inputValue"]>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["keys"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["loadingText"]>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panelBottomContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["size"]>;
            default: import("./type").TdTreeSelectProps["size"];
            validator(val: import("./type").TdTreeSelectProps["size"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["suffixIcon"]>;
        };
        tagProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["tagProps"]>;
        };
        treeProps: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["treeProps"]>;
        };
        value: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
            default: import("./type").TdTreeSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultValue"]>;
        };
        valueDisplay: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").TdTreeSelectProps["valueType"]>;
            default: import("./type").TdTreeSelectProps["valueType"];
            validator(val: import("./type").TdTreeSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<import("./type").TdTreeSelectProps["onBlur"]>;
        onChange: import("vue").PropType<import("./type").TdTreeSelectProps["onChange"]>;
        onClear: import("vue").PropType<import("./type").TdTreeSelectProps["onClear"]>;
        onFocus: import("vue").PropType<import("./type").TdTreeSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<import("./type").TdTreeSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<import("./type").TdTreeSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<import("./type").TdTreeSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<import("./type").TdTreeSelectProps["onSearch"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        data: import("..").TreeOptionData[];
        value: import("./type").TreeSelectValue;
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean;
        valueType: "object" | "value";
        multiple: boolean;
        max: number;
        size: "small" | "medium" | "large";
        placeholder: string;
        modelValue: import("./type").TreeSelectValue;
        readonly: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        loadingText: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        filterable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["collapsedItems"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["data"]>;
        default: () => import("./type").TdTreeSelectProps["data"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["empty"]>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["filter"]>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["inputProps"]>;
    };
    inputValue: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["inputValue"]>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultInputValue"]>;
    };
    keys: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["keys"]>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["loadingText"]>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panelBottomContent: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["panelTopContent"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["popupProps"]>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["selectInputProps"]>;
    };
    size: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["size"]>;
        default: import("./type").TdTreeSelectProps["size"];
        validator(val: import("./type").TdTreeSelectProps["size"]): boolean;
    };
    suffix: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["suffix"]>;
    };
    suffixIcon: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["suffixIcon"]>;
    };
    tagProps: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["tagProps"]>;
    };
    treeProps: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["treeProps"]>;
    };
    value: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
        default: import("./type").TdTreeSelectProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["value"]>;
        default: import("./type").TdTreeSelectProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["defaultValue"]>;
    };
    valueDisplay: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["valueDisplay"]>;
    };
    valueType: {
        type: import("vue").PropType<import("./type").TdTreeSelectProps["valueType"]>;
        default: import("./type").TdTreeSelectProps["valueType"];
        validator(val: import("./type").TdTreeSelectProps["valueType"]): boolean;
    };
    onBlur: import("vue").PropType<import("./type").TdTreeSelectProps["onBlur"]>;
    onChange: import("vue").PropType<import("./type").TdTreeSelectProps["onChange"]>;
    onClear: import("vue").PropType<import("./type").TdTreeSelectProps["onClear"]>;
    onFocus: import("vue").PropType<import("./type").TdTreeSelectProps["onFocus"]>;
    onInputChange: import("vue").PropType<import("./type").TdTreeSelectProps["onInputChange"]>;
    onPopupVisibleChange: import("vue").PropType<import("./type").TdTreeSelectProps["onPopupVisibleChange"]>;
    onRemove: import("vue").PropType<import("./type").TdTreeSelectProps["onRemove"]>;
    onSearch: import("vue").PropType<import("./type").TdTreeSelectProps["onSearch"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    data: import("..").TreeOptionData[];
    value: import("./type").TreeSelectValue;
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean;
    valueType: "object" | "value";
    multiple: boolean;
    max: number;
    size: "small" | "medium" | "large";
    placeholder: string;
    modelValue: import("./type").TreeSelectValue;
    readonly: boolean;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    popupVisible: boolean;
    loadingText: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    filterable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default TreeSelect;

import { TdDescriptionsProps, TdDescriptionsItemProps } from './type';
import './style';
export * from './type';
export type DescriptionsProps = TdDescriptionsProps;
export type DescriptionsItemProps = TdDescriptionsItemProps;
export declare const Descriptions: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
        };
        itemLayout: {
            type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
            default: TdDescriptionsProps["itemLayout"];
            validator(val: TdDescriptionsProps["itemLayout"]): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionsProps["items"]>;
        };
        labelStyle: {
            type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
        };
        layout: {
            type: import("vue").PropType<TdDescriptionsProps["layout"]>;
            default: TdDescriptionsProps["layout"];
            validator(val: TdDescriptionsProps["layout"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdDescriptionsProps["size"]>;
            default: TdDescriptionsProps["size"];
            validator(val: TdDescriptionsProps["size"]): boolean;
        };
        tableLayout: {
            type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
            default: TdDescriptionsProps["tableLayout"];
            validator(val: TdDescriptionsProps["tableLayout"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdDescriptionsProps["title"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
        };
        itemLayout: {
            type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
            default: TdDescriptionsProps["itemLayout"];
            validator(val: TdDescriptionsProps["itemLayout"]): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionsProps["items"]>;
        };
        labelStyle: {
            type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
        };
        layout: {
            type: import("vue").PropType<TdDescriptionsProps["layout"]>;
            default: TdDescriptionsProps["layout"];
            validator(val: TdDescriptionsProps["layout"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdDescriptionsProps["size"]>;
            default: TdDescriptionsProps["size"];
            validator(val: TdDescriptionsProps["size"]): boolean;
        };
        tableLayout: {
            type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
            default: TdDescriptionsProps["tableLayout"];
            validator(val: TdDescriptionsProps["tableLayout"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdDescriptionsProps["title"]>;
        };
    }>>, {
        layout: "vertical" | "horizontal";
        size: import("..").SizeEnum;
        tableLayout: "fixed" | "auto";
        column: number;
        colon: boolean;
        itemLayout: "vertical" | "horizontal";
        bordered: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
        };
        itemLayout: {
            type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
            default: TdDescriptionsProps["itemLayout"];
            validator(val: TdDescriptionsProps["itemLayout"]): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionsProps["items"]>;
        };
        labelStyle: {
            type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
        };
        layout: {
            type: import("vue").PropType<TdDescriptionsProps["layout"]>;
            default: TdDescriptionsProps["layout"];
            validator(val: TdDescriptionsProps["layout"]): boolean;
        };
        size: {
            type: import("vue").PropType<TdDescriptionsProps["size"]>;
            default: TdDescriptionsProps["size"];
            validator(val: TdDescriptionsProps["size"]): boolean;
        };
        tableLayout: {
            type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
            default: TdDescriptionsProps["tableLayout"];
            validator(val: TdDescriptionsProps["tableLayout"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdDescriptionsProps["title"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        layout: "vertical" | "horizontal";
        size: import("..").SizeEnum;
        tableLayout: "fixed" | "auto";
        column: number;
        colon: boolean;
        itemLayout: "vertical" | "horizontal";
        bordered: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    bordered: BooleanConstructor;
    colon: BooleanConstructor;
    column: {
        type: NumberConstructor;
        default: number;
    };
    contentStyle: {
        type: import("vue").PropType<TdDescriptionsProps["contentStyle"]>;
    };
    itemLayout: {
        type: import("vue").PropType<TdDescriptionsProps["itemLayout"]>;
        default: TdDescriptionsProps["itemLayout"];
        validator(val: TdDescriptionsProps["itemLayout"]): boolean;
    };
    items: {
        type: import("vue").PropType<TdDescriptionsProps["items"]>;
    };
    labelStyle: {
        type: import("vue").PropType<TdDescriptionsProps["labelStyle"]>;
    };
    layout: {
        type: import("vue").PropType<TdDescriptionsProps["layout"]>;
        default: TdDescriptionsProps["layout"];
        validator(val: TdDescriptionsProps["layout"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdDescriptionsProps["size"]>;
        default: TdDescriptionsProps["size"];
        validator(val: TdDescriptionsProps["size"]): boolean;
    };
    tableLayout: {
        type: import("vue").PropType<TdDescriptionsProps["tableLayout"]>;
        default: TdDescriptionsProps["tableLayout"];
        validator(val: TdDescriptionsProps["tableLayout"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdDescriptionsProps["title"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    layout: "vertical" | "horizontal";
    size: import("..").SizeEnum;
    tableLayout: "fixed" | "auto";
    column: number;
    colon: boolean;
    itemLayout: "vertical" | "horizontal";
    bordered: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const DescriptionsItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdDescriptionsItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdDescriptionsItemProps["default"]>;
        };
        label: {
            type: import("vue").PropType<TdDescriptionsItemProps["label"]>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdDescriptionsItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdDescriptionsItemProps["default"]>;
        };
        label: {
            type: import("vue").PropType<TdDescriptionsItemProps["label"]>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, {
        span: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdDescriptionsItemProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdDescriptionsItemProps["default"]>;
        };
        label: {
            type: import("vue").PropType<TdDescriptionsItemProps["label"]>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, {}, {}, {}, {}, {
        span: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<TdDescriptionsItemProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdDescriptionsItemProps["default"]>;
    };
    label: {
        type: import("vue").PropType<TdDescriptionsItemProps["label"]>;
    };
    span: {
        type: NumberConstructor;
        default: number;
    };
}>>, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    span: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Descriptions;

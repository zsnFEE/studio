import type { TdEmptyProps } from './type';
declare const _default: import("vue").DefineComponent<{
    action: {
        type: import("vue").PropType<TdEmptyProps["action"]>;
    };
    description: {
        type: import("vue").PropType<TdEmptyProps["description"]>;
    };
    image: {
        type: import("vue").PropType<TdEmptyProps["image"]>;
    };
    imageStyle: {
        type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
    };
    size: {
        type: import("vue").PropType<TdEmptyProps["size"]>;
        default: TdEmptyProps["size"];
        validator(val: TdEmptyProps["size"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdEmptyProps["title"]>;
    };
    type: {
        type: import("vue").PropType<TdEmptyProps["type"]>;
        default: TdEmptyProps["type"];
        validator(val: TdEmptyProps["type"]): boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<TdEmptyProps["action"]>;
    };
    description: {
        type: import("vue").PropType<TdEmptyProps["description"]>;
    };
    image: {
        type: import("vue").PropType<TdEmptyProps["image"]>;
    };
    imageStyle: {
        type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
    };
    size: {
        type: import("vue").PropType<TdEmptyProps["size"]>;
        default: TdEmptyProps["size"];
        validator(val: TdEmptyProps["size"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdEmptyProps["title"]>;
    };
    type: {
        type: import("vue").PropType<TdEmptyProps["type"]>;
        default: TdEmptyProps["type"];
        validator(val: TdEmptyProps["type"]): boolean;
    };
}>>, {
    type: "empty" | "success" | "fail" | "network-error" | "maintenance";
    size: import("..").SizeEnum;
}, {}>;
export default _default;

/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.Vue));
})(this, (function (exports, Vue) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var Vue__namespace = /*#__PURE__*/_interopNamespace(Vue);

  function _arrayLikeToArray$7(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$7(r);
  }

  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _unsupportedIterableToArray$7(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$7(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$7(r, a) : void 0;
    }
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$7(r) || _nonIterableSpread();
  }

  function _typeof$3(o) {
    "@babel/helpers - typeof";

    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$3(o);
  }

  function toPrimitive(t, r) {
    if ("object" != _typeof$3(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != _typeof$3(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof$3(i) ? i : i + "";
  }

  function _defineProperty$2(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof$3(global)) == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$3(self)) == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal || freeSelf || Function('return this')();

  /** Built-in value references. */
  var _Symbol = root$1.Symbol;

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$g.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$g.toString;

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$f.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$f.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && _typeof$3(value) == 'object';
  }

  /** `Object#toString` result references. */
  var symbolTag$3 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return _typeof$3(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag$3;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  var isArray$1 = isArray;

  /** Used as references for various `Number` constants. */
  var INFINITY$3 = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray$1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result;
  }

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = _typeof$3(value);
    return value != null && (type == 'object' || type == 'function');
  }

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber$1(value);
    if (value === INFINITY$2 || value === -INFINITY$2) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
      remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root$1['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return func + '';
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
    objectProto$e = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$e.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$e).replace(reRegExpChar$1, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = getNative(root$1, 'WeakMap');

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = function () {
    function object() {}
    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
      length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
    HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
      lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function () {
      return value;
    };
  }

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
      length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = _typeof$3(value);
    length = length == null ? MAX_SAFE_INTEGER$2 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$d.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$d.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
      length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$4 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$4(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
        index = -1,
        length = nativeMax$4(args.length - start, 0),
        array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = _typeof$3(index);
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$c;
    return value === proto;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
      result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag$3;
  }

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$b.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty$c.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /** Detect free variable `exports`. */
  var freeExports$2 = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$2 = freeExports$2 && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

  /** Built-in value references. */
  var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$4 = '[object Boolean]',
    dateTag$4 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$4 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$4 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  /** Detect free variable `exports`. */
  var freeExports$1 = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = function () {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;
      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$a.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray$1(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$b.call(value, key)) && !(skipIndexes && (
      // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' ||
      // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') ||
      // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
      // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$a.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$8.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
      result = [];
    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray$1(value)) {
      return false;
    }
    var type = _typeof$3(value);
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$7.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$8.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty$7.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto$1 = Array.prototype;

  /** Built-in value references. */
  var splice$1 = arrayProto$1.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice$1.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
      index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /* Built-in method references that are verified to be native. */
  var Map$1 = getNative(root$1, 'Map');

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$1 || ListCache)(),
      'string': new Hash()
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = _typeof$3(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
      size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    var _memoized = function memoized() {
      var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = _memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      _memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    _memoized.cache = new (memoize.Cache || MapCache)();
    return _memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = MapCache;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoizeCapped(function (string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var stringToPath$1 = stringToPath;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray$1(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath$1(toString(value));
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
      length = path.length;
    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : undefined;
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
      length = values.length,
      offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /** Built-in value references. */
  var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray$1(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
      length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);

  /** `Object#toString` result references. */
  var objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
    objectProto$5 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$5.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$6.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
      length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
    rsComboMarksRange$4 = "\\u0300-\\u036f",
    reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
    rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
    rsVarRange$3 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsZWJ$3 = "\\u200d";

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
    rsComboMarksRange$3 = "\\u0300-\\u036f",
    reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
    rsCombo$3 = '[' + rsComboRange$3 + ']',
    rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
    rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
    rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ$2 = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod$2 = rsModifier$2 + '?',
    rsOptVar$2 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
    rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
    rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode$1) || [];
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */
  function createCaseFirst(methodName) {
    return function (string) {
      string = toString(string);
      var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */
  var upperFirst = createCaseFirst('toUpperCase');
  var upperFirst$1 = upperFirst;

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */
  function capitalize(string) {
    return upperFirst$1(toString(string).toLowerCase());
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
      length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to compose unicode character classes. */
  var rsComboMarksRange$2 = "\\u0300-\\u036f",
    reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

  /** Used to compose unicode capture groups. */
  var rsCombo$2 = '[' + rsComboRange$2 + ']';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo$2, 'g');

  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */
  function deburr(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
    rsComboMarksRange$1 = "\\u0300-\\u036f",
    reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsDingbatRange = "\\u2700-\\u27bf",
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = "\\u2000-\\u206f",
    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$1 = "\\ufe0e\\ufe0f",
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$1 = '[' + rsComboRange$1 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
    rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$1 = "\\u200d";

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */
  function words(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  }

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]";

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */
  function createCompounder(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */
  var camelCase = createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase$1 = camelCase;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$2 = Math.ceil,
    nativeMax$3 = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$3(toInteger(size), 0);
    }
    var length = array == null ? 0 : array.length;
    if (!length || size < 1) {
      return [];
    }
    var index = 0,
      resIndex = 0,
      result = Array(nativeCeil$2(length / size));
    while (index < length) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }
    return result;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
      result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$2 = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  /** Detect free variable `exports`. */
  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof$3(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root$1.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols$1 ? stubArray : function (object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }
    return result;
  };

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root$1, 'DataView');

  /* Built-in method references that are verified to be native. */
  var Promise$1 = getNative(root$1, 'Promise');

  /* Built-in method references that are verified to be native. */
  var Set$1 = getNative(root$1, 'Set');

  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$5 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap$1);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag(new Map$1()) != mapTag$5 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$5 || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;
          case mapCtorString:
            return mapTag$5;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$5;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  var getTag$1 = getTag;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
      result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$5.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /** Built-in value references. */
  var Uint8Array = root$1.Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    mapTag$4 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);
      case boolTag$3:
      case dateTag$3:
        return new Ctor(+object);
      case dataViewTag$2:
        return cloneDataView(object, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);
      case mapTag$4:
        return new Ctor();
      case numberTag$3:
      case stringTag$3:
        return new Ctor(object);
      case regexpTag$2:
        return cloneRegExp(object);
      case setTag$4:
        return new Ctor();
      case symbolTag$2:
        return cloneSymbol(object);
    }
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike(value) && getTag$1(value) == mapTag$3;
  }

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil && nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$3;
  }

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil && nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$2 = 4;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$2 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$2] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$2] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$2,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray$1(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;
      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
      length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
        othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
      result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
      result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag = '[object Error]',
    mapTag$1 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;
      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag$1:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';
      case mapTag$1:
        var convert = mapToArray;
      case setTag$1:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$2.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
        othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
        othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$1.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$1(object),
      othIsArr = isArray$1(other),
      objTag = objIsArr ? arrayTag : getTag$1(object),
      othTag = othIsArr ? arrayTag : getTag$1(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
      length = index,
      noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
        objValue = object[key],
        srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys(object),
      length = result.length;
    while (length--) {
      var key = result[length],
        value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
      length = path.length,
      result = false;
    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments(object));
  }

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (_typeof$3(value) == 'object') {
      return isArray$1(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now$1 = function now() {
    return root$1.Date.now();
  };
  var now$2 = now$1;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$2 = Math.max,
    nativeMin$2 = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$1(func, wait, options) {
    var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber$1(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$2(toNumber$1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs,
        thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$2(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now$2();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }
    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
      return timerId === undefined ? result : trailingEdge(now$2());
    }
    function debounced() {
      var time = now$2(),
        isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }
    if (key == '__proto__') {
      return;
    }
    return object[key];
  }

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
      var isArr = isArray$1(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray$1(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function (srcValue, key) {
      stack || (stack = new Stack());
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */
  var mergeWith$1 = createAssigner(function (object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });
  var _mergeWith = mergeWith$1;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
      length = array == null ? 0 : array.length;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE$1) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer: while (++index < length) {
      var value = array[index],
        computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }
        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */
  var difference = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
  });
  var difference$1 = difference;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    reHasRegExpChar = RegExp(reRegExpChar.source);

  /**
   * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
   * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escapeRegExp('[lodash](https://lodash.com/)');
   * // => '\[lodash\]\(https://lodash\.com/\)'
   */
  function escapeRegExp(string) {
    string = toString(string);
    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
  }

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function (value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * **Note:** Unlike `_.remove`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.reject
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   *
   * // Combining several predicates using `_.overEvery` or `_.overSome`.
   * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
   * // => objects for ['fred', 'barney']
   */
  function filter$1(collection, predicate) {
    var func = isArray$1(collection) ? arrayFilter : baseFilter;
    return func(collection, baseIteratee(predicate));
  }

  /**
   * The base implementation of `_.gt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`,
   *  else `false`.
   */
  function baseGt(value, other) {
    return value > other;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max,
    nativeMin$1 = Math.min;

  /**
   * The base implementation of `_.inRange` which doesn't coerce arguments.
   *
   * @private
   * @param {number} number The number to check.
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
   */
  function baseInRange(number, start, end) {
    return number >= nativeMin$1(start, end) && number < nativeMax$1(start, end);
  }

  /**
   * Checks if `n` is between `start` and up to, but not including, `end`. If
   * `end` is not specified, it's set to `start` with `start` then set to `0`.
   * If `start` is greater than `end` the params are swapped to support
   * negative ranges.
   *
   * @static
   * @memberOf _
   * @since 3.3.0
   * @category Number
   * @param {number} number The number to check.
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
   * @see _.range, _.rangeRight
   * @example
   *
   * _.inRange(3, 2, 4);
   * // => true
   *
   * _.inRange(4, 8);
   * // => true
   *
   * _.inRange(4, 2);
   * // => false
   *
   * _.inRange(2, 2);
   * // => false
   *
   * _.inRange(1.2, 2);
   * // => true
   *
   * _.inRange(5.2, 4);
   * // => false
   *
   * _.inRange(-3, -2, -6);
   * // => true
   */
  function inRange(number, start, end) {
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    number = toNumber$1(number);
    return baseInRange(number, start, end);
  }

  /** `Object#toString` result references. */
  var stringTag = '[object String]';

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' || !isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMin = Math.min;

  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */
  function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith : arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];
    while (othIndex--) {
      var array = arrays[othIndex];
      if (othIndex && iteratee) {
        array = arrayMap(array, baseUnary(iteratee));
      }
      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
    }
    array = arrays[0];
    var index = -1,
      seen = caches[0];
    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
        computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */
  function castArrayLikeObject(value) {
    return isArrayLikeObject(value) ? value : [];
  }

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */
  var intersection = baseRest(function (arrays) {
    var mapped = arrayMap(arrays, castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
  });
  var intersection$1 = intersection;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]';

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
  }

  /** `Object#toString` result references. */
  var dateTag = '[object Date]';

  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }

  /* Node.js helper references. */
  var nodeIsDate = nodeUtil && nodeUtil.isDate;

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  var isDate$2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
  var isDate$3 = isDate$2;

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
    setTag = '[object Set]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag$1(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$2.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /** `Object#toString` result references. */
  var numberTag = '[object Number]';

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN$1(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */
  var kebabCase = createCompounder(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });
  var kebabCase$1 = kebabCase;

  /**
   * The base implementation of `_.lt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`,
   *  else `false`.
   */
  function baseLt(value, other) {
    return value < other;
  }

  /**
   * The opposite of `_.mapValues`; this method creates an object with the
   * same values as `object` and keys generated by running each own enumerable
   * string keyed property of `object` thru `iteratee`. The iteratee is invoked
   * with three arguments: (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 3.8.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapValues
   * @example
   *
   * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
   *   return key + value;
   * });
   * // => { 'a1': 1, 'b2': 2 }
   */
  function mapKeys(object, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee);
    baseForOwn(object, function (value, key, object) {
      baseAssignValue(result, iteratee(value, key, object), value);
    });
    return result;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
      length = array.length;
    while (++index < length) {
      var value = array[index],
        current = iteratee(value);
      if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
        var computed = current,
          result = value;
      }
    }
    return result;
  }

  /**
   * Computes the maximum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => undefined
   */
  function max$1(array) {
    return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
      index = -1,
      length = array.length;
    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge$1 = createAssigner(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  var merge$2 = merge$1;

  /**
   * Computes the minimum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => undefined
   */
  function min$2(array) {
    return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
  }

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last$1(path))];
  }

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit = flatRest(function (object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });
  var omit$1 = omit;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path = castPath(path, object);
    var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;
    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
        newValue = value;
      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
      length = paths.length,
      result = {};
    while (++index < length) {
      var path = paths[index],
        value = baseGet(object, path);
      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }

  /**
   * Creates an object composed of the `object` properties `predicate` returns
   * truthy for. The predicate is invoked with two arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pickBy(object, _.isNumber);
   * // => { 'a': 1, 'c': 3 }
   */
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap(getAllKeysIn(object), function (prop) {
      return [prop];
    });
    predicate = baseIteratee(predicate);
    return basePickBy(object, props, function (value, path) {
      return predicate(value, path[0]);
    });
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor;

  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */
  function baseRepeat(string, n) {
    var result = '';
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    }
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
      if (n % 2) {
        result += string;
      }
      n = nativeFloor(n / 2);
      if (n) {
        string += string;
      }
    } while (n);
    return result;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ = "\\u200d";

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil;

  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */
  function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : baseToString(chars);
    var charsLength = chars.length;
    if (charsLength < 2) {
      return charsLength ? baseRepeat(chars, length) : chars;
    }
    var result = baseRepeat(chars, nativeCeil$1(length / stringSize(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
  }

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */
  function padStart(string, length, chars) {
    string = toString(string);
    length = toInteger(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick$1 = pick;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * The base implementation of `_.pullAt` without support for individual
   * indexes or capturing the removed elements.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {number[]} indexes The indexes of elements to remove.
   * @returns {Array} Returns `array`.
   */
  function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0,
      lastIndex = length - 1;
    while (length--) {
      var index = indexes[length];
      if (length == lastIndex || index !== previous) {
        var previous = index;
        if (isIndex(index)) {
          splice.call(array, index, 1);
        } else {
          baseUnset(array, index);
        }
      }
    }
    return array;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
    nativeMax = Math.max;

  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange(start, end, step, fromRight) {
    var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */
  function createRange(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      // Ensure the sign of `-0` is preserved.
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
      return baseRange(start, end, step, fromRight);
    };
  }

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  var range = createRange();
  var range$1 = range;

  /**
   * Removes all elements from `array` that `predicate` returns truthy for
   * and returns an array of the removed elements. The predicate is invoked
   * with three arguments: (value, index, array).
   *
   * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
   * to pull elements from an array by value.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [1, 2, 3, 4];
   * var evens = _.remove(array, function(n) {
   *   return n % 2 == 0;
   * });
   *
   * console.log(array);
   * // => [1, 3]
   *
   * console.log(evens);
   * // => [2, 4]
   */
  function remove$1(array, predicate) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1,
      indexes = [],
      length = array.length;
    predicate = baseIteratee(predicate);
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    basePullAt(array, indexes);
    return result;
  }

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */
  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }

  /**
   * Computes the sum of the values in `array`.
   *
   * @static
   * @memberOf _
   * @since 3.4.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {number} Returns the sum.
   * @example
   *
   * _.sum([4, 2, 8, 6]);
   * // => 20
   */
  function sum(array) {
    return array && array.length ? baseSum(array, identity) : 0;
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle$1(func, wait, options) {
    var leading = true,
      trailing = true;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce$1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY) ? noop : function (values) {
    return new Set$1(values);
  };

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer: while (++index < length) {
      var value = array[index],
        computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * This method is like `_.uniq` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * uniqueness is computed. The order of result values is determined by the
   * order they occur in the array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniqBy(array, iteratee) {
    return array && array.length ? baseUniq(array, baseIteratee(iteratee)) : [];
  }

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /**
   * The base implementation of methods like `_.xor`, without support for
   * iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of values.
   */
  function baseXor(arrays, iteratee, comparator) {
    var length = arrays.length;
    if (length < 2) {
      return length ? baseUniq(arrays[0]) : [];
    }
    var index = -1,
      result = Array(length);
    while (++index < length) {
      var array = arrays[index],
        othIndex = -1;
      while (++othIndex < length) {
        if (othIndex != index) {
          result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
        }
      }
    }
    return baseUniq(baseFlatten(result, 1), iteratee, comparator);
  }

  /**
   * This method is like `_.xor` except that it accepts `comparator` which is
   * invoked to compare elements of `arrays`. The order of result values is
   * determined by the order they occur in the arrays. The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
   * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.xorWith(objects, others, _.isEqual);
   * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
   */
  var xorWith = baseRest(function (arrays) {
    var comparator = last$1(arrays);
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
  });
  var xorWith$1 = xorWith;

  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray$7(r, e) || _nonIterableRest();
  }

  function useIcon() {
    var instance = Vue.getCurrentInstance();
    return function renderIconTNode(iconType, defaultIcons) {
      var iconContent;
      if (isFunction(instance.props[iconType])) {
        iconContent = instance.props[iconType](Vue.h);
      } else if (instance.slots[iconType]) {
        iconContent = instance.slots[iconType] && instance.slots[iconType](null)[0];
      } else if (defaultIcons) {
        var Component = defaultIcons[instance.props.theme];
        iconContent = Vue.createVNode(Component, null, null);
      }
      return iconContent;
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  // Generated by CoffeeScript 1.12.2
  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);
  var performanceNowExports = performanceNow.exports;

  var now = performanceNowExports,
    root = typeof window === 'undefined' ? commonjsGlobal : window,
    vendors = ['moz', 'webkit'],
    suffix = 'AnimationFrame',
    raf = root['request' + suffix],
    caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root[vendors[i] + 'Request' + suffix];
    caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];
  }

  // Some versions of FF have rAF but not cAF
  if (!raf || !caf) {
    var last = 0,
      id = 0,
      queue = [],
      frameDuration = 1000 / 60;
    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now(),
          next = Math.max(0, frameDuration - (_now - last));
        last = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0);
          // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue
          queue.length = 0;
          var _loop = function _loop() {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          };
          for (var i = 0; i < cp.length; i++) {
            _loop();
          }
        }, Math.round(next));
      }
      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };
    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }
  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root, fn);
  };
  raf$2.exports.cancel = function () {
    caf.apply(root, arguments);
  };
  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root;
    }
    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  var rafExports = raf$2.exports;
  var raf$1 = /*@__PURE__*/getDefaultExportFromCjs(rafExports);

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);
    if (time < 1) {
      return change * time * time * time + start;
    }
    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var isServer$1 = typeof window === "undefined";
  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };
  var on$1 = function () {
    if (!isServer$1 && document.addEventListener) {
      return function (element, event, handler, options) {
        if (element && event && handler) {
          element.addEventListener(event, handler, options);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
      }
    };
  }();
  var off$1 = function () {
    if (!isServer$1 && document.removeEventListener) {
      return function (element, event, handler, options) {
        if (element && event) {
          element.removeEventListener(event, handler, options);
        }
      };
    }
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function once(element, event, handler, options) {
    var handlerFn = isFunction(handler) ? handler : handler.handleEvent;
    var _callback = function callback(evt) {
      handlerFn(evt);
      off$1(element, event, _callback, options);
    };
    on$1(element, event, _callback, options);
  }
  function hasClass(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
    if (el.classList) {
      return el.classList.contains(cls);
    }
    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }
    if (!el.classList) {
      el.className = curClass;
    }
  }
  function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;
      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }
    if (!el.classList) {
      el.className = trim(curClass);
    }
  }
  var getAttach = function getAttach(node, triggerNode) {
    var attachNode = isFunction(node) ? node(triggerNode) : node;
    if (!attachNode) {
      return document.body;
    }
    if (isString(attachNode)) {
      return document.querySelector(attachNode);
    }
    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }
    return document.body;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";
    if (isString(container)) {
      return document.querySelector(container);
    }
    if (isFunction(container)) {
      return container();
    }
    return container;
  };
  function isWindow(obj) {
    return obj && obj === obj.window;
  }
  function getScroll(target, isLeft) {
    if (isServer$1 || !target) {
      return 0;
    }
    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;
    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }
    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
      container = _opt$container === void 0 ? window : _opt$container,
      _opt$duration = opt.duration,
      duration = _opt$duration === void 0 ? 450 : _opt$duration,
      _opt$easing = opt.easing,
      easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var _fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);
        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }
        if (time < duration) {
          raf$1(_fnc);
        } else {
          raf$1(res);
        }
      };
      raf$1(_fnc);
    });
  }
  var isTextEllipsis = function isTextEllipsis(ele) {
    var _ele$clientWidth = ele.clientWidth,
      clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
      _ele$scrollWidth = ele.scrollWidth,
      scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
    return scrollWidth > clientWidth;
  };
  var requestSubmit = function requestSubmit(target) {
    if (!(target instanceof HTMLFormElement)) {
      throw new Error("target must be HTMLFormElement");
    }
    var submitter = document.createElement("input");
    submitter.type = "submit";
    submitter.hidden = true;
    target.appendChild(submitter);
    submitter.click();
    target.removeChild(submitter);
  };
  function elementInViewport(elm, parent) {
    var rect = elm.getBoundingClientRect();
    if (parent) {
      var parentRect = parent.getBoundingClientRect();
      return rect.top >= parentRect.top && rect.left >= parentRect.left && rect.bottom <= parentRect.bottom && rect.right <= parentRect.right;
    }
    return rect.top >= 0 && rect.left >= 0 && rect.bottom + 80 <= window.innerHeight && rect.right <= window.innerWidth;
  }
  function getElmCssPropValue(element, propName) {
    var propValue = "";
    if (document.defaultView && document.defaultView.getComputedStyle) {
      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);
    }
    if (propValue && propValue.toLowerCase) {
      return propValue.toLowerCase();
    }
    return propValue;
  }
  function isFixed(element) {
    var p = element.parentNode;
    if (!p || p.nodeName === "HTML") {
      return false;
    }
    if (getElmCssPropValue(element, "position") === "fixed") {
      return true;
    }
    return isFixed(p);
  }
  function getWindowScroll$1() {
    var _document = document,
      body = _document.body;
    var docElm = document.documentElement;
    var scrollTop = window.pageYOffset || docElm.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docElm.scrollLeft || body.scrollLeft;
    return {
      scrollTop: scrollTop,
      scrollLeft: scrollLeft
    };
  }
  function getWindowSize() {
    if (window.innerWidth !== void 0) {
      return {
        width: window.innerWidth,
        height: window.innerHeight
      };
    }
    var doc = document.documentElement;
    return {
      width: doc.clientWidth,
      height: doc.clientHeight
    };
  }
  var isCommentVNode = function isCommentVNode(node) {
    return Vue.isVNode(node) && node.type === Vue.Comment;
  };

  function withInstall$1(comp, alias, directive) {
    var componentPlugin = comp;
    componentPlugin.install = function (app, name) {
      app.component(alias || name || componentPlugin.name, comp);
      directive && app.directive(directive.name, directive.comp);
    };
    return componentPlugin;
  }

  function getDefaultNode(options) {
    var defaultNode;
    if (isObject(options) && "defaultNode" in options) {
      defaultNode = options.defaultNode;
    } else if (Vue.isVNode(options) || isString(options)) {
      defaultNode = options;
    }
    return defaultNode;
  }
  function getChildren(content) {
    var childList = [];
    var _innerGetChildren = function innerGetChildren(content2) {
      if (!isArray$1(content2)) return;
      content2.forEach(function (item) {
        if (item.children && isArray$1(item.children)) {
          if (item.type !== Vue.Fragment) return;
          _innerGetChildren(item.children);
        } else {
          childList.push(item);
        }
      });
      return childList;
    };
    return _innerGetChildren(content);
  }
  function getParams(options) {
    return isObject(options) && "params" in options ? options.params : {};
  }
  function getSlotFirst(options) {
    return isObject(options) && "slotFirst" in options ? options.slotFirst : false;
  }

  function useChildComponentSlots() {
    var instance = Vue.getCurrentInstance();
    return function (childComponentName, slots) {
      var _slots, _slots$default;
      if (!slots) {
        slots = instance.slots;
      }
      var content = ((_slots = slots) === null || _slots === void 0 || (_slots$default = _slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(_slots)) || [];
      return getChildren(content).filter(function (item) {
        var _item$type$name;
        return (_item$type$name = item.type.name) === null || _item$type$name === void 0 ? void 0 : _item$type$name.endsWith(childComponentName);
      });
    };
  }
  function useChildSlots() {
    var instance = Vue.getCurrentInstance();
    return function () {
      var _slots$default2;
      var slots = instance.slots;
      var content = (slots === null || slots === void 0 || (_slots$default2 = slots["default"]) === null || _slots$default2 === void 0 ? void 0 : _slots$default2.call(slots)) || [];
      return content.filter(function (item) {
        if (_typeof$3(item.type) === "symbol" && !item.children) {
          return false;
        }
        return item.type !== Vue.Comment;
      }).map(function (item) {
        if (item.children && isArray$1(item.children) && item.type === Vue.Fragment) return item.children;
        return item;
      }).flat();
    };
  }
  function useFlatChildrenSlots() {
    function getFlatChildren(children) {
      var result = [];
      children.forEach(function (child) {
        if (Vue.isVNode(child) && child.type === Vue.Fragment && Array.isArray(child.children)) {
          result.push.apply(result, _toConsumableArray(getFlatChildren(child.children)));
        } else if (Vue.isVNode(child) && [Vue.Teleport, Vue.Comment].some(function (vNode) {
          return vNode === child.type;
        })) ; else {
          result.push(child);
        }
      });
      return result;
    }
    return getFlatChildren;
  }

  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var hasOwn = function hasOwn(val, key) {
    return hasOwnProperty$1.call(val, key);
  };
  var getPropertyValFromObj = function getPropertyValFromObj(val, key) {
    return hasOwn(val, key) ? val[key] : void 0;
  };

  function handleSlots(instance, name, params) {
    var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;
    var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase$1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
    if (node && node.filter(function (t) {
      return !isCommentVNode(t);
    }).length) return node;
    node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase$1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
    if (node && node.filter(function (t) {
      return !isCommentVNode(t);
    }).length) return node;
    return null;
  }
  function isEmptyNode(node) {
    if ([void 0, null, ""].includes(node)) return true;
    var innerNodes = node instanceof Array ? node : [node];
    var r = innerNodes.filter(function (node2) {
      var _node2$type;
      return (node2 === null || node2 === void 0 || (_node2$type = node2.type) === null || _node2$type === void 0 ? void 0 : _node2$type.toString()) !== "Symbol(Comment)";
    });
    return !r.length;
  }
  function isPropExplicitlySet(instance, propName) {
    var vProps = (instance === null || instance === void 0 ? void 0 : instance.vnode.props) || {};
    return hasOwn(vProps, camelCase$1(propName)) || hasOwn(vProps, kebabCase$1(propName));
  }
  var useTNodeJSX = function useTNodeJSX() {
    var instance = Vue.getCurrentInstance();
    return function (name, options) {
      var renderParams = getParams(options);
      var defaultNode = getDefaultNode(options);
      var isSlotFirst = getSlotFirst(options);
      var renderSlot = instance.slots[camelCase$1(name)] || instance.slots[kebabCase$1(name)];
      if (isSlotFirst && renderSlot) {
        return handleSlots(instance, name, renderParams);
      } else {
        if (isPropExplicitlySet(instance, name)) {
          var _instance$type$props$;
          var propsNode2 = instance.props[camelCase$1(name)] || instance.props[kebabCase$1(name)];
          var types = (_instance$type$props$ = instance.type.props[name]) === null || _instance$type$props$ === void 0 ? void 0 : _instance$type$props$.type;
          if ((types === null || types === void 0 ? void 0 : types.length) > 1) {
            if (types.includes(Boolean) && types.includes(Function)) {
              if (propsNode2 === "" && !renderSlot) return defaultNode;
            }
          }
          if (propsNode2 === false || propsNode2 === null) return;
          if (propsNode2 === true) {
            return handleSlots(instance, name, renderParams) || defaultNode;
          }
          if (isFunction(propsNode2)) return propsNode2(Vue.h, renderParams);
          var isPropsEmpty = [void 0, ""].includes(propsNode2);
          if (isPropsEmpty && renderSlot) {
            return handleSlots(instance, name, renderParams);
          }
          return propsNode2;
        }
        if (renderSlot) {
          return handleSlots(instance, name, renderParams);
        }
        var propsNode = instance.props[camelCase$1(name)] || instance.props[kebabCase$1(name)];
        if (propsNode === false || propsNode === null) return;
        if (propsNode === true) {
          return defaultNode;
        }
        if (isFunction(propsNode)) return propsNode(Vue.h, renderParams);
        return propsNode;
      }
    };
  };
  var useTNodeDefault = function useTNodeDefault() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name, options) {
      var defaultNode = getDefaultNode(options);
      return renderTNodeJSX(name, options) || defaultNode;
    };
  };
  var useContent = function useContent() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name1, name2, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var toParams = params ? {
        params: params
      } : void 0;
      var node1 = renderTNodeJSX(name1, toParams);
      var node2 = renderTNodeJSX(name2, toParams);
      var res = isEmptyNode(node1) ? node2 : node1;
      return isEmptyNode(res) ? defaultNode : res;
    };
  };
  var filterCommentNode = function filterCommentNode(nodes) {
    return nodes.filter(function (node) {
      return !isCommentVNode(node);
    });
  };

  function useCollapseAnimation() {
    var beforeEnter = function beforeEnter(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.style.height = "0";
      el.style.paddingTop = "0";
      el.style.paddingBottom = "0";
    };
    var enter = function enter(el) {
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
      el.style.overflow = "hidden";
    };
    var afterEnter = function afterEnter(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
    };
    var beforeLeave = function beforeLeave(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.overflow = "hidden";
    };
    var leave = function leave(el) {
      if (el.scrollHeight !== 0) {
        el.style.height = "0";
        el.style.paddingTop = "0";
        el.style.paddingBottom = "0";
      }
    };
    var afterLeave = function afterLeave(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };
    return {
      beforeEnter: beforeEnter,
      enter: enter,
      afterEnter: afterEnter,
      beforeLeave: beforeLeave,
      leave: leave,
      afterLeave: afterLeave
    };
  }

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    attach: null,
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    icon: {},
    input: {
      autocomplete: ""
    },
    dialog: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    message: {},
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false,
      size: "medium"
    },
    select: {
      clearIcon: void 0,
      filterable: false
    },
    drawer: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      size: "small"
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      checkIcon: void 0,
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: void 0
    },
    empty: {
      titleText: {
        maintenance: void 0,
        success: void 0,
        fail: void 0,
        empty: void 0,
        networkError: void 0
      },
      image: {
        maintenance: void 0,
        success: void 0,
        fail: void 0,
        empty: void 0,
        networkError: void 0
      }
    }
  };

  var zhCn = {exports: {}};

  var dayjs_min = {exports: {}};

  dayjs_min.exports;
  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
        e = 6e4,
        n = 36e5,
        r = "millisecond",
        i = "second",
        s = "minute",
        u = "hour",
        a = "day",
        o = "week",
        c = "month",
        f = "quarter",
        h = "year",
        d = "date",
        l = "Invalid Date",
        $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
        y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        M = {
          name: "en",
          weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
          months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
          ordinal: function ordinal(t) {
            var e = ["th", "st", "nd", "rd"],
              n = t % 100;
            return "[" + t + (e[(n - 20) % 10] || e[n] || e[0]) + "]";
          }
        },
        m = function m(t, e, n) {
          var r = String(t);
          return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
        },
        v = {
          s: m,
          z: function z(t) {
            var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
            return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
          },
          m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, c),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), c);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
          },
          a: function a(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
          },
          p: function p(t) {
            return {
              M: c,
              y: h,
              w: o,
              d: a,
              D: d,
              h: u,
              m: s,
              s: i,
              ms: r,
              Q: f
            }[t] || String(t || "").toLowerCase().replace(/s$/, "");
          },
          u: function u(t) {
            return void 0 === t;
          }
        },
        g = "en",
        D = {};
      D[g] = M;
      var p = "$isDayjsObject",
        S = function S(t) {
          return t instanceof _ || !(!t || !t[p]);
        },
        w = function t(e, n, r) {
          var i;
          if (!e) return g;
          if ("string" == typeof e) {
            var s = e.toLowerCase();
            D[s] && (i = s), n && (D[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
          } else {
            var a = e.name;
            D[a] = e, i = a;
          }
          return !r && i && (g = i), i || !r && g;
        },
        O = function O(t, e) {
          if (S(t)) return t.clone();
          var n = "object" == _typeof$3(e) ? e : {};
          return n.date = t, n.args = arguments, new _(n);
        },
        b = v;
      b.l = w, b.i = S, b.w = function (t, e) {
        return O(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };
      var _ = function () {
          function M(t) {
            this.$L = w(t.locale, null, !0), this.parse(t), this.$x = this.$x || t.x || {}, this[p] = !0;
          }
          var m = M.prototype;
          return m.parse = function (t) {
            this.$d = function (t) {
              var e = t.date,
                n = t.utc;
              if (null === e) return new Date(NaN);
              if (b.u(e)) return new Date();
              if (e instanceof Date) return new Date(e);
              if ("string" == typeof e && !/Z$/i.test(e)) {
                var r = e.match($);
                if (r) {
                  var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                  return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                }
              }
              return new Date(e);
            }(t), this.init();
          }, m.init = function () {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
          }, m.$utils = function () {
            return b;
          }, m.isValid = function () {
            return !(this.$d.toString() === l);
          }, m.isSame = function (t, e) {
            var n = O(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
          }, m.isAfter = function (t, e) {
            return O(t) < this.startOf(e);
          }, m.isBefore = function (t, e) {
            return this.endOf(e) < O(t);
          }, m.$g = function (t, e, n) {
            return b.u(t) ? this[e] : this.set(n, t);
          }, m.unix = function () {
            return Math.floor(this.valueOf() / 1e3);
          }, m.valueOf = function () {
            return this.$d.getTime();
          }, m.startOf = function (t, e) {
            var n = this,
              r = !!b.u(e) || e,
              f = b.p(t),
              l = function l(t, e) {
                var i = b.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a);
              },
              $ = function $(t, e) {
                return b.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
              },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              v = "set" + (this.$u ? "UTC" : "");
            switch (f) {
              case h:
                return r ? l(1, 0) : l(31, 11);
              case c:
                return r ? l(1, M) : l(0, M + 1);
              case o:
                var g = this.$locale().weekStart || 0,
                  D = (y < g ? y + 7 : y) - g;
                return l(r ? m - D : m + (6 - D), M);
              case a:
              case d:
                return $(v + "Hours", 0);
              case u:
                return $(v + "Minutes", 1);
              case s:
                return $(v + "Seconds", 2);
              case i:
                return $(v + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m.endOf = function (t) {
            return this.startOf(t, !1);
          }, m.$set = function (t, e) {
            var n,
              o = b.p(t),
              f = "set" + (this.$u ? "UTC" : ""),
              l = (n = {}, n[a] = f + "Date", n[d] = f + "Date", n[c] = f + "Month", n[h] = f + "FullYear", n[u] = f + "Hours", n[s] = f + "Minutes", n[i] = f + "Seconds", n[r] = f + "Milliseconds", n)[o],
              $ = o === a ? this.$D + (e - this.$W) : e;
            if (o === c || o === h) {
              var y = this.clone().set(d, 1);
              y.$d[l]($), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
            } else l && this.$d[l]($);
            return this.init(), this;
          }, m.set = function (t, e) {
            return this.clone().$set(t, e);
          }, m.get = function (t) {
            return this[b.p(t)]();
          }, m.add = function (r, f) {
            var d,
              l = this;
            r = Number(r);
            var $ = b.p(f),
              y = function y(t) {
                var e = O(l);
                return b.w(e.date(e.date() + Math.round(t * r)), l);
              };
            if ($ === c) return this.set(c, this.$M + r);
            if ($ === h) return this.set(h, this.$y + r);
            if ($ === a) return y(1);
            if ($ === o) return y(7);
            var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[$] || 1,
              m = this.$d.getTime() + r * M;
            return b.w(m, this);
          }, m.subtract = function (t, e) {
            return this.add(-1 * t, e);
          }, m.format = function (t) {
            var e = this,
              n = this.$locale();
            if (!this.isValid()) return n.invalidDate || l;
            var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = b.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              c = n.months,
              f = n.meridiem,
              h = function h(t, n, i, s) {
                return t && (t[n] || t(e, r)) || i[n].slice(0, s);
              },
              d = function d(t) {
                return b.s(s % 12 || 12, t, "0");
              },
              $ = f || function (t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
              };
            return r.replace(y, function (t, r) {
              return r || function (t) {
                switch (t) {
                  case "YY":
                    return String(e.$y).slice(-2);
                  case "YYYY":
                    return b.s(e.$y, 4, "0");
                  case "M":
                    return a + 1;
                  case "MM":
                    return b.s(a + 1, 2, "0");
                  case "MMM":
                    return h(n.monthsShort, a, c, 3);
                  case "MMMM":
                    return h(c, a);
                  case "D":
                    return e.$D;
                  case "DD":
                    return b.s(e.$D, 2, "0");
                  case "d":
                    return String(e.$W);
                  case "dd":
                    return h(n.weekdaysMin, e.$W, o, 2);
                  case "ddd":
                    return h(n.weekdaysShort, e.$W, o, 3);
                  case "dddd":
                    return o[e.$W];
                  case "H":
                    return String(s);
                  case "HH":
                    return b.s(s, 2, "0");
                  case "h":
                    return d(1);
                  case "hh":
                    return d(2);
                  case "a":
                    return $(s, u, !0);
                  case "A":
                    return $(s, u, !1);
                  case "m":
                    return String(u);
                  case "mm":
                    return b.s(u, 2, "0");
                  case "s":
                    return String(e.$s);
                  case "ss":
                    return b.s(e.$s, 2, "0");
                  case "SSS":
                    return b.s(e.$ms, 3, "0");
                  case "Z":
                    return i;
                }
                return null;
              }(t) || i.replace(":", "");
            });
          }, m.utcOffset = function () {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m.diff = function (r, d, l) {
            var $,
              y = this,
              M = b.p(d),
              m = O(r),
              v = (m.utcOffset() - this.utcOffset()) * e,
              g = this - m,
              D = function D() {
                return b.m(y, m);
              };
            switch (M) {
              case h:
                $ = D() / 12;
                break;
              case c:
                $ = D();
                break;
              case f:
                $ = D() / 3;
                break;
              case o:
                $ = (g - v) / 6048e5;
                break;
              case a:
                $ = (g - v) / 864e5;
                break;
              case u:
                $ = g / n;
                break;
              case s:
                $ = g / e;
                break;
              case i:
                $ = g / t;
                break;
              default:
                $ = g;
            }
            return l ? $ : b.a($);
          }, m.daysInMonth = function () {
            return this.endOf(c).$D;
          }, m.$locale = function () {
            return D[this.$L];
          }, m.locale = function (t, e) {
            if (!t) return this.$L;
            var n = this.clone(),
              r = w(t, e, !0);
            return r && (n.$L = r), n;
          }, m.clone = function () {
            return b.w(this.$d, this);
          }, m.toDate = function () {
            return new Date(this.valueOf());
          }, m.toJSON = function () {
            return this.isValid() ? this.toISOString() : null;
          }, m.toISOString = function () {
            return this.$d.toISOString();
          }, m.toString = function () {
            return this.$d.toUTCString();
          }, M;
        }(),
        k = _.prototype;
      return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function (t) {
        k[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), O.extend = function (t, e) {
        return t.$i || (t(e, _, O), t.$i = !0), O;
      }, O.locale = w, O.isDayjs = S, O.unix = function (t) {
        return O(1e3 * t);
      }, O.en = D[g], O.Ls = D, O.p = {}, O;
    });
  })(dayjs_min, dayjs_min.exports);
  var dayjs_minExports = dayjs_min.exports;
  var dayjs = /*@__PURE__*/getDefaultExportFromCjs(dayjs_minExports);

  zhCn.exports;
  (function (module, exports) {
    !function (e, _) {
      module.exports = _(dayjs_minExports) ;
    }(commonjsGlobal, function (e) {

      function _(e) {
        return e && "object" == _typeof$3(e) && "default" in e ? e : {
          "default": e
        };
      }
      var t = _(e),
        d = {
          name: "zh-cn",
          weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
          weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
          weekdaysMin: "日_一_二_三_四_五_六".split("_"),
          months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
          monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
          ordinal: function ordinal(e, _) {
            return "W" === _ ? e + "周" : e + "日";
          },
          weekStart: 1,
          yearStart: 4,
          formats: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY/MM/DD",
            LL: "YYYY年M月D日",
            LLL: "YYYY年M月D日Ah点mm分",
            LLLL: "YYYY年M月D日ddddAh点mm分",
            l: "YYYY/M/D",
            ll: "YYYY年M月D日",
            lll: "YYYY年M月D日 HH:mm",
            llll: "YYYY年M月D日dddd HH:mm"
          },
          relativeTime: {
            future: "%s内",
            past: "%s前",
            s: "几秒",
            m: "1 分钟",
            mm: "%d 分钟",
            h: "1 小时",
            hh: "%d 小时",
            d: "1 天",
            dd: "%d 天",
            M: "1 个月",
            MM: "%d 个月",
            y: "1 年",
            yy: "%d 年"
          },
          meridiem: function meridiem(e, _) {
            var t = 100 * e + _;
            return t < 600 ? "凌晨" : t < 900 ? "早上" : t < 1100 ? "上午" : t < 1300 ? "中午" : t < 1800 ? "下午" : "晚上";
          }
        };
      return t["default"].locale(d, null, !0), d;
    });
  })(zhCn, zhCn.exports);
  zhCn.exports;

  var defaultZhLocale = {
    autoComplete: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {count} \u6761\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "1 \u6708,2 \u6708,3 \u6708,4 \u6708,5 \u6708,6 \u6708,7 \u6708,8 \u6708,9 \u6708,10 \u6708,11 \u6708,12 \u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      dayjsLocale: "zh-cn",
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      dayjsLocale: "zh-cn",
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD",
        quarter: "\u8BF7\u9009\u62E9\u5B63\u5EA6",
        week: "\u8BF7\u9009\u62E9\u5468"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      quarters: ["\u4E00\u5B63\u5EA6", "\u4E8C\u5B63\u5EA6", "\u4E09\u5B63\u5EA6", "\u56DB\u5B63\u5EA6"],
      rangeSeparator: " - ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u9009\u62E9",
        continueUpload: "\u7EE7\u7EED\u9009\u62E9",
        "delete": "\u5220\u9664",
        uploading: "\u4E0A\u4F20\u4E2D"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        whitespace: "${name}\u4E0D\u80FD\u4E3A\u7A7A",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      },
      colonText: "\uFF1A"
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F",
      singleColor: "\u5355\u8272",
      gradientColor: "\u6E10\u53D8"
    },
    guide: {
      finishButtonProps: {
        content: "\u5B8C\u6210",
        theme: "primary"
      },
      nextButtonProps: {
        content: "\u4E0B\u4E00\u6B65",
        theme: "primary"
      },
      skipButtonProps: {
        content: "\u8DF3\u8FC7",
        theme: "default"
      },
      prevButtonProps: {
        content: "\u4E0A\u4E00\u6B65",
        theme: "default"
      }
    },
    image: {
      errorText: "\u56FE\u7247\u65E0\u6CD5\u663E\u793A",
      loadingText: "\u56FE\u7247\u52A0\u8F7D\u4E2D"
    },
    imageViewer: {
      errorText: "\u56FE\u7247\u52A0\u8F7D\u5931\u8D25\uFF0C\u53EF\u5C1D\u8BD5\u91CD\u65B0\u52A0\u8F7D",
      mirrorTipText: "\u955C\u50CF",
      rotateTipText: "\u65CB\u8F6C",
      originalSizeTipText: "\u539F\u59CB\u5927\u5C0F"
    },
    typography: {
      expandText: "\u5C55\u5F00",
      collapseText: "\u6536\u8D77",
      copiedText: "\u590D\u5236\u6210\u529F"
    },
    rate: {
      rateText: ["\u6781\u5DEE", "\u5931\u671B", "\u4E00\u822C", "\u6EE1\u610F", "\u60CA\u559C"]
    },
    empty: {
      titleText: {
        maintenance: "\u5EFA\u8BBE\u4E2D",
        success: "\u6210\u529F",
        fail: "\u5931\u8D25",
        empty: "\u6682\u65E0\u6570\u636E",
        networkError: "\u7F51\u7EDC\u9519\u8BEF"
      }
    },
    descriptions: {
      colonText: "\uFF1A"
    },
    chat: {
      placeholder: "\u8BF7\u8F93\u5165\u6D88\u606F...",
      stopBtnText: "\u4E2D\u6B62",
      refreshTipText: "\u91CD\u65B0\u751F\u6210",
      copyTipText: "\u590D\u5236",
      likeTipText: "\u70B9\u8D5E",
      dislikeTipText: "\u70B9\u8E29",
      copyCodeBtnText: "\u590D\u5236\u4EE3\u7801",
      copyCodeSuccessText: "\u5DF2\u590D\u5236",
      clearHistoryBtnText: "\u6E05\u7A7A\u5386\u53F2\u8BB0\u5F55",
      copyTextSuccess: "\u5DF2\u6210\u529F\u590D\u5236\u5230\u526A\u8D34\u677F",
      copyTextFail: "\u590D\u5236\u5230\u526A\u8D34\u677F\u5931\u8D25",
      confirmClearHistory: "\u786E\u5B9A\u8981\u6E05\u7A7A\u6240\u6709\u7684\u6D88\u606F\u5417\uFF1F",
      loadingText: "\u601D\u8003\u4E2D...",
      loadingEndText: "\u5DF2\u6DF1\u5EA6\u601D\u8003",
      uploadImageText: "\u4E0A\u4F20\u56FE\u7247",
      uploadAttachmentText: "\u4E0A\u4F20\u9644\u4EF6"
    },
    qrcode: {
      expiredText: "\u4E8C\u7EF4\u7801\u8FC7\u671F",
      refreshText: "\u70B9\u51FB\u5237\u65B0",
      scannedText: "\u5DF2\u626B\u63CF"
    }
  };

  var EAnimationType = /* @__PURE__ */function (EAnimationType2) {
    EAnimationType2["ripple"] = "ripple";
    EAnimationType2["expand"] = "expand";
    EAnimationType2["fade"] = "fade";
    return EAnimationType2;
  }(EAnimationType || {});
  var defaultGlobalConfig = merge$2(defaultConfig, defaultZhLocale);
  var configProviderInjectKey = Symbol("configProvide");
  var mergeWith = function mergeWith(defaultGlobalConfig2, injectConfig) {
    return _mergeWith(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
      if (isArray$1(objValue)) {
        return srcValue;
      }
    });
  };

  function getPluralIndex(count) {
    if (count === 0) return 0;
    if (count === 1) return 1;
    return 2;
  }
  function t(pattern) {
    if (isString(pattern)) {
      var text = pattern;
      var count;
      var data = {};
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (args.length > 0) {
        var firstArg = args[0],
          secondArg = args[1];
        if (typeof firstArg === "number") {
          count = firstArg;
          if (secondArg && _typeof$3(secondArg) === "object") {
            data = secondArg;
          } else {
            data.count = count;
          }
        } else if (_typeof$3(firstArg) === "object" && firstArg !== null) {
          data = firstArg;
        }
      }
      if (text.includes("|")) {
        var pluralParts = text.split("|").map(function (part) {
          return part.trim();
        });
        if (typeof count === "number") {
          var pluralIndex = getPluralIndex(count);
          if (pluralIndex < pluralParts.length) {
            text = pluralParts[pluralIndex];
          } else {
            text = pluralParts[pluralParts.length - 1];
          }
        } else {
          var _pluralParts = _slicedToArray(pluralParts, 1),
            firstPart = _pluralParts[0];
          text = firstPart;
        }
      }
      if (data && Object.keys(data).length > 0) {
        var regular = /\{\s*([\w-]+)\s*\}/g;
        text = text.replace(regular, function (match, key) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            return String(data[key]);
          }
          return match;
        });
      }
      return text;
    }
    return "";
  }

  var globalConfigCopy = Vue.ref();
  function useConfig() {
    var componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;
    var componentLocale = arguments.length > 1 ? arguments[1] : undefined;
    var injectGlobalConfig = Vue.getCurrentInstance() ? Vue.inject(configProviderInjectKey, null) : globalConfigCopy;
    var mergedGlobalConfig = Vue.computed(function () {
      return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || defaultGlobalConfig;
    });
    var globalConfig = Vue.computed(function () {
      return Object.assign({}, mergedGlobalConfig.value[componentName], componentLocale);
    });
    var classPrefix = Vue.computed(function () {
      return mergedGlobalConfig.value.classPrefix;
    });
    var t$1 = function t$1(pattern) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (isFunction(pattern)) {
        if (!args.length) return pattern(Vue.h);
        return pattern.apply(void 0, args);
      }
      return t.apply(void 0, [pattern].concat(args));
    };
    return {
      t: t$1,
      global: globalConfig,
      globalConfig: globalConfig,
      classPrefix: classPrefix
    };
  }
  var provideConfig = function provideConfig(props) {
    var defaultData = cloneDeep(defaultGlobalConfig);
    var mergedGlobalConfig = Vue.computed(function () {
      return Object.assign({}, mergeWith(defaultData, props.globalConfig));
    });
    Vue.provide(configProviderInjectKey, mergedGlobalConfig);
    if (!globalConfigCopy.value) {
      globalConfigCopy.value = mergedGlobalConfig.value;
    }
    return mergedGlobalConfig;
  };

  function usePrefixClass(componentName) {
    var _useConfig = useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;
    return Vue.computed(function () {
      return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
    });
  }

  function useCommonClassName$1() {
    var _useConfig = useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;
    return {
      classPrefix: classPrefix,
      SIZE: Vue.computed(function () {
        return {
          small: "".concat(classPrefix.value, "-size-s"),
          medium: "".concat(classPrefix.value, "-size-m"),
          large: "".concat(classPrefix.value, "-size-l"),
          "default": "",
          xs: "".concat(classPrefix.value, "-size-xs"),
          xl: "".concat(classPrefix.value, "-size-xl"),
          block: "".concat(classPrefix.value, "-size-full-width")
        };
      }),
      STATUS: Vue.computed(function () {
        return {
          loading: "".concat(classPrefix.value, "-is-loading"),
          loadMore: "".concat(classPrefix.value, "-is-load-more"),
          disabled: "".concat(classPrefix.value, "-is-disabled"),
          focused: "".concat(classPrefix.value, "-is-focused"),
          success: "".concat(classPrefix.value, "-is-success"),
          error: "".concat(classPrefix.value, "-is-error"),
          warning: "".concat(classPrefix.value, "-is-warning"),
          selected: "".concat(classPrefix.value, "-is-selected"),
          active: "".concat(classPrefix.value, "-is-active"),
          checked: "".concat(classPrefix.value, "-is-checked"),
          current: "".concat(classPrefix.value, "-is-current"),
          hidden: "".concat(classPrefix.value, "-is-hidden"),
          visible: "".concat(classPrefix.value, "-is-visible"),
          expanded: "".concat(classPrefix.value, "-is-expanded"),
          indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
        };
      })
    };
  }

  function useDefaultValue(value, defaultValue, onChange, propsName) {
    var _getCurrentInstance = Vue.getCurrentInstance(),
      emit = _getCurrentInstance.emit,
      vnode = _getCurrentInstance.vnode;
    var internalValue = Vue.ref();
    var vProps = vnode.props || {};
    var isVMP = Object.prototype.hasOwnProperty.call(vProps, propsName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase$1(propsName));
    if (isVMP) {
      return [value, function (newValue) {
        emit("update:".concat(propsName), newValue);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    internalValue.value = defaultValue;
    return [internalValue, function (newValue) {
      internalValue.value = newValue;
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  var TDisplayNoneElementRefresh = "t-display-none-element-refresh";
  function useDestroyOnClose() {
    var refresh = Vue.ref(0);
    Vue.provide(TDisplayNoneElementRefresh, refresh);
    Vue.onUpdated(function () {
      refresh.value += 1;
    });
  }

  function useDisabled(context) {
    var currentInstance = Vue.getCurrentInstance();
    var componentDisabled = Vue.computed(function () {
      return currentInstance.props.disabled;
    });
    var formDisabled = Vue.inject("formDisabled", /* @__PURE__ */Object.create(null));
    return Vue.computed(function () {
      var _context$beforeDisabl, _context$afterDisable, _formDisabled$disable;
      if (isBoolean(context === null || context === void 0 || (_context$beforeDisabl = context.beforeDisabled) === null || _context$beforeDisabl === void 0 ? void 0 : _context$beforeDisabl.value)) return context.beforeDisabled.value;
      if (isBoolean(componentDisabled.value)) return componentDisabled.value;
      if (isBoolean(context === null || context === void 0 || (_context$afterDisable = context.afterDisabled) === null || _context$afterDisable === void 0 ? void 0 : _context$afterDisable.value)) return context.afterDisabled.value;
      if (isBoolean((_formDisabled$disable = formDisabled.disabled) === null || _formDisabled$disable === void 0 ? void 0 : _formDisabled$disable.value)) return formDisabled.disabled.value;
      return false;
    });
  }

  function _createForOfIteratorHelper$6(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$6(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$6(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$6(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$6(r, a) : void 0; } }
  function _arrayLikeToArray$6(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var traversalTabNavs = function traversalTabNavs(tabNavs, fn) {
    var _iterator = _createForOfIteratorHelper$6(tabNavs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var itemNode = _step.value;
        if (itemNode.getAttribute("draggable")) {
          fn(itemNode);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
  var handleTarget = function handleTarget(target, tabNavs) {
    var resultTarget;
    traversalTabNavs(tabNavs, function (itemNode) {
      if (itemNode.contains(target)) {
        resultTarget = itemNode;
      }
    });
    return resultTarget;
  };
  function useDragSort$2(props) {
    var navsWrap = null;
    var dragged;
    var enterTargets = [];
    var dragstart = function dragstart(event) {
      var target = event.target;
      dragged = target;
      target.style.opacity = "0.5";
    };
    var dragend = function dragend(event) {
      event.target.style.opacity = "";
    };
    var dragover = function dragover(event) {
      event.preventDefault();
    };
    var dragenter = function dragenter(event) {
      var target = handleTarget(event.target, navsWrap.children);
      if (target && target !== dragged && target.draggable) {
        target.firstChild.style.outline = "1px dashed #0052d9";
        if (!enterTargets.includes(target)) {
          enterTargets.push(target);
        }
      }
    };
    var dragleave = function dragleave(event) {
      var target = event.target;
      for (var _i = 0, _enterTargets = enterTargets; _i < _enterTargets.length; _i++) {
        var enterTarget = _enterTargets[_i];
        if (!enterTarget.contains(target)) {
          enterTarget.firstChild.style.outline = "none";
        }
      }
    };
    var drop = function drop(event) {
      event.preventDefault();
      traversalTabNavs(navsWrap.children, function (tabNav) {
        tabNav.firstChild.style.outline = "none";
      });
      var target = handleTarget(event.target, navsWrap.children);
      if (target && target.parentNode !== dragged && target.draggable) {
        var _props$onDragSort;
        var dragIndex = [].indexOf.call(navsWrap.children, dragged);
        var targetIndex = [].indexOf.call(navsWrap.children, target);
        if (targetIndex > dragIndex) {
          target = navsWrap.children[targetIndex + 1];
        }
        var currentIndex = props.theme === "card" ? dragIndex : dragIndex - 1;
        var endIndex = props.theme === "card" ? targetIndex : targetIndex - 1;
        (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 || _props$onDragSort.call(props, {
          currentIndex: currentIndex,
          current: props.panels[currentIndex].value,
          targetIndex: endIndex,
          target: props.panels[endIndex].value
        });
      }
    };
    function setNavsWrap(val) {
      navsWrap = val;
      navsWrap.addEventListener("dragstart", dragstart, false);
      navsWrap.addEventListener("dragend", dragend, false);
      navsWrap.addEventListener("dragover", dragover, false);
      navsWrap.addEventListener("dragenter", dragenter, false);
      document.addEventListener("dragleave", dragleave, false);
      document.addEventListener("mousemove", dragleave, false);
      navsWrap.addEventListener("drop", drop, false);
    }
    Vue.onUnmounted(function () {
      if (navsWrap) {
        navsWrap.removeEventListener("dragstart", dragstart);
        navsWrap.removeEventListener("dragend", dragend);
        navsWrap.removeEventListener("dragover", dragover);
        navsWrap.removeEventListener("dragenter", dragenter);
        document.removeEventListener("dragleave", dragleave);
        document.removeEventListener("mousemove", dragleave);
        navsWrap.removeEventListener("drop", drop);
      }
    });
    return {
      setNavsWrap: setNavsWrap
    };
  }

  function observe(element, root, callback, marginBottom) {
    if (typeof window === "undefined") return null;
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }
    var io = null;
    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];
        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }
    return io;
  }

  function useElementLazyRender(labelRef, lazyLoad) {
    var ioObserver = Vue.ref();
    var showElement = Vue.ref(true);
    var handleLazyLoad = function handleLazyLoad() {
      if (!lazyLoad.value || !labelRef.value || ioObserver.value) return;
      showElement.value = false;
      var io = observe(labelRef.value, null, function () {
        showElement.value = true;
      }, 10);
      ioObserver.value = io;
    };
    Vue.onMounted(handleLazyLoad);
    lazyLoad.value && Vue.watch([lazyLoad, labelRef], handleLazyLoad);
    Vue.onBeforeUnmount(function () {
      var _ioObserver$value, _ioObserver$value$uno;
      if (!lazyLoad.value) return;
      (_ioObserver$value = ioObserver.value) === null || _ioObserver$value === void 0 || (_ioObserver$value$uno = _ioObserver$value.unobserve) === null || _ioObserver$value$uno === void 0 || _ioObserver$value$uno.call(_ioObserver$value, labelRef.value);
    });
    return {
      showElement: showElement
    };
  }

  function useGlobalIcon(tdIcon) {
    var _useConfig = useConfig("icon"),
      globalConfig = _useConfig.globalConfig;
    var resultIcon = {};
    Object.keys(tdIcon).forEach(function (key) {
      var _globalConfig$value;
      resultIcon[key] = ((_globalConfig$value = globalConfig.value) === null || _globalConfig$value === void 0 ? void 0 : _globalConfig$value[key]) || tdIcon[key];
    });
    return resultIcon;
  }

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  var IMAGE_REGEXP = /(.png|.jpg|.jpeg|.jpe|.webp|.avif|.svg|.gif|.bmp)/i;
  var IMAGE_ALL_REGEXP = /(.png|.jpg|.jpeg|.jpe|.webp|.avif|.svg|.gif|.bmp|.dwg|.dxf|.svf|.tif|.tiff|.arw)/i;
  var FILE_PDF_REGEXP = /(.pdf)/i;
  var FILE_EXCEL_REGEXP = /(.xlsx|.xls|.csv|.xlc|.xlm|.xlt|.xlw)/i;
  var FILE_WORD_REGEXP = /(.dox|docx|.document|.wps|.wdb|.msword)/i;
  var FILE_PPT_REGEXP = /(.ppt|.pptx|.key)/i;
  var VIDEO_REGEXP = /(.avi|.mp4|.wmv|.mpg|.mpeg|.mov|.rm|.ram|.swf|.flv|.rmvb|.flash|.mid|.3gp)/i;
  var AUDIO_REGEXP = /(.mp2|.mp3|.mp4|.ogg|.3gpp|.ac3|.au)/i;
  var INPUT_FILE_MAP = {
    "audio/*": AUDIO_REGEXP,
    "video/*": VIDEO_REGEXP,
    "image/*": IMAGE_ALL_REGEXP,
    ".jpg": /image\/jpeg|\.jpg$/i,
    ".ico": /image\/vnd.microsoft.icon/i,
    ".doc": /application\/msword/i,
    ".docx": /application\/vnd.openxmlformats-officedocument.wordprocessingml.document/i,
    ".xls": /application\/vnd.ms-excel/i,
    ".xlsx": /application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet/i,
    ".ppt": /application\/vnd.ms-powerpoint/i,
    ".pptx": /application\/vnd.openxmlformats-officedocument.presentationml.presentation/i,
    ".vsd": /application\/vnd.visio/i,
    ".txt": /text\/plain/i,
    ".abw": /application\/x-abiword/i,
    ".avi": /video\/x-msvideo/i,
    ".azw": /application\/vnd.amazon.ebook/i,
    ".bin": /application\/octet-stream/i,
    ".cda": /application\/x-cdf/i,
    ".mpkg": /application\/vnd.apple.installer+xml/i,
    ".odp": /application\/vnd.oasis.opendocument.presentation/i,
    ".ods": /application\/vnd.oasis.opendocument.spreadsheet/i,
    ".odt": /application\/vnd.oasis.opendocument.text/i,
    ".oga": /audio\/ogg/i,
    ".ogv": /video\/ogg/i,
    ".ogx": /application\/ogg/i
  };
  var SIZE_MAP = {
    B: 1,
    KB: 1024,
    MB: 1048576,
    GB: 1073741824
  };
  function returnFileSize(number) {
    if (number < SIZE_MAP.KB) {
      return "".concat(number, " Bytes");
    }
    if (number >= SIZE_MAP.KB && number < SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.KB).toFixed(1), " KB");
    }
    if (number >= SIZE_MAP.MB && number < SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.MB).toFixed(1), " MB");
    }
    if (number >= SIZE_MAP.GB) {
      return "".concat((number / SIZE_MAP.GB).toFixed(1), " GB");
    }
    return "";
  }
  function getCurrentDate() {
    var needTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    var date = "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate());
    var time = "".concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
    if (needTime) return [date, time].join(" ");
    return date;
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;
    if (!name) return "";
    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;
      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightCount && rightLength < rightCount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }
    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function getFileSizeText(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }
    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }
    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
    return "";
  }
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);
    if (index === -1) {
      log.warn("Upload", "`sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }
    var num = SIZE_MAP[unit];
    return fileSize > sizeLimit * num;
  }
  function getFileUrlByFileRaw(fileRaw) {
    return new Promise(function (resolve) {
      if (!fileRaw) {
        resolve("");
        return;
      }
      var reader = new FileReader();
      reader.readAsDataURL(fileRaw);
      reader.onload = function (event) {
        var _event$target;
        resolve((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);
      };
    });
  }
  function validateFileType(accept, fileType, fileName) {
    var tmpFileType = fileType || fileName;
    if (!accept) return true;
    if (!tmpFileType) return false;
    var acceptList = accept.split(",").map(function (v) {
      return v.trim();
    });
    for (var i = 0, len = acceptList.length; i < len; i++) {
      var oneRule = acceptList[i];
      if (INPUT_FILE_MAP[oneRule] && INPUT_FILE_MAP[oneRule].test(tmpFileType)) {
        return true;
      }
      var regExp = new RegExp(oneRule, "i");
      if (regExp.test(tmpFileType)) {
        return true;
      }
    }
    return false;
  }
  function getFileList(files) {
    var accept = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var fileList = [];
    for (var i = 0; i < files.length; i++) {
      if (validateFileType(accept, files[i].type, files[i].name)) {
        fileList.push(files[i]);
      }
    }
    return fileList;
  }

  function useImagePreviewUrl(imgUrl) {
    var previewUrl = Vue.ref("");
    Vue.watch([imgUrl], function (_ref, _ref2) {
      var _ref3 = _slicedToArray(_ref, 1),
        imgUrl2 = _ref3[0];
      var _ref4 = _slicedToArray(_ref2, 1),
        preImgUrl = _ref4[0];
      if (preImgUrl === imgUrl2) return;
      if (typeof imgUrl2 === "string") {
        previewUrl.value = imgUrl2;
        return;
      }
      getFileUrlByFileRaw(imgUrl2).then(function (url) {
        previewUrl.value = url;
      });
    }, {
      immediate: true
    });
    return {
      previewUrl: previewUrl
    };
  }

  var expand = EAnimationType.expand,
    ripple = EAnimationType.ripple,
    fade = EAnimationType.fade;
  function useKeepAnimation() {
    var _useConfig = useConfig("animation"),
      globalConfig = _useConfig.globalConfig;
    var keepAnimation = function keepAnimation(type) {
      var _animationConfig$excl, _animationConfig$incl;
      var animationConfig = globalConfig.value;
      return animationConfig && !((_animationConfig$excl = animationConfig.exclude) !== null && _animationConfig$excl !== void 0 && _animationConfig$excl.includes(type)) && ((_animationConfig$incl = animationConfig.include) === null || _animationConfig$incl === void 0 ? void 0 : _animationConfig$incl.includes(type));
    };
    return {
      keepExpand: keepAnimation(expand),
      keepRipple: keepAnimation(ripple),
      keepFade: keepAnimation(fade)
    };
  }

  function useLazyLoad$1(containerRef, childRef, params) {
    var tRowHeight = Vue.computed(function () {
      return Math.max(params.rowHeight || 48, 48);
    });
    var isInit = Vue.ref(false);
    var hasLazyLoadHolder = Vue.computed(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
    });
    var requestAnimationFrame = !isServer$1 && window.requestAnimationFrame || function (cb) {
      return setTimeout(cb, 16.6);
    };
    var init = function init() {
      if (!isInit.value) {
        requestAnimationFrame(function () {
          isInit.value = true;
        });
      }
    };
    Vue.onMounted(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      Vue.nextTick(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight.value * bufferSize;
        observe(childRef.value, containerRef.value, init, height);
      });
    });
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function useListener(type, listener) {
    Vue.onMounted(function () {
      window.addEventListener(type, listener);
    });
    Vue.onBeforeUnmount(function () {
      window.removeEventListener(type, listener);
    });
  }
  function useResize(listener, observer) {
    useListener("resize", listener);
    var resizeObserver = null;
    Vue.onMounted(function () {
      if (!window.ResizeObserver || !observer) return;
      resizeObserver = new window.ResizeObserver(listener);
      resizeObserver.observe(observer);
    });
    Vue.onBeforeUnmount(function () {
      var _resizeObserver;
      (_resizeObserver = resizeObserver) === null || _resizeObserver === void 0 || _resizeObserver.disconnect();
    });
  }

  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }

  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }

  var popupStackType = ["dialog", "drawer"];
  var POPUP_BASE_Z_INDEX = 1e3;
  var MESSAGE_BASE_Z_INDEX = 5e3;
  var Z_INDEX_STEP = 1;
  var PopupManager = /*#__PURE__*/_createClass(function PopupManager() {
    var _this = this;
    _classCallCheck(this, PopupManager);
    _defineProperty$2(this, "popupStack", {
      popup: /* @__PURE__ */new Set(),
      dialog: /* @__PURE__ */new Set(),
      message: /* @__PURE__ */new Set(),
      drawer: /* @__PURE__ */new Set()
    });
    _defineProperty$2(this, "zIndexStack", []);
    _defineProperty$2(this, "getNextZIndex", function (type) {
      var current = type === "message" ? Array.from(_this.popupStack.message).pop() || MESSAGE_BASE_Z_INDEX : Array.from(_this.popupStack.popup).pop() || POPUP_BASE_Z_INDEX;
      return current + Z_INDEX_STEP;
    });
    _defineProperty$2(this, "add", function (type) {
      var zIndex = _this.getNextZIndex(type);
      _this.popupStack[type].add(zIndex);
      if (popupStackType.includes(type)) {
        _this.popupStack.popup.add(zIndex);
      }
      _this.zIndexStack.push(zIndex);
      return zIndex;
    });
    _defineProperty$2(this, "delete", function (zIndex, type) {
      _this.popupStack[type]["delete"](zIndex);
      if (popupStackType.includes(type)) {
        _this.popupStack.popup["delete"](zIndex);
      }
      var index = _this.zIndexStack.indexOf(zIndex);
      if (index !== -1) {
        _this.zIndexStack.splice(index, 1);
      }
    });
    _defineProperty$2(this, "isTopInteractivePopup", function (popupType, zIndex) {
      var _this$popupStack$popu;
      if (popupStackType.includes(popupType)) {
        var lastZIndex = _this.zIndexStack[_this.zIndexStack.length - 1];
        return zIndex === lastZIndex;
      }
      if (((_this$popupStack$popu = _this.popupStack[popupType]) === null || _this$popupStack$popu === void 0 ? void 0 : _this$popupStack$popu.size) > 1) {
        return zIndex === Array.from(_this.popupStack[popupType]).pop();
      }
      return true;
    });
    _defineProperty$2(this, "getLastZIndex", function () {
      return _this.zIndexStack[_this.zIndexStack.length - 1];
    });
  });
  var popupManager = new PopupManager();
  function usePopupManager(type) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      visible = _ref.visible,
      runOnMounted = _ref.runOnMounted;
    var zIndex = Vue.ref(0);
    var open = function open() {
      zIndex.value = popupManager.add(type);
    };
    var close = function close() {
      popupManager["delete"](zIndex.value, type);
    };
    var isTopInteractivePopup = function isTopInteractivePopup() {
      if (popupStackType.includes(type)) {
        return popupManager.isTopInteractivePopup(type, zIndex.value);
      }
      return false;
    };
    Vue.watch(function () {
      return visible === null || visible === void 0 ? void 0 : visible.value;
    }, function (visible2) {
      if (visible2) {
        open();
      } else {
        close();
      }
    }, {
      immediate: true
    });
    if (runOnMounted) {
      Vue.onMounted(function () {
        open();
      });
      Vue.onBeforeUnmount(function () {
        close();
      });
    }
    return {
      zIndex: Vue.readonly(zIndex),
      open: open,
      close: close,
      isTopInteractivePopup: isTopInteractivePopup
    };
  }

  function useReadonly(context) {
    var currentInstance = Vue.getCurrentInstance();
    var componentReadonly = Vue.computed(function () {
      return currentInstance.props.readonly;
    });
    var formReadonly = Vue.inject("formReadonly", /* @__PURE__ */Object.create(null));
    return Vue.computed(function () {
      var _context$beforeReadon, _context$afterReadonl, _formReadonly$readonl;
      if (isBoolean(context === null || context === void 0 || (_context$beforeReadon = context.beforeReadonly) === null || _context$beforeReadon === void 0 ? void 0 : _context$beforeReadon.value)) return context.beforeReadonly.value;
      if (isBoolean(componentReadonly === null || componentReadonly === void 0 ? void 0 : componentReadonly.value)) return componentReadonly.value;
      if (isBoolean(context === null || context === void 0 || (_context$afterReadonl = context.afterReadonly) === null || _context$afterReadonl === void 0 ? void 0 : _context$afterReadonl.value)) return context.afterReadonly.value;
      if (isBoolean((_formReadonly$readonl = formReadonly.readonly) === null || _formReadonly$readonl === void 0 ? void 0 : _formReadonly$readonl.value)) return formReadonly.readonly.value;
      return false;
    });
  }

  function useResizeObserver(container, callback) {
    if (typeof window === "undefined") return;
    var isSupport = window && window.ResizeObserver;
    if (!isSupport) return;
    var containerObserver = null;
    var cleanupObserver = function cleanupObserver() {
      if (!containerObserver || !container.value) return;
      containerObserver.unobserve(container.value);
      containerObserver.disconnect();
      containerObserver = null;
    };
    var addObserver = function addObserver(el) {
      containerObserver = new ResizeObserver(callback);
      containerObserver.observe(el);
    };
    container && Vue.watch(container, function (el) {
      cleanupObserver();
      el && addObserver(el);
    }, {
      immediate: true,
      flush: "post"
    });
    Vue.onBeforeUnmount(function () {
      cleanupObserver();
    });
  }

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;
    if (fixedRippleColor) {
      return fixedRippleColor;
    }
    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }
    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
    if (cssVariable) {
      return cssVariable;
    }
    return defaultRippleColor;
  };
  function useRipple(el, fixedRippleColor) {
    var rippleContainer = Vue.ref(null);
    var classPrefix = usePrefixClass();
    var _useKeepAnimation = useKeepAnimation(),
      keepRipple = _useKeepAnimation.keepRipple;
    var handleAddRipple = function handleAddRipple(e) {
      var dom = el.value;
      var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
      if (e.button !== 0 || !el || !keepRipple) return;
      if (dom.classList.contains("".concat(classPrefix.value, "-is-active")) || dom.classList.contains("".concat(classPrefix.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix.value, "-is-checked")) || dom.classList.contains("".concat(classPrefix.value, "-is-loading"))) return;
      var elStyle = getComputedStyle(dom);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = dom.offsetWidth;
      var height = dom.offsetHeight;
      if (rippleContainer.value.parentNode === null) {
        setStyle(rippleContainer.value, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        dom.appendChild(rippleContainer.value);
      }
      var ripple = document.createElement("div");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();
      for (var n = dom.children.length, i = 0; i < n; ++i) {
        var child = dom.children[i];
        if (child.style.zIndex === "" && child !== rippleContainer.value) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }
      var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;
      if (initPosition === "" || initPosition === "static") {
        dom.style.position = "relative";
      }
      rippleContainer.value.insertBefore(ripple, rippleContainer.value.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);
      var _handleClearRipple = function handleClearRipple() {
        ripple.style.backgroundColor = noneRippleBg;
        if (!el.value) return;
        el.value.removeEventListener("pointerup", _handleClearRipple, false);
        el.value.removeEventListener("pointerleave", _handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.value.children.length === 0) rippleContainer.value.remove();
        }, period * 2 + 100);
      };
      el.value.addEventListener("pointerup", _handleClearRipple, false);
      el.value.addEventListener("pointerleave", _handleClearRipple, false);
    };
    Vue.onMounted(function () {
      var dom = el === null || el === void 0 ? void 0 : el.value;
      if (!dom) return;
      rippleContainer.value = document.createElement("div");
      dom.addEventListener("pointerdown", handleAddRipple, false);
    });
    Vue.onUnmounted(function () {
      var _el$value;
      el === null || el === void 0 || (_el$value = el.value) === null || _el$value === void 0 || _el$value.removeEventListener("pointerdown", handleAddRipple, false);
    });
  }

  function useTeleport(attach, triggerNode) {
    var to = isFunction(attach) ? Vue.computed(attach) : Vue.ref(attach);
    var innerTriggerNode = isFunction(triggerNode) ? Vue.computed(triggerNode) : Vue.ref(triggerNode);
    var element = Vue.ref();
    var getElement = function getElement() {
      element.value = getAttach(to.value, innerTriggerNode.value);
    };
    Vue.onMounted(function () {
      return getElement();
    });
    Vue.watch([to, innerTriggerNode], function () {
      return getElement();
    });
    return element;
  }

  function useVModel$1(value, modelValue, defaultValue, onChange) {
    var propName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "value";
    var _getCurrentInstance = Vue.getCurrentInstance(),
      emit = _getCurrentInstance.emit,
      vnode = _getCurrentInstance.vnode;
    var internalValue = Vue.ref();
    var vProps = vnode.props || {};
    var isVM = Object.prototype.hasOwnProperty.call(vProps, "modelValue") || Object.prototype.hasOwnProperty.call(vProps, "model-value");
    var isVMP = Object.prototype.hasOwnProperty.call(vProps, propName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase$1(propName));
    if (isVM) {
      return [modelValue, function (newValue) {
        emit("update:modelValue", newValue);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    if (isVMP) {
      return [value, function (newValue) {
        emit("update:".concat(propName), newValue);
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
      }];
    }
    internalValue.value = defaultValue;
    return [internalValue, function (newValue) {
      internalValue.value = newValue;
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$3b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useVirtualScroll(_ref) {
    var data = _ref.data,
      container = _ref.container,
      _ref$fixedHeight = _ref.fixedHeight,
      fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight,
      _ref$lineHeight = _ref.lineHeight,
      lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight,
      _ref$bufferSize = _ref.bufferSize,
      bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize,
      _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
    var state = Vue.reactive({
      visibleData: [],
      cachedHeight: [],
      cachedScrollY: []
    });
    var isVirtual = Vue.computed(function () {
      return data.value.length > threshold;
    });
    var updateId = Vue.ref(0);
    var trs = /* @__PURE__ */new Map();
    var visibleCount = 0;
    var beforeScrollTop = 0;
    var index = 0;
    var offset = 0;
    var start = 0;
    var last = 0;
    var reset = function reset() {
      data.value.forEach(function (item, i) {
        item.$index = i;
        if (fixedHeight) {
          state.cachedScrollY[i] = i * lineHeight;
        }
      });
      if (!fixedHeight) {
        state.cachedScrollY[data.value.length - 1] = void 0;
      }
    };
    reset();
    var scrollHeight = Vue.computed(function () {
      var cachedHeight = state.cachedHeight;
      var length = cachedHeight.length;
      if (length) {
        var maxScrollY = cachedHeight.reduce(function (sum, v) {
          return sum + v || lineHeight;
        }, 0);
        if (cachedHeight.length === data.value.length) {
          return maxScrollY;
        }
        var average = maxScrollY / cachedHeight.length;
        return maxScrollY + (data.value.length - cachedHeight.length) * average;
      }
      return isVirtual.value ? data.value.length * lineHeight : 0;
    });
    var translateY = Vue.computed(function () {
      var visibleData = state.visibleData;
      var firstRow = visibleData[0];
      if (firstRow) {
        return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
      }
      return 0;
    });
    var updateVisibleData = function updateVisibleData() {
      last = Math.min(start + visibleCount + bufferSize * 2, data.value.length);
      state.visibleData = data.value.slice(start, last);
    };
    var calculateScrollY = function calculateScrollY() {
      var _anchorDom$getBoundin;
      var anchorDom = trs.get(index);
      if (!anchorDom) {
        return;
      }
      var anchorDomHeight = anchorDom === null || anchorDom === void 0 || (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
      state.cachedScrollY[index] = container.value.scrollTop - offset;
      state.cachedHeight[index] = anchorDomHeight;
      for (var i = index + 1; i <= ((_state$visibleData = state.visibleData[state.visibleData.length - 1]) === null || _state$visibleData === void 0 ? void 0 : _state$visibleData.$index); i++) {
        var _state$visibleData;
        var tr = trs.get(i);
        var _ref2 = (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect()) || {},
          height = _ref2.height;
        state.cachedHeight[i] = height;
        var scrollY = state.cachedScrollY[i - 1] + state.cachedHeight[i - 1];
        state.cachedScrollY.splice(i, 1, scrollY);
      }
      for (var _i = index - 1; _i >= ((_state$visibleData$ = state.visibleData[0]) === null || _state$visibleData$ === void 0 ? void 0 : _state$visibleData$.$index); _i--) {
        var _state$visibleData$;
        var _tr = trs.get(_i);
        var _ref3 = (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {},
          _height = _ref3.height;
        state.cachedHeight[_i] = _height;
        var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];
        state.cachedScrollY.splice(_i, 1, _scrollY);
      }
      if (state.cachedScrollY[0] > 0) {
        var distance = state.cachedScrollY[0];
        var length = Math.min(last, data.value.length);
        for (var _i2 = 0; _i2 < length; _i2++) {
          state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
        }
        var scrollTop = state.cachedScrollY[index - 1] ? state.cachedScrollY[index - 1] + offset : offset;
        container.value.scrollTop = scrollTop;
        beforeScrollTop = scrollTop;
      }
      if (state.cachedScrollY[start] < 0) {
        var s = state.cachedHeight.slice(0, Math.max(0, index)).reduce(function (sum, v) {
          return sum + v;
        }, 0) + offset;
        container.value.scrollTop = s;
        beforeScrollTop = s;
        if (s === 0) {
          index = 0;
          offset = 0;
        }
      }
      Vue.nextTick(function () {
        var _container$value = container.value,
          scrollTop = _container$value.scrollTop,
          scrollHeight2 = _container$value.scrollHeight,
          clientHeight = _container$value.clientHeight;
        if (scrollTop + clientHeight === scrollHeight2) {
          for (var _i3 = last - 1; _i3 >= start; _i3--) {
            if (_i3 === last - 1) {
              state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
            } else {
              state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
            }
          }
        }
      });
    };
    var handleScroll = function handleScroll() {
      if (!isVirtual.value) return;
      var scrollTop = container.value.scrollTop;
      var distance = scrollTop - beforeScrollTop;
      beforeScrollTop = scrollTop;
      distance += offset;
      var lastIndex = index;
      if (!distance) return;
      if (distance >= 0) {
        while (lastIndex < data.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }
          distance -= state.cachedHeight[lastIndex];
          lastIndex++;
        }
        if (lastIndex >= data.value.length) {
          index = data.value.length - 1;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }
        var _container$value2 = container.value,
          clientHeight = _container$value2.clientHeight,
          scrollHeight2 = _container$value2.scrollHeight;
        if (scrollTop + clientHeight === scrollHeight2) {
          index = data.value.length - visibleCount + 1;
        }
        if (start <= index - bufferSize) {
          start = Math.min(data.value.length - visibleCount, index - bufferSize);
          if (start < 0) {
            start = 0;
          }
        }
      } else {
        while (distance < 0) {
          lastIndex--;
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }
          distance += state.cachedHeight[lastIndex];
        }
        if (lastIndex < 0) {
          index = 0;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }
        calculateScrollY();
        if (start > index - bufferSize) {
          start = Math.max(0, index - bufferSize);
        }
      }
      updateVisibleData();
    };
    !fixedHeight && Vue.watch(updateId, calculateScrollY, {
      flush: "post"
    });
    var handleRowMounted = function handleRowMounted() {
      if (!isVirtual.value) return;
      updateId.value++;
    };
    Vue.watch(data, function () {
      reset();
      state.visibleData = [];
      state.cachedScrollY = [];
      state.cachedHeight = [];
      beforeScrollTop = 0;
      index = 0;
      offset = 0;
      start = 0;
      trs.clear();
      if (data.value.length <= threshold) {
        state.visibleData = data.value;
      } else {
        updateVisibleData();
      }
      container.value && (container.value.scrollTop = 0);
    });
    var mounted = false;
    var refreshContainer = function refreshContainer() {
      if (mounted) {
        visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
        updateVisibleData();
      }
    };
    Vue.onMounted(function () {
      if (!window || !window.IntersectionObserver) {
        return;
      }
      var ob = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];
        if (entry.isIntersecting || entry.intersectionRatio) {
          mounted = true;
          isVirtual.value && refreshContainer();
          ob.unobserve(container.value);
        }
      });
      container.value && ob.observe(container.value);
    });
    return _objectSpread$3a(_objectSpread$3a({
      trs: trs,
      scrollHeight: scrollHeight
    }, Vue.toRefs(state)), {}, {
      translateY: translateY,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      refreshContainer: refreshContainer,
      fixedHeight: fixedHeight,
      calculateScrollY: calculateScrollY
    });
  }

  function useVirtualScrollNew(container, params) {
    var _params$value$data, _params$value$scroll;
    var visibleData = Vue.ref([]);
    var translateY = Vue.ref((((_params$value$data = params.value.data) === null || _params$value$data === void 0 ? void 0 : _params$value$data.length) || 0) * (((_params$value$scroll = params.value.scroll) === null || _params$value$scroll === void 0 ? void 0 : _params$value$scroll.rowHeight) || 50));
    var scrollHeight = Vue.ref(0);
    var trHeightList = [];
    var containerHeight = Vue.ref(0);
    var containerWidth = Vue.ref(0);
    var startAndEndIndex = Vue.ref([0, 15]);
    var tScroll = Vue.computed(function () {
      var _scroll$isFixedRowHei, _scroll$fixedRows;
      var scroll = params.value.scroll;
      if (!scroll) return {};
      return {
        bufferSize: scroll.bufferSize || 10,
        isFixedRowHeight: (_scroll$isFixedRowHei = scroll.isFixedRowHeight) !== null && _scroll$isFixedRowHei !== void 0 ? _scroll$isFixedRowHei : false,
        rowHeight: scroll.rowHeight || 47,
        threshold: scroll.threshold || 100,
        type: scroll.type,
        fixedRows: (_scroll$fixedRows = scroll.fixedRows) !== null && _scroll$fixedRows !== void 0 ? _scroll$fixedRows : [0, 0]
      };
    });
    var isVirtualScroll = Vue.computed(function () {
      var data = params.value.data;
      return tScroll.value.type === "virtual" && tScroll.value.threshold < data.length;
    });
    function getVisibleRangeConfig() {
      var _container$value$scro, _container$value;
      var scrollTop = (_container$value$scro = (_container$value = container.value) === null || _container$value === void 0 ? void 0 : _container$value.scrollTop) !== null && _container$value$scro !== void 0 ? _container$value$scro : 0;
      var fixedStart = tScroll.value.fixedRows[0];
      var prevBufferHeightList = [];
      var hiddenHeight = 0;
      var visibleStart = -1;
      var visibleEnd = -1;
      var totalHeight = 0;
      for (var i = 0, len = params.value.data.length; i < len; i++) {
        var _trHeightList$i;
        var rowHeight = (_trHeightList$i = trHeightList[i]) !== null && _trHeightList$i !== void 0 ? _trHeightList$i : tScroll.value.rowHeight;
        totalHeight = totalHeight + rowHeight;
        if (totalHeight > scrollTop && visibleStart === -1) {
          visibleStart = i;
          if (visibleStart - tScroll.value.bufferSize > 0) {
            hiddenHeight = totalHeight - rowHeight - sum(prevBufferHeightList);
          }
        }
        if (visibleStart === -1) {
          prevBufferHeightList.push(rowHeight);
          if (prevBufferHeightList.length > tScroll.value.bufferSize) {
            prevBufferHeightList.shift();
          }
        }
        if (visibleEnd === -1 && (totalHeight > containerHeight.value + scrollTop || i === params.value.data.length - 1)) {
          visibleEnd = i;
        }
        if (visibleStart !== -1 && visibleEnd !== -1) {
          break;
        }
      }
      var startIndex = max$1([visibleStart - tScroll.value.bufferSize, 0]);
      var endIndex = min$2([visibleEnd + tScroll.value.bufferSize, params.value.data.length]);
      var stickyHeight = sum(trHeightList.slice(0, Math.min(startIndex, fixedStart)));
      return {
        startIndex: startIndex,
        endIndex: endIndex,
        translateY: hiddenHeight - stickyHeight
      };
    }
    var updateVisibleData = throttle$1(function () {
      var _getVisibleRangeConfi = getVisibleRangeConfig(),
        startIndex = _getVisibleRangeConfi.startIndex,
        endIndex = _getVisibleRangeConfi.endIndex,
        translateYValue = _getVisibleRangeConfi.translateY;
      var fixedRows = tScroll.value.fixedRows;
      var _fixedRows = _slicedToArray(fixedRows, 2),
        fixedStart = _fixedRows[0],
        fixedEnd = _fixedRows[1];
      var fixedStartData = fixedStart ? params.value.data.slice(0, fixedStart) : [];
      if (fixedStart && startIndex < fixedStart) {
        fixedStartData = fixedStartData.slice(0, startIndex);
      }
      var fixedEndData = fixedEnd ? params.value.data.slice(params.value.data.length - fixedEnd) : [];
      var bottomStartIndex = endIndex - params.value.data.length + 1 + (fixedEnd !== null && fixedEnd !== void 0 ? fixedEnd : 0);
      if (fixedEnd && bottomStartIndex > 0) {
        fixedEndData = fixedEndData.slice(bottomStartIndex);
      }
      if (startAndEndIndex.value.join() !== [startIndex, endIndex].join() && startIndex >= 0) {
        translateY.value = translateYValue;
        visibleData.value = fixedStartData.concat(params.value.data.slice(startIndex, endIndex), fixedEndData);
        startAndEndIndex.value = [startIndex, endIndex];
      }
    }, 100);
    var handleRowMounted = function handleRowMounted(rowData) {
      var _rowData$ref$value;
      if (!isVirtualScroll.value || !rowData || tScroll.value.isFixedRowHeight || !container.value) return;
      var trHeight = ((_rowData$ref$value = rowData.ref.value) === null || _rowData$ref$value === void 0 ? void 0 : _rowData$ref$value.getBoundingClientRect().height) || tScroll.value.rowHeight;
      var rowIndex = rowData.data.VIRTUAL_SCROLL_INDEX;
      if (trHeightList[rowIndex] !== trHeight) {
        var diff = trHeight - trHeightList[rowIndex];
        trHeightList[rowIndex] = trHeight;
        scrollHeight.value = scrollHeight.value + diff;
      }
    };
    var handleScroll = function handleScroll() {
      if (!isVirtualScroll.value) return;
      updateVisibleData();
    };
    var refreshVirtualScroll = function refreshVirtualScroll(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        contentRect = _ref2[0].contentRect;
      if (params.value.preventResizeRefresh) return;
      var maxScrollbarWidth = 16;
      if (Math.abs(contentRect.width - containerWidth.value) > maxScrollbarWidth && !!container.value) {
        container.value.scrollTop = 0;
        translateY.value = 0;
      }
      containerWidth.value = contentRect.width;
      containerHeight.value = contentRect.height;
    };
    var addIndexToData = function addIndexToData(data) {
      data.forEach(function (item, index) {
        item["VIRTUAL_SCROLL_INDEX"] = index;
      });
    };
    var updateScrollTop = function updateScrollTop(_ref3) {
      var index = _ref3.index,
        _ref3$top = _ref3.top,
        top = _ref3$top === void 0 ? 0 : _ref3$top,
        behavior = _ref3.behavior;
      var scrollTop = sum(trHeightList.slice(0, index + 1)) - top;
      container.value.scrollTo({
        top: scrollTop,
        behavior: behavior || "auto"
      });
    };
    var scrollToElement = function scrollToElement(p) {
      updateScrollTop(p);
      if (!tScroll.value.isFixedRowHeight) {
        var _p$time;
        var duration = (_p$time = p.time) !== null && _p$time !== void 0 ? _p$time : 60;
        var timer = setTimeout(function () {
          updateScrollTop(p);
          clearTimeout(timer);
        }, duration);
      }
    };
    useResizeObserver(Vue.computed(function () {
      return isVirtualScroll.value ? container.value : void 0;
    }), refreshVirtualScroll);
    Vue.watch(function () {
      return [_toConsumableArray(params.value.data), tScroll.value, isVirtualScroll.value, container.value];
    }, function () {
      if (!isVirtualScroll.value || !container.value) return;
      var data = params.value.data;
      addIndexToData(data);
      containerHeight.value = container.value.getBoundingClientRect().height;
      if (trHeightList.length !== params.value.data.length) {
        var initHeightList = Array.from(trHeightList);
        initHeightList.length = params.value.data.length;
        initHeightList.fill(tScroll.value.rowHeight || 47);
        trHeightList = initHeightList;
      }
      scrollHeight.value = sum(trHeightList);
      startAndEndIndex.value = [0, 0];
      updateVisibleData();
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return containerHeight.value;
    }, function () {
      updateVisibleData();
    });
    return {
      visibleData: visibleData,
      translateY: translateY,
      scrollHeight: scrollHeight,
      isVirtualScroll: isVirtualScroll,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      scrollToElement: scrollToElement
    };
  }

  function ownKeys$3a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$39(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_OPTIONS$1 = {
    debounceTime: 0,
    config: {
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true
    }
  };
  function useMutationObservable(targetEl, callback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS$1;
    var mergedOptions = Vue.ref(_objectSpread$39(_objectSpread$39({}, DEFAULT_OPTIONS$1), options));
    var observer = null;
    var initObserver = function initObserver() {
      var _observer;
      if (!targetEl) return;
      var _mergedOptions$value = mergedOptions.value,
        _mergedOptions$value$ = _mergedOptions$value.debounceTime,
        debounceTime = _mergedOptions$value$ === void 0 ? 0 : _mergedOptions$value$,
        _mergedOptions$value$2 = _mergedOptions$value.config,
        config = _mergedOptions$value$2 === void 0 ? DEFAULT_OPTIONS$1.config : _mergedOptions$value$2;
      var handler = function handler() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback === null || callback === void 0 || callback.apply(void 0, args);
      };
      (_observer = observer) === null || _observer === void 0 || _observer.disconnect();
      observer = new MutationObserver(debounceTime > 0 ? debounce$1(handler, debounceTime) : handler);
      observer.observe(targetEl, config);
    };
    Vue.watch(function () {
      return options;
    }, function (newOptions) {
      if (!isEqual(newOptions, mergedOptions.value)) {
        mergedOptions.value = _objectSpread$39(_objectSpread$39({}, DEFAULT_OPTIONS$1), newOptions);
        initObserver();
      }
    }, {
      deep: true
    });
    Vue.onMounted(initObserver);
    Vue.onBeforeUnmount(function () {
      var _observer2;
      return (_observer2 = observer) === null || _observer2 === void 0 ? void 0 : _observer2.disconnect();
    });
  }

  var ARROW_DOWN_REG = /^ArrowDown$/i;
  var ARROW_UP_REG = /^ArrowUp$/i;
  var ARROW_LEFT_REG = /^ArrowLeft$/i;
  var ARROW_RIGHT_REG = /^ArrowRight$/i;
  var ESCAPE_REG = /^Escape$/i;
  var SPACE_REG = /^Space$/i;
  var ENTER_REG = /^Enter$/i;
  var SHIFT_REG = /^(Shift|ShiftLeft|ShiftRight)$/i;
  var CLEAR_REG = /^KeyC$/i;
  var ALL_REG = /^(KeyA|KeyL)$/i;
  var CHECKED_CODE_REG = /^(Enter|Space)$/i;
  var THEME_MODE = "theme-mode";

  var getColorTokenColor = function getColorTokenColor(token) {
    var _document, _styles$getPropertyVa;
    var targetElement = (_document = document) === null || _document === void 0 ? void 0 : _document.documentElement;
    var styles = getComputedStyle(targetElement);
    return (_styles$getPropertyVa = styles.getPropertyValue(token).trim()) !== null && _styles$getPropertyVa !== void 0 ? _styles$getPropertyVa : "";
  };

  function useVariables(variables) {
    var _document;
    var values = {};
    var varsArray = [];
    varsArray = Object.values(variables);
    Object.entries(variables).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        varName = _ref2[1];
      values[key] = Vue.ref(getColorTokenColor(varName));
    });
    varsArray.forEach(function (varName) {
      values[varName] = Vue.ref(getColorTokenColor(varName));
    });
    var targetElement = (_document = document) === null || _document === void 0 ? void 0 : _document.documentElement;
    useMutationObservable(targetElement, function (mutationsList) {
      mutationsList.some(function (mutation) {
        if (mutation.type === "attributes" && mutation.attributeName === THEME_MODE) {
          if (isString(variables) || Array.isArray(variables)) {
            varsArray.forEach(function (varName) {
              values[varName].value = getColorTokenColor(varName);
            });
          } else {
            Object.entries(variables).forEach(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                key = _ref4[0],
                varName = _ref4[1];
              values[key].value = getColorTokenColor(varName);
            });
          }
          return true;
        }
        return false;
      });
    });
    return values;
  }

  function _objectWithoutPropertiesLoose$1(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }

  function _objectWithoutProperties$1(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = _objectWithoutPropertiesLoose$1(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }

  var _excluded$9 = ["from", "to", "direction"];
  function getValidAttrs(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (!isUndefined(obj[key]) || isNull(obj[key])) {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }
  function getBackgroundColor(color) {
    if (isString(color)) {
      return color;
    }
    if (isArray$1(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }
      return "linear-gradient( ".concat(color.join(","), " )");
    }
    var from = color.from,
      to = color.to,
      _color$direction = color.direction,
      direction = _color$direction === void 0 ? "to right" : _color$direction,
      rest = _objectWithoutProperties$1(color, _excluded$9);
    var keys = Object.keys(rest);
    if (keys.length) {
      keys = keys.sort(function (a, b) {
        var c = parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
        return c;
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }
    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  }
  function getIEVersion() {
    if (typeof navigator === "undefined" || !navigator) return Number.MAX_SAFE_INTEGER;
    var _navigator = navigator,
      userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;
    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }
    if (isIE11) {
      return 11;
    }
    return Number.MAX_SAFE_INTEGER;
  }
  function getFlexGapPolyFill() {
    var _chromeMatch$, _safariMatch$, _fireFoxMatch$;
    if (typeof navigator === "undefined" || !navigator) return false;
    var ua = navigator.userAgent;
    var chromeMatch = ua.match(/AppleWebKit.+Chrome\/(.+) Safari\/.+/i);
    if (Number(chromeMatch === null || chromeMatch === void 0 || (_chromeMatch$ = chromeMatch[1]) === null || _chromeMatch$ === void 0 ? void 0 : _chromeMatch$.split(".")[0]) < 100) return true;
    var safariMatch = ua.match(/AppleWebKit.+Version\/(.+) Safari\/.+/i);
    if (Number(safariMatch === null || safariMatch === void 0 || (_safariMatch$ = safariMatch[1]) === null || _safariMatch$ === void 0 ? void 0 : _safariMatch$.split(".")[0]) < 12) return true;
    var ieVersion = getIEVersion();
    if (ieVersion <= 11) return true;
    var fireFoxMatch = ua.match(/Firefox\/(.+)/i);
    if (Number(fireFoxMatch === null || fireFoxMatch === void 0 || (_fireFoxMatch$ = fireFoxMatch[1]) === null || _fireFoxMatch$ === void 0 ? void 0 : _fireFoxMatch$.split(".")[0]) < 100) return true;
    return false;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = isNumber(maxCharacter);
    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }
      return 0;
    }
    var len = 0;
    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;
      if (str.charCodeAt(i) > 127) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }
      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }
      len += currentStringLength;
    }
    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }
    return len;
  }
  function getUnicodeLength(str) {
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").length;
  }
  function limitUnicodeMaxLength(str, maxLength, oldStr) {
    if (_toConsumableArray(oldStr !== null && oldStr !== void 0 ? oldStr : "").slice().length === maxLength) return oldStr || "";
    return _toConsumableArray(str !== null && str !== void 0 ? str : "").slice(0, maxLength).join("");
  }
  function pxCompat(param) {
    return isNumber(param) ? "".concat(param, "px") : param;
  }
  var DOM_STYLE_PROPS = ["padding-top", "padding-bottom", "padding-left", "padding-right", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "border-width", "box-sizing", "line-height", "letter-spacing"];
  function calculateNodeSize(targetElement) {
    if (typeof window === "undefined") {
      return {
        paddingSize: 0,
        borderSize: 0,
        boxSizing: 0,
        sizingStyle: ""
      };
    }
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = DOM_STYLE_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing,
      sizingStyle: sizingStyle
    };
  }

  function ownKeys$39(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$38(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$39(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$39(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2;
    var basicStyle = {};
    if (!circleElem || typeof window === "undefined") {
      return;
    }
    var _window$getComputedSt = (_window = window) === null || _window === void 0 || (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
      color = _window$getComputedSt.color,
      fontSize = _window$getComputedSt.fontSize;
    var ua = (_window2 = window) === null || _window2 === void 0 || (_window2 = _window2.navigator) === null || _window2 === void 0 ? void 0 : _window2.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
    var isIosWechat = /(?=.*iPhone)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);
    var isIpadWechat = /(?=.*iPad)[?=.*MicroMessenger]/.test(ua) && !/Chrome/.test(ua);
    if (isSafari || isIosWechat || isIpadWechat) {
      basicStyle = {
        transformOrigin: "0px 0px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 12, ")")
      };
    }
    if (color && getIEVersion() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle(circleElem, _objectSpread$38(_objectSpread$38({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle(circleElem, _objectSpread$38(_objectSpread$38({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  var GradientIcon = Vue.defineComponent({
    name: "TLoadingGradient",
    setup: function setup() {
      var classPrefix = usePrefixClass();
      var circleRef = Vue.ref();
      Vue.onMounted(function () {
        Vue.nextTick(function () {
          circleAdapter(circleRef.value);
        });
      });
      return function () {
        var name = "".concat(classPrefix.value, "-loading__gradient");
        var classes = [name, "".concat(classPrefix.value, "-icon-loading")];
        return Vue.createVNode("svg", {
          "class": classes,
          "viewBox": "0 0 12 12",
          "version": "1.1",
          "width": "1em",
          "height": "1em",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("foreignObject", {
          "x": "0",
          "y": "0",
          "width": "12",
          "height": "12"
        }, [Vue.createVNode("div", {
          "class": "".concat(name, "-conic"),
          "ref": circleRef
        }, null)])]);
      };
    }
  });

  var props$1z = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: Number,
      "default": 0
    },
    fullscreen: Boolean,
    indicator: {
      type: [Boolean, Function],
      "default": true
    },
    inheritColor: Boolean,
    loading: {
      type: Boolean,
      "default": true
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium"
    },
    text: {
      type: [String, Function]
    },
    zIndex: {
      type: Number
    }
  };

  var useComponentClassName$2 = function useComponentClassName() {
    return {
      name: usePrefixClass("loading"),
      centerClass: usePrefixClass("loading--center"),
      fullscreenClass: usePrefixClass("loading__fullscreen"),
      lockClass: usePrefixClass("loading--lock"),
      overlayClass: usePrefixClass("loading__overlay"),
      relativeClass: usePrefixClass("loading__parent"),
      fullClass: usePrefixClass("loading--full"),
      inheritColorClass: usePrefixClass("loading--inherit-color")
    };
  };
  var _Loading = Vue.defineComponent({
    name: "TLoading",
    inheritAttrs: false,
    props: props$1z,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        attrs = _ref.attrs;
      var delayShowLoading = Vue.ref(false);
      var _useComponentClassNam = useComponentClassName$2(),
        name = _useComponentClassNam.name,
        centerClass = _useComponentClassNam.centerClass,
        fullscreenClass = _useComponentClassNam.fullscreenClass,
        lockClass = _useComponentClassNam.lockClass,
        overlayClass = _useComponentClassNam.overlayClass,
        relativeClass = _useComponentClassNam.relativeClass,
        fullClass = _useComponentClassNam.fullClass,
        inheritColorClass = _useComponentClassNam.inheritColorClass;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var countDelay = function countDelay() {
        delayShowLoading.value = false;
        var timer = setTimeout(function () {
          delayShowLoading.value = true;
          clearTimeout(timer);
        }, props2.delay);
      };
      var teleportElement = useTeleport(function () {
        return props2.attach;
      });
      var delayCounted = Vue.computed(function () {
        return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
      });
      var styles = Vue.computed(function () {
        var styles2 = {};
        if (props2.zIndex !== void 0) {
          styles2.zIndex = props2.zIndex;
        }
        if (!["small", "medium", "large"].includes(props2.size)) {
          styles2["font-size"] = props2.size;
        }
        return styles2;
      });
      var hasContent = Vue.computed(function () {
        return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
      });
      var lockFullscreen = Vue.computed(function () {
        return props2.preventScrollThrough && props2.fullscreen;
      });
      var showText = Vue.computed(function () {
        return Boolean(props2.text || slots.text);
      });
      var showWrapLoading = Vue.computed(function () {
        return hasContent.value && props2.loading && delayCounted.value;
      });
      var showFullScreenLoading = Vue.computed(function () {
        return props2.fullscreen && props2.loading && delayCounted.value;
      });
      var showAttachedLoading = Vue.computed(function () {
        return props2.attach && props2.loading && delayCounted.value;
      });
      var classes = Vue.computed(function () {
        var baseClasses = [centerClass.value, getPropertyValFromObj(SIZE.value, props2.size), _defineProperty$2({}, inheritColorClass.value, props2.inheritColor)];
        var fullScreenClasses = [name.value, fullscreenClass.value, centerClass.value, overlayClass.value];
        return {
          baseClasses: baseClasses,
          attachClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$2({}, overlayClass.value, props2.showOverlay)]),
          withContentClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$2({}, overlayClass.value, props2.showOverlay)]),
          fullScreenClasses: fullScreenClasses,
          normalClasses: baseClasses.concat([name.value])
        };
      });
      var _toRefs = Vue.toRefs(props2),
        loading = _toRefs.loading;
      Vue.watch([loading], function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
          isLoading = _ref6[0];
        if (isLoading) {
          countDelay();
          lockFullscreen.value && addClass(document.body, lockClass.value);
        } else {
          lockFullscreen.value && removeClass(document.body, lockClass.value);
        }
      });
      Vue.onMounted(function () {
        props2.delay && countDelay();
      });
      return function () {
        var _classes$value = classes.value,
          fullScreenClasses = _classes$value.fullScreenClasses,
          baseClasses = _classes$value.baseClasses,
          withContentClasses = _classes$value.withContentClasses,
          attachClasses = _classes$value.attachClasses,
          normalClasses = _classes$value.normalClasses;
        var defaultIndicator = Vue.createVNode(GradientIcon, {
          "size": props2.size
        }, null);
        var indicator = loading.value && renderTNodeJSX("indicator", defaultIndicator);
        var text = showText.value && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-loading__text")
        }, [renderTNodeJSX("text")]);
        if (props2.fullscreen) {
          if (!showFullScreenLoading.value || !props2.loading) return null;
          return Vue.createVNode(Vue.Teleport, {
            "disabled": !props2.attach || !teleportElement.value,
            "to": teleportElement.value
          }, {
            "default": function _default() {
              return [Vue.createVNode("div", Vue.mergeProps({
                "class": fullScreenClasses,
                "style": styles.value
              }, attrs), [Vue.createVNode("div", {
                "class": baseClasses
              }, [indicator, text])])];
            }
          });
        }
        if (hasContent.value) {
          return Vue.createVNode("div", Vue.mergeProps({
            "class": relativeClass.value
          }, attrs), [renderContent("default", "content"), showWrapLoading.value && Vue.createVNode("div", {
            "class": withContentClasses,
            "style": styles.value
          }, [indicator, text])]);
        }
        if (props2.attach) {
          if (!showAttachedLoading.value || !loading.value) return null;
          return Vue.createVNode(Vue.Teleport, {
            "disabled": !props2.attach || !teleportElement.value,
            "to": teleportElement.value
          }, {
            "default": function _default() {
              return [Vue.createVNode("div", Vue.mergeProps({
                "class": attachClasses,
                "style": styles.value
              }, attrs), [indicator, text])];
            }
          });
        }
        return loading.value ? Vue.createVNode("div", Vue.mergeProps({
          "class": normalClasses,
          "style": styles.value
        }, attrs), [indicator, text]) : null;
      };
    }
  });

  var fullScreenLoadingInstance = null;
  function mergeDefaultProps(props) {
    var options = merge$2({
      fullscreen: false,
      attach: "body",
      loading: true,
      preventScrollThrough: true
    }, props);
    return options;
  }
  function createLoading(props, context) {
    var mergedProps = mergeDefaultProps(props);
    if (mergedProps.fullscreen && fullScreenLoadingInstance) {
      return fullScreenLoadingInstance;
    }
    var component = Vue.defineComponent({
      setup: function setup() {
        var loadingOptions = Vue.reactive(mergedProps);
        return function () {
          return Vue.h(_Loading, loadingOptions);
        };
      }
    });
    var attach = getAttach(mergedProps.fullscreen ? "body" : mergedProps.attach);
    var instance = Vue.createVNode(component);
    if (context !== null && context !== void 0 ? context : LoadingPlugin._context) {
      instance.appContext = context !== null && context !== void 0 ? context : LoadingPlugin._context;
    }
    var wrapper = document.createElement("div");
    Vue.render(instance, wrapper);
    var parentRelativeClass = usePrefixClass("loading__parent--relative").value;
    var lockClass = usePrefixClass("loading--lock");
    var lockFullscreen = mergedProps.preventScrollThrough && mergedProps.fullscreen;
    if (lockFullscreen) {
      addClass(document.body, lockClass.value);
    }
    if (attach) {
      addClass(attach, parentRelativeClass);
    } else {
      console.error("attach is not exist");
    }
    var loadingInstance = {
      hide: function hide() {
        removeClass(attach, parentRelativeClass);
        removeClass(document.body, lockClass.value);
        Vue.render(null, wrapper);
        wrapper.remove();
      }
    };
    return loadingInstance;
  }
  function produceLoading(props, context) {
    if (props === true) {
      fullScreenLoadingInstance = createLoading({
        fullscreen: true,
        loading: true,
        attach: "body",
        preventScrollThrough: true
      }, context);
      return fullScreenLoadingInstance;
    }
    if (props === false) {
      var _fullScreenLoadingIns;
      (_fullScreenLoadingIns = fullScreenLoadingInstance) === null || _fullScreenLoadingIns === void 0 || _fullScreenLoadingIns.hide();
      fullScreenLoadingInstance = null;
      return;
    }
    return createLoading(props);
  }
  var LoadingPlugin = produceLoading;
  LoadingPlugin.install = function (app) {
    app.config.globalProperties.$loading = produceLoading;
    LoadingPlugin._context = app._context;
  };

  var INSTANCE_KEY = Symbol("TdLoading");
  var createInstance = function createInstance(el, binding) {
    var _binding$modifiers = binding.modifiers,
      fullscreen = _binding$modifiers.fullscreen,
      inheritColor = _binding$modifiers.inheritColor;
    var options = {
      attach: function attach() {
        return el;
      },
      fullscreen: fullscreen !== null && fullscreen !== void 0 ? fullscreen : false,
      inheritColor: inheritColor !== null && inheritColor !== void 0 ? inheritColor : false,
      loading: binding.value
    };
    if (isObject(binding.value)) {
      mapKeys(binding.value, function (value, key) {
        options[key] = value;
      });
    }
    el[INSTANCE_KEY] = {
      options: options,
      instance: LoadingPlugin(options)
    };
  };
  var vLoading = {
    mounted: function mounted(el, binding) {
      if (binding.value) {
        createInstance(el, binding);
      }
    },
    updated: function updated(el, binding) {
      var instance = el[INSTANCE_KEY];
      var value = binding.value,
        oldValue = binding.oldValue;
      if (!isEqual(value, oldValue)) {
        var _value$loading;
        var loading = (_value$loading = value === null || value === void 0 ? void 0 : value.loading) !== null && _value$loading !== void 0 ? _value$loading : value;
        if (loading) {
          createInstance(el, binding);
        } else {
          instance === null || instance === void 0 || instance.instance.hide();
        }
      }
    },
    unmounted: function unmounted(el) {
      var _el$INSTANCE_KEY;
      (_el$INSTANCE_KEY = el[INSTANCE_KEY]) === null || _el$INSTANCE_KEY === void 0 || _el$INSTANCE_KEY.instance.hide();
    }
  };

  var Loading = withInstall$1(_Loading, _Loading.name, {
    name: "loading",
    comp: vLoading
  });

  var props$1y = {
    block: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    form: {
      type: String,
      "default": void 0
    },
    ghost: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    loading: Boolean,
    loadingProps: {
      type: Object
    },
    shape: {
      type: String,
      "default": "rectangle",
      validator: function validator(val) {
        if (!val) return true;
        return ["rectangle", "square", "round", "circle"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["extra-small", "small", "medium", "large"].includes(val);
      }
    },
    suffix: {
      type: Function
    },
    tag: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["button", "a", "div"].includes(val);
      }
    },
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "button",
      validator: function validator(val) {
        if (!val) return true;
        return ["submit", "reset", "button"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "base",
      validator: function validator(val) {
        if (!val) return true;
        return ["base", "outline", "dashed", "text"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$38(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$37(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$38(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$38(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TButton = Vue.defineComponent({
    name: "TButton",
    props: props$1y,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs,
        slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("button");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var btnRef = Vue.ref();
      useRipple(btnRef);
      var isDisabled = useDisabled();
      var mergeTheme = Vue.computed(function () {
        var theme = props2.theme,
          variant = props2.variant;
        if (theme) return theme;
        if (variant === "base") return "primary";
        return "default";
      });
      var buttonClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--variant-").concat(props2.variant), "".concat(COMPONENT_NAME.value, "--theme-").concat(mergeTheme.value), "".concat(COMPONENT_NAME.value, "--shape-").concat(props2.shape), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE.value[props2.size], props2.size !== "medium"), STATUS.value.disabled, isDisabled.value), STATUS.value.loading, props2.loading), "".concat(COMPONENT_NAME.value, "--ghost"), props2.ghost), SIZE.value.block, props2.block)];
      });
      return function () {
        var buttonContent = renderContent("default", "content");
        var icon = props2.loading ? Vue.createVNode(Loading, _objectSpread$37({
          inheritColor: true
        }, props2.loadingProps), null) : renderTNodeJSX("icon");
        var iconOnly = icon && !buttonContent;
        var suffix = props2.suffix || slots.suffix ? Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [renderTNodeJSX("suffix")]) : null;
        buttonContent = buttonContent ? Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__text")
        }, [buttonContent]) : "";
        if (icon) {
          buttonContent = [icon, buttonContent];
        }
        if (suffix) {
          buttonContent = [buttonContent].concat(suffix);
        }
        var renderTag = function renderTag() {
          if (!props2.tag && props2.href) return "a";
          return props2.tag || "button";
        };
        var buttonAttrs = {
          "class": [].concat(_toConsumableArray(buttonClass.value), [_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--icon-only"), iconOnly)]),
          type: props2.type,
          disabled: isDisabled.value || props2.loading,
          href: props2.href,
          tabindex: isDisabled.value ? void 0 : "0",
          form: props2.form
        };
        return Vue.h(renderTag(), _objectSpread$37(_objectSpread$37(_objectSpread$37({
          ref: btnRef
        }, attrs), buttonAttrs), {}, {
          onClick: props2.onClick
        }), [buttonContent]);
      };
    }
  });

  var Button = withInstall$1(TButton);

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  function ownKeys$37(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$36(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$37(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$37(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function camel2Kebab(camelString) {
    var covertArr = ["fillOpacity", "fillRule", "clipRule"];
    if (covertArr.includes(camelString)) {
      return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
    }
    return camelString;
  }
  function renderFn(node, props) {
    var kebabAttrs = Object.keys(node.attrs).reduce(function (result, key) {
      result[camel2Kebab(key)] = node.attrs[key];
      return result;
    }, {});
    return Vue.h(node.tag, _objectSpread$36(_objectSpread$36({}, kebabAttrs), props), (node.children || []).map(function (child) {
      return renderFn(child, {});
    }));
  }

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };

  function useCommonClassName() {
    var classPrefix = ConfigContext.classPrefix;
    return {
      SIZE: {
        "default": "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName().SIZE;
    var className = Vue.computed(function () {
      if (size.value in COMMON_SIZE_CLASS_NAMES) {
        return COMMON_SIZE_CLASS_NAMES[size.value];
      }
      return "";
    });
    var style = Vue.computed(function () {
      if (size.value === void 0 || size.value in COMMON_SIZE_CLASS_NAMES) {
        return {};
      }
      return {
        fontSize: size.value
      };
    });
    return {
      style: style,
      className: className
    };
  }

  function ownKeys$36(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$35(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$36(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$36(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$S = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H22V22L2 22V2ZM4 4V20L20 20V4H4ZM13 6.5V11H17.5V13H13V17.5H11V13L6.5 13V11L11 11V6.5H13Z"
      }
    }]
  };
  var addRectangle = Vue.defineComponent({
    name: "AddRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-add-rectangle", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$35(_objectSpread$35({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$S, finalProps.value);
      };
    }
  });
  var TdAddRectangleIcon = addRectangle;

  function ownKeys$35(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$34(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$35(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$35(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$R = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 4V11L20 11V13L13 13V20H11L11 13H4L4 11L11 11L11 4L13 4Z"
      }
    }]
  };
  var add$1 = Vue.defineComponent({
    name: "AddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-add", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$34(_objectSpread$34({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$R, finalProps.value);
      };
    }
  });
  var TdAddIcon = add$1;

  function ownKeys$34(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$33(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$Q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 12H19.5L12 22L4.5 12H9V2H15V12Z"
      }
    }]
  };
  var arrowTriangleDownFilled = Vue.defineComponent({
    name: "ArrowTriangleDownFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-arrow-triangle-down-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$33(_objectSpread$33({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$Q, finalProps.value);
      };
    }
  });
  var TDArrowTriangleDownFilledIcon = arrowTriangleDownFilled;

  function ownKeys$33(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$32(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$P = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 12H19.5L12 2L4.5 12H9V22H15V12Z"
      }
    }]
  };
  var arrowTriangleUpFilled = Vue.defineComponent({
    name: "ArrowTriangleUpFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-arrow-triangle-up-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$32(_objectSpread$32({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$P, finalProps.value);
      };
    }
  });
  var TDArrowTriangleUpFilledIcon = arrowTriangleUpFilled;

  function ownKeys$32(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$31(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$O = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 4H20V6H4V4ZM12 7.58579L18.9142 14.5L17.5 15.9142L13 11.4142V21H11V11.4142L6.5 15.9142L5.08579 14.5L12 7.58579Z"
      }
    }]
  };
  var backtop = Vue.defineComponent({
    name: "BacktopIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-backtop", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$31(_objectSpread$31({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$O, finalProps.value);
      };
    }
  });
  var TdBackTopIcon = backtop;

  function ownKeys$31(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$30(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$N = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 26 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.99999 1.58582L10.1714 7.75774L17.2425 14.8288L23.4137 21L21.9995 22.4142L19.0345 19.4492C17.2447 20.4377 15.1866 21.0001 12.9996 21.0001C7.42102 21.0001 2.69842 17.3465 1.08922 12.3042L0.992188 12.0001L1.08922 11.6961C1.85645 9.29201 3.33009 7.20571 5.26511 5.67975L2.58567 2.99993L3.99999 1.58582ZM6.69098 7.10574C5.05507 8.33729 3.79122 10.0353 3.09676 12.0001C4.53843 16.0793 8.42915 19.0001 12.9996 19.0001C14.6314 19.0001 16.1745 18.6285 17.5507 17.9655L15.7571 16.1719C14.9668 16.695 14.0185 17.0003 12.9999 17.0003C10.2385 17.0003 7.99989 14.7618 7.99989 12.0003C7.99989 10.9817 8.3052 10.0334 8.82835 9.24312L6.69098 7.10574ZM10.292 10.7068C10.1046 11.0984 9.99989 11.5368 9.99989 12.0003C9.99989 13.6572 11.343 15.0003 12.9999 15.0003C13.4634 15.0003 13.9018 14.8956 14.2934 14.7082L10.292 10.7068ZM13 5.00003C12.4234 5.00003 11.8583 5.04642 11.3081 5.13548L10.321 5.29527L10.0014 3.32097L10.9885 3.16117C11.644 3.05508 12.3159 3.00003 13 3.00003C18.5786 3.00003 23.3012 6.65367 24.9104 11.696L25.0074 12L24.9104 12.3041C24.4968 13.5999 23.878 14.8034 23.0926 15.8763L22.5019 16.6833L20.8881 15.5019L21.4788 14.695C22.0769 13.8778 22.5595 12.9715 22.9028 12C21.4612 7.92082 17.5704 5.00003 13 5.00003ZM13.5132 6.92636L14.4691 7.21985C16.0499 7.70515 17.2953 8.95049 17.7806 10.5313L18.0741 11.4873L16.1621 12.0742L15.8687 11.1183C15.578 10.1715 14.829 9.42243 13.8822 9.13178L12.9262 8.8383L13.5132 6.92636Z"
      }
    }]
  };
  var browseOff = Vue.defineComponent({
    name: "BrowseOffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-browse-off", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$30(_objectSpread$30({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$N, finalProps.value);
      };
    }
  });
  var TdBrowseOffIcon = browseOff;

  function ownKeys$30(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$M = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "clipPath": "url(#clip0_8726_7319)"
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "fill": "currentColor",
          "d": "M2.09675 12C3.53842 16.0792 7.42915 19 11.9996 19C16.57 19 20.4607 16.0792 21.9024 12C20.4607 7.92079 16.57 5 11.9996 5C7.42915 5 3.53842 7.92079 2.09675 12ZM0.0892162 11.696C1.69842 6.65364 6.42102 3 11.9996 3C17.5781 3 22.3007 6.65364 23.9099 11.696L24.007 12L23.9099 12.304C22.3007 17.3464 17.5781 21 11.9996 21C6.42102 21 1.69842 17.3464 0.0892162 12.304L-0.0078125 12L0.0892162 11.696ZM11.9999 9C10.343 9 8.99989 10.3431 8.99989 12C8.99989 13.6569 10.343 15 11.9999 15C13.6567 15 14.9999 13.6569 14.9999 12C14.9999 10.3431 13.6567 9 11.9999 9ZM6.99989 12C6.99989 9.23858 9.23846 7 11.9999 7C14.7613 7 16.9999 9.23858 16.9999 12C16.9999 14.7614 14.7613 17 11.9999 17C9.23846 17 6.99989 14.7614 6.99989 12Z"
        }
      }]
    }]
  };
  var browse = Vue.defineComponent({
    name: "BrowseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-browse", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2$(_objectSpread$2$({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$M, finalProps.value);
      };
    }
  });
  var TdBrowseIcon = browse;

  function ownKeys$2$(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$L = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 4V1.5H8V4H16V1.5H18V4H22V22H2V4H6ZM4 6V9H20V6H4ZM20 11H4V20H20V11Z"
      }
    }]
  };
  var calendar = Vue.defineComponent({
    name: "CalendarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-calendar", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2_(_objectSpread$2_({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$L, finalProps.value);
      };
    }
  });
  var TdCalendarIcon = calendar;

  function ownKeys$2_(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$K = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M14.9999 12L9.49988 6.5L9.49988 17.5L14.9999 12Z"
      }
    }]
  };
  var caretRightSmall = Vue.defineComponent({
    name: "CaretRightSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-caret-right-small", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2Z(_objectSpread$2Z({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$K, finalProps.value);
      };
    }
  });
  var TdCaretRightSmallIcon = caretRightSmall;

  function ownKeys$2Z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$J = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM7.49985 10.5858L10.4999 13.5858L16.4999 7.58578L17.9141 8.99999L10.4999 16.4142L6.08564 12L7.49985 10.5858Z"
      }
    }]
  };
  var checkCircleFilled = Vue.defineComponent({
    name: "CheckCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-check-circle-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2Y(_objectSpread$2Y({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$J, finalProps.value);
      };
    }
  });
  var TdCheckCircleFilledIcon = checkCircleFilled;

  function ownKeys$2Y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$I = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M20.9852 7.37845L10.3786 17.985L4.01465 11.6211L5.42886 10.2069L10.3786 15.1566L19.571 5.96423L20.9852 7.37845Z"
      }
    }]
  };
  var check = Vue.defineComponent({
    name: "CheckIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-check", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2X(_objectSpread$2X({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$I, finalProps.value);
      };
    }
  });
  var CheckIcon = check;

  function ownKeys$2X(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$H = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M17.5001 8.08582L12.0002 13.5858L6.50015 8.08582L5.08594 9.50003L12.0002 16.4142L18.9144 9.50003L17.5001 8.08582Z"
      }
    }]
  };
  var chevronDown = Vue.defineComponent({
    name: "ChevronDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-down", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2W(_objectSpread$2W({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$H, finalProps.value);
      };
    }
  });
  var TdChevronDownIcon = chevronDown;

  function ownKeys$2W(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$G = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M18.4144 7.50003L13.9144 12L18.4144 16.5L17.0001 17.9142L11.0859 12L17.0002 6.08582L18.4144 7.50003ZM11.9144 7.50003L7.41436 12L11.9144 16.5L10.5002 17.9142L4.58594 12L10.5002 6.08582L11.9144 7.50003Z"
      }
    }]
  };
  var chevronLeftDouble = Vue.defineComponent({
    name: "ChevronLeftDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left-double", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2V(_objectSpread$2V({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$G, finalProps.value);
      };
    }
  });
  var TdChevronLeftDoubleIcon = chevronLeftDouble;

  function ownKeys$2V(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$F = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15.9144 17.5L10.4144 12L15.9144 6.50003L14.5002 5.08582L7.58594 12L14.5002 18.9142L15.9144 17.5Z"
      }
    }]
  };
  var chevronLeft = Vue.defineComponent({
    name: "ChevronLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2U(_objectSpread$2U({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$F, finalProps.value);
      };
    }
  });
  var TdChevronLeftIcon = chevronLeft;

  function ownKeys$2U(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$E = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM10.5 6.58579L15.9142 12L10.5 17.4142L9.08579 16L13.0858 12L9.08579 8L10.5 6.58579Z"
      }
    }]
  };
  var chevronRightCircle = Vue.defineComponent({
    name: "ChevronRightCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-circle", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2T(_objectSpread$2T({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$E, finalProps.value);
      };
    }
  });
  var TdChevronRightCircleIcon = chevronRightCircle;

  function ownKeys$2T(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$D = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5.58594 16.5L10.0859 12L5.58594 7.50003L7.00015 6.08582L12.9144 12L7.00015 17.9142L5.58594 16.5ZM12.0859 16.5L16.5859 12L12.0859 7.50003L13.5002 6.08582L19.4144 12L13.5001 17.9142L12.0859 16.5Z"
      }
    }]
  };
  var chevronRightDouble = Vue.defineComponent({
    name: "ChevronRightDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-double", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2S(_objectSpread$2S({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$D, finalProps.value);
      };
    }
  });
  var TdChevronRightDoubleIcon = chevronRightDouble;

  function ownKeys$2S(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$C = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.08594 17.5L13.5859 12L8.08594 6.50003L9.50015 5.08582L16.4144 12L9.50015 18.9142L8.08594 17.5Z"
      }
    }]
  };
  var chevronRight = Vue.defineComponent({
    name: "ChevronRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2R(_objectSpread$2R({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$C, finalProps.value);
      };
    }
  });
  var TdChevronRightIcon = chevronRight;

  function ownKeys$2R(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$B = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M17.5001 15.9142L12.0002 10.4142L6.50015 15.9142L5.08594 14.5L12.0002 7.58582L18.9144 14.5L17.5001 15.9142Z"
      }
    }]
  };
  var chevronUp = Vue.defineComponent({
    name: "ChevronUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-chevron-up", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2Q(_objectSpread$2Q({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$B, finalProps.value);
      };
    }
  });
  var TdChevronUpIcon = chevronUp;

  function ownKeys$2Q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$A = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM8.81753 7.40346L11.9999 10.5858L15.1815 7.40414L16.5957 8.81835L13.4141 12L16.5957 15.1816L15.1815 16.5958L11.9999 13.4142L8.81753 16.5965L7.40332 15.1823L10.5856 12L7.40332 8.81767L8.81753 7.40346Z"
      }
    }]
  };
  var closeCircleFilled = Vue.defineComponent({
    name: "CloseCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-close-circle-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2P(_objectSpread$2P({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$A, finalProps.value);
      };
    }
  });
  var TdCloseCircleFilledIcon = closeCircleFilled;

  function ownKeys$2P(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.04996 5.63599L11.9997 10.5857L16.9494 5.63599L18.3637 7.0502L13.4139 11.9999L18.3637 16.9497L16.9494 18.3639L11.9997 13.4142L7.04996 18.3639L5.63574 16.9497L10.5855 11.9999L5.63574 7.0502L7.04996 5.63599Z"
      }
    }]
  };
  var close = Vue.defineComponent({
    name: "CloseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-close", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2O(_objectSpread$2O({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$z, finalProps.value);
      };
    }
  });
  var TdCloseIcon = close;

  function ownKeys$2O(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H15V7.5H13V4H4V13H7.5V15H2V2ZM9 9H22V22H9V9ZM11 11V20H20V11H11Z"
      }
    }]
  };
  var copy$1 = Vue.defineComponent({
    name: "CopyIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-copy", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2N(_objectSpread$2N({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$y, finalProps.value);
      };
    }
  });
  var CopyIcon = copy$1;

  function ownKeys$2N(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 1H16.5V4H22V6H19.971L19.471 23H4.52898L4.02898 6H2V4H7.5V1ZM9.5 4H14.5V3H9.5V4ZM6.02984 6L6.47102 21H17.529L17.9702 6H6.02984ZM13 8V19H11V8H13Z"
      }
    }]
  };
  var _delete = Vue.defineComponent({
    name: "DeleteIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-delete", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2M(_objectSpread$2M({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$x, finalProps.value);
      };
    }
  });
  var TdDeleteIcon = _delete;

  function ownKeys$2M(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 3L13 12.5858L16.5 9.08579L17.9142 10.5L12 16.4142L6.08579 10.5L7.5 9.08579L11 12.5858L11 3L13 3ZM4.5 14V19H19.5V14H21.5V21H2.5V14H4.5Z"
      }
    }]
  };
  var download = Vue.defineComponent({
    name: "DownloadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-download", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2L(_objectSpread$2L({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$w, finalProps.value);
      };
    }
  });
  var DownloadIcon = download;

  function ownKeys$2L(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2L(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M16.8281 1.41602L22.583 7.17092L7.75494 22.0001L2 22.0002L2 16.2453L16.8281 1.41602ZM16.8281 10.0974L19.7546 7.17092L16.8281 4.24444L13.9017 7.17092L16.8281 10.0974ZM12.4875 8.58517L4 17.0736L4 20.0001H6.92644L15.414 11.5116L12.4875 8.58517Z"
      }
    }]
  };
  var edit1 = Vue.defineComponent({
    name: "Edit1Icon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-edit-1", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2K(_objectSpread$2K({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$v, finalProps.value);
      };
    }
  });
  var TdEdit1Icon = edit1;

  function ownKeys$2K(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2K(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 10.5H6V13.5H3V10.5ZM10.5 10.5H13.5V13.5H10.5V10.5ZM18 10.5H21V13.5H18V10.5Z"
      }
    }]
  };
  var ellipsis = Vue.defineComponent({
    name: "EllipsisIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-ellipsis", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2J(_objectSpread$2J({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$u, finalProps.value);
      };
    }
  });
  var TdEllipsisIcon = ellipsis;

  function ownKeys$2J(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2J(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1ZM11.0001 14H13.0001V6.49998H11.0001V14ZM13.004 15.5H11.0001V17.5039H13.004V15.5Z"
      }
    }]
  };
  var errorCircleFilled = Vue.defineComponent({
    name: "ErrorCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-error-circle-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2I(_objectSpread$2I({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$t, finalProps.value);
      };
    }
  });
  var TdErrorCircleFilledIcon = errorCircleFilled;

  function ownKeys$2I(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2H(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2I(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13 2L13 16.5H11L11 2L13 2ZM11 19H13.0039V21.0039H11V19Z"
      }
    }]
  };
  var error = Vue.defineComponent({
    name: "ErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-error", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2H(_objectSpread$2H({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$s, finalProps.value);
      };
    }
  });
  var TdErrorIcon = error;

  function ownKeys$2H(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2G(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2H(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2H(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 1H15.4142L21 6.58579V19H6V1ZM8 3V17H19V9H13V3H8ZM15 3.41421V7H18.5858L15 3.41421ZM4 5V21H15V23H2V5H4Z"
      }
    }]
  };
  var fileCopy = Vue.defineComponent({
    name: "FileCopyIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file-copy", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2G(_objectSpread$2G({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$r, finalProps.value);
      };
    }
  });
  var TdFileCopyIcon = fileCopy;

  function ownKeys$2G(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2F(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2G(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2G(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 1H15.4142L21 6.58579V23H3V1ZM5 3V21H19V9H13V3H5ZM15 3.41421V7H18.5858L15 3.41421ZM15 9.99999L15 11.6465C15 12.1896 14.7792 12.7093 14.3883 13.0862L13.4406 14L14.3883 14.9138C14.7792 15.2907 15 15.8104 15 16.3535V18H13L13 16.3535L12 15.3892L11 16.3535L11 18L9.00001 18L9.00001 16.3535C9.00001 15.8104 9.22083 15.2907 9.61173 14.9138L10.5594 14L9.61174 13.0862C9.22083 12.7093 9.00002 12.1896 9.00001 11.6465L9 10L11 10L11 11.6465L12 12.6108L13 11.6465L13 10L15 9.99999Z"
      }
    }]
  };
  var fileExcel = Vue.defineComponent({
    name: "FileExcelIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file-excel", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2F(_objectSpread$2F({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$q, finalProps.value);
      };
    }
  });
  var TdFileExcelIcon = fileExcel;

  function ownKeys$2F(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2E(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2F(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2F(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 1H15.4142L21 6.58579V11H19V9H13V3H5V21H21V23H3V1ZM15 3.41421V7H18.5858L15 3.41421ZM6 12H9.71428C10.4244 12 11 12.5756 11 13.2857V15.7143C11 16.4244 10.4244 17 9.71428 17H8V20H6V12ZM8 15H9V14H8V15ZM11.5 12H15.2143C15.9244 12 16.5 12.5756 16.5 13.2857V18.7143C16.5 19.4244 15.9244 20 15.2143 20H11.5V12ZM13.5 14V18H14.5V14H13.5ZM17 13.2857C17 12.5756 17.5756 12 18.2857 12H21.6667V14H19V15H21.6667V17H19V20H17V13.2857Z"
      }
    }]
  };
  var filePdf = Vue.defineComponent({
    name: "FilePdfIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file-pdf", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2E(_objectSpread$2E({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$p, finalProps.value);
      };
    }
  });
  var TdFilePdfIcon = filePdf;

  function ownKeys$2E(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2D(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2E(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2E(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 1H15.4142L21 6.58579V23H3V1ZM5 3V21H19V9H13V3H5ZM15 3.41421V7H18.5858L15 3.41421ZM9 10H13C14.1046 10 15 10.8954 15 12V13.6C15 14.7046 14.1046 15.6 13 15.6H11V18H9V10ZM11 13.6L13 13.6V12H11V13.6Z"
      }
    }]
  };
  var filePowerpoint = Vue.defineComponent({
    name: "FilePowerpointIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file-powerpoint", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2D(_objectSpread$2D({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$o, finalProps.value);
      };
    }
  });
  var TdFilePowerpointIcon = filePowerpoint;

  function ownKeys$2D(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 1H15.4142L21 6.58579V23H3V1ZM5 3V21H19V9H13V3H5ZM15 3.41421V7H18.5858L15 3.41421ZM10 11V16H11L11 11H13L13 16H14V11H16V16C16 17.1046 15.1046 18 14 18H10C8.89543 18 8 17.1046 8 16V11H10Z"
      }
    }]
  };
  var fileWord = Vue.defineComponent({
    name: "FileWordIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file-word", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2C(_objectSpread$2C({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$n, finalProps.value);
      };
    }
  });
  var TdFileWordIcon = fileWord;

  function ownKeys$2C(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 1H15.4142L21 6.58579V23H3V1ZM5 3V21H19V9H13V3H5ZM15 3.41421V7H18.5858L15 3.41421Z"
      }
    }]
  };
  var file = Vue.defineComponent({
    name: "FileIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-file", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2B(_objectSpread$2B({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$m, finalProps.value);
      };
    }
  });
  var TdFileIcon = file;

  function ownKeys$2B(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.57031 3H21.4302L14.5002 12.8174V21H9.50023V12.8174L2.57031 3ZM6.43015 5L11.5002 12.1826V19H12.5002V12.1826L17.5703 5H6.43015Z"
      }
    }]
  };
  var filter = Vue.defineComponent({
    name: "FilterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-filter", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2A(_objectSpread$2A({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$l, finalProps.value);
      };
    }
  });
  var TdFilterIcon = filter;

  function ownKeys$2A(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM11.8265 11.8902C12.2582 11.3593 12.8004 10.9159 13.2365 10.5723C13.7034 10.2045 14.0002 9.63718 14.0002 9C14.0002 7.89543 13.1048 7 12.0002 7C11.131 7 10.3888 7.5551 10.1138 8.33325L9.78055 9.27609L7.89487 8.6096L8.22811 7.66676C8.77675 6.11451 10.2571 5 12.0002 5C14.2094 5 16.0002 6.79086 16.0002 9C16.0002 10.2759 15.4018 11.4125 14.4742 12.1433C14.0426 12.4834 13.6573 12.8088 13.3783 13.1519C13.1038 13.4896 13.0002 13.762 13.0002 14V15.25H11.0002V14C11.0002 13.1334 11.3905 12.4265 11.8265 11.8902ZM11.0001 18.2539V16.25H13.004V18.2539H11.0001Z"
      }
    }]
  };
  var helpCircleFilled = Vue.defineComponent({
    name: "HelpCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-help-circle-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2z(_objectSpread$2z({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$k, finalProps.value);
      };
    }
  });
  var TdHelpCircleFilledIcon = helpCircleFilled;

  function ownKeys$2z(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H22V12H20V4H4V13.5858L9 8.58579L14.4142 14L13 15.4142L9 11.4142L4 16.4142V20H12V22H2V2ZM15.5469 7C14.9946 7 14.5469 7.44772 14.5469 8C14.5469 8.55228 14.9946 9 15.5469 9C16.0992 9 16.5469 8.55228 16.5469 8C16.5469 7.44772 16.0992 7 15.5469 7ZM12.5469 8C12.5469 6.34315 13.89 5 15.5469 5C17.2037 5 18.5469 6.34315 18.5469 8C18.5469 9.65685 17.2037 11 15.5469 11C13.89 11 12.5469 9.65685 12.5469 8ZM16.1716 14.7574L19 17.5858L21.8284 14.7574L23.2426 16.1716L20.4142 19L23.2426 21.8284L21.8284 23.2426L19 20.4142L16.1716 23.2426L14.7574 21.8284L17.5858 19L14.7574 16.1716L16.1716 14.7574Z"
      }
    }]
  };
  var imageError = Vue.defineComponent({
    name: "ImageErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-image-error", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2y(_objectSpread$2y({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$j, finalProps.value);
      };
    }
  });
  var ImageErrorIcon = imageError;

  function ownKeys$2y(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H22V22H2V2ZM4 20H17.5858L9 11.4142L4 16.4142V20ZM20 19.5858V4H4V13.5858L9 8.58579L20 19.5858ZM15.5469 7C14.9946 7 14.5469 7.44772 14.5469 8C14.5469 8.55228 14.9946 9 15.5469 9C16.0992 9 16.5469 8.55228 16.5469 8C16.5469 7.44772 16.0992 7 15.5469 7ZM12.5469 8C12.5469 6.34315 13.89 5 15.5469 5C17.2037 5 18.5469 6.34315 18.5469 8C18.5469 9.65685 17.2037 11 15.5469 11C13.89 11 12.5469 9.65685 12.5469 8Z"
      }
    }]
  };
  var image = Vue.defineComponent({
    name: "ImageIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-image", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2x(_objectSpread$2x({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$i, finalProps.value);
      };
    }
  });
  var ImageIcon = image;

  function ownKeys$2x(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 23C18.0751 23 23 18.0751 23 12C23 5.92487 18.0751 1 12 1C5.92487 1 1 5.92487 1 12C1 18.0751 5.92487 23 12 23ZM10.996 8.50002V6.49611H12.9999V8.50002H10.996ZM12.9999 10L12.9999 17.5H10.9999V10L12.9999 10Z"
      }
    }]
  };
  var infoCircleFilled = Vue.defineComponent({
    name: "InfoCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-info-circle-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2w(_objectSpread$2w({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$h, finalProps.value);
      };
    }
  });
  var TdInfoCircleFilledIcon = infoCircleFilled;

  function ownKeys$2w(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H22V22L2 22V2ZM4 4V20L20 20V4H4ZM6.5 11L17.5 11V13L6.5 13V11Z"
      }
    }]
  };
  var minusRectangle = Vue.defineComponent({
    name: "MinusRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-minus-rectangle", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2v(_objectSpread$2v({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$g, finalProps.value);
      };
    }
  });
  var TdMinusRectangleIcon = minusRectangle;

  function ownKeys$2v(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.0003 2L13.0003 22H11.0003L11.0003 2L13.0003 2ZM9.0003 4.64087V18.5H1.30078L9.0003 4.64087ZM15.0003 4.64087L22.6998 18.5H15.0003V4.64087ZM4.69981 16.5H7.0003V12.3591L4.69981 16.5ZM17.0003 12.3591V16.5H19.3008L17.0003 12.3591Z"
      }
    }]
  };
  var mirror = Vue.defineComponent({
    name: "MirrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-mirror", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2u(_objectSpread$2u({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$f, finalProps.value);
      };
    }
  });
  var MirrorIcon = mirror;

  function ownKeys$2u(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 5V19H6.5V5H8.5ZM17.6642 6.75L12.4142 12L17.6642 17.25L16.25 18.6642L9.58579 12L16.25 5.33579L17.6642 6.75Z"
      }
    }]
  };
  var pageFirst = Vue.defineComponent({
    name: "PageFirstIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-page-first", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2t(_objectSpread$2t({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$e, finalProps.value);
      };
    }
  });
  var TdPageFirstIcon = pageFirst;

  function ownKeys$2t(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M17.5002 5V19H15.5002V5H17.5002ZM7.75015 5.33579L14.4144 12L7.75015 18.6642L6.33594 17.25L11.5859 12L6.33594 6.75L7.75015 5.33579Z"
      }
    }]
  };
  var pageLast = Vue.defineComponent({
    name: "PageLastIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-page-last", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2s(_objectSpread$2s({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$d, finalProps.value);
      };
    }
  });
  var TdPageLastIcon = pageLast;

  function ownKeys$2s(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M20.4997 5.83468C18.5918 3.20865 15.4961 1.5 11.9997 1.5C6.57341 1.5 2.10958 5.61542 1.55717 10.896L1.45312 11.8905L3.44227 12.0986L3.54632 11.104C3.9933 6.83125 7.60814 3.5 11.9997 3.5C15.0404 3.5 17.7099 5.09688 19.2125 7.5H15.4997V9.5H22.4997V2.5H20.4997V5.83468ZM20.5572 11.9014L20.4532 12.896C20.0062 17.1687 16.3913 20.5 11.9997 20.5C8.95904 20.5 6.28956 18.9031 4.78702 16.5H8.49974V14.5H1.49974V21.5H3.49974V18.1653C5.40769 20.7914 8.50342 22.5 11.9997 22.5C17.4261 22.5 21.8899 18.3846 22.4423 13.104L22.5464 12.1095L20.5572 11.9014Z"
      }
    }]
  };
  var refresh = Vue.defineComponent({
    name: "RefreshIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-refresh", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2r(_objectSpread$2r({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$c, finalProps.value);
      };
    }
  });
  var RefreshIcon = refresh;

  function ownKeys$2r(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 11L20 11V13L4 13L4 11Z"
      }
    }]
  };
  var remove = Vue.defineComponent({
    name: "RemoveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-remove", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2q(_objectSpread$2q({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$b, finalProps.value);
      };
    }
  });
  var TdRemoveIcon = remove;

  function ownKeys$2q(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 2V11C8.97056 11 13 15.0294 13 20H22V22H2V2H4ZM4 20H11C11 16.134 7.86599 13 4 13V20Z"
      }
    }]
  };
  var rotation = Vue.defineComponent({
    name: "RotationIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-rotation", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2p(_objectSpread$2p({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$a, finalProps.value);
      };
    }
  });
  var RotationIcon = rotation;

  function ownKeys$2p(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6ZM4 12C4 7.58172 7.58172 4 12 4C16.4183 4 20 7.58172 20 12C20 16.4183 16.4183 20 12 20C7.58172 20 4 16.4183 4 12Z"
      }
    }]
  };
  var round$1 = Vue.defineComponent({
    name: "RoundIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-round", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2o(_objectSpread$2o({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$9, finalProps.value);
      };
    }
  });
  var TdRoundIcon = round$1;

  function ownKeys$2o(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15.0962 5.90381C12.5578 3.3654 8.44221 3.3654 5.90381 5.90381C3.3654 8.44221 3.3654 12.5578 5.90381 15.0962C8.44221 17.6346 12.5578 17.6346 15.0962 15.0962C17.6346 12.5578 17.6346 8.44221 15.0962 5.90381ZM4.48959 4.48959C7.80905 1.17014 13.191 1.17014 16.5104 4.48959C19.5906 7.56983 19.8126 12.4259 17.1764 15.7621L22.5208 21.1066L21.1066 22.5208L15.7621 17.1764C12.4259 19.8126 7.56983 19.5906 4.48959 16.5104C1.17014 13.191 1.17014 7.80905 4.48959 4.48959Z"
      }
    }]
  };
  var search = Vue.defineComponent({
    name: "SearchIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-search", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2n(_objectSpread$2n({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$8, finalProps.value);
      };
    }
  });
  var TdSearchIcon = search;

  function ownKeys$2n(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2m(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.0001 0.845337L21.6604 6.42269V17.5774L12.0001 23.1547L2.33984 17.5774V6.42269L12.0001 0.845337ZM12.0001 3.15474L4.33984 7.57739V16.4227L12.0001 20.8453L19.6604 16.4227V7.57739L12.0001 3.15474ZM12.0001 9.00004C10.3432 9.00004 9.0001 10.3432 9.0001 12C9.0001 13.6569 10.3432 15 12.0001 15C13.657 15 15.0001 13.6569 15.0001 12C15.0001 10.3432 13.657 9.00004 12.0001 9.00004ZM7.0001 12C7.0001 9.23861 9.23867 7.00004 12.0001 7.00004C14.7615 7.00004 17.0001 9.23861 17.0001 12C17.0001 14.7615 14.7615 17 12.0001 17C9.23867 17 7.0001 14.7615 7.0001 12Z"
      }
    }]
  };
  var setting = Vue.defineComponent({
    name: "SettingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-setting", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2m(_objectSpread$2m({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$7, finalProps.value);
      };
    }
  });
  var TdSettingIcon = setting;

  function ownKeys$2m(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2l(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.0012 0.63031L14.9039 8.98087L23.7427 9.16099L16.6978 14.502L19.2579 22.9639L12.0012 17.9143L4.74461 22.9639L7.30465 14.502L0.259766 9.16099L9.09859 8.98087L12.0012 0.63031Z"
      }
    }]
  };
  var starFilled = Vue.defineComponent({
    name: "StarFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-star-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2l(_objectSpread$2l({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$6, finalProps.value);
      };
    }
  });
  var StarFilledIcon = starFilled;

  function ownKeys$2l(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2k(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23ZM12.9999 5.49999H10.9999L10.9998 12.4142L14.9999 16.4142L16.4141 15L12.9999 11.5858V5.49999Z"
      }
    }]
  };
  var timeFilled = Vue.defineComponent({
    name: "TimeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-time-filled", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2k(_objectSpread$2k({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$5, finalProps.value);
      };
    }
  });
  var TdTimeFilledIcon = timeFilled;

  function ownKeys$2k(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2j(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21ZM23 12C23 18.0751 18.0751 23 12 23C5.92487 23 0.999999 18.0751 1 12C1 5.92487 5.92487 0.999999 12 1C18.0751 1 23 5.92487 23 12ZM15 16.4142L11 12.4142L11 5.5H13L13 11.5858L16.4142 15L15 16.4142Z"
      }
    }]
  };
  var time = Vue.defineComponent({
    name: "TimeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-time", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2j(_objectSpread$2j({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$4, finalProps.value);
      };
    }
  });
  var TdTimeIcon = time;

  function ownKeys$2j(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2i(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12 2.58569L17.9142 8.49991L16.5 9.91412L13 6.41412L13 15.9999H11L11 6.41412L7.5 9.91412L6.08579 8.49991L12 2.58569ZM4.5 13.9999V18.9999H19.5V13.9999H21.5V20.9999H2.5V13.9999H4.5Z"
      }
    }]
  };
  var upload$1 = Vue.defineComponent({
    name: "UploadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-upload", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2i(_objectSpread$2i({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$3, finalProps.value);
      };
    }
  });
  var TdUploadIcon = upload$1;

  function ownKeys$2i(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2h(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 2H22V22H2V2ZM4 4V20H20V4H4ZM8 6.37083L17.75 12L8 17.6292L8 6.37083ZM10 9.83494L10 14.1651L13.75 12L10 9.83494Z"
      }
    }]
  };
  var video = Vue.defineComponent({
    name: "VideoIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-video", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2h(_objectSpread$2h({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$2, finalProps.value);
      };
    }
  });
  var TdVideoIcon = video;

  function ownKeys$2h(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2g(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15.0962 5.90381C12.5578 3.3654 8.44221 3.3654 5.90381 5.90381C3.3654 8.44221 3.3654 12.5578 5.90381 15.0962C8.44221 17.6346 12.5578 17.6346 15.0962 15.0962C17.6346 12.5578 17.6346 8.44221 15.0962 5.90381ZM4.48959 4.48959C7.80905 1.17014 13.191 1.17014 16.5104 4.48959C19.5906 7.56983 19.8126 12.4259 17.1764 15.7621L22.5208 21.1066L21.1066 22.5208L15.7621 17.1764C12.4259 19.8126 7.56983 19.5906 4.48959 16.5104C1.17014 13.191 1.17014 7.80905 4.48959 4.48959ZM11.5 6.5L11.5 9.5H14.5V11.5H11.5V14.5H9.5V11.5H6.5V9.5H9.5L9.5 6.5L11.5 6.5Z"
      }
    }]
  };
  var zoomIn = Vue.defineComponent({
    name: "ZoomInIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-zoom-in", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2g(_objectSpread$2g({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$1, finalProps.value);
      };
    }
  });
  var ZoomInIcon = zoomIn;

  function ownKeys$2g(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2f(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 24 24",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15.0962 5.90381C12.5578 3.3654 8.44221 3.3654 5.90381 5.90381C3.3654 8.44221 3.3654 12.5578 5.90381 15.0962C8.44221 17.6346 12.5578 17.6346 15.0962 15.0962C17.6346 12.5578 17.6346 8.44221 15.0962 5.90381ZM4.48959 4.48959C7.80905 1.17014 13.191 1.17014 16.5104 4.48959C19.5906 7.56983 19.8126 12.4259 17.1764 15.7621L22.5208 21.1066L21.1066 22.5208L15.7621 17.1764C12.4259 19.8126 7.56983 19.5906 4.48959 16.5104C1.17014 13.191 1.17014 7.80905 4.48959 4.48959ZM6.5 11.5V9.5L14.5 9.5V11.5L6.5 11.5Z"
      }
    }]
  };
  var zoomOut = Vue.defineComponent({
    name: "ZoomOutIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props.size;
      });
      var _useSizeProps = useSizeProps(propsSize),
        className = _useSizeProps.className,
        style = _useSizeProps.style;
      var finalCls = Vue.computed(function () {
        return ["t-icon", "t-icon-zoom-out", className.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2f(_objectSpread$2f({}, style.value), attrs.style);
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element, finalProps.value);
      };
    }
  });
  var ZoomOutIcon = zoomOut;

  var isServer = typeof window === "undefined";
  function checkScriptAndLoad(url, className) {
    if (isServer) {
      return;
    }
    if (!document || !url || typeof url !== "string") return;
    if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
      return;
    }
    var svg = document.createElement("script");
    svg.setAttribute("class", className);
    svg.setAttribute("src", url);
    document.body.appendChild(svg);
  }

  var props$1x = {
    name: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": void 0
    },
    url: {
      type: [String, Array],
      "default": void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      "default": true
    },
    onClick: Function
  };

  function ownKeys$2f(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread$2e(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var classPrefix = ConfigContext.classPrefix;
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.3.2/fonts/index.js";
  var _Icon = Vue.defineComponent({
    name: "Icon",
    props: props$1x,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var propsSize = Vue.computed(function () {
        return props2.size;
      });
      var name = Vue.computed(function () {
        return props2.name || "";
      });
      var _useSizeProps = useSizeProps(propsSize),
        sizeClassName = _useSizeProps.className,
        sizeStyle = _useSizeProps.style;
      var finalUrl = Vue.computed(function () {
        var url = [];
        url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
        if (props2.loadDefaultIcons) url.push(CDN_ICONFONT_URL);
        return url;
      });
      var classNames = Vue.computed(function () {
        return ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name.value), sizeClassName.value];
      });
      var finalStyle = Vue.computed(function () {
        return _objectSpread$2e(_objectSpread$2e({}, sizeStyle.value), attrs.style);
      });
      Vue.onMounted(function () {
        Array.from(new Set(finalUrl.value)).forEach(function (url) {
          checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
        });
      });
      var finalProps = Vue.computed(function () {
        return {
          "class": classNames.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props2$onClick;
            return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e
            });
          }
        };
      });
      return function () {
        return Vue.h("svg", finalProps.value, Vue.h("use", {
          href: props2.url ? "#".concat(name.value) : "#t-icon-".concat(name.value)
        }));
      };
    }
  });

  var Icon$1 = _Icon;

  var Icon = withInstall$1(Icon$1, "TIcon");

  var props$1w = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    download: {
      type: [String, Boolean]
    },
    hover: {
      type: String,
      "default": "underline",
      validator: function validator(val) {
        if (!val) return true;
        return ["color", "underline"].includes(val);
      }
    },
    href: {
      type: String,
      "default": ""
    },
    prefixIcon: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    target: {
      type: String,
      "default": ""
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    underline: Boolean,
    onClick: Function
  };

  var _Link = Vue.defineComponent({
    name: "TLink",
    props: props$1w,
    emits: ["click"],
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("link");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var isDisabled = useDisabled();
      var linkClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--theme-").concat(props2.theme), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE.value[props2.size], props2.size !== "medium"), STATUS.value.disabled, isDisabled.value), "".concat(classPrefix.value, "-is-underline"), props2.underline), "".concat(COMPONENT_NAME.value, "--hover-").concat(props2.hover), !isDisabled.value)];
      });
      var handleClick = function handleClick(event) {
        if (!isDisabled.value) emit("click", event);
      };
      return function () {
        var linkContent = renderContent("default", "content");
        var prefix = renderTNodeJSX("prefixIcon");
        var suffix = renderTNodeJSX("suffixIcon");
        return Vue.createVNode("a", {
          "class": _toConsumableArray(linkClass.value),
          "href": isDisabled.value || !props2.href ? void 0 : props2.href,
          "target": !props2.target ? void 0 : props2.target,
          "download": !props2.download ? void 0 : props2.download,
          "onClick": handleClick
        }, [prefix ? Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix-icon")
        }, [prefix]) : null, linkContent, suffix ? Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix-icon")
        }, [suffix]) : null]);
      };
    }
  });

  var Link = withInstall$1(_Link);

  var props$1v = {
    align: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "stretch", "baseline", "top", "middle", "bottom"].includes(val);
      }
    },
    gutter: {
      type: [Number, Object, Array],
      "default": 0
    },
    justify: {
      type: String,
      "default": "start",
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "space-around", "space-between"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var calcSize = function calcSize(width) {
    var size = "xs";
    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }
    return size;
  };

  function useRowSize() {
    var size = Vue.ref(calcSize(isServer$1 ? 0 : window.innerWidth));
    var updateSize = function updateSize() {
      size.value = calcSize(isServer$1 ? 0 : window.innerWidth);
    };
    useListener("resize", updateSize);
    return size;
  }

  function ownKeys$2e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getRowClasses(name, props) {
    var justify = props.justify,
      align = props.align;
    return [name, _defineProperty$2(_defineProperty$2({}, "".concat(name, "--").concat(justify), justify), "".concat(name, "--align-").concat(align), align)];
  }
  function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};
    var getMarginStyle = function getMarginStyle(gutter2) {
      return Object.assign(rowStyle, {
        marginLeft: "".concat(gutter2 / -2, "px"),
        marginRight: "".concat(gutter2 / -2, "px")
      });
    };
    var getRowGapStyle = function getRowGapStyle(gutter2) {
      return Object.assign(rowStyle, {
        rowGap: "".concat(gutter2, "px")
      });
    };
    var strategyMap = {
      isNumber: function isNumber$1(gutter2) {
        if (isNumber(gutter2)) {
          getMarginStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (isArray$1(gutter2) && gutter2.length) {
          strategyMap.isNumber(gutter2[0]);
          if (isNumber(gutter2[1])) {
            getRowGapStyle(gutter2[1]);
          }
          if (isObject(gutter2[0]) && !isUndefined(gutter2[0][currentSize])) {
            getMarginStyle(gutter2[0][currentSize]);
          }
          if (isObject(gutter2[1]) && !isUndefined(gutter2[1][currentSize])) {
            getRowGapStyle(gutter2[1][currentSize]);
          }
        }
      },
      isObject: function isObject$1(gutter2) {
        if (isObject(gutter2) && gutter2[currentSize]) {
          if (isArray$1(gutter2) && gutter2.length) {
            getMarginStyle(gutter2[currentSize][0]);
            getRowGapStyle(gutter2[currentSize][1]);
          } else {
            getMarginStyle(gutter2[currentSize]);
          }
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return rowStyle;
  }
  function parseFlex(flex) {
    if (isNumber(flex)) {
      return "".concat(flex, " ").concat(flex, " 0");
    }
    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }
    return flex;
  }
  function calcColPadding(gutter, currentSize) {
    var paddingObj = {};
    var getPaddingStyle = function getPaddingStyle(gutter2) {
      return Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter2 / 2, "px"),
        paddingRight: "".concat(gutter2 / 2, "px")
      });
    };
    var strategyMap = {
      isNumber: function isNumber$1(gutter2) {
        if (isNumber(gutter2)) {
          getPaddingStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (isArray$1(gutter2) && gutter2.length) {
          if (isNumber(gutter2[0])) {
            getPaddingStyle(gutter2[0]);
          }
          if (isObject(gutter2[0]) && gutter2[0][currentSize]) {
            getPaddingStyle(gutter2[0][currentSize]);
          }
        }
      },
      isObject: function isObject$1(gutter2) {
        if (isObject(gutter2) && !isArray$1(gutter2) && gutter2[currentSize]) {
          getPaddingStyle(gutter2[currentSize]);
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return paddingObj;
  }
  function getColClasses(name, props) {
    var span = props.span,
      order = props.order,
      offset = props.offset,
      push = props.push,
      pull = props.pull;
    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var ColSizeClasses = allSizes.reduce(function (acc, currSize) {
      var sizeProp = props[currSize];
      var sizeObject = {};
      if (isNumber(sizeProp)) {
        sizeObject.span = sizeProp;
      } else if (isObject(sizeProp)) {
        sizeObject = sizeProp || {};
      }
      return _objectSpread$2d(_objectSpread$2d({}, acc), {}, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(name, "-").concat(currSize, "-").concat(sizeObject.span), !isUndefined(sizeObject.span)), "".concat(name, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), "".concat(name, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), "".concat(name, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), "".concat(name, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0));
    }, {});
    return _objectSpread$2d(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(name), true), "".concat(name, "-").concat(span), !isUndefined(span)), "".concat(name, "-order-").concat(order), order), "".concat(name, "-offset-").concat(offset), offset), "".concat(name, "-push-").concat(push), push), "".concat(name, "-pull-").concat(pull), pull), ColSizeClasses);
  }

  function _isSlot$G(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Row = Vue.defineComponent({
    name: "TRow",
    props: props$1v,
    setup: function setup(props2) {
      var _toRefs = Vue.toRefs(props2),
        gutter = _toRefs.gutter;
      var renderTNodeJSX = useTNodeJSX();
      Vue.provide("rowContext", Vue.reactive({
        gutter: gutter
      }));
      var size = useRowSize();
      var COMPONENT_NAME = usePrefixClass("row");
      var rowClasses = Vue.computed(function () {
        return getRowClasses(COMPONENT_NAME.value, props2);
      });
      var rowStyle = Vue.computed(function () {
        return calcRowStyle(props2.gutter, size.value);
      });
      return function () {
        var _slot;
        var TAG = props2.tag;
        return Vue.createVNode(TAG, {
          "class": rowClasses.value,
          "style": rowStyle.value
        }, _isSlot$G(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var props$1u = {
    flex: {
      type: [String, Number]
    },
    lg: {
      type: [Number, Object]
    },
    md: {
      type: [Number, Object]
    },
    offset: {
      type: Number,
      "default": 0
    },
    order: {
      type: Number,
      "default": 0
    },
    pull: {
      type: Number,
      "default": 0
    },
    push: {
      type: Number,
      "default": 0
    },
    sm: {
      type: [Number, Object]
    },
    span: {
      type: Number
    },
    tag: {
      type: String,
      "default": "div"
    },
    xl: {
      type: [Number, Object]
    },
    xs: {
      type: [Number, Object]
    },
    xxl: {
      type: [Number, Object]
    }
  };

  function _isSlot$F(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Col = Vue.defineComponent({
    name: "TCol",
    inject: ["rowContext"],
    props: props$1u,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("col");
      var renderTNodeJSX = useTNodeJSX();
      var rowContext = Vue.inject("rowContext", /* @__PURE__ */Object.create(null));
      var size = useRowSize();
      var colClasses = Vue.computed(function () {
        return getColClasses(COMPONENT_NAME.value, props2);
      });
      var colStyle = Vue.computed(function () {
        var colStyle2 = {};
        var flex = props2.flex;
        flex && (colStyle2.flex = parseFlex(flex));
        if (rowContext) {
          var rowGutter = rowContext.gutter;
          Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
        }
        return colStyle2;
      });
      return function () {
        var _slot;
        var TAG = props2.tag;
        return Vue.createVNode(TAG, {
          "class": colClasses.value,
          "style": colStyle.value
        }, _isSlot$F(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var Row = withInstall$1(_Row);
  var Col = withInstall$1(_Col);

  var _Layout = Vue.defineComponent({
    name: "TLayout",
    setup: function setup() {
      var hasSide = Vue.ref(false);
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("layout");
      var classes = Vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--with-sider"), hasSide.value)];
      });
      Vue.provide("layout", {
        hasSide: hasSide
      });
      return function () {
        return Vue.createVNode("section", {
          "class": classes.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1t = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Header = Vue.defineComponent({
    name: "THeader",
    props: props$1t,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__header");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return Vue.createVNode("header", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1s = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Footer = Vue.defineComponent({
    name: "TFooter",
    props: props$1s,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__footer");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return Vue.createVNode("footer", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1r = {
    width: {
      type: String,
      "default": ""
    }
  };

  var _Aside = Vue.defineComponent({
    name: "TAside",
    props: props$1r,
    setup: function setup(props2) {
      var _inject = Vue.inject("layout", /* @__PURE__ */Object.create(null)),
        hasSide = _inject.hasSide;
      var COMPONENT_NAME = usePrefixClass("layout__sider");
      var renderTNodeJSX = useTNodeJSX();
      if (!hasSide) return;
      Vue.onMounted(function () {
        hasSide.value = true;
      });
      Vue.onUnmounted(function () {
        hasSide.value = false;
      });
      return function () {
        var styles = props2.width ? {
          width: props2.width
        } : {};
        return Vue.createVNode("aside", {
          "class": COMPONENT_NAME.value,
          "style": styles
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$1q = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    }
  };

  var _Content = Vue.defineComponent({
    name: "TContent",
    props: props$1q,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("layout__content");
      var renderContent = useContent();
      return function () {
        return Vue.createVNode("main", {
          "class": COMPONENT_NAME.value
        }, [renderContent("default", "content")]);
      };
    }
  });

  var Aside = withInstall$1(_Aside);
  var Layout = withInstall$1(_Layout);
  var Header = withInstall$1(_Header);
  var Footer = withInstall$1(_Footer);
  var Content$1 = withInstall$1(_Content);

  var props$1p = {
    align: {
      type: String,
      "default": "center",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "center"].includes(val);
      }
    },
    content: {
      type: [String, Function]
    },
    dashed: Boolean,
    "default": {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    }
  };

  var _Divider = Vue.defineComponent({
    name: "TDivider",
    props: props$1p,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("divider");
      var renderContent = useContent();
      return function () {
        var layout = props2.layout,
          dashed = props2.dashed,
          align = props2.align;
        var children = renderContent("default", "content");
        var dividerClassNames = ["".concat(COMPONENT_NAME.value), ["".concat(COMPONENT_NAME.value, "--").concat(layout)], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--dashed"), !!dashed), "".concat(COMPONENT_NAME.value, "--with-text"), !!children), "".concat(COMPONENT_NAME.value, "--with-text-").concat(align), !!children)];
        return Vue.createVNode("div", {
          "class": dividerClassNames
        }, [children && Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__inner-text")
        }, [children])]);
      };
    }
  });

  var Divider = withInstall$1(_Divider);

  var props$1o = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "baseline"].includes(val);
      }
    },
    breakLine: Boolean,
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "horizontal"].includes(val);
      }
    },
    separator: {
      type: [String, Function]
    },
    size: {
      type: [String, Number, Array],
      "default": "medium"
    }
  };

  function ownKeys$2d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var sizeMap = {
    small: "8px",
    medium: "16px",
    large: "24px"
  };
  var defaultNeedPolyfill = getFlexGapPolyFill();
  var _Space = Vue.defineComponent({
    name: "TSpace",
    props: _objectSpread$2c(_objectSpread$2c({}, props$1o), {}, {
      forceFlexGapPolyfill: Boolean
    }),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("space");
      var renderTNodeJSX = useTNodeJSX();
      var getChildSlots = useChildSlots();
      var getFlatChildren = useFlatChildrenSlots();
      var needPolyfill = Vue.computed(function () {
        return props2.forceFlexGapPolyfill || defaultNeedPolyfill;
      });
      var renderStyle = Vue.computed(function () {
        var renderGap = "";
        if (isArray$1(props2.size)) {
          renderGap = props2.size.map(function (s) {
            if (isNumber(s)) return "".concat(s, "px");
            if (isString(s) && ["small", "medium", "large"].includes(s)) return sizeMap[s];
            return s;
          }).join(" ");
        } else if (isString(props2.size)) {
          renderGap = ["small", "medium", "large"].includes(props2.size) ? sizeMap[props2.size] : props2.size;
        } else if (isNumber(props2.size)) {
          renderGap = "".concat(props2.size, "px");
        }
        var style = {};
        if (needPolyfill.value) {
          var _renderGap$split = renderGap.split(" "),
            _renderGap$split2 = _slicedToArray(_renderGap$split, 2),
            columnGap = _renderGap$split2[0],
            rowGap = _renderGap$split2[1];
          style["--td-space-column-gap"] = columnGap;
          style["--td-space-row-gap"] = rowGap || columnGap;
        } else {
          style.gap = renderGap;
        }
        return style;
      });
      function renderChildren() {
        var children = getFlatChildren(getChildSlots());
        var separatorContent = renderTNodeJSX("separator");
        return children.map(function (child, index) {
          var showSeparator = index + 1 !== children.length && separatorContent;
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-item")
          }, [child]), showSeparator && Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-item-separator")
          }, [separatorContent])]);
        });
      }
      return function () {
        var spaceClassNames = ["".concat(COMPONENT_NAME.value), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-align-").concat(props2.align), props2.align), "".concat(COMPONENT_NAME.value, "-").concat(props2.direction), props2.direction), "".concat(COMPONENT_NAME.value, "--break-line"), props2.breakLine), "".concat(COMPONENT_NAME.value, "--polyfill"), needPolyfill.value)];
        return Vue.createVNode("div", {
          "class": spaceClassNames,
          "style": renderStyle.value
        }, [renderChildren()]);
      };
    }
  });

  var Space = withInstall$1(_Space);

  var props$1n = {
    bordered: Boolean,
    colon: Boolean,
    column: {
      type: Number,
      "default": 2
    },
    contentStyle: {
      type: Object
    },
    itemLayout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    items: {
      type: Array
    },
    labelStyle: {
      type: Object
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        if (!val) return true;
        return ["fixed", "auto"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    }
  };

  var descriptionsKey = Symbol("TDescriptions");

  var ItemsType = /* @__PURE__ */function (ItemsType2) {
    ItemsType2["props"] = "props";
    ItemsType2["slots"] = "slots";
    return ItemsType2;
  }(ItemsType || {});

  function renderCustomNode(node) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (isString(node)) {
      return node;
    }
    if (isFunction(node)) {
      return node(Vue.h, params);
    }
    if (isFunction(node === null || node === void 0 ? void 0 : node.render)) {
      return node.render(Vue.h, params);
    }
    return node;
  }
  function renderVNodeTNode(node, name1, name2) {
    var _node$props;
    var prop = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props[name1];
    if (prop) return prop;
    var children = node.children;
    var slot = (children === null || children === void 0 ? void 0 : children[name1]) || (children === null || children === void 0 ? void 0 : children[name2]);
    if (slot) return slot === null || slot === void 0 ? void 0 : slot();
    return null;
  }
  function itemTypeIsProps(itemsType, item) {
    return itemsType === ItemsType.props;
  }

  var DescriptionsRow = Vue.defineComponent({
    name: "TDescriptionsRow",
    props: {
      row: Array,
      itemType: String
    },
    setup: function setup(props) {
      var descriptionsProps = Vue.inject(descriptionsKey);
      var COMPONENT_NAME = usePrefixClass("descriptions");
      var _useConfig = useConfig("descriptions"),
        globalConfig = _useConfig.globalConfig;
      var layoutIsHorizontal = Vue.computed(function () {
        return descriptionsProps.layout === "horizontal";
      });
      var itemLayoutIsHorizontal = Vue.computed(function () {
        return descriptionsProps.itemLayout === "horizontal";
      });
      var label = function label(node) {
        var labelClass = ["".concat(COMPONENT_NAME.value, "__label")];
        var label2 = null;
        var span = null;
        if (itemTypeIsProps(props.itemType)) {
          label2 = node.label;
          span = node.span;
        } else {
          label2 = renderVNodeTNode(node, "label");
          span = node.props.span;
        }
        var labelSpan = layoutIsHorizontal.value ? itemLayoutIsHorizontal.value ? 1 : span : 1;
        return Vue.createVNode("td", Vue.mergeProps({
          "colspan": labelSpan,
          "class": labelClass
        }, {
          style: descriptionsProps.labelStyle
        }), [label2, descriptionsProps.colon && globalConfig.value.colonText]);
      };
      var content = function content(node) {
        var contentClass = ["".concat(COMPONENT_NAME.value, "__content")];
        var content2 = null;
        var span = null;
        if (itemTypeIsProps(props.itemType)) {
          content2 = node.content;
          span = node.span;
        } else {
          content2 = renderVNodeTNode(node, "content", "default");
          span = node.props.span;
        }
        var contentSpan = layoutIsHorizontal.value ? span > 1 && itemLayoutIsHorizontal.value ? span * 2 - 1 : span : 1;
        return Vue.createVNode("td", Vue.mergeProps({
          "colspan": contentSpan,
          "class": contentClass
        }, {
          style: descriptionsProps.contentStyle
        }), [content2]);
      };
      var hh = function hh() {
        return Vue.createVNode("tr", null, [props.row.map(function (node) {
          return Vue.createVNode(Vue.Fragment, null, [label(node), content(node)]);
        })]);
      };
      var hv = function hv() {
        return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("tr", null, [props.row.map(function (node) {
          return label(node);
        })]), Vue.createVNode("tr", null, [props.row.map(function (node) {
          return content(node);
        })])]);
      };
      var vh = function vh() {
        return Vue.createVNode(Vue.Fragment, null, [props.row.map(function (node) {
          return Vue.createVNode("tr", null, [label(node), content(node)]);
        })]);
      };
      var vv = function vv() {
        return Vue.createVNode(Vue.Fragment, null, [props.row.map(function (node) {
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("tr", null, [label(node)]), Vue.createVNode("tr", null, [content(node)])]);
        })]);
      };
      return function () {
        return Vue.createVNode(Vue.Fragment, null, [layoutIsHorizontal.value ? itemLayoutIsHorizontal.value ? hh() : hv() : itemLayoutIsHorizontal.value ? vh() : vv()]);
      };
    }
  });

  var _Descriptions = Vue.defineComponent({
    name: "TDescriptions",
    props: props$1n,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("descriptions");
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var getChildByName = useChildComponentSlots();
      var renderTNodeJSX = useTNodeJSX();
      var itemsType = Vue.ref(ItemsType.props);
      var getRows = function getRows() {
        var column = props2.column,
          layout = props2.layout;
        var items = [];
        if (isArray$1(props2.items)) {
          items = props2.items.map(function (item) {
            return {
              label: renderCustomNode(item.label),
              content: renderCustomNode(item.content),
              span: item.span || 1
            };
          });
          itemsType.value = ItemsType.props;
        } else {
          var slots = getChildByName("TDescriptionsItem");
          if (slots.length !== 0) {
            items = slots;
            itemsType.value = ItemsType.slots;
          }
        }
        if (layout === "vertical") {
          return [items];
        }
        var temp = [];
        var reset = column;
        var res = [];
        items.forEach(function (item, index) {
          var span = 1;
          if (itemTypeIsProps(itemsType.value)) {
            span = isNil(item.span) ? span : item.span;
            span = span > column ? column : span;
          } else {
            var _item$props;
            item.props = item.props || {};
            span = isNil((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.span) ? span : item.props.span;
            span = span > column ? column : span;
            item.props.span = span;
          }
          if (reset >= span) {
            temp.push(item);
            reset -= span;
          } else {
            res.push(temp);
            temp = [item];
            reset = column - span;
          }
          if (index === items.length - 1) {
            if (itemTypeIsProps(itemsType.value)) {
              item.span += reset;
            } else {
              item.props.span += reset;
            }
            res.push(temp);
          }
        });
        return res;
      };
      Vue.provide(descriptionsKey, props2);
      var renderBody = function renderBody() {
        var tableClass = ["".concat(COMPONENT_NAME.value, "__body"), SIZE.value[props2.size], _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__body--fixed"), props2.tableLayout === "fixed"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__body--border"), props2.bordered)];
        return Vue.createVNode("table", {
          "class": tableClass
        }, [Vue.createVNode("tbody", null, [getRows().map(function (row) {
          return Vue.createVNode(DescriptionsRow, {
            "item-type": itemsType.value,
            "row": row
          }, null);
        })])]);
      };
      var renderHeader = function renderHeader() {
        var title = renderTNodeJSX("title");
        return title ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [title]) : "";
      };
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [renderHeader(), renderBody()]);
      };
    }
  });

  var props$1m = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    label: {
      type: [String, Function]
    },
    span: {
      type: Number,
      "default": 1
    }
  };

  var _DescriptionsItem = Vue.defineComponent({
    name: "TDescriptionsItem",
    props: props$1m
  });

  var Descriptions = withInstall$1(_Descriptions);
  var DescriptionsItem = withInstall$1(_DescriptionsItem);

  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }

  var regeneratorRuntime$1 = {exports: {}};

  var OverloadYield = {exports: {}};

  OverloadYield.exports;
  (function (module) {
    function _OverloadYield(e, d) {
      this.v = e, this.k = d;
    }
    module.exports = _OverloadYield, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(OverloadYield);
  var OverloadYieldExports = OverloadYield.exports;

  var regenerator$1 = {exports: {}};

  var regeneratorDefine = {exports: {}};

  regeneratorDefine.exports;
  (function (module) {
    function _regeneratorDefine(e, r, n, t) {
      var i = Object.defineProperty;
      try {
        i({}, "", {});
      } catch (e) {
        i = 0;
      }
      module.exports = _regeneratorDefine = function regeneratorDefine(e, r, n, t) {
        if (r) i ? i(e, r, {
          value: n,
          enumerable: !t,
          configurable: !t,
          writable: !t
        }) : e[r] = n;else {
          var o = function o(r, n) {
            _regeneratorDefine(e, r, function (e) {
              return this._invoke(r, n, e);
            });
          };
          o("next", 0), o("throw", 1), o("return", 2);
        }
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _regeneratorDefine(e, r, n, t);
    }
    module.exports = _regeneratorDefine, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorDefine);
  var regeneratorDefineExports = regeneratorDefine.exports;

  regenerator$1.exports;
  (function (module) {
    var regeneratorDefine = regeneratorDefineExports;
    function _regenerator() {
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
      var e,
        t,
        r = "function" == typeof Symbol ? Symbol : {},
        n = r.iterator || "@@iterator",
        o = r.toStringTag || "@@toStringTag";
      function i(r, n, o, i) {
        var c = n && n.prototype instanceof Generator ? n : Generator,
          u = Object.create(c.prototype);
        return regeneratorDefine(u, "_invoke", function (r, n, o) {
          var i,
            c,
            u,
            f = 0,
            p = o || [],
            y = !1,
            G = {
              p: 0,
              n: 0,
              v: e,
              a: d,
              f: d.bind(e, 4),
              d: function d(t, r) {
                return i = t, c = 0, u = e, G.n = r, a;
              }
            };
          function d(r, n) {
            for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
              var o,
                i = p[t],
                d = G.p,
                l = i[2];
              r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));
            }
            if (o || r > 1) return a;
            throw y = !0, n;
          }
          return function (o, p, l) {
            if (f > 1) throw TypeError("Generator is already running");
            for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {
              i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);
              try {
                if (f = 2, i) {
                  if (c || (o = "next"), t = i[o]) {
                    if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object");
                    if (!t.done) return t;
                    u = t.value, c < 2 && (c = 0);
                  } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1);
                  i = e;
                } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
              } catch (t) {
                i = e, c = 1, u = t;
              } finally {
                f = 1;
              }
            }
            return {
              value: t,
              done: y
            };
          };
        }(r, o, i), !0), u;
      }
      var a = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      t = Object.getPrototypeOf;
      var c = [][n] ? t(t([][n]())) : (regeneratorDefine(t = {}, n, function () {
          return this;
        }), t),
        u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
      function f(e) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, regeneratorDefine(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e;
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), regeneratorDefine(u), regeneratorDefine(u, o, "Generator"), regeneratorDefine(u, n, function () {
        return this;
      }), regeneratorDefine(u, "toString", function () {
        return "[object Generator]";
      }), (module.exports = _regenerator = function _regenerator() {
        return {
          w: i,
          m: f
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regenerator$1);
  var regeneratorExports = regenerator$1.exports;

  var regeneratorAsync = {exports: {}};

  var regeneratorAsyncGen = {exports: {}};

  var regeneratorAsyncIterator = {exports: {}};

  regeneratorAsyncIterator.exports;
  (function (module) {
    var OverloadYield = OverloadYieldExports;
    var regeneratorDefine = regeneratorDefineExports;
    function AsyncIterator(t, e) {
      function n(r, o, i, f) {
        try {
          var c = t[r](o),
            u = c.value;
          return u instanceof OverloadYield ? e.resolve(u.v).then(function (t) {
            n("next", t, i, f);
          }, function (t) {
            n("throw", t, i, f);
          }) : e.resolve(u).then(function (t) {
            c.value = t, i(c);
          }, function (t) {
            return n("throw", t, i, f);
          });
        } catch (t) {
          f(t);
        }
      }
      var r;
      this.next || (regeneratorDefine(AsyncIterator.prototype), regeneratorDefine(AsyncIterator.prototype, "function" == typeof Symbol && Symbol.asyncIterator || "@asyncIterator", function () {
        return this;
      })), regeneratorDefine(this, "_invoke", function (t, o, i) {
        function f() {
          return new e(function (e, r) {
            n(t, i, e, r);
          });
        }
        return r = r ? r.then(f, f) : f();
      }, !0);
    }
    module.exports = AsyncIterator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorAsyncIterator);
  var regeneratorAsyncIteratorExports = regeneratorAsyncIterator.exports;

  regeneratorAsyncGen.exports;
  (function (module) {
    var regenerator = regeneratorExports;
    var regeneratorAsyncIterator = regeneratorAsyncIteratorExports;
    function _regeneratorAsyncGen(r, e, t, o, n) {
      return new regeneratorAsyncIterator(regenerator().w(r, e, t, o), n || Promise);
    }
    module.exports = _regeneratorAsyncGen, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorAsyncGen);
  var regeneratorAsyncGenExports = regeneratorAsyncGen.exports;

  regeneratorAsync.exports;
  (function (module) {
    var regeneratorAsyncGen = regeneratorAsyncGenExports;
    function _regeneratorAsync(n, e, r, t, o) {
      var a = regeneratorAsyncGen(n, e, r, t, o);
      return a.next().then(function (n) {
        return n.done ? n.value : a.next();
      });
    }
    module.exports = _regeneratorAsync, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorAsync);
  var regeneratorAsyncExports = regeneratorAsync.exports;

  var regeneratorKeys = {exports: {}};

  regeneratorKeys.exports;
  (function (module) {
    function _regeneratorKeys(e) {
      var n = Object(e),
        r = [];
      for (var t in n) r.unshift(t);
      return function e() {
        for (; r.length;) if ((t = r.pop()) in n) return e.value = t, e.done = !1, e;
        return e.done = !0, e;
      };
    }
    module.exports = _regeneratorKeys, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorKeys);
  var regeneratorKeysExports = regeneratorKeys.exports;

  var regeneratorValues = {exports: {}};

  var _typeof$2 = {exports: {}};

  _typeof$2.exports;
  (function (module) {
    function _typeof(o) {
      "@babel/helpers - typeof";

      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof$2);
  var _typeofExports = _typeof$2.exports;

  regeneratorValues.exports;
  (function (module) {
    var _typeof = _typeofExports["default"];
    function _regeneratorValues(e) {
      if (null != e) {
        var t = e["function" == typeof Symbol && Symbol.iterator || "@@iterator"],
          r = 0;
        if (t) return t.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) return {
          next: function next() {
            return e && r >= e.length && (e = void 0), {
              value: e && e[r++],
              done: !e
            };
          }
        };
      }
      throw new TypeError(_typeof(e) + " is not iterable");
    }
    module.exports = _regeneratorValues, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorValues);
  var regeneratorValuesExports = regeneratorValues.exports;

  regeneratorRuntime$1.exports;
  (function (module) {
    var OverloadYield = OverloadYieldExports;
    var regenerator = regeneratorExports;
    var regeneratorAsync = regeneratorAsyncExports;
    var regeneratorAsyncGen = regeneratorAsyncGenExports;
    var regeneratorAsyncIterator = regeneratorAsyncIteratorExports;
    var regeneratorKeys = regeneratorKeysExports;
    var regeneratorValues = regeneratorValuesExports;
    function _regeneratorRuntime() {

      var r = regenerator(),
        e = r.m(_regeneratorRuntime),
        t = (Object.getPrototypeOf ? Object.getPrototypeOf(e) : e.__proto__).constructor;
      function n(r) {
        var e = "function" == typeof r && r.constructor;
        return !!e && (e === t || "GeneratorFunction" === (e.displayName || e.name));
      }
      var o = {
        "throw": 1,
        "return": 2,
        "break": 3,
        "continue": 3
      };
      function a(r) {
        var e, t;
        return function (n) {
          e || (e = {
            stop: function stop() {
              return t(n.a, 2);
            },
            "catch": function _catch() {
              return n.v;
            },
            abrupt: function abrupt(r, e) {
              return t(n.a, o[r], e);
            },
            delegateYield: function delegateYield(r, o, a) {
              return e.resultName = o, t(n.d, regeneratorValues(r), a);
            },
            finish: function finish(r) {
              return t(n.f, r);
            }
          }, t = function t(r, _t, o) {
            n.p = e.prev, n.n = e.next;
            try {
              return r(_t, o);
            } finally {
              e.next = n.n;
            }
          }), e.resultName && (e[e.resultName] = n.v, e.resultName = void 0), e.sent = n.v, e.next = n.n;
          try {
            return r.call(this, e);
          } finally {
            n.p = e.prev, n.n = e.next;
          }
        };
      }
      return (module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return {
          wrap: function wrap(e, t, n, o) {
            return r.w(a(e), t, n, o && o.reverse());
          },
          isGeneratorFunction: n,
          mark: r.m,
          awrap: function awrap(r, e) {
            return new OverloadYield(r, e);
          },
          AsyncIterator: regeneratorAsyncIterator,
          async: function async(r, e, t, o, u) {
            return (n(e) ? regeneratorAsyncGen : regeneratorAsync)(a(r), e, t, o, u);
          },
          keys: regeneratorKeys,
          values: regeneratorValues
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);
  var regeneratorRuntimeExports = regeneratorRuntime$1.exports;

  // TODO(Babel 8): Remove this file.

  var runtime = regeneratorRuntimeExports();
  var regenerator = runtime;

  // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$3(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  var _regeneratorRuntime = /*@__PURE__*/getDefaultExportFromCjs(regenerator);

  var props$1l = {
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    offsetBottom: {
      type: Number,
      "default": 0
    },
    offsetTop: {
      type: Number,
      "default": 0
    },
    zIndex: {
      type: Number
    },
    onFixedChange: Function
  };

  var _Affix = Vue.defineComponent({
    name: "TAffix",
    props: props$1l,
    emits: ["fixedChange"],
    setup: function setup(props2, context) {
      var _document;
      var COMPONENT_NAME = usePrefixClass("affix");
      var renderTNodeJSX = useTNodeJSX();
      var affixWrapRef = Vue.ref(null);
      var affixRef = Vue.ref(null);
      var placeholderEL = Vue.ref((_document = document) === null || _document === void 0 ? void 0 : _document.createElement("div"));
      var ticking = Vue.ref(false);
      var isBind = Vue.ref(false);
      var scrollContainer = Vue.ref();
      var affixStyle = Vue.ref();
      var rAFId = 0;
      var handleScroll = function handleScroll() {
        if (!ticking.value) {
          rAFId = window.requestAnimationFrame(function () {
            var _affixWrapRef$value$g, _affixWrapRef$value;
            rAFId = 0;
            var _ref = (_affixWrapRef$value$g = (_affixWrapRef$value = affixWrapRef.value) === null || _affixWrapRef$value === void 0 ? void 0 : _affixWrapRef$value.getBoundingClientRect()) !== null && _affixWrapRef$value$g !== void 0 ? _affixWrapRef$value$g : {
                top: 0,
                width: 0,
                height: 0
              },
              wrapToTop = _ref.top,
              wrapWidth = _ref.width,
              wrapHeight = _ref.height;
            var containerTop = 0;
            if (scrollContainer.value instanceof HTMLElement) {
              containerTop = scrollContainer.value.getBoundingClientRect().top;
            }
            var fixedTop;
            var calcTop = wrapToTop - containerTop;
            var containerHeight = scrollContainer.value[scrollContainer.value instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
            var calcBottom = containerTop + containerHeight - props2.offsetBottom;
            if (!isUndefined(props2.offsetTop) && calcTop <= props2.offsetTop) {
              fixedTop = containerTop + props2.offsetTop;
            } else if (!isUndefined(props2.offsetBottom) && wrapToTop >= calcBottom) {
              fixedTop = calcBottom;
            } else {
              fixedTop = false;
            }
            if (affixRef.value) {
              var affixed = fixedTop !== false;
              var placeholderStatus = affixWrapRef.value.contains(placeholderEL.value);
              if (affixed) {
                affixRef.value.className = COMPONENT_NAME.value;
                affixStyle.value = {
                  top: "".concat(fixedTop, "px"),
                  width: "".concat(wrapWidth, "px"),
                  height: "".concat(wrapHeight, "px"),
                  zIndex: props2.zIndex
                };
                if (!placeholderStatus) {
                  placeholderEL.value.style.width = "".concat(wrapWidth, "px");
                  placeholderEL.value.style.height = "".concat(wrapHeight, "px");
                  affixWrapRef.value.appendChild(placeholderEL.value);
                }
              } else {
                affixRef.value.removeAttribute("class");
                affixStyle.value = void 0;
                placeholderStatus && placeholderEL.value.remove();
              }
              context.emit("fixedChange", affixed, {
                top: Number(fixedTop)
              });
              if (isFunction(props2.onFixedChange)) props2.onFixedChange(affixed, {
                top: Number(fixedTop)
              });
            }
            ticking.value = false;
          });
          ticking.value = true;
        }
      };
      var bindScroll = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 1;
                return Vue.nextTick();
              case 1:
                if (!isBind.value) {
                  _context.next = 2;
                  break;
                }
                return _context.abrupt("return");
              case 2:
                scrollContainer.value = getScrollContainer(props2.container);
                on$1(scrollContainer.value, "scroll", handleScroll);
                on$1(window, "resize", handleScroll);
                isBind.value = true;
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function bindScroll() {
          return _ref2.apply(this, arguments);
        };
      }();
      var unbindScroll = function unbindScroll() {
        if (!scrollContainer.value || !isBind.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
        off$1(window, "resize", handleScroll);
        if (rAFId) {
          window.cancelAnimationFrame(rAFId);
        }
        isBind.value = false;
      };
      Vue.watch(function () {
        return props2.offsetTop;
      }, function () {
        handleScroll();
      });
      Vue.watch(function () {
        return props2.offsetBottom;
      }, function () {
        handleScroll();
      });
      Vue.watch(function () {
        return props2.zIndex;
      }, function () {
        handleScroll();
      });
      Vue.onMounted(bindScroll);
      Vue.onActivated(bindScroll);
      Vue.onDeactivated(unbindScroll);
      Vue.onBeforeUnmount(unbindScroll);
      context.expose({
        scrollContainer: scrollContainer,
        affixWrapRef: affixWrapRef,
        handleScroll: handleScroll
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": affixWrapRef
        }, [Vue.createVNode("div", {
          "ref": affixRef,
          "style": affixStyle.value
        }, [renderTNodeJSX("default")])]);
      };
    }
  });

  var Affix = withInstall$1(_Affix);

  var clipboard = {exports: {}};

  /*!
   * clipboard.js v2.0.11
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */
  clipboard.exports;
  (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return /******/function () {
        // webpackBootstrap
        /******/
        var __webpack_modules__ = {
          /***/686: (/***/function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
              "default": function _default() {
                return /* binding */clipboard;
              }
            });

            // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
            var tiny_emitter = __webpack_require__(279);
            var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter);
            // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
            var listen = __webpack_require__(370);
            var listen_default = /*#__PURE__*/__webpack_require__.n(listen);
            // EXTERNAL MODULE: ./node_modules/select/src/select.js
            var src_select = __webpack_require__(817);
            var select_default = /*#__PURE__*/__webpack_require__.n(src_select);
            /**
             * Executes a given operation type.
             * @param {String} type
             * @return {Boolean}
             */
            function command(type) {
              try {
                return document.execCommand(type);
              } catch (err) {
                return false;
              }
            }

            /**
             * Cut action wrapper.
             * @param {String|HTMLElement} target
             * @return {String}
             */

            var ClipboardActionCut = function ClipboardActionCut(target) {
              var selectedText = select_default()(target);
              command('cut');
              return selectedText;
            };

            /* harmony default export */
            var actions_cut = ClipboardActionCut;
            /**
             * Creates a fake textarea element with a value.
             * @param {String} value
             * @return {HTMLElement}
             */
            function createFakeElement(value) {
              var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
              var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

              fakeElement.style.fontSize = '12pt'; // Reset box model

              fakeElement.style.border = '0';
              fakeElement.style.padding = '0';
              fakeElement.style.margin = '0'; // Move element out of screen horizontally

              fakeElement.style.position = 'absolute';
              fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

              var yPosition = window.pageYOffset || document.documentElement.scrollTop;
              fakeElement.style.top = "".concat(yPosition, "px");
              fakeElement.setAttribute('readonly', '');
              fakeElement.value = value;
              return fakeElement;
            }

            /**
             * Create fake copy action wrapper using a fake element.
             * @param {String} target
             * @param {Object} options
             * @return {String}
             */

            var fakeCopyAction = function fakeCopyAction(value, options) {
              var fakeElement = createFakeElement(value);
              options.container.appendChild(fakeElement);
              var selectedText = select_default()(fakeElement);
              command('copy');
              fakeElement.remove();
              return selectedText;
            };
            /**
             * Copy action wrapper.
             * @param {String|HTMLElement} target
             * @param {Object} options
             * @return {String}
             */

            var ClipboardActionCopy = function ClipboardActionCopy(target) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                container: document.body
              };
              var selectedText = '';
              if (typeof target === 'string') {
                selectedText = fakeCopyAction(target, options);
              } else if (target instanceof HTMLInputElement && !['text', 'search', 'url', 'tel', 'password'].includes(target === null || target === void 0 ? void 0 : target.type)) {
                // If input type doesn't support `setSelectionRange`. Simulate it. https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
                selectedText = fakeCopyAction(target.value, options);
              } else {
                selectedText = select_default()(target);
                command('copy');
              }
              return selectedText;
            };

            /* harmony default export */
            var actions_copy = ClipboardActionCopy;
            function _typeof(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                _typeof = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return _typeof(obj);
            }

            /**
             * Inner function which performs selection from either `text` or `target`
             * properties and then executes copy or cut operations.
             * @param {Object} options
             */

            var ClipboardActionDefault = function ClipboardActionDefault() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              // Defines base properties passed from constructor.
              var _options$action = options.action,
                action = _options$action === void 0 ? 'copy' : _options$action,
                container = options.container,
                target = options.target,
                text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

              if (action !== 'copy' && action !== 'cut') {
                throw new Error('Invalid "action" value, use either "copy" or "cut"');
              } // Sets the `target` property using an element that will be have its content copied.

              if (target !== undefined) {
                if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                  if (action === 'copy' && target.hasAttribute('disabled')) {
                    throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                  }
                  if (action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                    throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                  }
                } else {
                  throw new Error('Invalid "target" value, use a valid Element');
                }
              } // Define selection strategy based on `text` property.

              if (text) {
                return actions_copy(text, {
                  container: container
                });
              } // Defines which selection strategy based on `target` property.

              if (target) {
                return action === 'cut' ? actions_cut(target) : actions_copy(target, {
                  container: container
                });
              }
            };

            /* harmony default export */
            var actions_default = ClipboardActionDefault;
            function clipboard_typeof(obj) {
              "@babel/helpers - typeof";

              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                clipboard_typeof = function _typeof(obj) {
                  return typeof obj;
                };
              } else {
                clipboard_typeof = function _typeof(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
              }
              return clipboard_typeof(obj);
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps) _defineProperties(Constructor.prototype, protoProps);
              if (staticProps) _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };
              return _setPrototypeOf(o, p);
            }
            function _createSuper(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf(Derived),
                  result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn(this, result);
              };
            }
            function _possibleConstructorReturn(self, call) {
              if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                return call;
              }
              return _assertThisInitialized(self);
            }
            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self;
            }
            function _isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if (typeof Proxy === "function") return true;
              try {
                Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf(o);
            }

            /**
             * Helper function to retrieve attribute value.
             * @param {String} suffix
             * @param {Element} element
             */

            function getAttributeValue(suffix, element) {
              var attribute = "data-clipboard-".concat(suffix);
              if (!element.hasAttribute(attribute)) {
                return;
              }
              return element.getAttribute(attribute);
            }
            /**
             * Base class which takes one or more elements, adds event listeners to them,
             * and instantiates a new `ClipboardAction` on each click.
             */

            var Clipboard = /*#__PURE__*/function (_Emitter) {
              _inherits(Clipboard, _Emitter);
              var _super = _createSuper(Clipboard);

              /**
               * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
               * @param {Object} options
               */
              function Clipboard(trigger, options) {
                var _this;
                _classCallCheck(this, Clipboard);
                _this = _super.call(this);
                _this.resolveOptions(options);
                _this.listenClick(trigger);
                return _this;
              }
              /**
               * Defines if attributes would be resolved using internal setter functions
               * or custom functions that were passed in the constructor.
               * @param {Object} options
               */

              _createClass(Clipboard, [{
                key: "resolveOptions",
                value: function resolveOptions() {
                  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                  this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                  this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                  this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                  this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                }
                /**
                 * Adds a click event listener to the passed trigger.
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 */
              }, {
                key: "listenClick",
                value: function listenClick(trigger) {
                  var _this2 = this;
                  this.listener = listen_default()(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                  });
                }
                /**
                 * Defines a new `ClipboardAction` on each click event.
                 * @param {Event} e
                 */
              }, {
                key: "onClick",
                value: function onClick(e) {
                  var trigger = e.delegateTarget || e.currentTarget;
                  var action = this.action(trigger) || 'copy';
                  var text = actions_default({
                    action: action,
                    container: this.container,
                    target: this.target(trigger),
                    text: this.text(trigger)
                  }); // Fires an event based on the copy operation result.

                  this.emit(text ? 'success' : 'error', {
                    action: action,
                    text: text,
                    trigger: trigger,
                    clearSelection: function clearSelection() {
                      if (trigger) {
                        trigger.focus();
                      }
                      window.getSelection().removeAllRanges();
                    }
                  });
                }
                /**
                 * Default `action` lookup function.
                 * @param {Element} trigger
                 */
              }, {
                key: "defaultAction",
                value: function defaultAction(trigger) {
                  return getAttributeValue('action', trigger);
                }
                /**
                 * Default `target` lookup function.
                 * @param {Element} trigger
                 */
              }, {
                key: "defaultTarget",
                value: function defaultTarget(trigger) {
                  var selector = getAttributeValue('target', trigger);
                  if (selector) {
                    return document.querySelector(selector);
                  }
                }
                /**
                 * Allow fire programmatically a copy action
                 * @param {String|HTMLElement} target
                 * @param {Object} options
                 * @returns Text copied.
                 */
              }, {
                key: "defaultText",
                /**
                 * Default `text` lookup function.
                 * @param {Element} trigger
                 */
                value: function defaultText(trigger) {
                  return getAttributeValue('text', trigger);
                }
                /**
                 * Destroy lifecycle.
                 */
              }, {
                key: "destroy",
                value: function destroy() {
                  this.listener.destroy();
                }
              }], [{
                key: "copy",
                value: function copy(target) {
                  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                    container: document.body
                  };
                  return actions_copy(target, options);
                }
                /**
                 * Allow fire programmatically a cut action
                 * @param {String|HTMLElement} target
                 * @returns Text cutted.
                 */
              }, {
                key: "cut",
                value: function cut(target) {
                  return actions_cut(target);
                }
                /**
                 * Returns the support of the given action, or all actions if no action is
                 * given.
                 * @param {String} [action]
                 */
              }, {
                key: "isSupported",
                value: function isSupported() {
                  var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                  var actions = typeof action === 'string' ? [action] : action;
                  var support = !!document.queryCommandSupported;
                  actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                  });
                  return support;
                }
              }]);
              return Clipboard;
            }(tiny_emitter_default());

            /* harmony default export */
            var clipboard = Clipboard;

            /***/
          }),
          /***/828: (/***/function _(module) {
            var DOCUMENT_NODE_TYPE = 9;

            /**
             * A polyfill for Element.matches()
             */
            if (typeof Element !== 'undefined' && !Element.prototype.matches) {
              var proto = Element.prototype;
              proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
            }

            /**
             * Finds the closest parent that matches a selector.
             *
             * @param {Element} element
             * @param {String} selector
             * @return {Function}
             */
            function closest(element, selector) {
              while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                if (typeof element.matches === 'function' && element.matches(selector)) {
                  return element;
                }
                element = element.parentNode;
              }
            }
            module.exports = closest;

            /***/
          }),
          /***/438: (/***/function _(module, __unused_webpack_exports, __webpack_require__) {
            var closest = __webpack_require__(828);

            /**
             * Delegates event to a selector.
             *
             * @param {Element} element
             * @param {String} selector
             * @param {String} type
             * @param {Function} callback
             * @param {Boolean} useCapture
             * @return {Object}
             */
            function _delegate(element, selector, type, callback, useCapture) {
              var listenerFn = listener.apply(this, arguments);
              element.addEventListener(type, listenerFn, useCapture);
              return {
                destroy: function destroy() {
                  element.removeEventListener(type, listenerFn, useCapture);
                }
              };
            }

            /**
             * Delegates event to a selector.
             *
             * @param {Element|String|Array} [elements]
             * @param {String} selector
             * @param {String} type
             * @param {Function} callback
             * @param {Boolean} useCapture
             * @return {Object}
             */
            function delegate(elements, selector, type, callback, useCapture) {
              // Handle the regular Element usage
              if (typeof elements.addEventListener === 'function') {
                return _delegate.apply(null, arguments);
              }

              // Handle Element-less usage, it defaults to global delegation
              if (typeof type === 'function') {
                // Use `document` as the first parameter, then apply arguments
                // This is a short way to .unshift `arguments` without running into deoptimizations
                return _delegate.bind(null, document).apply(null, arguments);
              }

              // Handle Selector-based usage
              if (typeof elements === 'string') {
                elements = document.querySelectorAll(elements);
              }

              // Handle Array-like based usage
              return Array.prototype.map.call(elements, function (element) {
                return _delegate(element, selector, type, callback, useCapture);
              });
            }

            /**
             * Finds closest match and invokes callback.
             *
             * @param {Element} element
             * @param {String} selector
             * @param {String} type
             * @param {Function} callback
             * @return {Function}
             */
            function listener(element, selector, type, callback) {
              return function (e) {
                e.delegateTarget = closest(e.target, selector);
                if (e.delegateTarget) {
                  callback.call(element, e);
                }
              };
            }
            module.exports = delegate;

            /***/
          }),
          /***/879: (/***/function _(__unused_webpack_module, exports) {
            /**
             * Check if argument is a HTML element.
             *
             * @param {Object} value
             * @return {Boolean}
             */
            exports.node = function (value) {
              return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
            };

            /**
             * Check if argument is a list of HTML elements.
             *
             * @param {Object} value
             * @return {Boolean}
             */
            exports.nodeList = function (value) {
              var type = Object.prototype.toString.call(value);
              return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
            };

            /**
             * Check if argument is a string.
             *
             * @param {Object} value
             * @return {Boolean}
             */
            exports.string = function (value) {
              return typeof value === 'string' || value instanceof String;
            };

            /**
             * Check if argument is a function.
             *
             * @param {Object} value
             * @return {Boolean}
             */
            exports.fn = function (value) {
              var type = Object.prototype.toString.call(value);
              return type === '[object Function]';
            };

            /***/
          }),
          /***/370: (/***/function _(module, __unused_webpack_exports, __webpack_require__) {
            var is = __webpack_require__(879);
            var delegate = __webpack_require__(438);

            /**
             * Validates all params and calls the right
             * listener function based on its target type.
             *
             * @param {String|HTMLElement|HTMLCollection|NodeList} target
             * @param {String} type
             * @param {Function} callback
             * @return {Object}
             */
            function listen(target, type, callback) {
              if (!target && !type && !callback) {
                throw new Error('Missing required arguments');
              }
              if (!is.string(type)) {
                throw new TypeError('Second argument must be a String');
              }
              if (!is.fn(callback)) {
                throw new TypeError('Third argument must be a Function');
              }
              if (is.node(target)) {
                return listenNode(target, type, callback);
              } else if (is.nodeList(target)) {
                return listenNodeList(target, type, callback);
              } else if (is.string(target)) {
                return listenSelector(target, type, callback);
              } else {
                throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
              }
            }

            /**
             * Adds an event listener to a HTML element
             * and returns a remove listener function.
             *
             * @param {HTMLElement} node
             * @param {String} type
             * @param {Function} callback
             * @return {Object}
             */
            function listenNode(node, type, callback) {
              node.addEventListener(type, callback);
              return {
                destroy: function destroy() {
                  node.removeEventListener(type, callback);
                }
              };
            }

            /**
             * Add an event listener to a list of HTML elements
             * and returns a remove listener function.
             *
             * @param {NodeList|HTMLCollection} nodeList
             * @param {String} type
             * @param {Function} callback
             * @return {Object}
             */
            function listenNodeList(nodeList, type, callback) {
              Array.prototype.forEach.call(nodeList, function (node) {
                node.addEventListener(type, callback);
              });
              return {
                destroy: function destroy() {
                  Array.prototype.forEach.call(nodeList, function (node) {
                    node.removeEventListener(type, callback);
                  });
                }
              };
            }

            /**
             * Add an event listener to a selector
             * and returns a remove listener function.
             *
             * @param {String} selector
             * @param {String} type
             * @param {Function} callback
             * @return {Object}
             */
            function listenSelector(selector, type, callback) {
              return delegate(document.body, selector, type, callback);
            }
            module.exports = listen;

            /***/
          }),
          /***/817: (/***/function _(module) {
            function select(element) {
              var selectedText;
              if (element.nodeName === 'SELECT') {
                element.focus();
                selectedText = element.value;
              } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                var isReadOnly = element.hasAttribute('readonly');
                if (!isReadOnly) {
                  element.setAttribute('readonly', '');
                }
                element.select();
                element.setSelectionRange(0, element.value.length);
                if (!isReadOnly) {
                  element.removeAttribute('readonly');
                }
                selectedText = element.value;
              } else {
                if (element.hasAttribute('contenteditable')) {
                  element.focus();
                }
                var selection = window.getSelection();
                var range = document.createRange();
                range.selectNodeContents(element);
                selection.removeAllRanges();
                selection.addRange(range);
                selectedText = selection.toString();
              }
              return selectedText;
            }
            module.exports = select;

            /***/
          }),
          /***/279: (/***/function _(module) {
            function E() {
              // Keep this empty so it's easier to inherit from
              // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
            }
            E.prototype = {
              on: function on(name, callback, ctx) {
                var e = this.e || (this.e = {});
                (e[name] || (e[name] = [])).push({
                  fn: callback,
                  ctx: ctx
                });
                return this;
              },
              once: function once(name, callback, ctx) {
                var self = this;
                function listener() {
                  self.off(name, listener);
                  callback.apply(ctx, arguments);
                }
                listener._ = callback;
                return this.on(name, listener, ctx);
              },
              emit: function emit(name) {
                var data = [].slice.call(arguments, 1);
                var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                var i = 0;
                var len = evtArr.length;
                for (i; i < len; i++) {
                  evtArr[i].fn.apply(evtArr[i].ctx, data);
                }
                return this;
              },
              off: function off(name, callback) {
                var e = this.e || (this.e = {});
                var evts = e[name];
                var liveEvents = [];
                if (evts && callback) {
                  for (var i = 0, len = evts.length; i < len; i++) {
                    if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                  }
                }

                // Remove event from queue to prevent memory leak
                // Suggested by https://github.com/lazd
                // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

                liveEvents.length ? e[name] = liveEvents : delete e[name];
                return this;
              }
            };
            module.exports = E;
            module.exports.TinyEmitter = E;

            /***/
          })

          /******/
        };
        /************************************************************************/
        /******/ // The module cache
        /******/
        var __webpack_module_cache__ = {};
        /******/
        /******/ // The require function
        /******/
        function __webpack_require__(moduleId) {
          /******/ // Check if module is in cache
          /******/if (__webpack_module_cache__[moduleId]) {
            /******/return __webpack_module_cache__[moduleId].exports;
            /******/
          }
          /******/ // Create a new module (and put it into the cache)
          /******/
          var module = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/exports: {}
            /******/
          };
          /******/
          /******/ // Execute the module function
          /******/
          __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
          /******/
          /******/ // Return the exports of the module
          /******/
          return module.exports;
          /******/
        }
        /******/
        /************************************************************************/
        /******/ /* webpack/runtime/compat get default export */
        /******/
        !function () {
          /******/ // getDefaultExport function for compatibility with non-harmony modules
          /******/__webpack_require__.n = function (module) {
            /******/var getter = module && module.__esModule ? /******/function () {
              return module['default'];
            } : /******/function () {
              return module;
            };
            /******/
            __webpack_require__.d(getter, {
              a: getter
            });
            /******/
            return getter;
            /******/
          };
          /******/
        }();
        /******/
        /******/ /* webpack/runtime/define property getters */
        /******/
        !function () {
          /******/ // define getter functions for harmony exports
          /******/__webpack_require__.d = function (exports, definition) {
            /******/for (var key in definition) {
              /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                /******/Object.defineProperty(exports, key, {
                  enumerable: true,
                  get: definition[key]
                });
                /******/
              }
              /******/
            }
            /******/
          };
          /******/
        }();
        /******/
        /******/ /* webpack/runtime/hasOwnProperty shorthand */
        /******/
        !function () {
          /******/__webpack_require__.o = function (obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          };
          /******/
        }();
        /******/
        /************************************************************************/
        /******/ // module exports must be returned from runtime so entry inlining is disabled
        /******/ // startup
        /******/ // Load entry module and return exports
        /******/
        return __webpack_require__(686);
        /******/
      }()["default"];
    });
  })(clipboard, clipboard.exports);
  var clipboardExports = clipboard.exports;
  var Clipboard = /*@__PURE__*/getDefaultExportFromCjs(clipboardExports);

  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
      top = _target$getBoundingCl.top;
    if (container === window) {
      return top - document.documentElement.clientTop;
    }
    return top - container.getBoundingClientRect().top;
  }
  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new Clipboard(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var props$1k = {
    affixProps: {
      type: Object
    },
    bounds: {
      type: Number,
      "default": 5
    },
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    cursor: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    targetOffset: {
      type: Number,
      "default": 0
    },
    onChange: Function,
    onClick: Function
  };

  var AnchorInjectionKey = Symbol("AnchorInjectionProvide");

  function _isSlot$E(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Anchor = Vue.defineComponent({
    name: "TAnchor",
    inheritAttrs: false,
    props: props$1k,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var anchorRef = Vue.ref(null);
      var links = Vue.ref([]);
      var active = Vue.ref("");
      var scrollContainer = Vue.ref(null);
      var handleScrollLock = Vue.ref(false);
      var activeLineStyle = Vue.reactive({});
      var COMPONENT_NAME = usePrefixClass("anchor");
      var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
      var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var getScrollContainer$1 = function getScrollContainer$1() {
        if (isServer$1) {
          return;
        }
        var container = props2.container;
        scrollContainer.value = getScrollContainer(container);
        on$1(scrollContainer.value, "scroll", handleScroll);
        handleScroll();
      };
      var handleScroll = function handleScroll() {
        if (handleScrollLock.value) return;
        var bounds = props2.bounds,
          targetOffset = props2.targetOffset;
        var filters = [];
        var active2 = "";
        links.value.forEach(function (link) {
          var anchor = getAnchorTarget(link);
          if (!anchor) {
            return;
          }
          var top = getOffsetTop(anchor, scrollContainer.value);
          if (top < bounds + targetOffset) {
            filters.push({
              link: link,
              top: top
            });
          }
        });
        if (filters.length) {
          var latest = filters.reduce(function (prev, cur) {
            return prev.top > cur.top ? prev : cur;
          });
          active2 = latest.link;
        }
        setCurrentActiveLink(active2);
      };
      var getAnchorTarget = function getAnchorTarget(link) {
        var matcher = link.match(ANCHOR_SHARP_REGEXP);
        if (!matcher) {
          return;
        }
        var anchor = document.getElementById(matcher[1]);
        if (!anchor) {
          return;
        }
        return anchor;
      };
      var registerLink = function registerLink(link) {
        if (!ANCHOR_SHARP_REGEXP.test(link) || links.value.indexOf(link) !== -1) {
          return;
        }
        links.value.push(link);
      };
      var unregisterLink = function unregisterLink(link) {
        links.value = links.value.filter(function (each) {
          return each !== link;
        });
      };
      var setCurrentActiveLink = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(link) {
          var _props2$onChange;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(active.value === link)) {
                  _context.next = 1;
                  break;
                }
                return _context.abrupt("return");
              case 1:
                active.value = link;
                (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 || _props2$onChange.call(props2, link, active.value);
                _context.next = 2;
                return Vue.nextTick();
              case 2:
                updateActiveLine();
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function setCurrentActiveLink(_x) {
          return _ref2.apply(this, arguments);
        };
      }();
      var updateActiveLine = function updateActiveLine() {
        var _anchorRef$value;
        var ele = (_anchorRef$value = anchorRef.value) === null || _anchorRef$value === void 0 ? void 0 : _anchorRef$value.querySelector(".".concat(STATUS.value.active, ">a"));
        if (!ele) {
          Object.assign(activeLineStyle, {});
          return;
        }
        var top = ele.offsetTop,
          height = ele.offsetHeight;
        Object.assign(activeLineStyle, {
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      };
      var handleLinkClick = function handleLinkClick(link) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, link);
      };
      var handleScrollTo = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(link) {
          var anchor, targetOffset, scrollTop, offsetTop, top;
          return _regeneratorRuntime.wrap(function (_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                anchor = getAnchorTarget(link);
                setCurrentActiveLink(link);
                if (anchor) {
                  _context2.next = 1;
                  break;
                }
                return _context2.abrupt("return");
              case 1:
                handleScrollLock.value = true;
                targetOffset = props2.targetOffset;
                scrollTop = getScroll(scrollContainer.value);
                offsetTop = getOffsetTop(anchor, scrollContainer.value);
                top = scrollTop + offsetTop - targetOffset;
                _context2.next = 2;
                return scrollTo(top, {
                  container: scrollContainer.value
                });
              case 2:
                handleScrollLock.value = false;
              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function handleScrollTo(_x2) {
          return _ref3.apply(this, arguments);
        };
      }();
      var renderCursor = function renderCursor() {
        var titleContent = renderTNodeJSX("cursor");
        return titleContent || Vue.createVNode("div", {
          "class": ANCHOR_LINE_CURSOR_CLASSNAME.value
        }, null);
      };
      Vue.onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function (_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              getScrollContainer$1();
              if (!active.value) {
                _context3.next = 2;
                break;
              }
              _context3.next = 1;
              return Vue.nextTick();
            case 1:
              handleScrollTo(active.value);
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      })));
      Vue.onUnmounted(function () {
        if (!scrollContainer.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
      });
      Vue.watchEffect(function () {
        if (scrollContainer.value) {
          off$1(scrollContainer.value, "scroll", handleScroll);
        }
        getScrollContainer$1();
      });
      Vue.provide(AnchorInjectionKey, Vue.reactive({
        registerLink: registerLink,
        unregisterLink: unregisterLink,
        handleScrollTo: handleScrollTo,
        handleLinkClick: handleLinkClick,
        active: active
      }));
      return function () {
        var size = props2.size,
          affixProps = props2.affixProps;
        var className = [COMPONENT_NAME.value, SIZE.value[size]];
        var content = Vue.createVNode("div", Vue.mergeProps({
          "ref": anchorRef,
          "class": className
        }, attrs), [Vue.createVNode("div", {
          "class": ANCHOR_LINE_CLASSNAME.value
        }, [Vue.createVNode("div", {
          "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME.value, "-wrapper"),
          "style": activeLineStyle
        }, [renderCursor()])]), renderTNodeJSX("default")]);
        if (affixProps) {
          return Vue.createVNode(Affix, affixProps, _isSlot$E(content) ? content : {
            "default": function _default() {
              return [content];
            }
          });
        }
        return content;
      };
    }
  });

  var props$1j = {
    href: {
      type: String,
      "default": "",
      required: true
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_self", "_blank", "_parent", "_top"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    customScroll: {
      type: Boolean,
      "default": false
    }
  };

  function ownKeys$2c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var localProps = _objectSpread$2b(_objectSpread$2b({}, props$1j), {}, {
    href: {
      type: String,
      required: true,
      validator: function validator(v) {
        return ANCHOR_SHARP_REGEXP.test(v);
      }
    }
  });
  var _AnchorItem = Vue.defineComponent({
    name: "TAnchorItem",
    inject: {
      tAnchor: {
        "default": void 0
      }
    },
    props: localProps,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var anchor = Vue.inject(AnchorInjectionKey, void 0);
      var CLASSNAME_PREFIX = usePrefixClass("anchor__item");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var register = function register() {
        anchor.registerLink(props2.href);
      };
      var unregister = function unregister() {
        var href = props2.href;
        if (!href) return;
        anchor.unregisterLink(href);
      };
      var handleClick = function handleClick(e) {
        var href = props2.href,
          title = props2.title;
        if (!props2.customScroll) anchor.handleScrollTo(href);
        anchor.handleLinkClick({
          href: href,
          title: isString(title) ? title : void 0,
          e: e
        });
      };
      var renderTitle = function renderTitle() {
        var title = props2.title;
        var titleSlot = slots.title;
        var titleVal;
        if (isString(title)) {
          titleVal = title;
        } else if (isFunction(title)) {
          titleVal = title(Vue.h);
        } else if (titleSlot) {
          titleVal = titleSlot(null);
        }
        return titleVal;
      };
      Vue.watch(function () {
        return props2.href;
      }, function () {
        unregister();
        register();
      }, {
        immediate: true
      });
      Vue.onMounted(function () {
        register();
      });
      Vue.onUnmounted(function () {
        unregister();
      });
      return function () {
        var href = props2.href,
          target = props2.target;
        var children = slots["default"],
          titleSlot = slots.title;
        var title = renderTitle();
        var titleAttr = isString(title) ? title : null;
        var active = anchor.active === href;
        var wrapperClass = _defineProperty$2(_defineProperty$2({}, CLASSNAME_PREFIX.value, true), STATUS.value.active, active);
        var titleClass = _defineProperty$2({}, "".concat(CLASSNAME_PREFIX.value, "-link"), true);
        return Vue.createVNode("div", {
          "class": wrapperClass
        }, [Vue.createVNode("a", {
          "href": href,
          "title": titleAttr,
          "class": titleClass,
          "target": target,
          "onClick": handleClick
        }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
      };
    }
  });

  var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
  var DISTANCE$1 = "32px";
  var PLACEMENT_OFFSET$1 = {
    top: {
      top: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "top-left": {
      left: DISTANCE$1,
      top: DISTANCE$1
    },
    "top-right": {
      right: DISTANCE$1,
      top: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-right": {
      right: DISTANCE$1,
      bottom: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-left": {
      left: DISTANCE$1,
      bottom: DISTANCE$1
    }
  };
  var PLACEMENT_LIST$1 = Object.keys(PLACEMENT_OFFSET$1);

  var props$1i = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        if (!val) return true;
        return ["info", "success", "warning", "error", "question", "loading"].includes(val);
      }
    },
    onClose: Function,
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var ANIMATION_OPTION$1 = {
    duration: 200,
    easing: "linear"
  };
  function fadeIn$1(dom, placement) {
    if (!dom) return;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeInKeyframes = getFadeInKeyframes$1(placement, offsetWidth, offsetHeight);
    if (!fadeInKeyframes) return;
    var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeIn);
    dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION$1);
  }
  function fadeOut$1(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeOutKeyframes = getFadeOutKeyframes$1(placement, offsetHeight);
    if (!fadeOutKeyframes) return onFinish();
    var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeOut);
    var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION$1);
    if (animation) {
      animation.onfinish = function () {
        dom.style.display = "none";
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  }
  function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
    var keys = Object.keys(styleAfterAnimation);
    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      dom.style[key] = styleAfterAnimation[key];
    }
  }
  function getFadeInKeyframes$1(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;
    if (["top-left", "left", "bottom-left"].includes(placement)) {
      return [{
        opacity: 0,
        marginLeft: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginLeft: "0"
      }];
    }
    if (["top-right", "right", "bottom-right"].includes(placement)) {
      return [{
        opacity: 0,
        marginRight: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginRight: "0"
      }];
    }
    if (["top", "center"].includes(placement)) {
      return [{
        opacity: 0,
        marginTop: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        marginTop: "0"
      }];
    }
    if (["bottom"].includes(placement)) {
      return [{
        opacity: 0,
        transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
      }, {
        opacity: 1,
        transform: "translate3d(0, 0, 0)"
      }];
    }
  }
  function getFadeOutKeyframes$1(placement, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;
    if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
      var marginOffset2 = "".concat(offsetHeight, "px");
      return [{
        opacity: 1,
        marginTop: "0px"
      }, {
        opacity: 0,
        marginTop: marginOffset2
      }];
    }
    var marginOffset = "-".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset
    }];
  }

  function ownKeys$2b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Message = Vue.defineComponent({
    name: "TMessage",
    props: _objectSpread$2a(_objectSpread$2a({}, props$1i), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("message");
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: TdInfoCircleFilledIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
          HelpCircleFilledIcon: TdHelpCircleFilledIcon,
          CloseIcon: TdCloseIcon
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        HelpCircleFilledIcon = _useGlobalIcon.HelpCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var classPrefix = usePrefixClass();
      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var msgRef = Vue.ref(null);
      var timer = Vue.ref(null);
      var classes = Vue.computed(function () {
        var status = {};
        THEME_LIST.forEach(function (t) {
          return status["".concat(classPrefix.value, "-is-").concat(t)] = props2.theme === t;
        });
        return [COMPONENT_NAME.value, status, _defineProperty$2({}, "".concat(classPrefix.value, "-is-closable"), props2.closeBtn || slots.closeBtn)];
      });
      var close = function close(e) {
        var _props2$onClose, _props2$onCloseBtnCli;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
          trigger: "close-click",
          e: e
        });
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, {
          e: e
        });
      };
      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };
      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }
        timer.value = Number(setTimeout(function () {
          clearTimer();
          var msgDom = msgRef.value;
          fadeOut$1(msgDom, props2.placement, function () {
            var _props2$onClose2, _props2$onDurationEnd;
            (_props2$onClose2 = props2.onClose) === null || _props2$onClose2 === void 0 || _props2$onClose2.call(props2, {
              trigger: "duration-end"
            });
            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 || _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };
      var renderClose = function renderClose() {
        var defaultClose = Vue.createVNode(CloseIcon, null, null);
        return Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": close
        }, [renderTNode("closeBtn", defaultClose)]);
      };
      var renderIcon = function renderIcon() {
        if (props2.icon === false) return;
        if (isFunction(props2.icon)) return props2.icon(Vue.h);
        if (slots.icon) {
          return slots.icon(null);
        }
        var Icon = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon,
          question: HelpCircleFilledIcon,
          loading: Loading
        }[props2.theme];
        return Vue.createVNode(Icon, null, null);
      };
      Vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      Vue.onMounted(function () {
        var msgDom = msgRef.value;
        fadeIn$1(msgDom, props2.placement);
      });
      expose({
        close: close
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": msgRef,
          "class": classes.value,
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), renderContent("content", "default"), renderClose()]);
      };
    }
  });

  function ownKeys$2a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$29(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_Z_INDEX$1 = 6e3;
  var getUniqueId = function () {
    var id = 0;
    return function () {
      id += 1;
      return id;
    };
  }();
  var MessageList = Vue.defineComponent({
    name: "TMessageList",
    props: {
      zIndex: {
        type: Number,
        "default": 0
      },
      placement: {
        type: String,
        "default": ""
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("message__list");
      var list = Vue.ref([]);
      var messageList = Vue.ref([]);
      var styles = Vue.computed(function () {
        return _objectSpread$29(_objectSpread$29({}, PLACEMENT_OFFSET$1[props.placement]), {}, {
          zIndex: props.zIndex !== DEFAULT_Z_INDEX$1 ? props.zIndex : DEFAULT_Z_INDEX$1
        });
      });
      var add = function add(msg) {
        var mg = _objectSpread$29(_objectSpread$29({}, msg), {}, {
          key: getUniqueId()
        });
        list.value.push(mg);
        return mg.key;
      };
      var remove = function remove(index) {
        list.value.splice(index, 1);
      };
      var removeAll = function removeAll() {
        list.value = [];
      };
      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };
      var msgStyles = function msgStyles(item) {
        return item.offset && {
          position: "relative",
          left: getOffset(item.offset[0]),
          top: getOffset(item.offset[1])
        };
      };
      var getProps = function getProps(index, item) {
        return _objectSpread$29(_objectSpread$29({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }
            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }
            return remove(index);
          }
        });
      };
      var addChild = function addChild(el) {
        if (el) {
          messageList.value.push(el);
        }
      };
      expose({
        add: add,
        removeAll: removeAll,
        list: list,
        messageList: messageList
      });
      return function () {
        if (!list.value.length) return;
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value,
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return Vue.createVNode(_Message, Vue.mergeProps({
            "key": item.key,
            "style": msgStyles(item),
            "ref": addChild
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$29(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$28(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$29(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$29(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var instanceMap$1 = /* @__PURE__ */new Map();
  function handleParams(params) {
    var options = _objectSpread$28({
      duration: 3e3,
      attach: "body",
      zIndex: DEFAULT_Z_INDEX$1,
      placement: "top"
    }, params);
    options.content = params.content;
    return options;
  }
  var MessageFunction = function MessageFunction(props, context) {
    var options = handleParams(props);
    var attach = options.attach,
      placement = options.placement;
    var attachDom = getAttach(attach);
    if (!instanceMap$1.get(attachDom)) {
      instanceMap$1.set(attachDom, {});
    }
    var p = instanceMap$1.get(attachDom)[placement];
    var mgKey;
    if (!p || !attachDom.contains(p.el)) {
      var wrapper = document.createElement("div");
      var instance = Vue.createVNode(MessageList, {
        zIndex: options.zIndex,
        placement: options.placement
      });
      if (context !== null && context !== void 0 ? context : MessagePlugin._context) {
        instance.appContext = context !== null && context !== void 0 ? context : MessagePlugin._context;
      }
      attachDom.appendChild(wrapper);
      Vue.render(instance, wrapper);
      mgKey = instance.component.exposed.add(options);
      instanceMap$1.get(attachDom)[placement] = instance;
    } else {
      mgKey = p.component.exposed.add(options);
    }
    return new Promise(function (resolve) {
      var ins = instanceMap$1.get(attachDom)[placement];
      Vue.nextTick(function () {
        var msg = ins.component.exposed.messageList.value;
        resolve(msg === null || msg === void 0 ? void 0 : msg.find(function (mg) {
          var _mg$$;
          return ((_mg$$ = mg.$) === null || _mg$$ === void 0 || (_mg$$ = _mg$$.vnode) === null || _mg$$ === void 0 ? void 0 : _mg$$.key) === mgKey;
        }));
      });
    });
  };
  var showThemeMessage = function showThemeMessage(theme, params, duration, context) {
    var options = {
      theme: theme
    };
    if (isString(params)) {
      options.content = params;
    } else if (isObject(params) && !(params instanceof Array)) {
      options = _objectSpread$28(_objectSpread$28({}, options), params);
    }
    (duration || duration === 0) && (options.duration = duration);
    return MessageFunction(options, context);
  };
  var extraApi$2 = {
    info: function info(params, duration, context) {
      return showThemeMessage("info", params, duration, context);
    },
    success: function success(params, duration, context) {
      return showThemeMessage("success", params, duration, context);
    },
    warning: function warning(params, duration, context) {
      return showThemeMessage("warning", params, duration, context);
    },
    error: function error(params, duration, context) {
      return showThemeMessage("error", params, duration, context);
    },
    question: function question(params, duration, context) {
      return showThemeMessage("question", params, duration, context);
    },
    loading: function loading(params, duration, context) {
      return showThemeMessage("loading", params, duration, context);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance === null || instance === void 0 ? void 0 : instance.close();
      });
    },
    closeAll: function closeAll() {
      if (instanceMap$1 instanceof Map) {
        instanceMap$1.forEach(function (attach) {
          Object.keys(attach).forEach(function (placement) {
            var instance = attach[placement];
            instance.component.exposed.removeAll();
          });
        });
      }
    }
  };
  var MessagePlugin = showThemeMessage;
  MessagePlugin.install = function (app) {
    app.config.globalProperties.$message = showThemeMessage;
    Object.keys(extraApi$2).forEach(function (funcName) {
      app.config.globalProperties.$message[funcName] = extraApi$2[funcName];
    });
    MessagePlugin._context = app._context;
  };
  Object.keys(extraApi$2).forEach(function (funcName) {
    MessagePlugin[funcName] = extraApi$2[funcName];
  });

  var props$1h = {
    id: {
      type: String,
      "default": "",
      required: true
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];
        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }
  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules

  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min$1 = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }
    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false

    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument :
    // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot ||
      // step into the shadow DOM of the parent of a slotted node
      element.parentNode || (
      // DOM Element detected
      isShadowRoot(element) ? element.host : null) ||
      // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) ||
    // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }
    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);
      if (elementCss.position === 'fixed') {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }
    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min, value, max$1) {
    return max(min, min$1(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }
  function effect$1(_ref2) {
    var state = _ref2.state,
      options = _ref2.options;
    var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
      return;
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
      y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';
      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);
        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };
  function effect(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }
    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }
    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }
      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent$1(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent$1(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent$1(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList :
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }
    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip$1(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);
          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$2 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip$1,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
      skidding = _ref[0],
      distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === 'x' ? top : left;
      var _altSide = mainAxis === 'x' ? bottom : right;
      var _offset = popperOffsets[altAxis];
      var _len = altAxis === 'y' ? 'height' : 'width';
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' ||
      // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;
            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference, popper)) {
        return instance;
      }
      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;
          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });
            var noopFn = function noopFn() {};
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$2, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var popupProps = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: [Number, Array]
    },
    destroyOnClose: Boolean,
    disabled: Boolean,
    hideEmptyPopup: Boolean,
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayInnerClassName: {
      type: [String, Object, Array]
    },
    overlayInnerStyle: {
      type: [Boolean, Object, Function]
    },
    overlayStyle: {
      type: [Boolean, Object, Function]
    },
    placement: {
      type: String,
      "default": "top"
    },
    popperOptions: {
      type: Object
    },
    showArrow: Boolean,
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "mousedown", "context-menu"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onOverlayClick: Function,
    onScroll: Function,
    onScrollToBottom: Function,
    onVisibleChange: Function
  };

  function _isSlot$D(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  function filterEmpty() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var vnodes = [];
    children.forEach(function (child) {
      if (isArray$1(child)) {
        vnodes.push.apply(vnodes, _toConsumableArray(child));
      } else if (child.type === Vue.Fragment) {
        vnodes.push.apply(vnodes, _toConsumableArray(filterEmpty(child.children)));
      } else {
        vnodes.push(child);
      }
    });
    return vnodes.filter(function (c) {
      return !(c && (c.type === Vue.Comment || c.type === Vue.Fragment && c.children.length === 0 || c.type === Vue.Text && c.children.trim() === ""));
    });
  }
  function isRectChanged(rect1, rect2) {
    if (!rect1 && !rect2) return false;
    if (!rect1 || !rect2) return true;
    if (["width", "height", "x", "y"].some(function (k) {
      return rect1[k] !== rect2[k];
    })) {
      return true;
    }
    return false;
  }
  function useElement(getter) {
    var instance = Vue.getCurrentInstance();
    var el = Vue.ref();
    Vue.onMounted(function () {
      el.value = getter(instance);
    });
    Vue.onUpdated(function () {
      var newEl = getter(instance);
      if (el.value !== newEl) {
        el.value = newEl;
      }
    });
    return el;
  }
  var Trigger = Vue.defineComponent({
    name: "TPopupTrigger",
    props: {
      forwardRef: Function
    },
    emits: ["resize"],
    setup: function setup(props2, _ref) {
      var emit = _ref.emit,
        slots = _ref.slots;
      var el = useElement(function (vm) {
        var containerNode = vm.parent.vnode;
        return containerNode.el.nextElementSibling;
      });
      var contentRect = Vue.ref();
      Vue.watch(el, function () {
        var _props2$forwardRef;
        (_props2$forwardRef = props2.forwardRef) === null || _props2$forwardRef === void 0 || _props2$forwardRef.call(props2, el.value);
      });
      useResizeObserver(el, function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 1),
          newContentRect = _ref3[0].contentRect;
        contentRect.value = newContentRect;
      });
      Vue.watch(contentRect, function (newRect, oldRect) {
        if (isRectChanged(newRect, oldRect)) {
          emit("resize");
        }
      });
      return function () {
        var _slots$default, _children$;
        var children = filterEmpty((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots));
        if (children.length > 1 || ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : _children$.type) === Vue.Text) {
          return Vue.createVNode("span", null, [children]);
        }
        return children[0];
      };
    }
  });
  var Content = Vue.defineComponent({
    name: "TPopupContent",
    emits: ["resize"],
    setup: function setup(props2, _ref4) {
      var emit = _ref4.emit,
        slots = _ref4.slots;
      var contentEl = useElement(function (vm) {
        return vm.vnode.el.children[0];
      });
      useResizeObserver(contentEl, function () {
        emit("resize");
      });
      return function () {
        return Vue.createVNode("div", {
          "style": "position: absolute; top: 0px; left: 0px; width: 100%"
        }, [slots["default"]()]);
      };
    }
  });
  var Container = Vue.defineComponent({
    name: "TPopupContainer",
    inheritAttrs: false,
    props: {
      parent: Object,
      visible: Boolean,
      attach: popupProps.attach,
      forwardRef: Function
    },
    emits: ["resize", "contentMounted"],
    setup: function setup(props2, _ref5) {
      var emit = _ref5.emit,
        attrs = _ref5.attrs,
        slots = _ref5.slots,
        expose = _ref5.expose;
      var triggerEl = Vue.ref();
      var mountContent = Vue.ref(false);
      function emitResize() {
        emit("resize");
      }
      Vue.onMounted(function () {
        requestAnimationFrame(function () {
          mountContent.value = props2.visible;
        });
      });
      Vue.watch(function () {
        return props2.visible;
      }, function (visible) {
        if (visible) {
          mountContent.value = props2.visible;
        }
      });
      expose({
        unmountContent: function unmountContent() {
          mountContent.value = false;
        }
      });
      return function () {
        var _slot;
        var getElement = function getElement() {
          return getAttach(props2.attach, triggerEl.value);
        };
        return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode(Trigger, {
          "class": attrs["class"],
          "forwardRef": function forwardRef(el) {
            props2.forwardRef(el);
            triggerEl.value = el;
          },
          "onResize": emitResize
        }, _isSlot$D(_slot = slots["default"]()) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }), mountContent.value && Vue.createVNode(Vue.Teleport, {
          "disabled": !getElement(),
          "to": getElement()
        }, {
          "default": function _default() {
            return [Vue.createVNode(Content, {
              "onResize": emitResize,
              "onVnodeMounted": function onVnodeMounted() {
                return emit("contentMounted");
              }
            }, {
              "default": function _default() {
                return [slots.content && slots.content()];
              }
            })];
          }
        })]);
      };
    }
  });

  function ownKeys$28(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$27(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$28(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$28(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$C(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var POPUP_ATTR_NAME = "data-td-popup";
  var POPUP_PARENT_ATTR_NAME = "data-td-popup-parent";
  function getPopperTree(id, upwards) {
    var list = [];
    var selectors = [POPUP_PARENT_ATTR_NAME, POPUP_ATTR_NAME];
    if (!id) return list;
    if (upwards) {
      selectors.unshift(selectors.pop());
    }
    recurse(id);
    return list;
    function recurse(id2) {
      var children = document.querySelectorAll("[".concat(selectors[0], "=\"").concat(id2, "\"]"));
      children.forEach(function (el) {
        list.push(el);
        var childId = el.getAttribute(selectors[1]);
        if (childId && childId !== id2) {
          recurse(childId);
        }
      });
    }
  }
  var parentKey = Symbol();
  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }
  function attachListeners(elm) {
    var offs = [];
    return {
      add: function add(type, listener) {
        if (!type) return;
        on$1(elm.value, type, listener);
        offs.push(function () {
          off$1(elm.value, type, listener);
        });
      },
      clean: function clean() {
        offs.forEach(function (handler) {
          return handler === null || handler === void 0 ? void 0 : handler();
        });
        offs.length = 0;
      }
    };
  }
  var _Popup = Vue.defineComponent({
    name: "TPopup",
    props: _objectSpread$27(_objectSpread$27({}, popupProps), {}, {
      expandAnimation: {
        type: Boolean
      }
    }),
    setup: function setup(props2, _ref) {
      var _process$env;
      var expose = _ref.expose;
      var _toRefs = Vue.toRefs(props2),
        propVisible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(propVisible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        visible = _useVModel2[0],
        setVisible = _useVModel2[1];
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var popper;
      var showTimeout;
      var hideTimeout;
      var triggerEl = Vue.ref(null);
      var overlayEl = Vue.ref(null);
      var popperEl = Vue.ref(null);
      var containerRef = Vue.ref(null);
      var isOverlayHover = Vue.ref(false);
      var arrowStyle = Vue.ref({});
      var id = typeof process !== "undefined" && (_process$env = process.env) !== null && _process$env !== void 0 && _process$env.TEST ? "" : Date.now().toString(36);
      var parent = Vue.inject(parentKey, void 0);
      Vue.provide(parentKey, {
        id: id,
        assertMouseLeave: onMouseLeave
      });
      var prefixCls = usePrefixClass("popup");
      var _useCommonClassName = useCommonClassName$1(),
        commonCls = _useCommonClassName.STATUS;
      var delay = Vue.computed(function () {
        var _props2$delay, _delay2$;
        var delay2 = props2.trigger !== "hover" ? [0, 0] : [].concat((_props2$delay = props2.delay) !== null && _props2$delay !== void 0 ? _props2$delay : [250, 150]);
        return {
          show: delay2[0],
          hide: (_delay2$ = delay2[1]) !== null && _delay2$ !== void 0 ? _delay2$ : delay2[0]
        };
      });
      var trigger = attachListeners(triggerEl);
      Vue.watch(function () {
        return [props2.trigger, triggerEl.value];
      }, function () {
        if (!triggerEl.value) return;
        trigger.clean();
        trigger.add({
          hover: "mouseenter",
          focus: "focusin",
          "context-menu": "contextmenu",
          click: "click"
        }[props2.trigger], function (ev) {
          if (props2.disabled) return;
          if (ev.type === "contextmenu") {
            ev.preventDefault();
          }
          if ((ev.type === "click" || ev.type === "contextmenu") && visible.value) {
            hide(ev);
            return;
          }
          show(ev);
        });
        trigger.add({
          hover: "mouseleave",
          focus: "focusout"
        }[props2.trigger], hide);
      });
      Vue.watch(function () {
        return [props2.overlayStyle, props2.overlayInnerStyle, overlayEl.value];
      }, function () {
        updateOverlayInnerStyle();
        updatePopper();
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return props2.triggerElement;
      }, function (v) {
        if (typeof v === "string") {
          Vue.nextTick(function () {
            triggerEl.value = document.querySelector(v);
          });
        }
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return props2.placement;
      }, function () {
        destroyPopper();
        updatePopper();
      });
      Vue.watch(function () {
        return visible.value;
      }, function (visible2) {
        if (visible2) {
          on$1(document, "mousedown", onDocumentMouseDown, true);
          if (props2.trigger === "focus") {
            once(triggerEl.value, "keydown", function (ev) {
              var _process$env2;
              var code = typeof process !== "undefined" && (_process$env2 = process.env) !== null && _process$env2 !== void 0 && _process$env2.TEST ? "27" : "Escape";
              if (ev.code === code) {
                hide(ev);
              }
            });
          }
          return;
        }
        off$1(document, "mousedown", onDocumentMouseDown, true);
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return [visible.value, overlayEl.value];
      }, function () {
        if (visible.value && overlayEl.value && updateScrollTop) {
          updateScrollTop === null || updateScrollTop === void 0 || updateScrollTop(overlayEl.value);
        }
      });
      Vue.onUnmounted(function () {
        destroyPopper();
        clearAllTimeout();
        off$1(document, "mousedown", onDocumentMouseDown, true);
      });
      expose({
        update: updatePopper,
        getOverlay: function getOverlay() {
          return overlayEl.value;
        },
        getOverlayState: function getOverlayState() {
          return {
            hover: isOverlayHover.value
          };
        },
        close: function close() {
          return hide();
        }
      });
      function getOverlayStyle() {
        var overlayStyle = props2.overlayStyle;
        if (!triggerEl.value || !overlayEl.value) return;
        if (isFunction(overlayStyle)) {
          return overlayStyle(triggerEl.value, overlayEl.value);
        }
        if (isObject(overlayStyle)) {
          return overlayStyle;
        }
      }
      function updateOverlayInnerStyle() {
        var overlayInnerStyle = props2.overlayInnerStyle;
        if (!triggerEl.value || !overlayEl.value) return;
        if (isFunction(overlayInnerStyle)) {
          setStyle(overlayEl.value, overlayInnerStyle(triggerEl.value, overlayEl.value));
        } else if (isObject(overlayInnerStyle)) {
          setStyle(overlayEl.value, overlayInnerStyle);
        }
      }
      function getArrowStyle() {
        var _popperEl$value$offse2;
        if (!triggerEl.value || !popperEl.value) {
          return {};
        }
        var triggerRect = triggerEl.value.getBoundingClientRect();
        var popupRect = popperEl.value.getBoundingClientRect();
        var position = props2.placement;
        if (position.startsWith("top") || position.startsWith("bottom")) {
          var _popperEl$value$offse;
          var offsetLeft = Math.abs(triggerRect.left + triggerRect.width / 2 - popupRect.left);
          var popupWidth = (_popperEl$value$offse = popperEl.value.offsetWidth) !== null && _popperEl$value$offse !== void 0 ? _popperEl$value$offse : popperEl.value.offsetWidth;
          var maxPopupOffsetLeft = popupWidth - 4;
          var minPopupOffsetLeft = 12;
          if (inRange(offsetLeft, 0, popupWidth)) {
            return {
              left: "".concat(max$1([minPopupOffsetLeft, min$2([maxPopupOffsetLeft, offsetLeft])]) - 4, "px"),
              marginLeft: 0
            };
          } else {
            return {};
          }
        }
        var offsetTop = triggerRect.top + triggerRect.height / 2 - popupRect.top;
        var popupHeight = (_popperEl$value$offse2 = popperEl.value.offsetHeight) !== null && _popperEl$value$offse2 !== void 0 ? _popperEl$value$offse2 : popperEl.value.clientHeight;
        var maxPopupOffsetTop = popupHeight - 8;
        var minPopupOffsetTop = 8;
        if (inRange(offsetTop, 0, popupHeight)) {
          return {
            top: "".concat(max$1([minPopupOffsetTop, min$2([maxPopupOffsetTop, offsetTop])]) - 4, "px"),
            marginTop: 0
          };
        } else {
          return {};
        }
      }
      function updatePopper() {
        if (!popperEl.value || !visible.value) return;
        if (popper) {
          if (triggerEl.value.getRootNode() instanceof ShadowRoot) {
            popper.state.elements.reference = triggerEl.value;
            popper.update();
          } else {
            var rect = triggerEl.value.getBoundingClientRect();
            var parent2 = triggerEl.value;
            while (parent2 && parent2 !== document.body) {
              parent2 = parent2.parentElement;
            }
            var isHidden = parent2 !== document.body || rect.width === 0 && rect.height === 0;
            if (!isHidden) {
              popper.state.elements.reference = triggerEl.value;
              popper.update();
            } else {
              setVisible(false, {
                trigger: getTriggerType({
                  type: "mouseenter"
                })
              });
            }
          }
          if (props2.showArrow) {
            arrowStyle.value = getArrowStyle();
          }
          return;
        }
        popper = createPopper(triggerEl.value, popperEl.value, _objectSpread$27({
          placement: getPopperPlacement(props2.placement),
          onFirstUpdate: function onFirstUpdate() {
            Vue.nextTick(updatePopper);
          }
        }, props2.popperOptions));
        if (props2.showArrow) {
          arrowStyle.value = getArrowStyle();
        }
      }
      function destroyPopper() {
        if (popper) {
          var _popper;
          (_popper = popper) === null || _popper === void 0 || _popper.destroy();
          popper = null;
        }
        if (props2.destroyOnClose) {
          var _containerRef$value;
          (_containerRef$value = containerRef.value) === null || _containerRef$value === void 0 || _containerRef$value.unmountContent();
        }
      }
      function show(ev) {
        clearAllTimeout();
        showTimeout = setTimeout(function () {
          setVisible(true, {
            trigger: getTriggerType(ev)
          });
        }, delay.value.show);
      }
      function hide(ev) {
        clearAllTimeout();
        hideTimeout = setTimeout(function () {
          setVisible(false, {
            trigger: getTriggerType(ev),
            e: ev
          });
        }, delay.value.hide);
      }
      function clearAllTimeout() {
        clearTimeout(showTimeout);
        clearTimeout(hideTimeout);
      }
      function getTriggerType(ev) {
        switch (ev === null || ev === void 0 ? void 0 : ev.type) {
          case "mouseenter":
            return "trigger-element-hover";
          case "mouseleave":
            return "trigger-element-hover";
          case "focusin":
            return "trigger-element-focus";
          case "focusout":
            return "trigger-element-blur";
          case "click":
            return "trigger-element-click";
          case "context-menu":
          case "keydown":
            return "keydown-esc";
          case "mousedown":
            return "document";
          default:
            return "trigger-element-close";
        }
      }
      function onDocumentMouseDown(ev) {
        var _popperEl$value, _triggerEl$value;
        if ((_popperEl$value = popperEl.value) !== null && _popperEl$value !== void 0 && _popperEl$value.contains(ev.target)) {
          return;
        }
        if ((_triggerEl$value = triggerEl.value) !== null && _triggerEl$value !== void 0 && _triggerEl$value.contains(ev.target)) {
          return;
        }
        var activedPopper = getPopperTree(id).find(function (el) {
          return el.contains(ev.target);
        });
        if (activedPopper && getPopperTree(activedPopper.getAttribute(POPUP_PARENT_ATTR_NAME), true).some(function (el) {
          return el === popperEl.value;
        })) {
          return;
        }
        hide(ev);
      }
      function onMouseLeave(ev) {
        isOverlayHover.value = false;
        if (props2.trigger !== "hover" || triggerEl.value.contains(ev.target)) return;
        var isCursorOverlaps = getPopperTree(id).some(function (el) {
          var rect = el.getBoundingClientRect();
          return ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height;
        });
        if (!isCursorOverlaps) {
          hide(ev);
          parent === null || parent === void 0 || parent.assertMouseLeave(ev);
        }
      }
      function onMouseenter() {
        isOverlayHover.value = true;
        if (visible.value && props2.trigger === "hover") {
          clearAllTimeout();
        }
      }
      function onOverlayClick(e) {
        var _props2$onOverlayClic;
        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
          e: e
        });
      }
      var updateScrollTop = Vue.inject("updateScrollTop", void 0);
      function handleOnScroll(e) {
        var _props2$onScroll;
        var _e$target = e.target,
          scrollTop = _e$target.scrollTop,
          clientHeight = _e$target.clientHeight,
          scrollHeight = _e$target.scrollHeight;
        var debounceOnScrollBottom = debounce$1(function (e2) {
          var _props2$onScrollToBot;
          return (_props2$onScrollToBot = props2.onScrollToBottom) === null || _props2$onScrollToBot === void 0 ? void 0 : _props2$onScrollToBot.call(props2, {
            e: e2
          });
        }, 100);
        if (clientHeight + Math.floor(scrollTop) === scrollHeight) {
          debounceOnScrollBottom(e);
        }
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 || _props2$onScroll.call(props2, {
          e: e
        });
      }
      return function () {
        var content = renderTNodeJSX("content");
        var hidePopup = props2.hideEmptyPopup && ["", void 0, null].includes(content);
        var overlay = visible.value || !props2.destroyOnClose ? Vue.withDirectives(Vue.createVNode("div", Vue.mergeProps(_defineProperty$2(_defineProperty$2({}, POPUP_ATTR_NAME, id), POPUP_PARENT_ATTR_NAME, parent === null || parent === void 0 ? void 0 : parent.id), {
          "class": [prefixCls.value, props2.overlayClassName],
          "ref": function ref(ref2) {
            return popperEl.value = ref2;
          },
          "style": [{
            zIndex: props2.zIndex
          }, getOverlayStyle(), hidePopup && {
            visibility: "hidden"
          }],
          "onClick": onOverlayClick,
          "onMouseenter": onMouseenter,
          "onMouseleave": onMouseLeave
        }), [Vue.createVNode("div", {
          "class": ["".concat(prefixCls.value, "__content"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefixCls.value, "__content--text"), isString(props2.content)), "".concat(prefixCls.value, "__content--arrow"), props2.showArrow), commonCls.value.disabled, props2.disabled), props2.overlayInnerClassName],
          "ref": overlayEl,
          "onScroll": handleOnScroll
        }, [content, props2.showArrow && Vue.createVNode("div", {
          "class": "".concat(prefixCls.value, "__arrow"),
          "style": arrowStyle.value
        }, null)])]), [[Vue.vShow, visible.value]]) : null;
        return Vue.createVNode(Container, {
          "ref": function ref(ref2) {
            return containerRef.value = ref2;
          },
          "forwardRef": function forwardRef(ref2) {
            if (typeof props2.triggerElement !== "string") triggerEl.value = ref2;
          },
          "onContentMounted": function onContentMounted() {
            if (visible.value) {
              updatePopper();
              var timer = setTimeout(function () {
                updateOverlayInnerStyle();
                clearTimeout(timer);
              }, 60);
            }
          },
          "onResize": function onResize() {
            if (visible.value) {
              updatePopper();
            }
          },
          "visible": visible.value,
          "attach": props2.attach
        }, {
          content: function content() {
            return Vue.createVNode(Vue.Transition, {
              "name": "".concat(prefixCls.value, "--animation").concat(props2.expandAnimation ? "-expand" : ""),
              "appear": true,
              "onEnter": updatePopper,
              "onAfterLeave": destroyPopper
            }, _isSlot$C(overlay) ? overlay : {
              "default": function _default() {
                return [overlay];
              }
            });
          },
          "default": function _default() {
            if (typeof props2.triggerElement === "string") return null;
            return renderContent("default", "triggerElement");
          }
        });
      };
    }
  });

  var Popup = withInstall$1(_Popup);

  var _AnchorTarget = Vue.defineComponent({
    name: "TAnchorTarget",
    props: props$1h,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _useConfig = useConfig("anchor"),
        globalConfig = _useConfig.globalConfig,
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          FileCopyIcon: TdFileCopyIcon
        }),
        FileCopyIcon = _useGlobalIcon.FileCopyIcon;
      var COMPONENT_NAME = usePrefixClass("anchor");
      var toCopyText = function toCopyText() {
        var a = document.createElement("a");
        a.href = "#".concat(props2.id);
        copyText(a.href);
        MessagePlugin.success(globalConfig.value.copySuccessText, 1e3);
      };
      return function () {
        var children = slots["default"];
        var TAG = props2.tag,
          id = props2.id;
        var className = ["".concat(COMPONENT_NAME.value, "__target")];
        var iconClassName = "".concat(classPrefix.value, "-copy");
        return Vue.createVNode(TAG, {
          "id": id,
          "class": className
        }, {
          "default": function _default() {
            return [children && children(null), Vue.createVNode(Popup, {
              "content": globalConfig.value.copyText,
              "placement": "top",
              "showArrow": true,
              "class": iconClassName
            }, {
              "default": function _default() {
                return [Vue.createVNode(FileCopyIcon, {
                  "onClick": toCopyText
                }, null)];
              }
            })];
          }
        });
      };
    }
  });

  var Anchor = withInstall$1(_Anchor);
  var AnchorItem = withInstall$1(_AnchorItem);
  var AnchorTarget = withInstall$1(_AnchorTarget);

  var props$1g = {
    ellipsis: {
      type: [String, Function]
    },
    itemsAfterCollapse: {
      type: Number,
      "default": void 0
    },
    itemsBeforeCollapse: {
      type: Number,
      "default": void 0
    },
    maxItemWidth: {
      type: String,
      "default": void 0
    },
    maxItems: {
      type: Number,
      "default": void 0
    },
    options: {
      type: Array
    },
    separator: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light"].includes(val);
      }
    }
  };

  var props$1f = {
    content: {
      type: [String, Function, Object]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    maxWidth: {
      type: String,
      "default": void 0
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        if (!val) return true;
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    onClick: Function
  };

  var props$1e = {
    delay: {
      type: Number
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
      }
    }
  };

  var useMouse = function useMouse() {
    var x = Vue.ref(0);
    var y = Vue.ref(0);
    var onMouseMove = function onMouseMove(e) {
      x.value = e.clientX;
      y.value = e.clientY;
    };
    if (!isServer$1) {
      Vue.onMounted(function () {
        window.addEventListener("mousemove", onMouseMove, {
          passive: true
        });
      });
      Vue.onUnmounted(function () {
        window.removeEventListener("mousemove", onMouseMove);
      });
    }
    return {
      x: x,
      y: y
    };
  };

  function ownKeys$27(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$26(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$27(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$27(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Tooltip = Vue.defineComponent({
    name: "TTooltip",
    props: _objectSpread$26(_objectSpread$26({}, popupProps), props$1e),
    setup: function setup(props2, ctx) {
      var timer = Vue.ref(null);
      var popupRef = Vue.ref(null);
      var _toRefs = Vue.toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];
      var vm = Vue.getCurrentInstance();
      var innerTooltipVisible = Vue.ref(props2.visible || props2.defaultVisible);
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useMouse = useMouse(),
        x = _useMouse.x;
      var offsetX = Vue.ref(x.value);
      Vue.onMounted(function () {
        if (props2.duration && innerTooltipVisible.value) {
          timer.value = setTimeout(function () {
            setInnerVisible(false, {});
            clearTimeout(timer.value);
            timer.value = null;
          }, props2.duration);
        }
      });
      var onTipVisibleChange = function onTipVisibleChange(val, ctx2) {
        if (timer.value && (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.trigger) !== "document") return;
        if (val) {
          offsetX.value = x.value;
        }
        setInnerVisible(val, ctx2);
      };
      var tooltipOverlayClassName = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-tooltip"), _defineProperty$2({}, "".concat(classPrefix.value, "-tooltip--").concat(props2.theme), props2.theme), props2.overlayClassName];
      });
      var popupProps2 = Vue.computed(function () {
        return _objectSpread$26(_objectSpread$26({}, (vm === null || vm === void 0 ? void 0 : vm.vnode.props) || {}), {}, {
          placement: props2.placement === "mouse" ? "bottom-left" : props2.placement,
          showArrow: props2.placement === "mouse" ? false : props2.showArrow,
          overlayClassName: tooltipOverlayClassName.value,
          onVisibleChange: onTipVisibleChange,
          disabled: props2.disabled
        });
      });
      var overlayInnerStyle = Vue.computed(function () {
        if (props2.placement !== "mouse" || offsetX.value === 0) {
          return props2.overlayInnerStyle;
        }
        var offsetStyle = function offsetStyle(triggerEl) {
          return {
            transform: "translateX(".concat(offsetX.value - triggerEl.getBoundingClientRect().left, "px)")
          };
        };
        if (props2.overlayInnerStyle) {
          return function (triggerEl, popupEl) {
            return _objectSpread$26(_objectSpread$26({}, offsetStyle(triggerEl)), isFunction(props2.overlayInnerStyle) ? props2.overlayInnerStyle(triggerEl, popupEl) : props2.overlayInnerStyle);
          };
        }
        return offsetStyle;
      });
      Vue.watch(function () {
        return innerTooltipVisible.value;
      }, function () {
        if (timer.value && !innerTooltipVisible.value) {
          clearTimeout(timer.value);
          timer.value = null;
        }
      });
      var onPopupUpdate = function onPopupUpdate() {
        var _popupRef$value, _popupRef$value$updat;
        (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 || (_popupRef$value$updat = _popupRef$value.update) === null || _popupRef$value$updat === void 0 || _popupRef$value$updat.call(_popupRef$value);
      };
      ctx.expose({
        updatePopper: onPopupUpdate
      });
      return function () {
        var _content = renderTNodeJSX("content");
        if (!_content && !props2.content) {
          return renderContent("default", "triggerElement");
        }
        return Vue.createVNode(Popup, Vue.mergeProps(omit$1(popupProps2.value, ["content", "default"]), {
          "ref": popupRef,
          "overlayInnerStyle": overlayInnerStyle.value,
          "visible": innerVisible.value
        }), {
          "default": function _default() {
            return [renderContent("default", "triggerElement")];
          },
          content: function content() {
            return _content;
          }
        });
      };
    }
  });

  var Tooltip = withInstall$1(_Tooltip);

  function ownKeys$26(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$25(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$26(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$26(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$B(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var localTBreadcrumbOrigin = {
    separator: "",
    theme: "light",
    maxItemWidth: void 0
  };
  var _BreadcrumbItem = Vue.defineComponent({
    name: "TBreadcrumbItem",
    inheritAttrs: false,
    props: _objectSpread$25(_objectSpread$25({}, props$1f), {}, {
      isEllipsisItem: Boolean
    }),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var breadcrumbText = Vue.ref();
      var localTBreadcrumb = Vue.inject("tBreadcrumb", localTBreadcrumbOrigin);
      var themeClassName = Vue.ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
      var isCutOff = Vue.ref(false);
      var COMPONENT_NAME = usePrefixClass("breadcrumb__item");
      var separatorClass = usePrefixClass("breadcrumb__separator");
      var disableClass = usePrefixClass("is-disabled");
      var linkClass = usePrefixClass("link");
      var maxLengthClass = usePrefixClass("breadcrumb__inner");
      var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
      var maxWithStyle = Vue.computed(function () {
        var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
        var maxWith = props2.maxWidth || maxItemWidth || "120";
        return {
          maxWidth: "".concat(maxWith, "px")
        };
      });
      var _getCurrentInstance = Vue.getCurrentInstance(),
        proxy = _getCurrentInstance.proxy;
      Vue.onMounted(function () {
        if (breadcrumbText.value) {
          isCutOff.value = isTextEllipsis(breadcrumbText.value);
        }
      });
      Vue.onBeforeUpdate(function () {
        if (breadcrumbText.value) {
          isCutOff.value = isTextEllipsis(breadcrumbText.value);
        }
      });
      var handleClick = function handleClick() {
        var router = props2.router || proxy.$router;
        if (props2.to && router) {
          props2.replace ? router.replace(props2.to) : router.push(props2.to);
        } else {
          window.location.href = props2.href;
        }
      };
      var bindEvent = function bindEvent(e) {
        if (!props2.disabled) {
          e.preventDefault();
          if (props2.target === "_blank") {
            props2.href ? window.open(props2.href) : window.open(props2.to);
          } else {
            handleClick();
          }
        }
      };
      return function () {
        var itemClass = [COMPONENT_NAME.value, themeClassName.value];
        var textClass = [textFlowClass.value];
        if (props2.disabled) {
          textClass.push(disableClass.value);
        }
        var listeners = {
          onClick: function onClick(e) {
            if (props2.disabled) {
              e.stopPropagation();
              return;
            }
          }
        };
        var _content = renderContent("default", "content");
        var textContent = Vue.createVNode("span", {
          "class": maxLengthClass.value,
          style: maxWithStyle.value
        }, [renderTNodeJSX("icon"), Vue.createVNode("span", {
          "ref": breadcrumbText,
          "class": "".concat(maxLengthClass.value, "-text")
        }, [_content])]);
        var itemContent = Vue.createVNode("span", _objectSpread$25({
          "class": textClass
        }, listeners), [textContent]);
        if ((props2.href || props2.to) && !props2.disabled) {
          textClass.push(linkClass.value);
          itemContent = Vue.createVNode("a", Vue.mergeProps({
            "class": textClass,
            "href": props2.href,
            "target": props2.target
          }, listeners, {
            "onClick": bindEvent
          }), [textContent]);
        }
        if (props2 !== null && props2 !== void 0 && props2.isEllipsisItem) {
          itemContent = Vue.createVNode("div", {
            "style": "display: flex"
          }, [_content]);
        }
        return Vue.createVNode("div", Vue.mergeProps({
          "class": itemClass
        }, attrs, {
          "onClick": !props2.disabled && props2.onClick
        }), [isCutOff.value ? Vue.createVNode(Tooltip, {
          "content": function content() {
            return _content;
          }
        }, _isSlot$B(itemContent) ? itemContent : {
          "default": function _default() {
            return [itemContent];
          }
        }) : itemContent, Vue.createVNode("span", {
          "class": separatorClass.value,
          "style": {
            textOverflow: isCutOff.value ? "ellipsis" : "clip"
          }
        }, [localTBreadcrumb.separator])]);
      };
    }
  });

  function ownKeys$25(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$24(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$25(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$25(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function valueIsZeroOrUndefined(val) {
    return val === 0 || val === void 0;
  }
  var useEllipsis = function useEllipsis(props, getBreadcrumbItems, ellipsisContent) {
    var _toRefs = Vue.toRefs(props),
      maxItems = _toRefs.maxItems,
      itemsBeforeCollapse = _toRefs.itemsBeforeCollapse,
      itemsAfterCollapse = _toRefs.itemsAfterCollapse;
    var shouldShowEllipsis = Vue.computed(function () {
      var _maxItems$value;
      var items = getBreadcrumbItems.value;
      var currentMaxItems = (_maxItems$value = maxItems.value) !== null && _maxItems$value !== void 0 ? _maxItems$value : 0;
      var totalItems = items.length;
      var itemsCollapseSum = itemsBeforeCollapse.value + itemsAfterCollapse.value;
      if (currentMaxItems > 0 && (valueIsZeroOrUndefined(itemsBeforeCollapse.value) || valueIsZeroOrUndefined(itemsAfterCollapse.value))) {
        log.error("Breadcrumb", "\u9700\u8981\u8BBE\u7F6E itemsBeforeCollapse \u548C itemsAfterCollapse \u5C5E\u6027\u6765\u63A7\u5236\u7701\u7565\u53F7\u524D\u540E\u7684\u663E\u793A\u9879\u6570\u3002");
        return false;
      }
      if (currentMaxItems <= 0 || totalItems <= currentMaxItems || itemsCollapseSum >= totalItems) {
        return false;
      }
      return true;
    });
    var getDisplayItems = Vue.computed(function () {
      var items = getBreadcrumbItems.value;
      var showEllipsis = shouldShowEllipsis.value;
      if (!showEllipsis) {
        return items;
      }
      var totalItems = items.length;
      var beforeItems = items.slice(0, itemsBeforeCollapse.value);
      var afterItems = items.slice(totalItems - itemsAfterCollapse.value, totalItems);
      return [].concat(_toConsumableArray(beforeItems), [{
        content: ellipsisContent,
        disabled: true,
        isEllipsisItem: true
      }], _toConsumableArray(afterItems));
    });
    var getEllipsisItems = Vue.computed(function () {
      var items = getBreadcrumbItems.value;
      if (!shouldShowEllipsis.value) {
        return [];
      }
      var sliceItems = items.slice(itemsBeforeCollapse.value, items.length - itemsAfterCollapse.value);
      return sliceItems.map(function (item, index) {
        return _objectSpread$24(_objectSpread$24({}, item), {}, {
          isLast: index === sliceItems.length - 1
        });
      });
    });
    return {
      getDisplayItems: getDisplayItems,
      getEllipsisItems: getEllipsisItems
    };
  };

  function ownKeys$24(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$23(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$24(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$24(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useBreadcrumbOptions = function useBreadcrumbOptions(props) {
    var getChildComponentSlots = useChildComponentSlots();
    var breadcrumbOptions = Vue.computed(function () {
      var _props$options;
      var breadcrumbItems = [];
      var currentIndex = 0;
      if ((_props$options = props.options) !== null && _props$options !== void 0 && _props$options.length) {
        props.options.forEach(function (option) {
          breadcrumbItems.push(_objectSpread$23(_objectSpread$23({}, option), {}, {
            index: currentIndex++
          }));
        });
      }
      var itemsSlots = getChildComponentSlots("TBreadcrumbItem");
      if (isArray$1(itemsSlots)) {
        itemsSlots.forEach(function (child) {
          var getSlotOrProp = function getSlotOrProp(slotName, propName) {
            var _child$props;
            if (child !== null && child !== void 0 && child.children) {
              var _children$slotName;
              var children = child.children;
              var slotContent = (_children$slotName = children[slotName]) === null || _children$slotName === void 0 ? void 0 : _children$slotName.call(children);
              if (slotContent) {
                if (slotName === "default" && isArray$1(slotContent)) {
                  var textContent = slotContent.filter(function (item) {
                    return Vue.isVNode(item) && isString(item === null || item === void 0 ? void 0 : item.children);
                  }).map(function (item) {
                    return item === null || item === void 0 ? void 0 : item.children;
                  }).join("");
                  return textContent || slotContent;
                }
                return slotContent;
              }
            }
            return (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props[propName];
          };
          breadcrumbItems.push(_objectSpread$23(_objectSpread$23({}, child.props), {}, {
            content: getSlotOrProp("default", "content"),
            icon: function icon() {
              return getSlotOrProp("icon", "icon");
            },
            index: currentIndex++
          }));
        });
      }
      return breadcrumbItems;
    });
    return {
      breadcrumbOptions: breadcrumbOptions
    };
  };

  var _Breadcrumb = Vue.defineComponent({
    name: "TBreadcrumb",
    props: props$1g,
    setup: function setup(props2) {
      var _toRefs = Vue.toRefs(props2),
        theme = _toRefs.theme,
        maxItemWidth = _toRefs.maxItemWidth;
      var COMPONENT_NAME = usePrefixClass("breadcrumb");
      var renderTNodeJSX = useTNodeJSX();
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: TdChevronRightIcon,
          EllipsisIcon: TdEllipsisIcon
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        EllipsisIcon = _useGlobalIcon.EllipsisIcon;
      var separatorContent = renderTNodeJSX("separator");
      var separator = separatorContent || Vue.createVNode(ChevronRightIcon, null, null);
      Vue.provide("tBreadcrumb", Vue.reactive({
        separator: separator,
        theme: theme,
        maxItemWidth: maxItemWidth
      }));
      return function () {
        var _useBreadcrumbOptions = useBreadcrumbOptions(props2),
          breadcrumbOptions = _useBreadcrumbOptions.breadcrumbOptions;
        var ellipsisItems = breadcrumbOptions.value.slice(props2.itemsBeforeCollapse, breadcrumbOptions.value.length - props2.itemsAfterCollapse);
        var ellipsisSlot = renderTNodeJSX("ellipsis", {
          params: {
            items: ellipsisItems,
            separator: separator
          }
        });
        var ellipsisContent = ellipsisSlot || Vue.createVNode(EllipsisIcon, null, null);
        var _useEllipsis = useEllipsis(props2, breadcrumbOptions, ellipsisContent),
          getDisplayItems = _useEllipsis.getDisplayItems;
        var items = getDisplayItems.value;
        var content = items.map(function (item, index) {
          if (_typeof$3(item) === "object" && "content" in item) {
            return Vue.createVNode(_BreadcrumbItem, Vue.mergeProps({
              "key": index
            }, item), {
              "default": function _default() {
                return [item.content];
              }
            });
          }
          return item;
        });
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [content]);
      };
    }
  });

  var Breadcrumb = withInstall$1(_Breadcrumb);
  var BreadcrumbItem = withInstall$1(_BreadcrumbItem);

  var dropdownItemProps = {
    active: Boolean,
    content: {
      type: [String, Function],
      "default": ""
    },
    disabled: Boolean,
    divider: Boolean,
    prefixIcon: {
      type: Function
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    value: {
      type: [String, Number, Object]
    },
    onClick: Function
  };

  function ownKeys$23(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$22(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$23(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$23(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _DropdownItem = Vue.defineComponent({
    name: "TDropdownItem",
    props: _objectSpread$22(_objectSpread$22({}, dropdownItemProps), {}, {
      maxColumnWidth: {
        type: [String, Number],
        "default": 100
      },
      minColumnWidth: {
        type: [String, Number],
        "default": 10
      },
      isSubmenu: Boolean
    }),
    setup: function setup(props) {
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var itemRef = Vue.ref();
      useRipple(props.isSubmenu ? null : itemRef);
      var prefixIcon = renderTNodeJSX("prefixIcon");
      var dropdownItemClass = usePrefixClass("dropdown__item");
      var handleItemClick = function handleItemClick(e) {
        var _props$onClick;
        if (props.disabled) return;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, props.value, {
          e: e
        });
      };
      return function () {
        var content = renderContent("default", "content");
        var classes = [dropdownItemClass.value, "".concat(dropdownItemClass.value, "--theme-").concat(props.theme), _defineProperty$2(_defineProperty$2({}, "".concat(dropdownItemClass.value, "--active"), props.active), "".concat(dropdownItemClass.value, "--disabled"), props.disabled)];
        return Vue.createVNode("li", {
          "class": classes,
          "onClick": handleItemClick,
          "style": {
            maxWidth: pxCompat(props.maxColumnWidth),
            minWidth: pxCompat(props.minColumnWidth)
          },
          "ref": itemRef
        }, [props.prefixIcon ? Vue.createVNode("div", {
          "class": "".concat(dropdownItemClass.value, "-icon")
        }, [prefixIcon]) : null, content]);
      };
    }
  });

  var props$1d = {
    direction: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    disabled: Boolean,
    hideAfterItemClick: {
      type: Boolean,
      "default": true
    },
    maxColumnWidth: {
      type: [String, Number],
      "default": 100
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    minColumnWidth: {
      type: [String, Number],
      "default": 10
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placement: {
      type: String,
      "default": "bottom-left",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$22(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$21(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$22(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$22(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _DropdownMenu = Vue.defineComponent({
    name: "TDropdownMenu",
    props: props$1d,
    setup: function setup(props2) {
      var dropdownClass = usePrefixClass("dropdown");
      var dropdownMenuClass = usePrefixClass("dropdown__menu");
      var scrollTopMap = Vue.reactive({});
      var itemHeight = Vue.ref(null);
      var menuRef = Vue.ref();
      var isOverMaxHeight = Vue.ref(false);
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: TdChevronRightIcon
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var handleItemClick = function handleItemClick(options) {
        var _data$onClick, _props2$onClick;
        var data = options.data,
          context = options.context;
        data === null || data === void 0 || (_data$onClick = data.onClick) === null || _data$onClick === void 0 || _data$onClick.call(data, data, context);
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, data, context);
      };
      var handleScroll = function handleScroll(e, deep) {
        var scrollTop = e.target.scrollTop;
        scrollTopMap[deep] = scrollTop;
      };
      Vue.onMounted(function () {
        if (menuRef.value) {
          var _window;
          var menuHeight = parseInt((_window = window) === null || _window === void 0 ? void 0 : _window.getComputedStyle(menuRef.value).height, 10);
          if (menuHeight >= props2.maxHeight) isOverMaxHeight.value = true;
        }
        itemHeight.value = document.querySelector(".".concat(dropdownClass.value, "__item")).scrollHeight + 2;
      });
      var getContent = function getContent(content) {
        if (isFunction(content)) {
          return content(Vue.h);
        }
        return content;
      };
      var _renderOptions = function renderOptions(data, deep) {
        var _data$forEach;
        var arr = [];
        var renderContent;
        (_data$forEach = data.forEach) === null || _data$forEach === void 0 || _data$forEach.call(data, function (menu, idx) {
          var optionItem = _objectSpread$21({}, menu);
          var onViewIdx = idx - Math.ceil(scrollTopMap[deep] / itemHeight.value);
          var renderIdx = onViewIdx >= 0 ? onViewIdx : idx;
          if (optionItem.children) {
            optionItem.children = _renderOptions(optionItem.children, deep + 1);
            renderContent = Vue.createVNode("div", {
              "key": idx
            }, [Vue.createVNode(_DropdownItem, {
              "style": optionItem.style,
              "class": ["".concat(dropdownClass.value, "__item"), "".concat(dropdownClass.value, "__item--suffix"), optionItem["class"]],
              "value": optionItem.value,
              "theme": optionItem.theme,
              "active": optionItem.active,
              "prefixIcon": optionItem.prefixIcon,
              "disabled": optionItem.disabled,
              "minColumnWidth": props2.minColumnWidth,
              "maxColumnWidth": props2.maxColumnWidth,
              "isSubmenu": true
            }, {
              "default": function _default() {
                return [Vue.createVNode("div", {
                  "class": "".concat(dropdownClass.value, "__item-content")
                }, [Vue.createVNode("span", {
                  "class": "".concat(dropdownClass.value, "__item-text")
                }, [getContent(optionItem.content)]), Vue.createVNode(ChevronRightIcon, {
                  "class": "".concat(dropdownClass.value, "__item-direction"),
                  "size": "16"
                }, null)]), Vue.createVNode("div", {
                  "class": ["".concat(dropdownClass.value, "__submenu-wrapper"), _defineProperty$2({}, "".concat(dropdownClass.value, "__submenu-wrapper--").concat(props2.direction), props2.direction)],
                  "style": {
                    position: "absolute",
                    top: "".concat(renderIdx * itemHeight.value, "px")
                  }
                }, [Vue.createVNode("div", {
                  "class": ["".concat(dropdownClass.value, "__submenu"), _defineProperty$2({}, "".concat(dropdownClass.value, "__submenu--disabled"), optionItem.disabled)],
                  "style": {
                    position: "static",
                    maxHeight: "".concat(props2.maxHeight, "px")
                  },
                  "onScroll": function onScroll(e) {
                    return handleScroll(e, deep + 1);
                  }
                }, [Vue.createVNode("ul", null, [optionItem.children])])])];
              }
            }), optionItem.divider ? Vue.createVNode(Divider, null, null) : null]);
          } else {
            renderContent = Vue.createVNode("div", {
              "key": idx
            }, [Vue.createVNode(_DropdownItem, {
              "style": optionItem.style,
              "class": ["".concat(dropdownClass.value, "__item"), optionItem["class"]],
              "value": optionItem.value,
              "theme": optionItem.theme,
              "active": optionItem.active,
              "prefixIcon": optionItem.prefixIcon,
              "disabled": optionItem.disabled,
              "minColumnWidth": props2.minColumnWidth,
              "maxColumnWidth": props2.maxColumnWidth,
              "onClick": optionItem.disabled || optionItem.children ? function () {
                return null;
              } : function (value, context) {
                return handleItemClick({
                  data: optionItem,
                  context: context
                });
              }
            }, {
              "default": function _default() {
                return [Vue.createVNode("span", {
                  "class": "".concat(dropdownClass.value, "__item-text")
                }, [getContent(optionItem.content)])];
              }
            }), optionItem.divider ? Vue.createVNode(Divider, null, null) : null]);
          }
          arr.push(renderContent);
        });
        return arr;
      };
      return function () {
        return Vue.createVNode("div", {
          "class": [dropdownMenuClass.value, "".concat(dropdownMenuClass.value, "--").concat(props2.direction), _defineProperty$2({}, "".concat(dropdownMenuClass.value, "--overflow"), isOverMaxHeight.value)],
          "style": {
            maxHeight: "".concat(props2.maxHeight, "px")
          },
          "ref": menuRef,
          "onScroll": function onScroll(e) {
            return handleScroll(e, 0);
          }
        }, [_renderOptions(props2.options, 0)]);
      };
    }
  });

  function ownKeys$21(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$20(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$21(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$21(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _getOptionsFromChildren = function getOptionsFromChildren(menuNode) {
    var _menuNode$, _menuNode$3, _menuNode$4;
    if (!menuNode) return [];
    if (isArray$1(menuNode) && ((_menuNode$ = menuNode[0]) === null || _menuNode$ === void 0 || (_menuNode$ = _menuNode$.type) === null || _menuNode$ === void 0 ? void 0 : _menuNode$.name) === "TDropdownMenu") {
      var _menuNode$2, _menuNode$2$default;
      var groupChildren = (_menuNode$2 = menuNode[0]) === null || _menuNode$2 === void 0 || (_menuNode$2 = _menuNode$2.children) === null || _menuNode$2 === void 0 || (_menuNode$2$default = _menuNode$2["default"]) === null || _menuNode$2$default === void 0 ? void 0 : _menuNode$2$default.call(_menuNode$2);
      if (isArray$1(groupChildren)) {
        return _getOptionsFromChildren(groupChildren);
      }
    }
    if (isArray$1(menuNode)) {
      menuNode = menuNode.reduce(function (acc, item) {
        acc = acc.concat(isArray$1(item.children) ? item.children : item);
        return acc;
      }, []);
      return menuNode.map(function (item) {
        var _item$children, _item$children$conten, _item$children2, _item$children2$prefi, _item$children3, _item$children3$prefi, _item$children4, _item$children4$defau, _groupChildren$filter, _groupChildren$filter2;
        var slotContent = (_item$children = item.children) === null || _item$children === void 0 || (_item$children$conten = _item$children.content) === null || _item$children$conten === void 0 ? void 0 : _item$children$conten.call(_item$children);
        var slotPrefixIcon = ((_item$children2 = item.children) === null || _item$children2 === void 0 || (_item$children2$prefi = _item$children2.prefixIcon) === null || _item$children2$prefi === void 0 ? void 0 : _item$children2$prefi.call(_item$children2)) || ((_item$children3 = item.children) === null || _item$children3 === void 0 || (_item$children3$prefi = _item$children3["prefix-icon"]) === null || _item$children3$prefi === void 0 ? void 0 : _item$children3$prefi.call(_item$children3));
        var groupChildren = (_item$children4 = item.children) === null || _item$children4 === void 0 || (_item$children4$defau = _item$children4["default"]) === null || _item$children4$defau === void 0 ? void 0 : _item$children4$defau.call(_item$children4);
        var contentCtx = groupChildren === null || groupChildren === void 0 || (_groupChildren$filter = groupChildren.filter) === null || _groupChildren$filter === void 0 ? void 0 : _groupChildren$filter.call(groupChildren, function (v) {
          var _v$type;
          return !["TDropdownMenu", "TDropdownItem"].includes((_v$type = v.type) === null || _v$type === void 0 ? void 0 : _v$type.name);
        });
        var childrenCtx = groupChildren === null || groupChildren === void 0 || (_groupChildren$filter2 = groupChildren.filter) === null || _groupChildren$filter2 === void 0 ? void 0 : _groupChildren$filter2.call(groupChildren, function (v) {
          var _v$type2;
          return !isString(v.children) && ["TDropdownMenu", "TDropdownItem"].includes((_v$type2 = v.type) === null || _v$type2 === void 0 ? void 0 : _v$type2.name);
        });
        var itemProps = Object.keys(item.props || {}).reduce(function (props, propName) {
          var _item$type;
          if (item.props[propName] === "" && ((_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.name) === "TDropdownItem" && ["active", "divider", "disabled"].includes(propName)) {
            props[camelCase$1(propName)] = true;
          } else {
            props[camelCase$1(propName)] = item.props[propName];
          }
          return props;
        }, {});
        return _objectSpread$20(_objectSpread$20(_objectSpread$20({
          content: slotContent || contentCtx || groupChildren
        }, itemProps), slotPrefixIcon ? {
          prefixIcon: function prefixIcon() {
            return slotPrefixIcon;
          }
        } : {}), {}, {
          children: (childrenCtx === null || childrenCtx === void 0 ? void 0 : childrenCtx.length) > 0 ? _getOptionsFromChildren(childrenCtx) : null
        });
      }).filter(function (v) {
        return !!v.content;
      });
    }
    if (isArray$1(menuNode) && isArray$1((_menuNode$3 = menuNode[0]) === null || _menuNode$3 === void 0 ? void 0 : _menuNode$3.children)) return _getOptionsFromChildren((_menuNode$4 = menuNode[0]) === null || _menuNode$4 === void 0 ? void 0 : _menuNode$4.children);
    return [];
  };
  function useDropdownOptions(props) {
    var _getChildComponentSlo, _getChildComponentSlo2, _instance$slots, _instance$slots$dropd;
    var getChildComponentSlots = useChildComponentSlots();
    var instance = Vue.getCurrentInstance();
    var menuSlot = ((_getChildComponentSlo = getChildComponentSlots("DropdownMenu")) === null || _getChildComponentSlo === void 0 || (_getChildComponentSlo = _getChildComponentSlo[0]) === null || _getChildComponentSlo === void 0 || (_getChildComponentSlo = _getChildComponentSlo.children) === null || _getChildComponentSlo === void 0 || (_getChildComponentSlo2 = _getChildComponentSlo["default"]) === null || _getChildComponentSlo2 === void 0 ? void 0 : _getChildComponentSlo2.call(_getChildComponentSlo)) || ((_instance$slots = instance.slots) === null || _instance$slots === void 0 || (_instance$slots$dropd = _instance$slots.dropdown) === null || _instance$slots$dropd === void 0 ? void 0 : _instance$slots$dropd.call(_instance$slots));
    var dropdownOptions = Vue.computed(function () {
      if (props.options && props.options.length > 0) return props.options;
      return _getOptionsFromChildren(menuSlot);
    });
    return dropdownOptions;
  }

  function ownKeys$20(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1$(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$20(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$20(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Dropdown = Vue.defineComponent({
    name: "TDropdown",
    props: props$1d,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("dropdown");
      var popupElem = Vue.ref(null);
      var isPopupVisible = Vue.ref(false);
      var manualCloseTimeout = Vue.computed(function () {
        var _props2$popupProps, _delay$;
        var delay = (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.delay;
        if (isNumber(delay)) return delay + 10;
        if (isArray$1(delay)) return ((_delay$ = delay[1]) !== null && _delay$ !== void 0 ? _delay$ : delay[0]) + 10;
        return 160;
      });
      var handleMenuClick = function handleMenuClick(data, context) {
        var _props2$onClick;
        if (props2.hideAfterItemClick) {
          var _props2$popupProps2, _props2$popupProps2$o, _props2$popupProps3, _props2$popupProps3$o;
          setTimeout(function () {
            return isPopupVisible.value = false;
          }, manualCloseTimeout.value);
          (_props2$popupProps2 = props2.popupProps) === null || _props2$popupProps2 === void 0 || (_props2$popupProps2$o = _props2$popupProps2.onVisibleChange) === null || _props2$popupProps2$o === void 0 || _props2$popupProps2$o.call(_props2$popupProps2, false, context);
          (_props2$popupProps3 = props2.popupProps) === null || _props2$popupProps3 === void 0 || (_props2$popupProps3$o = _props2$popupProps3["on-visible-change"]) === null || _props2$popupProps3$o === void 0 || _props2$popupProps3$o.call(_props2$popupProps3, false, context);
        }
        props2 === null || props2 === void 0 || (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, data, context);
      };
      var handleVisibleChange = function handleVisibleChange(visible, context) {
        var _props2$popupProps4, _props2$popupProps4$o, _props2$popupProps5, _props2$popupProps5$o;
        isPopupVisible.value = visible;
        (_props2$popupProps4 = props2.popupProps) === null || _props2$popupProps4 === void 0 || (_props2$popupProps4$o = _props2$popupProps4.onVisibleChange) === null || _props2$popupProps4$o === void 0 || _props2$popupProps4$o.call(_props2$popupProps4, visible, context);
        (_props2$popupProps5 = props2.popupProps) === null || _props2$popupProps5 === void 0 || (_props2$popupProps5$o = _props2$popupProps5["on-visible-change"]) === null || _props2$popupProps5$o === void 0 || _props2$popupProps5$o.call(_props2$popupProps5, visible, context);
      };
      return function () {
        var _renderTNodeJSX, _props2$popupProps6;
        var trigger = (_renderTNodeJSX = renderTNodeJSX("default")) === null || _renderTNodeJSX === void 0 ? void 0 : _renderTNodeJSX[0];
        var options = useDropdownOptions(props2);
        var popupParams = _objectSpread$1$(_objectSpread$1$(_objectSpread$1$({}, attrs), {}, {
          disabled: props2.disabled,
          placement: props2.placement,
          trigger: props2.trigger
        }, omit$1(props2.popupProps, ["onVisibleChange", "on-visible-change"])), {}, {
          overlayInnerClassName: [COMPONENT_NAME.value, (_props2$popupProps6 = props2.popupProps) === null || _props2$popupProps6 === void 0 ? void 0 : _props2$popupProps6.overlayInnerClassName]
        });
        return Vue.createVNode(Popup, Vue.mergeProps({
          "destroyOnClose": true,
          "ref": popupElem,
          "visible": isPopupVisible.value,
          "onVisibleChange": handleVisibleChange,
          "expandAnimation": true
        }, popupParams), {
          "default": function _default() {
            return [trigger];
          },
          content: function content() {
            var _options$value;
            return Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), (_options$value = options.value) !== null && _options$value !== void 0 && _options$value.length ? Vue.createVNode(_DropdownMenu, Vue.mergeProps(omit$1(props2, "onClick"), {
              "options": options.value,
              "onClick": handleMenuClick
            }), null) : null, renderTNodeJSX("panelBottomContent")]);
          }
        });
      };
    }
  });

  var Dropdown = withInstall$1(_Dropdown);
  var DropdownItem = withInstall$1(_DropdownItem);
  var DropdownMenu = withInstall$1(_DropdownMenu);

  var props$1c = {
    collapsed: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandMutex: Boolean,
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    width: {
      type: [String, Number, Array],
      "default": "232px"
    },
    onChange: Function,
    onExpand: Function
  };

  function ownKeys$1$(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1_(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1$(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1$(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _getTreePaths = function getTreePaths(node, val, ans) {
    if (!node) return;
    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);
      var target = _getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));
      if (target) return target;
    }
  };
  var _getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {
    if (!node) return [];
    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return node.children;
      var target = _getTreeSameParentNodes(child, val);
      if (target) return target;
    }
  };
  var _DFS = function DFS(root, val) {
    if (root.value === val) return root;
    if (root.children.length > 0) {
      for (var i = 0, len = root.children.length; i < len; i++) {
        var res = _DFS(root.children[i], val);
        if (res) return res;
      }
    }
  };
  var VMenu = /*#__PURE__*/function () {
    function VMenu(options) {
      _classCallCheck(this, VMenu);
      _defineProperty$2(this, "data", null);
      _defineProperty$2(this, "cache", /* @__PURE__ */new Set());
      _defineProperty$2(this, "isMutex", Vue.ref(false));
      _defineProperty$2(this, "expandValues", null);
      var root = {
        value: null,
        parent: null,
        children: []
      };
      this.data = root;
      this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
      this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
    }
    return _createClass(VMenu, [{
      key: "add",
      value: function add(item) {
        var value = item.value,
          parent = item.parent,
          vnode = item.vnode;
        var node = _objectSpread$1_({
          value: value,
          parent: parent,
          children: [],
          vnode: vnode
        }, item);
        this.cache.forEach(function (data, v2, set) {
          if (item.value === data.parent) {
            node.children.push(data);
            set["delete"](data);
          }
        });
        if (item.parent == null) {
          this.data.children.push(node);
          node.parent = this.data;
        } else if (this.data.children.length > 0) {
          var pNode = _DFS(this.data, parent);
          if (pNode && !pNode.children.some(function (child) {
            return child.value === node.value;
          })) {
            pNode.children.push(node);
          } else {
            this.cache.add(node);
          }
        } else {
          this.cache.add(node);
        }
      }
    }, {
      key: "select",
      value: function select(val) {
        var activeValues = _getTreePaths(this.data, val, []) || [];
        activeValues.push(val);
        return activeValues.filter(function (val2) {
          return val2 != null;
        });
      }
    }, {
      key: "expand",
      value: function expand(val) {
        var _this = this;
        if (this.expandValues.has(val)) {
          this.expandValues["delete"](val);
          return _toConsumableArray(this.expandValues);
        }
        this.expandValues.add(val);
        if (!this.isMutex.value) {
          return _toConsumableArray(this.expandValues);
        }
        var sameParentNodes = _getTreeSameParentNodes(this.data, val) || [];
        var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {
          var _node$children;
          return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
        }).map(function (child) {
          return child.value;
        }));
        this.expandValues.forEach(function (val2) {
          var isHit = sameLevelSubmenuValues.has(val2);
          if (isHit) {
            _this.expandValues["delete"](val2);
          }
        });
        return _toConsumableArray(this.expandValues);
      }
    }, {
      key: "getChild",
      value: function getChild(value) {
        var target = _DFS(this.data, value);
        return target ? target.children : [];
      }
    }]);
  }();

  function ownKeys$1_(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1_(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1_(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Menu = Vue.defineComponent({
    name: "TMenu",
    props: _objectSpread$1Z(_objectSpread$1Z({}, props$1c), {}, {
      onCollapsed: Function
    }),
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var mode = Vue.ref(props2.expandType);
      var theme = Vue.computed(function () {
        return props2.theme;
      });
      var isMutex = Vue.computed(function () {
        return props2.expandMutex;
      });
      var collapsed = Vue.computed(function () {
        return props2.collapsed;
      });
      var menuClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-default-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme), _defineProperty$2({}, "".concat(classPrefix.value, "-is-collapsed"), props2.collapsed)];
      });
      var innerClasses = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), "".concat(classPrefix.value, "-menu--scroll")];
      });
      var expandWidth = Vue.computed(function () {
        var width = props2.width;
        var format = function format(val) {
          return isNumber(val) ? "".concat(val, "px") : val;
        };
        if (isArray$1(width)) return width.map(function (item) {
          return format(item);
        });
        return [format(width), "64px"];
      });
      var styles = Vue.computed(function () {
        return {
          height: "100%",
          width: props2.collapsed ? expandWidth.value[1] : expandWidth.value[0]
        };
      });
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        expanded = _toRefs.expanded;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        activeValue = _useVModel2[0],
        setActiveValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        expandValues = _useDefaultValue2[0],
        setExpand = _useDefaultValue2[1];
      var activeValues = Vue.ref([]);
      Vue.watchEffect(function () {
        var _props2$onCollapsed;
        mode.value = props2.collapsed ? "popup" : props2.expandType;
        (_props2$onCollapsed = props2.onCollapsed) === null || _props2$onCollapsed === void 0 || _props2$onCollapsed.call(props2, {
          collapsed: props2.collapsed
        });
      });
      var vMenu = new VMenu({
        isMutex: isMutex,
        expandValues: expandValues.value ? _toConsumableArray(expandValues.value) : []
      });
      Vue.provide("TdMenu", {
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        mode: mode,
        theme: theme,
        isHead: false,
        vMenu: vMenu,
        collapsed: collapsed,
        select: function select(value2) {
          if (value2 !== activeValue.value) {
            setActiveValue(value2);
          }
        },
        open: function open(value2, type) {
          if (mode.value === "normal") {
            setExpand(vMenu.expand(value2));
          } else if (type === "add") {
            if (expandValues.value.indexOf(value2) === -1) {
              setExpand([].concat(_toConsumableArray(expandValues.value), [value2]));
            }
          } else if (type === "remove") {
            var index = expandValues.value.indexOf(value2);
            var tmp = _toConsumableArray(expandValues.value);
            tmp.splice(index, 1);
            setExpand(tmp);
          }
        }
      });
      Vue.watch(function () {
        return props2.expanded;
      }, function (value2) {
        vMenu.expandValues = new Set(value2);
      });
      Vue.watch(function () {
        return props2.collapsed;
      }, function (newValue, oldValue) {
        if (!newValue && oldValue) {
          setExpand(_toConsumableArray(vMenu.expandValues));
        }
      });
      Vue.watch(activeValue, function (value2) {
        activeValues.value = vMenu.select(value2);
      });
      Vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });
      Vue.onMounted(function () {
        activeValues.value = vMenu.select(activeValue.value);
      });
      return function () {
        var operations = renderContent("operations", "options");
        var logo = renderTNodeJSX("logo");
        return Vue.createVNode("div", {
          "class": menuClass.value,
          "style": styles.value
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-default-menu__inner")
        }, [logo && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__logo")
        }, [logo]), Vue.createVNode("ul", {
          "class": innerClasses.value
        }, [renderContent("default", "content")]), operations && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__operations")
        }, [operations])])]);
      };
    }
  });

  var props$1b = {
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onChange: Function,
    onExpand: Function
  };

  var tabPanelProps = {
    "default": {
      type: Function
    },
    destroyOnHide: {
      type: Boolean,
      "default": true
    },
    disabled: Boolean,
    draggable: {
      type: Boolean,
      "default": true
    },
    label: {
      type: [String, Function]
    },
    lazy: Boolean,
    panel: {
      type: [String, Function]
    },
    removable: Boolean,
    value: {
      type: [String, Number]
    },
    onRemove: Function
  };

  var _TabPanel = Vue.defineComponent({
    name: "TTabPanel",
    props: tabPanelProps,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tab-panel");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var renderTNodeContent = useContent();
      useDestroyOnClose();
      var tabs = Vue.inject("tabs");
      var isActive = Vue.computed(function () {
        return props2.value === tabs.value.value;
      });
      var isMount = Vue.ref(props2.lazy ? isActive.value : true);
      Vue.watch(isActive, function () {
        if (isActive.value) {
          if (!isMount.value) {
            isMount.value = true;
          }
        } else if (props2.destroyOnHide) {
          isMount.value = false;
        }
      }, {
        immediate: true
      });
      var tabPanelClass = Vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$2({}, STATUS.value.hidden, !isActive.value)];
      });
      return function () {
        if (!isMount.value) return null;
        return Vue.createVNode("div", {
          "class": tabPanelClass.value
        }, [renderTNodeContent("default", "panel")]);
      };
    }
  });

  var props$1a = {
    action: {
      type: [String, Function]
    },
    addable: Boolean,
    disabled: Boolean,
    dragSort: Boolean,
    list: {
      type: Array
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    scrollPosition: {
      type: String,
      "default": "auto",
      validator: function validator(val) {
        if (!val) return true;
        return ["auto", "start", "center", "end"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "card"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onAdd: Function,
    onChange: Function,
    onDragSort: Function,
    onRemove: Function
  };

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };
  var getDomOffsetLeft = function getDomOffsetLeft(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetLeft) || 0;
  };
  function calculateOffset(depElement, offset, scrollPosition) {
    var navsContainer = depElement.navsContainer,
      activeTab = depElement.activeTab,
      rightOperations = depElement.rightOperations,
      leftOperations = depElement.leftOperations;
    var tabWidth = getDomWidth(activeTab);
    var wrapWidth = getDomWidth(navsContainer);
    var tabOffset = getDomOffsetLeft(activeTab);
    var rightOperationsWidth = getDomWidth(rightOperations);
    var leftOperationsWidth = getDomWidth(leftOperations);
    if (scrollPosition === "auto") {
      if (tabOffset - leftOperationsWidth < offset) {
        return tabOffset - leftOperationsWidth;
      }
      if (tabOffset + tabWidth > offset + wrapWidth - rightOperationsWidth) {
        return tabOffset + tabWidth - wrapWidth + rightOperationsWidth;
      }
    } else if (scrollPosition === "start") {
      return tabOffset - leftOperationsWidth;
    } else if (scrollPosition === "center") {
      return tabOffset + (tabWidth - wrapWidth) / 2;
    } else if (scrollPosition === "end") {
      return tabOffset + tabWidth - wrapWidth + rightOperationsWidth;
    }
    return offset;
  }
  function calcPrevOrNextOffset(elements, offset, action) {
    var navsContainer = elements.navsContainer,
      activeTab = elements.activeTab;
    var navsContainerWidth = getDomWidth(navsContainer);
    var activeTabWidth = getDomWidth(activeTab);
    var diffWidth = Math.abs(navsContainerWidth - activeTabWidth);
    if (action === "next") {
      return offset + diffWidth;
    }
    return offset - diffWidth;
  }
  function calcMaxOffset(elements) {
    var navsWrap = elements.navsWrap,
      navsContainer = elements.navsContainer,
      rightOperations = elements.rightOperations,
      toRightBtn = elements.toRightBtn;
    var wrapWidth = getDomWidth(navsWrap);
    var containerWidth = getDomWidth(navsContainer);
    var rightOperationsWidth = getDomWidth(rightOperations);
    var toRightBtnWidth = getDomWidth(toRightBtn);
    return wrapWidth - containerWidth + rightOperationsWidth - toRightBtnWidth;
  }
  function calcValidOffset(offset, maxOffset) {
    return Math.max(0, Math.min(offset, maxOffset));
  }

  var TTabNavItem = Vue.defineComponent({
    name: "TTabNavItem",
    props: {
      index: Number,
      active: {
        type: Boolean
      },
      theme: props$1a.theme,
      size: props$1a.size,
      placement: props$1a.placement,
      label: {
        type: null
      },
      disabled: tabPanelProps.disabled,
      removable: tabPanelProps.removable,
      value: tabPanelProps.value,
      onClick: Function,
      onRemove: Function
    },
    setup: function setup(props) {
      var itemRef = Vue.ref();
      useRipple(itemRef);
      var COMPONENT_NAME = usePrefixClass("tabs__nav-item");
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: TdCloseIcon
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var removeBtnClick = function removeBtnClick(_ref) {
        var e = _ref.e;
        if (e) e.stopPropagation();
        props.onRemove({
          e: e,
          value: props.value,
          index: props.index
        });
      };
      var onClickNav = function onClickNav(e) {
        if (props.disabled) return;
        props.onClick(e);
      };
      var navItemClass = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, COMPONENT_NAME.value, true), "".concat(classPrefix.value, "-tabs__nav--card"), props.theme === "card"), STATUS.value.disabled, props.disabled), STATUS.value.active, props.active), "".concat(classPrefix.value, "-is-left"), props.placement === "left"), "".concat(classPrefix.value, "-is-right"), props.placement === "right"), SIZE.value.medium, props.size === "medium"), SIZE.value.large, props.size === "large");
      });
      var renderCardItem = function renderCardItem() {
        return Vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav,
          "ref": itemRef
        }, [Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label]), props.removable && !props.disabled ? Vue.createVNode(CloseIcon, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };
      var renderNormalItem = function renderNormalItem() {
        return Vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav
        }, [Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "-wrapper"), _defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, props.disabled), STATUS.value.active, props.active)],
          "ref": itemRef
        }, [Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label])]), props.removable && !props.disabled ? Vue.createVNode(CloseIcon, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };
      return function () {
        return props.theme === "card" ? renderCardItem() : renderNormalItem();
      };
    }
  });

  var TTabNavBar = Vue.defineComponent({
    props: {
      navs: {
        type: Array
      },
      placement: props$1a.placement,
      value: props$1a.value
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var barRef = Vue.ref();
      var navBarClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__bar"), "".concat(classPrefix.value, "-is-").concat(props.placement)];
      });
      var navBarStyle = Vue.ref(null);
      var getStyle = function getStyle() {
        var isVertical = ["left", "right"].includes(props.placement.toLowerCase());
        var _ref = isVertical ? ["height", "top"] : ["width", "left"],
          _ref2 = _slicedToArray(_ref, 2),
          sizePropName = _ref2[0],
          offsetPropName = _ref2[1];
        var offset = 0;
        var i = 0;
        for (; i < props.navs.length; i++) {
          var _props$navs$i;
          if (props.navs[i].props.value === props.value) {
            break;
          }
          if ((_props$navs$i = props.navs[i]) !== null && _props$navs$i !== void 0 && _props$navs$i.el) {
            var sizeWithUnit = getComputedStyle(props.navs[i].el)[sizePropName];
            var size = parseFloat(sizeWithUnit);
            offset += size;
          }
        }
        if (!props.navs[i]) return {};
        return _defineProperty$2(_defineProperty$2({}, offsetPropName, "".concat(offset, "px")), sizePropName, props.navs[i].el ? getComputedStyle(props.navs[i].el)[sizePropName] : "0px");
      };
      var update = function update() {
        return navBarStyle.value = getStyle();
      };
      Vue.onMounted(function () {
        Vue.nextTick(function () {
          update();
        });
      });
      Vue.watch([function () {
        return props.navs;
      }, function () {
        return props.value;
      }, function () {
        return props.placement;
      }], function () {
        Vue.nextTick(function () {
          update();
        });
      });
      useResizeObserver(barRef, debounce$1(function () {
        update();
      }, 35));
      return function () {
        return Vue.createVNode("div", {
          "class": navBarClass.value,
          "style": navBarStyle.value,
          "ref": barRef
        }, null);
      };
    }
  });

  function ownKeys$1Z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TTabNav = Vue.defineComponent({
    name: "TTabNav",
    resizeObserver: null,
    props: {
      theme: props$1a.theme,
      panels: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      action: Array,
      value: props$1a.value,
      placement: props$1a.placement,
      scrollPosition: props$1a.scrollPosition,
      size: props$1a.size,
      disabled: props$1a.disabled,
      addable: props$1a.addable,
      onChange: props$1a.onChange,
      onAdd: props$1a.onAdd,
      onRemove: props$1a.onRemove,
      dragSort: props$1a.dragSort,
      onDragSort: props$1a.onDragSort
    },
    setup: function setup(props) {
      var componentName = usePrefixClass("tabs");
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: TdChevronLeftIcon,
          ChevronRightIcon: TdChevronRightIcon,
          AddIcon: TdAddIcon
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        AddIcon = _useGlobalIcon.AddIcon;
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var scrollLeft = Vue.ref(0);
      var navsContainerRef = Vue.ref();
      var navsWrapRef = Vue.ref();
      var leftOperationsRef = Vue.ref();
      var rightOperationsRef = Vue.ref();
      var toRightBtnRef = Vue.ref();
      var activeTabRef = Vue.ref();
      var maxScrollLeft = Vue.ref(0);
      var showAction = Vue.computed(function () {
        var _props$placement;
        return ["top", "bottom"].includes(props === null || props === void 0 || (_props$placement = props.placement) === null || _props$placement === void 0 ? void 0 : _props$placement.toLowerCase());
      });
      var getRefs = function getRefs() {
        return {
          navsContainer: navsContainerRef.value,
          navsWrap: navsWrapRef.value,
          leftOperations: leftOperationsRef.value,
          rightOperations: rightOperationsRef.value,
          toRightBtn: toRightBtnRef.value,
          activeTab: activeTabRef.value
        };
      };
      var isVerticalPlacement = Vue.computed(function () {
        return ["left", "right"].includes(props.placement.toLowerCase());
      });
      var canToLeft = Vue.computed(function () {
        return scrollLeft.value > 1;
      });
      var canToRight = Vue.computed(function () {
        return scrollLeft.value < maxScrollLeft.value - 1;
      });
      var wrapTransformStyle = Vue.computed(function () {
        if (isVerticalPlacement.value) return {};
        return {
          transform: "translate3d(".concat(-scrollLeft.value, "px, 0, 0)")
        };
      });
      var navsContainerStyle = Vue.computed(function () {
        return props.addable ? {
          "min-height": "48px"
        } : null;
      });
      var iconBaseClass = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(componentName.value, "__btn"), true), SIZE.value.medium, props.size === "medium"), SIZE.value.large, props.size === "large");
      });
      var leftIconClass = Vue.computed(function () {
        return _objectSpread$1Y(_defineProperty$2({}, "".concat(componentName.value, "__btn--left"), true), iconBaseClass.value);
      });
      var rightIconClass = Vue.computed(function () {
        return _objectSpread$1Y(_defineProperty$2({}, "".concat(componentName.value, "__btn--right"), true), iconBaseClass.value);
      });
      var addIconClass = Vue.computed(function () {
        return _objectSpread$1Y(_defineProperty$2({}, "".concat(componentName.value, "__add-btn"), true), iconBaseClass.value);
      });
      var navContainerClass = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(componentName.value, "__nav-container"), true), "".concat(componentName.value, "__nav--card"), props.theme === "card"), "".concat(classPrefix.value, "-is-").concat(props.placement), true), "".concat(classPrefix.value, "-is-addable"), props.addable);
      });
      var navScrollContainerClass = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2({}, "".concat(componentName.value, "__nav-scroll"), true), "".concat(classPrefix.value, "-is-scrollable"), canToLeft.value || canToRight.value);
      });
      var navsWrapClass = Vue.computed(function () {
        return ["".concat(componentName.value, "__nav-wrap"), "".concat(classPrefix.value, "-is-smooth"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-vertical"), isVerticalPlacement.value)];
      });
      var setOffset = function setOffset(offset) {
        scrollLeft.value = calcValidOffset(offset, maxScrollLeft.value);
      };
      var handleScroll = function handleScroll(action) {
        setOffset(calcPrevOrNextOffset(getRefs(), scrollLeft.value, action));
      };
      var handleWheel = function handleWheel(event) {
        if (!canToLeft.value && !canToRight.value) return;
        event.preventDefault();
        var deltaX = event.deltaX,
          deltaY = event.deltaY;
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
          setOffset(scrollLeft.value + deltaX);
        } else {
          setOffset(scrollLeft.value + deltaY);
        }
      };
      var handleActiveTabScroll = function handleActiveTabScroll() {
        setTimeout(function () {
          setOffset(calculateOffset(getRefs(), scrollLeft.value, props.scrollPosition));
        }, 0);
      };
      var getMaxScrollLeft = function getMaxScrollLeft() {
        Vue.nextTick(function () {
          maxScrollLeft.value = calcMaxOffset(getRefs());
        });
      };
      Vue.watch([function () {
        return props.placement;
      }, function () {
        return props.panels;
      }], getMaxScrollLeft);
      Vue.watch([function () {
        return props.scrollPosition;
      }], handleActiveTabScroll);
      useResize(debounce$1(getMaxScrollLeft), navsContainerRef.value);
      var handleAddTab = function handleAddTab(e) {
        var _props$onAdd;
        (_props$onAdd = props.onAdd) === null || _props$onAdd === void 0 || _props$onAdd.call(props, {
          e: e
        });
      };
      var tabClick = function tabClick(event, nav) {
        var value = nav.value,
          disabled = nav.disabled;
        if (disabled || props.value === value) {
          return false;
        }
        props.onChange(value);
      };
      var removeBtnClick = function removeBtnClick(_ref5) {
        var e = _ref5.e,
          value = _ref5.value,
          index = _ref5.index;
        props.onRemove({
          e: e,
          value: value,
          index: index
        });
      };
      var setActiveTab = function setActiveTab(ref2) {
        if (!(ref2 !== null && ref2 !== void 0 && ref2.$el)) return;
        if ((ref2 === null || ref2 === void 0 ? void 0 : ref2.value) === props.value && activeTabRef.value !== ref2.$el) {
          activeTabRef.value = ref2.$el;
          handleActiveTabScroll();
        }
      };
      var _useDragSort = useDragSort$2(props),
        setNavsWrap = _useDragSort.setNavsWrap;
      Vue.onMounted(function () {
        setNavsWrap(navsWrapRef.value);
        getMaxScrollLeft();
        handleActiveTabScroll();
      });
      var renderNavsContent = function renderNavsContent() {
        return props.panels.map(function (panel, index) {
          var _panel$children;
          var label;
          if (panel !== null && panel !== void 0 && (_panel$children = panel.children) !== null && _panel$children !== void 0 && _panel$children.label) {
            label = panel.children.label();
          } else if (isFunction(panel.label)) {
            label = panel.label(Vue.h);
          } else {
            label = panel.label || "\u9009\u9879\u5361".concat(index + 1);
          }
          var draggable = props.dragSort;
          if (draggable && panel.draggable === false) {
            draggable = panel.draggable;
          }
          return Vue.createVNode(TTabNavItem, {
            "ref": setActiveTab,
            "draggable": draggable,
            "key": panel.value,
            "index": index,
            "theme": props.theme,
            "size": props.size,
            "placement": props.placement,
            "label": label,
            "active": panel.value === props.value,
            "disabled": props.disabled || panel.disabled,
            "removable": panel.removable,
            "value": panel.value,
            "onClick": function onClick(e) {
              return tabClick(e, panel);
            },
            "onRemove": removeBtnClick
          }, null);
        });
      };
      var renderArrows = function renderArrows() {
        return [Vue.createVNode("div", {
          "ref": leftOperationsRef,
          "class": ["".concat(componentName.value, "__operations"), "".concat(componentName.value, "__operations--left")]
        }, [Vue.createVNode(Vue.Transition, {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToLeft.value ? Vue.createVNode("div", {
              "class": leftIconClass.value,
              "onClick": function onClick() {
                return handleScroll("prev");
              }
            }, [Vue.createVNode(ChevronLeftIcon, null, null)]) : null];
          }
        })]), Vue.createVNode("div", {
          "ref": rightOperationsRef,
          "class": ["".concat(componentName.value, "__operations"), "".concat(componentName.value, "__operations--right")]
        }, [Vue.createVNode(Vue.Transition, {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToRight.value ? Vue.createVNode("div", {
              "ref": toRightBtnRef,
              "class": rightIconClass.value,
              "onClick": function onClick() {
                return handleScroll("next");
              }
            }, [Vue.createVNode(ChevronRightIcon, null, null)]) : null];
          }
        }), props.addable ? Vue.createVNode("div", {
          "class": addIconClass.value,
          "onClick": handleAddTab
        }, [Vue.createVNode(AddIcon, null, null)]) : null, showAction.value && props.action])];
      };
      var renderNavs = function renderNavs() {
        var navContent = renderNavsContent();
        return Vue.createVNode("div", {
          "class": navContainerClass.value
        }, [Vue.createVNode("div", {
          "class": navScrollContainerClass.value,
          "onWheel": handleWheel
        }, [Vue.createVNode("div", {
          "ref": navsWrapRef,
          "class": navsWrapClass.value,
          "style": wrapTransformStyle.value
        }, [props.theme !== "card" && Vue.createVNode(TTabNavBar, {
          "placement": props.placement,
          "value": props.value,
          "navs": navContent
        }, null), navContent])])]);
      };
      return function () {
        return Vue.createVNode("div", {
          "ref": navsContainerRef,
          "class": ["".concat(componentName.value, "__nav")],
          "style": navsContainerStyle.value
        }, [renderArrows(), renderNavs()]);
      };
    }
  });

  var _Tabs = Vue.defineComponent({
    name: "TTabs",
    props: props$1a,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue || "", props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tabValue = _useVModel2[0],
        setTabValue = _useVModel2[1];
      Vue.provide("tabs", {
        value: tabValue
      });
      var onTabAdd = function onTabAdd(context) {
        var _props2$onAdd;
        (_props2$onAdd = props2.onAdd) === null || _props2$onAdd === void 0 || _props2$onAdd.call(props2, {
          e: context.e
        });
      };
      var onTabChange = function onTabChange(value2) {
        setTabValue(value2);
      };
      var onTabRemove = function onTabRemove(_ref) {
        var _props2$onRemove;
        var e = _ref.e,
          value2 = _ref.value,
          index = _ref.index;
        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 || _props2$onRemove.call(props2, {
          value: value2,
          index: index,
          e: e
        });
      };
      var getSlotPanels = function getSlotPanels() {
        var content = renderTNodeJSX("default");
        if (!content) return [];
        var _flatContent = function flatContent(ct) {
          return ct.map(function (item) {
            if (item.children && isArray$1(item.children)) return _flatContent(item.children);
            return item;
          }).flat().filter(function (item) {
            return item.type.name === "TTabPanel";
          });
        };
        return _flatContent(content);
      };
      var renderHeader = function renderHeader() {
        var _props2$list;
        var panels = ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length ? props2.list : getSlotPanels()) || [];
        var actionContent = renderTNodeJSX("action");
        var panelsData = panels.map(function (item) {
          var selfItem = item;
          if (item.props) {
            Object.keys(item.props).forEach(function (key) {
              selfItem[key] = item.props[key];
            });
          }
          return selfItem;
        });
        var tabNavProps = {
          theme: props2.theme,
          value: tabValue.value,
          size: props2.size,
          disabled: props2.disabled,
          placement: props2.placement,
          scrollPosition: props2.scrollPosition,
          addable: props2.addable,
          panels: panelsData,
          dragSort: props2.dragSort,
          action: actionContent
        };
        return Vue.createVNode("div", {
          "class": _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-tabs__header"), true), "".concat(classPrefix.value, "-is-").concat(props2.placement), true)
        }, [Vue.createVNode(TTabNav, Vue.mergeProps(tabNavProps, {
          "onDragSort": props2.onDragSort,
          "onChange": onTabChange,
          "onAdd": onTabAdd,
          "onRemove": onTabRemove
        }), null)]);
      };
      var renderContent = function renderContent() {
        var _props2$list2;
        var panels = getSlotPanels();
        if ((_props2$list2 = props2.list) !== null && _props2$list2 !== void 0 && _props2$list2.length) {
          return props2.list.map(function (item) {
            return Vue.createVNode(_TabPanel, Vue.mergeProps(item, {
              "onRemove": onTabRemove
            }), null);
          });
        }
        if (panels && panels.length) {
          return Vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-tabs__content")]
          }, [panels]);
        }
      };
      return function () {
        return Vue.createVNode("div", {
          "class": [COMPONENT_NAME.value]
        }, [props2.placement !== "bottom" ? [renderHeader(), renderContent()] : [renderContent(), renderHeader()]]);
      };
    }
  });

  var Tabs = withInstall$1(_Tabs);
  var TabPanel = withInstall$1(_TabPanel);

  var props$19 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function
    },
    popupProps: {
      type: Object
    },
    title: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  var FakeArrow = Vue.defineComponent({
    name: "TFakeArrow",
    props: {
      isActive: {
        type: Boolean
      },
      overlayClassName: {
        type: [String, Object, Array]
      },
      overlayStyle: {
        type: Object || String
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("fake-arrow");
      var classes = Vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--active"), props.isActive), props.overlayClassName];
      });
      return function () {
        return Vue.createVNode("svg", {
          "class": classes.value,
          "width": "16",
          "height": "16",
          "viewBox": "0 0 16 16",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg",
          "style": props.overlayStyle
        }, [Vue.createVNode("path", {
          "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
          "stroke": "black",
          "stroke-opacity": "0.9",
          "stroke-width": "1.3"
        }, null)]);
      };
    }
  });

  function ownKeys$1Y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1X(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Submenu = Vue.defineComponent({
    name: "TSubmenu",
    props: props$19,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs,
        slots = _ref.slots;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var instance = Vue.getCurrentInstance();
      var menu = Vue.inject("TdMenu");
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value;
      var theme = menu.theme,
        activeValues = menu.activeValues,
        expandValues = menu.expandValues,
        isHead = menu.isHead,
        open = menu.open;
      var submenu = Vue.inject("TdSubmenu", {});
      var setSubPopup = submenu.setSubPopup,
        closeParentPopup = submenu.closeParentPopup;
      var mode = Vue.computed(function () {
        return attrs.expandType || menu.mode.value;
      });
      var menuItems = Vue.ref([]);
      var isActive = Vue.computed(function () {
        return activeValues.value.indexOf(props2.value) > -1;
      });
      var popupVisible = Vue.ref(false);
      var isCursorInPopup = Vue.ref(false);
      var rippleColor = Vue.computed(function () {
        return theme.value === "light" ? "#E7E7E7" : "#383838";
      });
      var isOpen = Vue.computed(function () {
        var _expandValues$value;
        if (mode.value === "popup") {
          return popupVisible.value;
        }
        return expandValues ? (_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.includes(props2.value) : false;
      });
      var isNested = Vue.ref(false);
      var popupWrapperRef = Vue.ref();
      var subPopupRef = Vue.ref();
      var submenuRef = Vue.ref();
      var transitionClass = usePrefixClass("slide-down");
      useRipple(submenuRef, rippleColor);
      var classes = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-submenu"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
      });
      var overlayInnerClassName = Vue.computed(function () {
        var _props2$popupProps;
        return ["".concat(classPrefix.value, "-menu__popup"), "".concat(classPrefix.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-opened"), popupVisible.value), (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayInnerClassName];
      });
      var overlayClassName = Vue.computed(function () {
        var _props2$popupProps2;
        return ["".concat(classPrefix.value, "-menu--").concat(theme.value), isHead && "".concat(classPrefix.value, "-is-head-menu"), _defineProperty$2({}, "".concat(classPrefix.value, "-menu-is-nested"), isNested.value), (_props2$popupProps2 = props2.popupProps) === null || _props2$popupProps2 === void 0 ? void 0 : _props2$popupProps2.overlayClassName];
      });
      var submenuClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__item"), "".concat(classPrefix.value, "-menu__item-spacer"), "".concat(classPrefix.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), "".concat(classPrefix.value, "-is-opened"), isOpen.value), "".concat(classPrefix.value, "-is-active"), isActive.value)];
      });
      var subClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__sub"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
      });
      var arrowClass = Vue.computed(function () {
        return [_defineProperty$2({}, "".concat(classPrefix.value, "-fake-arrow--active"), isOpen.value)];
      });
      Vue.provide("TdSubmenu", Vue.reactive({
        value: value,
        addMenuItem: function addMenuItem(item) {
          menuItems.value.push(item);
          if (submenu) {
            submenu.addMenuItem(item);
          }
        },
        setSubPopup: function setSubPopup(ref2) {
          subPopupRef.value = ref2;
        },
        closeParentPopup: function closeParentPopup(e) {
          var related = e.relatedTarget;
          if (_loopInPopup(related)) return;
          handleMouseLeavePopup(e);
        }
      }));
      var passSubPopupRefToParent = function passSubPopupRefToParent(val) {
        if (isFunction(setSubPopup)) {
          setSubPopup(val);
        }
      };
      var handleMouseEnter = function handleMouseEnter() {
        if (props2.disabled) return;
        setTimeout(function () {
          if (!popupVisible.value) {
            open(props2.value);
            Vue.nextTick().then(function () {
              passSubPopupRefToParent(popupWrapperRef.value);
            });
          }
          popupVisible.value = true;
        }, 0);
      };
      var targetInPopup = function targetInPopup(el) {
        return el === null || el === void 0 ? void 0 : el.classList.contains("".concat(classPrefix.value, "-menu__popup"));
      };
      var _loopInPopup = function loopInPopup(el) {
        if (!el) return false;
        return targetInPopup(el) || _loopInPopup(el.parentElement);
      };
      var handleMouseLeave = function handleMouseLeave(e) {
        setTimeout(function () {
          var inPopup = targetInPopup(e.relatedTarget);
          if (isCursorInPopup.value || inPopup) return;
          popupVisible.value = false;
        }, 0);
      };
      var handleMouseLeavePopup = function handleMouseLeavePopup(e) {
        var toElement = e.toElement,
          relatedTarget = e.relatedTarget;
        var target = toElement || relatedTarget;
        if (target === subPopupRef.value) return;
        var isSubmenu = function isSubmenu(el) {
          return el === submenuRef.value;
        };
        while (target !== null && target !== document && !isSubmenu(target)) {
          target = target.parentNode;
        }
        isCursorInPopup.value = false;
        if (!isSubmenu(target)) {
          popupVisible.value = false;
        }
        closeParentPopup === null || closeParentPopup === void 0 || closeParentPopup(e);
      };
      var handleEnterPopup = function handleEnterPopup() {
        isCursorInPopup.value = true;
      };
      var handleSubmenuItemClick = function handleSubmenuItemClick() {
        if (props2.disabled) return;
        open(props2.value);
      };
      var renderPopup = function renderPopup(triggerElement) {
        var _props2$popupProps3;
        var placement = "right-top";
        if (!isNested.value && isHead) {
          placement = "bottom-left";
        }
        var popupWrapper = Vue.createVNode("div", {
          "ref": popupWrapperRef,
          "class": ["".concat(classPrefix.value, "-menu__spacer"), "".concat(classPrefix.value, "-menu__spacer--").concat(!isNested.value && isHead ? "top" : "left")],
          "onMouseenter": handleEnterPopup,
          "onMouseleave": handleMouseLeavePopup
        }, [Vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-menu__popup-wrapper")
        }, [renderContent("default", "content")])]);
        var slots2 = {
          content: function content() {
            return popupWrapper;
          }
        };
        var realPopup = Vue.createVNode(Popup, Vue.mergeProps((_props2$popupProps3 = props2.popupProps) !== null && _props2$popupProps3 !== void 0 ? _props2$popupProps3 : {}, {
          "overlayInnerClassName": _toConsumableArray(overlayInnerClassName.value),
          "overlayClassName": _toConsumableArray(overlayClassName.value),
          "visible": popupVisible.value,
          "placement": placement
        }), _objectSpread$1X({
          "default": function _default() {
            return [Vue.createVNode("div", {
              "ref": submenuRef,
              "class": submenuClass.value
            }, [triggerElement])];
          }
        }, slots2));
        return realPopup;
      };
      var renderHeadSubmenu = function renderHeadSubmenu() {
        var icon = renderTNodeJSX("icon");
        var normalSubmenu = [Vue.createVNode("div", {
          "ref": submenuRef,
          "class": submenuClass.value,
          "onClick": handleSubmenuItemClick
        }, [icon, Vue.createVNode("span", {
          "class": ["".concat(classPrefix.value, "-menu__content")]
        }, [renderTNodeJSX("title", {
          silent: true
        })])]), Vue.createVNode("ul", {
          "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
        }, [renderContent("default", "content")])];
        var needRotate = mode.value === "popup" && isNested.value;
        var triggerElement = [icon, Vue.createVNode("span", {
          "class": ["".concat(classPrefix.value, "-menu__content")]
        }, [renderTNodeJSX("title", {
          silent: true
        })]), Vue.createVNode(FakeArrow, {
          "overlayClassName": /menu/i.test(instance === null || instance === void 0 ? void 0 : instance.parent.proxy.$options.name) ? arrowClass.value : null,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)];
        return mode.value === "normal" ? normalSubmenu : renderPopup(triggerElement);
      };
      var renderSubmenu = function renderSubmenu() {
        var hasContent = slots.content || slots["default"];
        var icon = renderTNodeJSX("icon");
        var child = renderContent("default", "content");
        var parent = instance.parent;
        var paddingLeft = 44;
        while (parent && parent.type.name !== "TMenu") {
          if (parent.type.name === "TSubmenu") {
            paddingLeft += 16;
          }
          parent = parent.parent;
        }
        var _useCollapseAnimation = useCollapseAnimation(),
          beforeEnter = _useCollapseAnimation.beforeEnter,
          enter = _useCollapseAnimation.enter,
          afterEnter = _useCollapseAnimation.afterEnter,
          beforeLeave = _useCollapseAnimation.beforeLeave,
          leave = _useCollapseAnimation.leave,
          afterLeave = _useCollapseAnimation.afterLeave;
        var needRotate = mode.value === "popup" && isNested.value;
        var normalSubmenu = [Vue.createVNode("div", {
          "ref": submenuRef,
          "class": submenuClass.value,
          "onClick": handleSubmenuItemClick
        }, [icon, Vue.createVNode("span", {
          "class": ["".concat(classPrefix.value, "-menu__content")]
        }, [renderTNodeJSX("title", {
          silent: true
        })]), hasContent && Vue.createVNode(FakeArrow, {
          "overlayClassName": arrowClass.value,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)]), Vue.createVNode(Vue.Transition, {
          "name": transitionClass.value,
          "onBeforeEnter": beforeEnter,
          "onEnter": enter,
          "onAfterEnter": afterEnter,
          "onBeforeLeave": beforeLeave,
          "onLeave": leave,
          "onAfterLeave": afterLeave
        }, {
          "default": function _default() {
            return [Vue.withDirectives(Vue.createVNode("ul", {
              "class": subClass.value,
              "style": {
                "--padding-left": "".concat(paddingLeft, "px")
              }
            }, [child]), [[Vue.vShow, isOpen.value]])];
          }
        })];
        var triggerElement = [icon, Vue.createVNode("span", {
          "class": ["".concat(classPrefix.value, "-menu__content")]
        }, [renderTNodeJSX("title", {
          silent: true
        })]), Vue.createVNode(FakeArrow, {
          "overlayClassName": /menu/i.test(parent.proxy.$options.name) ? arrowClass.value : null,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
            "margin-left": "auto"
          }
        }, null)];
        return mode.value === "normal" ? normalSubmenu : renderPopup(triggerElement);
      };
      Vue.watch(popupVisible, function (visible) {
        menu.open(props2.value, visible ? "add" : "remove");
      });
      Vue.watch(popupWrapperRef, function () {
        passSubPopupRefToParent(popupWrapperRef.value);
      });
      Vue.onMounted(function () {
        var _menu$vMenu;
        menu === null || menu === void 0 || (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 || _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: slots["default"]
        });
        var node = instance.parent;
        while (node && !/^t(head)?menu/i.test((_node = node) === null || _node === void 0 ? void 0 : _node.type.name)) {
          var _node, _node2, _node3;
          if (/submenu/i.test((_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.type.name)) {
            isNested.value = true;
            break;
          }
          node = (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.parent;
        }
      });
      return function () {
        var child = null;
        var events = {};
        var virtualChild;
        if (mode.value === "popup") {
          events = {
            onMouseenter: handleMouseEnter,
            onMouseleave: handleMouseLeave
          };
          if (activeValues.value.length < 2) virtualChild = Vue.createVNode("div", {
            "style": "display:none"
          }, [renderContent("default", "content")]);
        }
        if (Object.keys(slots).length > 0) {
          child = isHead ? renderHeadSubmenu() : renderSubmenu();
        }
        return Vue.createVNode("li", Vue.mergeProps({
          "class": classes.value
        }, events), [child, virtualChild]);
      };
    }
  });

  function ownKeys$1X(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1W(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1X(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1X(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$A(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _HeadMenu = Vue.defineComponent({
    name: "THeadMenu",
    props: props$1b,
    setup: function setup(props2, ctx) {
      var _ctx$slots$default2, _ctx$slots3, _ctx$slots$content2, _ctx$slots4;
      var classPrefix = usePrefixClass();
      var _getCurrentInstance = Vue.getCurrentInstance(),
        proxy = _getCurrentInstance.proxy;
      Vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        expanded = _toRefs.expanded;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        activeValue = _useVModel2[0],
        setActiveValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        expandValues = _useDefaultValue2[0],
        setExpanded = _useDefaultValue2[1];
      var activeValues = Vue.ref([]);
      var theme = Vue.computed(function () {
        return props2.theme;
      });
      var menuClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), "".concat(classPrefix.value, "-head-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme)];
      });
      var mode = Vue.ref(props2.expandType);
      var submenu = Vue.reactive([]);
      var vMenu = new VMenu({
        isMutex: true,
        expandValues: expandValues.value
      });
      Vue.provide("TdMenu", {
        mode: mode,
        theme: theme,
        vMenu: vMenu,
        isHead: true,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        select: function select(value2) {
          setActiveValue(value2);
        },
        open: function open(value2, type) {
          var expanded2 = _toConsumableArray(expandValues.value);
          var index = expanded2.indexOf(value2);
          if (mode.value === "popup") {
            if (type === "add") {
              if (index === -1) {
                expanded2.push(value2);
              }
            } else if (type === "remove") {
              expanded2.splice(index, 1);
            }
          } else if (mode.value === "normal" && value2 !== void 0) {
            expanded2.splice(0, 1);
            if (index === -1) {
              expanded2.push(value2);
            }
          }
          setExpanded(expanded2);
        }
      });
      var handleTabChange = function handleTabChange(value2) {
        setActiveValue(value2);
        handleClickSubMenuItem(value2);
      };
      var handleSubmenuExpand = function handleSubmenuExpand(value2) {
        var ans = vMenu.getChild(value2);
        submenu.length = 0;
        submenu.push.apply(submenu, _toConsumableArray(ans));
      };
      Vue.watch(expandValues, function (value2) {
        if (mode.value === "normal") {
          handleSubmenuExpand(value2[0]);
        }
      });
      var updateActiveValues = function updateActiveValues(value2) {
        activeValues.value = vMenu.select(value2);
      };
      Vue.watch(activeValue, updateActiveValues);
      Vue.watch(function () {
        return props2.expandType;
      }, function (value2) {
        mode.value = value2;
      });
      Vue.onMounted(function () {
        var _expandValues$value;
        activeValues.value = vMenu.select(activeValue.value);
        if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
          handleSubmenuExpand(expandValues.value[0]);
        }
      });
      var handleClickSubMenuItem = function handleClickSubMenuItem(value2) {
        var _activeMenuItem$onCli;
        var activeMenuItem = submenu.find(function (v) {
          return v.value === value2;
        });
        (_activeMenuItem$onCli = activeMenuItem.onClick) === null || _activeMenuItem$onCli === void 0 || _activeMenuItem$onCli.call(activeMenuItem, {
          value: value2
        });
        var to = activeMenuItem.to,
          href = activeMenuItem.href,
          replace = activeMenuItem.replace;
        if (href) {
          window.location.href = activeMenuItem.href;
        }
        var router = activeMenuItem.router || proxy.$router;
        if (to && router) {
          replace ? router.replace(to) : router.push(to);
        }
      };
      var renderNormalSubmenu = function renderNormalSubmenu() {
        var _slot;
        if (submenu.length === 0) return null;
        return Vue.createVNode("ul", {
          "class": ["".concat(classPrefix.value, "-head-menu__submenu"), "".concat(classPrefix.value, "-submenu")]
        }, [Vue.createVNode(Tabs, {
          "value": activeValue.value,
          "onChange": handleTabChange
        }, _isSlot$A(_slot = submenu.map(function (item) {
          var _item$vnode$;
          return Vue.createVNode(TabPanel, {
            "value": item.value,
            "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
          }, null);
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]);
      };
      var menuRef = Vue.ref();
      var innerRef = Vue.ref();
      var logoRef = Vue.ref();
      var operationRef = Vue.ref();
      var _initVMenu = function initVMenu(slots, parentValue) {
        slots.forEach(function (node) {
          var _node$props, _node$type, _node$type2, _node$children;
          var nodeValue = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.value;
          if (((_node$type = node.type) === null || _node$type === void 0 ? void 0 : _node$type.name) === "TSubmenu" || ((_node$type2 = node.type) === null || _node$type2 === void 0 ? void 0 : _node$type2.name) === "TMenuItem") {
            vMenu.add(_objectSpread$1W({
              value: nodeValue,
              parent: parentValue,
              vnode: node.children["default"]
            }, node.props));
          }
          if (isFunction((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children["default"])) {
            _initVMenu(node.children["default"](), nodeValue);
            return;
          }
          if (isArray$1(node.children)) {
            _initVMenu(node.children, nodeValue);
          }
        });
      };
      _initVMenu(((_ctx$slots$default2 = (_ctx$slots3 = ctx.slots)["default"]) === null || _ctx$slots$default2 === void 0 ? void 0 : _ctx$slots$default2.call(_ctx$slots3)) || ((_ctx$slots$content2 = (_ctx$slots4 = ctx.slots).content) === null || _ctx$slots$content2 === void 0 ? void 0 : _ctx$slots$content2.call(_ctx$slots4)) || []);
      return function () {
        var _props2$logo, _ctx$slots$logo, _ctx$slots5, _props2$operations, _ctx$slots$operations, _ctx$slots6, _ctx$slots$options, _ctx$slots7, _ctx$slots$default3, _ctx$slots8, _ctx$slots$content3, _ctx$slots9;
        var logo = ((_props2$logo = props2.logo) === null || _props2$logo === void 0 ? void 0 : _props2$logo.call(props2, Vue.h)) || ((_ctx$slots$logo = (_ctx$slots5 = ctx.slots).logo) === null || _ctx$slots$logo === void 0 ? void 0 : _ctx$slots$logo.call(_ctx$slots5));
        var operations = ((_props2$operations = props2.operations) === null || _props2$operations === void 0 ? void 0 : _props2$operations.call(props2, Vue.h)) || ((_ctx$slots$operations = (_ctx$slots6 = ctx.slots).operations) === null || _ctx$slots$operations === void 0 ? void 0 : _ctx$slots$operations.call(_ctx$slots6)) || ((_ctx$slots$options = (_ctx$slots7 = ctx.slots).options) === null || _ctx$slots$options === void 0 ? void 0 : _ctx$slots$options.call(_ctx$slots7));
        var content = ((_ctx$slots$default3 = (_ctx$slots8 = ctx.slots)["default"]) === null || _ctx$slots$default3 === void 0 ? void 0 : _ctx$slots$default3.call(_ctx$slots8)) || ((_ctx$slots$content3 = (_ctx$slots9 = ctx.slots).content) === null || _ctx$slots$content3 === void 0 ? void 0 : _ctx$slots$content3.call(_ctx$slots9)) || [];
        return Vue.createVNode("div", {
          "class": menuClass.value
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-head-menu__inner"),
          "ref": innerRef
        }, [logo && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__logo"),
          "ref": logoRef
        }, [logo]), Vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-menu"),
          "ref": menuRef
        }, [content]), operations && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu__operations"),
          "ref": operationRef
        }, [operations])]), mode.value === "normal" && renderNormalSubmenu()]);
      };
    }
  });

  var props$18 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    replace: Boolean,
    router: {
      type: Object
    },
    routerLink: Boolean,
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        if (!val) return true;
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    value: {
      type: [String, Number]
    },
    onClick: Function
  };

  function ownKeys$1W(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1V(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1W(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1W(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$z(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _MenuItem = Vue.defineComponent({
    name: "TMenuItem",
    props: props$18,
    emits: ["click"],
    setup: function setup(props2, ctx) {
      var _toRefs = Vue.toRefs(props2),
        href = _toRefs.href,
        target = _toRefs.target,
        to = _toRefs.to,
        disabled = _toRefs.disabled,
        value = _toRefs.value,
        onClick = _toRefs.onClick,
        routerLink = _toRefs.routerLink,
        replace = _toRefs.replace;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var menu = Vue.inject("TdMenu");
      var itemRef = Vue.ref();
      var instance = Vue.getCurrentInstance();
      useRipple(itemRef);
      var submenu = Vue.inject("TdSubmenu", null);
      var active = Vue.computed(function () {
        return menu.activeValue.value === props2.value;
      });
      var collapsed = Vue.computed(function () {
        var _menu$collapsed;
        return (_menu$collapsed = menu.collapsed) === null || _menu$collapsed === void 0 ? void 0 : _menu$collapsed.value;
      });
      var classes = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__item"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-is-active"), active.value), "".concat(classPrefix.value, "-is-disabled"), props2.disabled), "".concat(classPrefix.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), "".concat(classPrefix.value, "-submenu__item"), !!submenu && !menu.isHead)];
      });
      var router = Vue.computed(function () {
        return props2.router || (instance === null || instance === void 0 ? void 0 : instance.proxy.$router);
      });
      var handleClick = function handleClick(e) {
        var _onClick$value, _submenu$closeParentP;
        e.stopPropagation();
        if (disabled.value) return;
        menu.select(value.value);
        (_onClick$value = onClick.value) === null || _onClick$value === void 0 || _onClick$value.call(onClick, {
          e: e,
          value: value.value
        });
        if (to.value || routerLink.value && href.value) {
          var methods = replace.value ? "replace" : "push";
          router.value[methods](to.value || href.value)["catch"](function (err) {
            if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
              throw err;
            }
          });
        }
        submenu === null || submenu === void 0 || (_submenu$closeParentP = submenu.closeParentPopup) === null || _submenu$closeParentP === void 0 || _submenu$closeParentP.call(submenu, e);
      };
      Vue.onMounted(function () {
        var _menu$vMenu;
        menu === null || menu === void 0 || (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 || _menu$vMenu.add(_objectSpread$1V({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"]
        }, props2));
        var activeValues = menu.activeValues.value;
        if (activeValues.includes(props2.value) && !activeValues.includes(submenu === null || submenu === void 0 ? void 0 : submenu.value)) {
          activeValues.push(submenu === null || submenu === void 0 ? void 0 : submenu.value);
        }
      });
      return function () {
        var _router$value;
        var liContent = Vue.createVNode("li", {
          "ref": itemRef,
          "class": classes.value,
          "onClick": handleClick
        }, [renderTNodeJSX("icon"), routerLink.value ? Vue.createVNode("a", {
          "href": href.value ? href.value : to.value ? (_router$value = router.value) === null || _router$value === void 0 ? void 0 : _router$value.resolve(to.value).href : "",
          "target": target.value,
          "class": "".concat(classPrefix.value, "-menu__item-link"),
          "onClick": function onClick(e) {
            return e.preventDefault();
          }
        }, [Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-menu__content")
        }, [renderContent("default", "content")])]) : href.value ? Vue.createVNode("a", {
          "href": href.value,
          "target": target.value,
          "class": "".concat(classPrefix.value, "-menu__item-link"),
          "onClick": function onClick(e) {
            return disabled.value && e.preventDefault();
          }
        }, [Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-menu__content")
        }, [renderContent("default", "content")])]) : Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-menu__content")
        }, [renderContent("default", "content")])]);
        var node = instance === null || instance === void 0 ? void 0 : instance.parent;
        if (collapsed.value && /tmenu/i.test(node === null || node === void 0 ? void 0 : node.type.name)) {
          return Vue.createVNode(Tooltip, {
            "content": function content() {
              return renderContent("default", "content");
            },
            "placement": "right"
          }, _isSlot$z(liContent) ? liContent : {
            "default": function _default() {
              return [liContent];
            }
          });
        }
        return liContent;
      };
    }
  });

  var props$17 = {
    title: {
      type: [String, Function]
    }
  };

  var _MenuGroup = Vue.defineComponent({
    name: "TMenuGroup",
    props: props$17,
    setup: function setup() {
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu-group")
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-menu-group__title")
        }, [renderTNodeJSX("title", {
          silent: false
        })]), renderTNodeJSX("default")]);
      };
    }
  });

  var Menu = withInstall$1(_Menu);
  var HeadMenu = withInstall$1(_HeadMenu);
  var Submenu = withInstall$1(_Submenu);
  var MenuItem = withInstall$1(_MenuItem);
  var MenuGroup = withInstall$1(_MenuGroup);

  var props$16 = {
    align: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    allowInputOverMax: Boolean,
    autoWidth: Boolean,
    autocomplete: {
      type: String,
      "default": void 0
    },
    autofocus: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    format: {
      type: Function
    },
    inputClass: {
      type: [String, Object, Array]
    },
    label: {
      type: [String, Function]
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: [String, Number]
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    showClearIconOnEmpty: Boolean,
    showLimitNumber: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    spellCheck: Boolean,
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClick: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onValidate: Function,
    onWheel: Function
  };

  var useCLASSNAMES = function useCLASSNAMES() {
    var classPrefix = usePrefixClass();
    return Vue.computed(function () {
      var form = "".concat(classPrefix.value, "-form");
      var input = "".concat(classPrefix.value, "-input");
      var is = "".concat(classPrefix.value, "-is");
      return {
        form: form,
        label: "".concat(form, "__label"),
        labelTop: "".concat(form, "__label--top"),
        inline: "".concat(form, "-inline"),
        formItem: "".concat(form, "__item"),
        formItemWithHelp: "".concat(form, "__item-with-help"),
        formItemWithExtra: "".concat(form, "__item-with-extra"),
        controls: "".concat(form, "__controls"),
        controlsContent: "".concat(form, "__controls-content"),
        status: "".concat(form, "__status"),
        extra: "".concat(input, "__extra"),
        help: "".concat(input, "__help"),
        success: "".concat(is, "-success"),
        successBorder: "".concat(form, "--success-border"),
        error: "".concat(is, "-error"),
        warning: "".concat(is, "-warning")
      };
    });
  };
  var ValidateStatus = /* @__PURE__ */function (ValidateStatus2) {
    ValidateStatus2["TO_BE_VALIDATED"] = "not";
    ValidateStatus2["SUCCESS"] = "success";
    ValidateStatus2["FAIL"] = "fail";
    return ValidateStatus2;
  }(ValidateStatus || {});
  var FormInjectionKey = Symbol("FormProvide");
  var FormItemInjectionKey = Symbol("FormItemProvide");

  function useLengthLimit(params) {
    var getValueByLimitNumber = function getValueByLimitNumber(inputValue) {
      var _params$value = params.value,
        allowInputOverMax = _params$value.allowInputOverMax,
        maxlength = _params$value.maxlength,
        maxcharacter = _params$value.maxcharacter;
      if (!(maxlength || maxcharacter) || allowInputOverMax || !inputValue) return inputValue;
      if (maxlength) {
        return limitUnicodeMaxLength(inputValue, maxlength);
      }
      if (maxcharacter) {
        var r = getCharacterLength(inputValue, maxcharacter);
        if (isObject(r)) {
          return r.characters;
        }
      }
    };
    var limitNumber = Vue.computed(function () {
      var _params$value2 = params.value,
        maxlength = _params$value2.maxlength,
        maxcharacter = _params$value2.maxcharacter,
        value = _params$value2.value;
      if (isNumber(value)) return String(value);
      if (maxlength && maxcharacter) {
        log.warn("Input", "Pick one of maxlength and maxcharacter please.");
      }
      if (maxlength) {
        var length = value !== null && value !== void 0 && value.length ? getUnicodeLength(value) : 0;
        return "".concat(length, "/").concat(maxlength);
      }
      if (maxcharacter) {
        return "".concat(getCharacterLength(value || ""), "/").concat(maxcharacter);
      }
      return "";
    });
    var innerStatus = Vue.computed(function () {
      if (limitNumber.value) {
        var _limitNumber$value$sp = limitNumber.value.split("/"),
          _limitNumber$value$sp2 = _slicedToArray(_limitNumber$value$sp, 2),
          current = _limitNumber$value$sp2[0],
          total = _limitNumber$value$sp2[1];
        return Number(current) > Number(total) ? "error" : "";
      }
      return "";
    });
    var tStatus = Vue.computed(function () {
      var status = params.value.status;
      return status || innerStatus.value;
    });
    var onValidateChange = function onValidateChange() {
      var _params$value$onValid, _params$value3;
      (_params$value$onValid = (_params$value3 = params.value).onValidate) === null || _params$value$onValid === void 0 || _params$value$onValid.call(_params$value3, {
        error: innerStatus.value ? "exceed-maximum" : void 0
      });
    };
    Vue.watch(innerStatus, onValidateChange);
    Vue.onMounted(function () {
      innerStatus.value && onValidateChange();
    });
    return {
      tStatus: tStatus,
      limitNumber: limitNumber,
      getValueByLimitNumber: getValueByLimitNumber
    };
  }

  function getOutputValue(val, type) {
    if (type === "number") {
      return val || val === 0 ? Number(val) : void 0;
    }
    return val;
  }
  function useInput(props, expose) {
    var _toRefs = Vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var inputValue = Vue.ref();
    var isComposition = Vue.ref(false);
    var compositionValue = Vue.ref();
    var clearIconRef = Vue.ref(null);
    var innerClickElement = Vue.ref();
    var disabled = useDisabled();
    var readonly = useReadonly();
    var _useVModel = useVModel$1(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var isHover = Vue.ref(false);
    var focused = Vue.ref(false);
    var renderType = Vue.ref(props.type);
    var inputRef = Vue.ref(null);
    var limitParams = Vue.computed(function () {
      return {
        value: [void 0, null].includes(innerValue.value) ? void 0 : String(innerValue.value),
        status: props.status,
        maxlength: Number(props.maxlength),
        maxcharacter: props.maxcharacter,
        allowInputOverMax: props.allowInputOverMax,
        onValidate: props.onValidate
      };
    });
    var _useLengthLimit = useLengthLimit(limitParams),
      limitNumber = _useLengthLimit.limitNumber,
      getValueByLimitNumber = _useLengthLimit.getValueByLimitNumber,
      tStatus = _useLengthLimit.tStatus;
    var showClear = Vue.computed(function () {
      return (innerValue.value && !disabled.value && props.clearable && !readonly.value || props.showClearIconOnEmpty) && isHover.value;
    });
    var focus = function focus() {
      var _inputRef$value;
      focused.value = true;
      (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || _inputRef$value.focus();
    };
    var blur = function blur() {
      var _inputRef$value2;
      focused.value = false;
      (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 || _inputRef$value2.blur();
    };
    var emitFocus = function emitFocus(e) {
      var _props$onFocus;
      if (isHover.value && focused.value) return;
      inputValue.value = innerValue.value;
      if (props.disabled) return;
      focused.value = true;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, innerValue.value, {
        e: e
      });
    };
    var emitClear = function emitClear(_ref) {
      var _props$onClear;
      var e = _ref.e;
      var val = props.type === "number" ? void 0 : "";
      setInnerValue(val, {
        e: e,
        trigger: "clear"
      });
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
        e: e
      });
    };
    var onClearIconMousedown = function onClearIconMousedown(e) {
      innerClickElement.value = e.target;
    };
    var emitPassword = function emitPassword() {
      if (disabled.value) return;
      var toggleType = renderType.value === "password" ? "text" : "password";
      renderType.value = toggleType;
    };
    var setInputElValue = function setInputElValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var inputEl = inputRef.value;
      if (!inputEl) return;
      var sV = String(v);
      if (!inputEl.value) {
        return;
      }
      if (inputEl.value !== sV) {
        inputEl.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var _innerValue$value;
      var target = e.target;
      var val = target.value;
      if (props.type !== "number" && typeof innerValue.value === "string" && val.length > ((_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value.length)) {
        val = getValueByLimitNumber(val);
      }
      setInnerValue(getOutputValue(val, props.type), {
        e: e,
        trigger: "input"
      });
      Vue.nextTick(function () {
        if (props.type === "number" && /\.(\d+)?0$/.test(val)) {
          setInputElValue(val);
        } else {
          setInputElValue(innerValue.value);
        }
      });
    };
    var handleInput = function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      var val = e.currentTarget.value;
      if (checkInputType || isComposition.value) {
        compositionValue.value = val;
        return;
      }
      inputValueChangeHandle(e);
    };
    var isClearIcon = function isClearIcon() {
      var _clearIconRef$value;
      var tmp = innerClickElement.value;
      if (!tmp || !tmp.tagName || !((_clearIconRef$value = clearIconRef.value) !== null && _clearIconRef$value !== void 0 && _clearIconRef$value.$el) || !["path", "svg"].includes(tmp.tagName)) return false;
      while (tmp) {
        var _clearIconRef$value2;
        if (((_clearIconRef$value2 = clearIconRef.value) === null || _clearIconRef$value2 === void 0 ? void 0 : _clearIconRef$value2.$el) === tmp) {
          return true;
        }
        tmp = tmp.parentNode;
      }
      return false;
    };
    var formItem = Vue.inject(FormItemInjectionKey, void 0);
    var formatAndEmitBlur = function formatAndEmitBlur(e) {
      if (!isClearIcon()) {
        var _props$onBlur;
        if (props.format) {
          inputValue.value = typeof innerValue.value === "number" || props.type === "number" ? innerValue.value : props.format(innerValue.value);
        }
        focused.value = false;
        if (isComposition.value) {
          isComposition.value = false;
          compositionValue.value = "";
        }
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, innerValue.value, {
          e: e
        });
        formItem === null || formItem === void 0 || formItem.handleBlur();
      } else {
        focus();
      }
    };
    var onHandleCompositionend = function onHandleCompositionend(e) {
      var _props$onCompositione;
      isComposition.value = false;
      compositionValue.value = "";
      inputValueChangeHandle(e);
      (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 || _props$onCompositione.call(props, String(innerValue.value), {
        e: e
      });
    };
    var onHandleCompositionstart = function onHandleCompositionstart(e) {
      var _props$onCompositions;
      isComposition.value = true;
      var value2 = e.currentTarget.value;
      compositionValue.value = value2;
      (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 || _props$onCompositions.call(props, String(innerValue.value), {
        e: e
      });
    };
    var onRootClick = function onRootClick(e) {
      var _inputRef$value3, _props$onClick;
      (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 || _inputRef$value3.focus();
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, {
        e: e
      });
    };
    Vue.watch(function () {
      return props.autofocus;
    }, function (value2) {
      if (value2 === true) {
        Vue.nextTick(function () {
          var _inputRef$value4;
          (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 || _inputRef$value4.focus();
        });
      }
    }, {
      immediate: true
    });
    Vue.watch(innerValue, function (val, oldVal) {
      var isNumberType = props.type === "number";
      if (oldVal === void 0 && props.format && typeof val !== "number" && !isNumberType) {
        inputValue.value = props.format(val);
      } else {
        inputValue.value = val;
      }
      var newVal = typeof val === "number" ? val : getValueByLimitNumber(val);
      if (newVal !== val && !isNumberType) {
        setInnerValue(newVal, {
          trigger: "initial"
        });
      }
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.type;
    }, function (v) {
      renderType.value = v;
    }, {
      immediate: true
    });
    expose({
      inputRef: inputRef,
      focus: focus,
      blur: blur
    });
    return {
      isHover: isHover,
      focused: focused,
      renderType: renderType,
      showClear: showClear,
      inputRef: inputRef,
      clearIconRef: clearIconRef,
      inputValue: inputValue,
      isComposition: isComposition,
      compositionValue: compositionValue,
      limitNumber: limitNumber,
      tStatus: tStatus,
      emitFocus: emitFocus,
      formatAndEmitBlur: formatAndEmitBlur,
      onHandleCompositionend: onHandleCompositionend,
      onHandleCompositionstart: onHandleCompositionstart,
      onRootClick: onRootClick,
      emitPassword: emitPassword,
      handleInput: handleInput,
      emitClear: emitClear,
      onClearIconMousedown: onClearIconMousedown,
      innerValue: innerValue
    };
  }

  function useInputEventHandler(props, isHover) {
    var handleKeydown = function handleKeydown(e) {
      if (props.disabled) return;
      var code = e.code;
      var tmpValue = getOutputValue(e.currentTarget.value, props.type);
      if (/enter/i.test(code) || /enter/i.test(e.key)) {
        var _props$onEnter;
        (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, tmpValue, {
          e: e
        });
      } else {
        var _props$onKeydown;
        (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 || _props$onKeydown.call(props, tmpValue, {
          e: e
        });
      }
    };
    var handleKeyUp = function handleKeyUp(e) {
      var _props$onKeyup;
      if (props.disabled) return;
      var tmpValue = getOutputValue(e.currentTarget.value, props.type);
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 || _props$onKeyup.call(props, tmpValue, {
        e: e
      });
    };
    var handleKeypress = function handleKeypress(e) {
      var _props$onKeypress;
      if (props.disabled) return;
      var tmpValue = getOutputValue(e.currentTarget.value, props.type);
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 || _props$onKeypress.call(props, tmpValue, {
        e: e
      });
    };
    var onHandlePaste = function onHandlePaste(e) {
      var _props$onPaste;
      if (props.disabled) return;
      var clipData = e.clipboardData || window.clipboardData;
      (_props$onPaste = props.onPaste) === null || _props$onPaste === void 0 || _props$onPaste.call(props, {
        e: e,
        pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
      });
    };
    var mouseEvent = function mouseEvent(v) {
      return isHover.value = v;
    };
    var onHandleMousewheel = function onHandleMousewheel(e) {
      var _props$onWheel;
      return (_props$onWheel = props.onWheel) === null || _props$onWheel === void 0 ? void 0 : _props$onWheel.call(props, {
        e: e
      });
    };
    var onInputMouseenter = function onInputMouseenter(e) {
      var _props$onMouseenter;
      mouseEvent(true);
      (_props$onMouseenter = props.onMouseenter) === null || _props$onMouseenter === void 0 || _props$onMouseenter.call(props, {
        e: e
      });
    };
    var onInputMouseleave = function onInputMouseleave(e) {
      var _props$onMouseleave;
      mouseEvent(false);
      (_props$onMouseleave = props.onMouseleave) === null || _props$onMouseleave === void 0 || _props$onMouseleave.call(props, {
        e: e
      });
    };
    return {
      isHover: isHover,
      handleKeydown: handleKeydown,
      handleKeyUp: handleKeyUp,
      handleKeypress: handleKeypress,
      onHandlePaste: onHandlePaste,
      onHandleMousewheel: onHandleMousewheel,
      onInputMouseenter: onInputMouseenter,
      onInputMouseleave: onInputMouseleave
    };
  }

  var ANIMATION_TIME = 100;
  function useInputWidth(props, inputRef, innerValue) {
    var _toRefs = Vue.toRefs(props),
      autoWidth = _toRefs.autoWidth,
      placeholder = _toRefs.placeholder;
    var inputPreRef = Vue.ref(null);
    var observerTimer = Vue.ref(null);
    var updateInputWidth = function updateInputWidth() {
      if (!inputPreRef.value || !inputRef.value) return;
      inputRef.value.style.width = getComputedStyle(inputPreRef.value).width;
    };
    useResizeObserver(inputPreRef, function () {
      if (autoWidth.value) {
        observerTimer.value = setTimeout(function () {
          updateInputWidth();
          clearTimeout(observerTimer.value);
        }, ANIMATION_TIME);
      }
    });
    Vue.onBeforeUnmount(function () {
      clearTimeout(observerTimer.value);
    });
    var addListeners = function addListeners() {
      Vue.watch([innerValue, placeholder], function () {
        if (!autoWidth.value) return;
        Vue.nextTick(function () {
          updateInputWidth();
        });
      }, {
        immediate: true
      });
    };
    Vue.onMounted(function () {
      if (autoWidth.value) {
        addListeners();
      }
    });
    return {
      inputPreRef: inputPreRef
    };
  }

  var _excluded$8 = ["isHover", "tStatus", "inputRef", "renderType", "showClear", "focused", "inputValue", "isComposition", "compositionValue", "innerValue", "limitNumber"];
  function ownKeys$1V(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1U(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1V(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1V(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Input = Vue.defineComponent({
    name: "TInput",
    props: _objectSpread$1U(_objectSpread$1U({}, props$16), {}, {
      showInput: {
        type: Boolean,
        "default": true
      },
      keepWrapperWidth: {
        type: Boolean,
        "default": false
      }
    }),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var _useConfig = useConfig("input"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          BrowseIcon: TdBrowseIcon,
          BrowseOffIcon: TdBrowseOffIcon,
          CloseCircleFilledIcon: TdCloseCircleFilledIcon
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        BrowseOffIcon = _useGlobalIcon.BrowseOffIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var readonly = useReadonly();
      var disabled = useDisabled();
      var COMPONENT_NAME = usePrefixClass("input");
      var INPUT_WRAP_CLASS = usePrefixClass("input__wrap");
      var INPUT_TIPS_CLASS = usePrefixClass("input__tips");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _useInput = useInput(props2, expose),
        isHover = _useInput.isHover,
        tStatus = _useInput.tStatus,
        inputRef = _useInput.inputRef,
        renderType = _useInput.renderType,
        showClear = _useInput.showClear,
        focused = _useInput.focused,
        inputValue = _useInput.inputValue,
        isComposition = _useInput.isComposition,
        compositionValue = _useInput.compositionValue,
        innerValue = _useInput.innerValue,
        limitNumber = _useInput.limitNumber,
        inputHandle = _objectWithoutProperties$1(_useInput, _excluded$8);
      var _useInputWidth = useInputWidth(props2, inputRef, innerValue),
        inputPreRef = _useInputWidth.inputPreRef;
      var inputEventHandler = useInputEventHandler(props2, isHover);
      var tPlaceholder = Vue.computed(function () {
        var _props2$placeholder;
        return (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : globalConfig.value.placeholder;
      });
      var inputAttrs = Vue.computed(function () {
        var _props2$autocomplete;
        var value = {
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: readonly.value,
          placeholder: tPlaceholder.value,
          name: props2.name || void 0,
          type: renderType.value,
          autocomplete: (_props2$autocomplete = props2.autocomplete) !== null && _props2$autocomplete !== void 0 ? _props2$autocomplete : globalConfig.value.autocomplete || void 0,
          unselectable: readonly.value ? "on" : "off",
          spellcheck: props2.spellCheck
        };
        return getValidAttrs(value);
      });
      var wrapClasses = Vue.computed(function () {
        return [INPUT_WRAP_CLASS.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--auto-width"), props2.autoWidth && !props2.keepWrapperWidth)];
      });
      var inputEvents = getValidAttrs({
        onFocus: inputHandle.emitFocus,
        onBlur: inputHandle.formatAndEmitBlur,
        onKeydown: inputEventHandler.handleKeydown,
        onKeyup: inputEventHandler.handleKeyUp,
        onKeypress: inputEventHandler.handleKeypress,
        onPaste: inputEventHandler.onHandlePaste,
        onCompositionend: inputHandle.onHandleCompositionend,
        onCompositionstart: inputHandle.onHandleCompositionstart
      });
      return function () {
        var _compositionValue$val, _inputValue$value, _compositionValue$val2;
        var prefixIcon = renderTNodeJSX("prefixIcon");
        var suffixIcon = renderTNodeJSX("suffixIcon");
        var passwordIcon = renderTNodeJSX("passwordIcon");
        var label = renderTNodeJSX("label", {
          silent: true
        });
        var suffix = renderTNodeJSX("suffix");
        var limitNode = limitNumber.value && props2.showLimitNumber ? Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-input__limit-number"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-disabled"), disabled.value)]
        }, [limitNumber.value]) : null;
        var labelContent = label ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix")
        }, [label]) : null;
        var suffixContent = suffix || limitNode ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [suffix, limitNode]) : null;
        if (props2.type === "password") {
          var passwordClass = [_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__suffix-clear"), !disabled.value)];
          if (renderType.value === "password") {
            suffixIcon = Vue.createVNode(BrowseOffIcon, {
              "class": passwordClass,
              "onClick": inputHandle.emitPassword
            }, null);
          } else if (renderType.value === "text") {
            suffixIcon = Vue.createVNode(BrowseIcon, {
              "class": passwordClass,
              "onClick": inputHandle.emitPassword
            }, null);
          }
        }
        if (showClear.value) {
          if (props2.type === "password") {
            passwordIcon = Vue.createVNode(CloseCircleFilledIcon, {
              "ref": inputHandle.clearIconRef,
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitClear,
              "onMousedown": inputHandle.onClearIconMousedown
            }, null);
          } else {
            suffixIcon = Vue.createVNode(CloseCircleFilledIcon, {
              "ref": inputHandle.clearIconRef,
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitClear,
              "onMousedown": inputHandle.onClearIconMousedown
            }, null);
          }
        }
        var classes = [COMPONENT_NAME.value, props2.inputClass, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE.value[props2.size], props2.size !== "medium"), STATUS.value.disabled, disabled.value), STATUS.value.focused, disabled.value ? false : focused.value), "".concat(classPrefix.value, "-is-").concat(tStatus.value), tStatus.value && tStatus.value !== "default"), "".concat(classPrefix.value, "-align-").concat(props2.align), props2.align !== "left"), "".concat(classPrefix.value, "-is-readonly"), readonly.value), "".concat(COMPONENT_NAME.value, "--prefix"), prefixIcon || labelContent), "".concat(COMPONENT_NAME.value, "--suffix"), suffixIcon || suffixContent), "".concat(COMPONENT_NAME.value, "--borderless"), props2.borderless), "".concat(COMPONENT_NAME.value, "--focused"), focused.value)];
        var tips = renderTNodeJSX("tips");
        var tipsClasses = [INPUT_TIPS_CLASS.value, "".concat(classPrefix.value, "-tips"), "".concat(classPrefix.value, "-is-").concat(tStatus.value || "default")];
        return Vue.withDirectives(Vue.createVNode("div", {
          "class": wrapClasses.value
        }, [Vue.createVNode("div", {
          "class": classes,
          "onClick": inputHandle.onRootClick,
          "onMouseenter": inputEventHandler.onInputMouseenter,
          "onMouseleave": inputEventHandler.onInputMouseleave,
          "onWheel": inputEventHandler.onHandleMousewheel
        }, [prefixIcon ? Vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__prefix"), "".concat(COMPONENT_NAME.value, "__prefix-icon")]
        }, [prefixIcon]) : null, labelContent, Vue.createVNode("input", Vue.mergeProps({
          "class": ["".concat(COMPONENT_NAME.value, "__inner"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--soft-hidden"), !props2.showInput)]
        }, inputAttrs.value, inputEvents, {
          "ref": inputRef,
          "value": isComposition.value ? (_compositionValue$val = compositionValue.value) !== null && _compositionValue$val !== void 0 ? _compositionValue$val : "" : (_inputValue$value = inputValue.value) !== null && _inputValue$value !== void 0 ? _inputValue$value : "",
          "onInput": function onInput(e) {
            return inputHandle.handleInput(e);
          }
        }), null), props2.autoWidth && Vue.createVNode("span", {
          "ref": inputPreRef,
          "class": "".concat(classPrefix.value, "-input__input-pre")
        }, [isComposition.value ? (_compositionValue$val2 = compositionValue.value) !== null && _compositionValue$val2 !== void 0 ? _compositionValue$val2 : "" : innerValue.value || tPlaceholder.value]), suffixContent, passwordIcon ? Vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__suffix"), "".concat(COMPONENT_NAME.value, "__suffix-icon"), "".concat(COMPONENT_NAME.value, "__clear")]
        }, [passwordIcon]) : null, suffixIcon ? Vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__suffix"), "".concat(COMPONENT_NAME.value, "__suffix-icon"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__clear"), showClear.value)]
        }, [suffixIcon]) : null]), tips && Vue.createVNode("div", {
          "class": tipsClasses
        }, [tips])]), [[Vue.vShow, props2.type !== "hidden"]]);
      };
    }
  });

  var inputGroupProps = {
    separate: Boolean
  };

  var _InputGroup = Vue.defineComponent({
    name: "TInputGroup",
    props: inputGroupProps,
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("input-group");
      var renderTNodeJSX = useTNodeJSX();
      var CLASS = Vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--separate"), props.separate)];
      });
      return function () {
        return Vue.createVNode("div", {
          "class": CLASS.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var Input = withInstall$1(_Input);
  var InputGroup = withInstall$1(_InputGroup);

  var props$15 = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    allowInputOverLimit: {
      type: Boolean,
      "default": true
    },
    autoWidth: Boolean,
    decimalPlaces: {
      type: [Number, Object],
      "default": void 0
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    format: {
      type: Function
    },
    inputProps: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    largeNumber: Boolean,
    max: {
      type: [String, Number],
      "default": Infinity
    },
    min: {
      type: [String, Number],
      "default": -Infinity
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    step: {
      type: [String, Number],
      "default": 1
    },
    suffix: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "row",
      validator: function validator(val) {
        if (!val) return true;
        return ["column", "row", "normal"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onValidate: Function
  };

  function fillZero(length) {
    return new Array(length).fill(0).join("");
  }
  function isInputNumber(num) {
    if (!num) return true;
    if (isNumber(num)) return !Number.isNaN(num);
    var r = /^[0-9|e|E|-]+\.*[0-9|e|E|-]*$/.test(num);
    if (!r) return false;
    var eCount = 0;
    var negativeCount = 0;
    var dotCount = 0;
    for (var i = 0, len = num.length; i < len; i++) {
      if (num[i] === ".") {
        dotCount += 1;
        if (dotCount > 1) return false;
      }
      if (/(e|E)+/.test(num[i])) {
        eCount += 1;
        if (eCount > 1) return false;
      }
      if (num[i] === "-") {
        negativeCount += 1;
        if (negativeCount > 2) return false;
      }
    }
    return true;
  }
  function removeInvalidZero(num) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (num.indexOf(".") !== -1) {
      log.error("InputNumber", "num is not a integer number.");
      return num;
    }
    if (!num || num === "0" && decimal) return "";
    if (num === "0") return num;
    return (decimal ? num.replace(/0+$/, "") : num.replace(/^0+/, "")) || "0";
  }
  function largeIntNumberAdd(num1, num2) {
    var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var number1 = removeInvalidZero(num1, decimal);
    var number2 = removeInvalidZero(num2, decimal);
    var isFirstLarger = number1.length > number2.length;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);
      if (count >= 10) {
        step[i - 1] = 1;
      }
      newNumber.unshift(String(count % 10));
    }
    if (step[-1]) {
      newNumber.unshift("1");
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    return newNumber.join("");
  }
  function largePositiveNumberAdd(num1, num2) {
    var _num1$split = num1.split("."),
      _num1$split2 = _slicedToArray(_num1$split, 2),
      _num1$split2$ = _num1$split2[0],
      intNumber1 = _num1$split2$ === void 0 ? "0" : _num1$split2$,
      _num1$split2$2 = _num1$split2[1],
      decimalNumber1 = _num1$split2$2 === void 0 ? "0" : _num1$split2$2;
    var _num2$split = num2.split("."),
      _num2$split2 = _slicedToArray(_num2$split, 2),
      _num2$split2$ = _num2$split2[0],
      intNumber2 = _num2$split2$ === void 0 ? "0" : _num2$split2$,
      _num2$split2$2 = _num2$split2[1],
      decimalNumber2 = _num2$split2$2 === void 0 ? "0" : _num2$split2$2;
    var integerSum = largeIntNumberAdd(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") return integerSum;
    var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);
    var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);
    var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);
    var decimalLength = decimalNumberSum.length;
    if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {
      return [removeInvalidZero(largeIntNumberAdd(integerSum, "1")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {
        return v;
      }).join(".");
    }
    return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {
      return v;
    }).join(".");
  }
  function compareLargeIntegerNumber(num1, num2) {
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    if (number1.length === number2.length) {
      for (var i = 0, len = number1.length; i < len; i++) {
        if (number1[i] > number2[i]) return 1;
        if (number1[i] < number2[i]) return -1;
      }
      return 0;
    }
    return number1.length > number2.length ? 1 : -1;
  }
  function compareLargeDecimalNumber(num1, num2) {
    var number1 = num1 && num1 !== "0" ? num1.replace(/0+$/, "") : "0";
    var number2 = num2 && num2 !== "0" ? num2.replace(/0+$/, "") : "0";
    var maxLength = Math.max(number1.length, number2.length);
    for (var i = 0, len = maxLength; i < len; i++) {
      if ((number1[i] || 0) > (number2[i] || 0)) return 1;
      if ((number1[i] || 0) < (number2[i] || 0)) return -1;
    }
    return 0;
  }
  function formatENumber(num) {
    var _num$split = num.split("e"),
      _num$split2 = _slicedToArray(_num$split, 2),
      num1 = _num$split2[0],
      num2 = _num$split2[1];
    if (!num2) return num;
    var _num$split3 = num.split("."),
      _num$split4 = _slicedToArray(_num$split3, 2),
      integer = _num$split4[0],
      _num$split4$ = _num$split4[1],
      initDecimal = _num$split4$ === void 0 ? "" : _num$split4$;
    var zeroCount = Number(num2);
    var _initDecimal$split = initDecimal.split("e"),
      _initDecimal$split2 = _slicedToArray(_initDecimal$split, 1),
      decimal = _initDecimal$split2[0];
    if (zeroCount > decimal.length) {
      var multipleZero = fillZero(zeroCount - decimal.length);
      return num1.replace(/(^0+|\.)/g, "") + multipleZero;
    }
    var n1 = integer.replace(/^0+/, "") + decimal.slice(0, zeroCount);
    var d2 = decimal.slice(zeroCount);
    return d2 ? [n1, d2].join(".") : n1;
  }
  function compareLargeNumber(num1, num2) {
    var _formatENumber$split = formatENumber(num1).split("."),
      _formatENumber$split2 = _slicedToArray(_formatENumber$split, 2),
      integer1 = _formatENumber$split2[0],
      decimal1 = _formatENumber$split2[1];
    var _formatENumber$split3 = formatENumber(num2).split("."),
      _formatENumber$split4 = _slicedToArray(_formatENumber$split3, 2),
      integer2 = _formatENumber$split4[0],
      decimal2 = _formatENumber$split4[1];
    var result = compareLargeIntegerNumber(integer1.replace("-", ""), integer2.replace("-", ""));
    var integer1IsNegative = integer1.includes("-");
    var integer2IsNegative = integer2.includes("-");
    if (integer1IsNegative && !integer2IsNegative) return -1;
    if (!integer1IsNegative && integer2IsNegative) return 1;
    if (integer1IsNegative && integer2IsNegative) {
      if (result === 0) return 0;
      return result > 0 ? -1 : 1;
    }
    if (result === 0) {
      return compareLargeDecimalNumber(decimal1, decimal2);
    }
    return result;
  }
  function isInfinity(num) {
    return [-Infinity, Infinity].includes(Number(num));
  }
  function isSafeNumber(num) {
    return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;
  }
  function compareNumber(num1, num2, largeNumber) {
    var isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;
    var isInfinityCompare = isInfinity(num1) || isInfinity(num2);
    if (isSafeNumberCompare || isInfinityCompare) {
      if (Number(num1) === Number(num2)) return 0;
      return Number(num1) > Number(num2) ? 1 : -1;
    }
    return compareLargeNumber(String(num1), String(num2));
  }
  function largeIntegerNumberSubtract(num1, num2, p) {
    if (num1 === num2) return "0";
    var _ref = p || {},
      decimal = _ref.decimal,
      stayZero = _ref.stayZero;
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;
    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);
      if (count < 0) {
        step[i - 1] = 1;
        count += 10;
      }
      newNumber.unshift(String(count));
    }
    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }
    var finalNumber = newNumber.join("");
    if (!stayZero) {
      finalNumber = finalNumber.replace(/^0+/, "");
    }
    return removeInvalidZero(isFirstLarger ? finalNumber : "-".concat(finalNumber));
  }
  function largePositiveNumberSubtract(num1, num2) {
    if (num1 === num2) return "0";
    var isFirstLarger = compareNumber(num1, num2, true) > 0;
    var maxNumber = isFirstLarger ? num1 : num2;
    var minNumber = isFirstLarger ? num2 : num1;
    var _maxNumber$split = maxNumber.split("."),
      _maxNumber$split2 = _slicedToArray(_maxNumber$split, 2),
      intNumber1 = _maxNumber$split2[0],
      _maxNumber$split2$ = _maxNumber$split2[1],
      decimalNumber1 = _maxNumber$split2$ === void 0 ? "0" : _maxNumber$split2$;
    var _minNumber$split = minNumber.split("."),
      _minNumber$split2 = _slicedToArray(_minNumber$split, 2),
      intNumber2 = _minNumber$split2[0],
      _minNumber$split2$ = _minNumber$split2[1],
      decimalNumber2 = _minNumber$split2$ === void 0 ? "0" : _minNumber$split2$;
    var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") {
      return isFirstLarger ? integerNumber : "-".concat(integerNumber);
    }
    var decimalNumber = "";
    var addOneNumber = decimalNumber1;
    if (decimalNumber1.length < decimalNumber2.length) {
      addOneNumber = "".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));
    }
    if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {
      decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {
        decimal: true
      });
    } else {
      if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === "0") {
        decimalNumber = largeIntegerNumberSubtract("1".concat(addOneNumber), decimalNumber2, {
          stayZero: true
        });
        decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;
      } else {
        decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {
          decimal: true
        });
      }
      integerNumber = largeIntegerNumberSubtract(integerNumber, "1");
    }
    var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(".") : integerNumber;
    return isFirstLarger ? finalNumber : "-".concat(finalNumber);
  }
  function largeNumberSubtract(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      var r = largePositiveNumberAdd(num1.slice(1), num2);
      return "-".concat(r);
    }
    if (isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberAdd(num1, num2.slice(1));
    }
    return largePositiveNumberSubtract(num1, num2);
  }
  function largeNumberAdd(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";
    if (isFirstNegative && !isSecondNegative) {
      return largePositiveNumberSubtract(num2, num1.slice(1));
    }
    if (isFirstNegative && isSecondNegative) {
      var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));
      return "-".concat(r);
    }
    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num1, num2.slice(1));
    }
    return largePositiveNumberAdd(num1, num2);
  }
  function formatDecimal(num, places) {
    var enableRound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (enableRound) {
      return num.toFixed(places);
    }
    var _num$toString$split = num.toString().split("."),
      _num$toString$split2 = _slicedToArray(_num$toString$split, 2),
      integer = _num$toString$split2[0],
      decimal = _num$toString$split2[1];
    if (places === 0) {
      return integer;
    }
    if (decimal) {
      var decimalNumber = decimal.slice(0, places);
      if (decimal.length < places) {
        decimalNumber += fillZero(places - decimal.length);
      }
      return [integer, decimalNumber].join(".");
    }
    return [integer, fillZero(places)].join(".");
  }
  function decimalPlacesToFixedNum(num, decimalPlaces) {
    if (isObject(decimalPlaces)) {
      var _decimalPlaces$enable;
      return formatDecimal(num, decimalPlaces.places, (_decimalPlaces$enable = decimalPlaces.enableRound) !== null && _decimalPlaces$enable !== void 0 ? _decimalPlaces$enable : true);
    }
    return formatDecimal(num, decimalPlaces, true);
  }
  function largeNumberToFixed(number) {
    var _decimalPlaces$enable2;
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (Number.isNaN(Number(number))) return "";
    if (!largeNumber) {
      return decimalPlacesToFixedNum(Number(number), decimalPlaces);
    }
    var places = isObject(decimalPlaces) ? decimalPlaces.places : decimalPlaces;
    var enableRound = isObject(decimalPlaces) ? (_decimalPlaces$enable2 = decimalPlaces.enableRound) !== null && _decimalPlaces$enable2 !== void 0 ? _decimalPlaces$enable2 : true : true;
    if (!isString(number)) return String(number);
    var _number$split = number.split("."),
      _number$split2 = _slicedToArray(_number$split, 2),
      num1 = _number$split2[0],
      num2 = _number$split2[1];
    if (!num2) {
      return places > 0 && enableRound ? [number, fillZero(places)].join(".") : number;
    }
    if (places === 0) {
      return enableRound && Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, "1") : num1;
    }
    var decimalNumber = num2.slice(0, places);
    if (num2.length < places) {
      decimalNumber += fillZero(places - num2.length);
    } else if (enableRound) {
      var _decimalNumber$match;
      var leadZeroNum = (_decimalNumber$match = decimalNumber.match(/^0+/)) === null || _decimalNumber$match === void 0 ? void 0 : _decimalNumber$match[0].length;
      var leadNineNum = decimalNumber.match(/^9+/);
      var needAdded = Number(num2[places]) >= 5;
      decimalNumber = needAdded ? largePositiveNumberAdd(decimalNumber, "1") : decimalNumber;
      if (leadZeroNum && needAdded && leadZeroNum + decimalNumber.length >= places) {
        decimalNumber = "".concat(fillZero(places - decimalNumber.length)).concat(decimalNumber);
      }
      if (leadNineNum && decimalNumber.length > places) {
        num1 = (Number(num1) + 1).toString();
        decimalNumber = fillZero(places);
      }
    }
    return [num1, decimalNumber].join(".");
  }

  function canAddNumber(num, max) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString(num)) {
      return compareNumber(num, max, largeNumber) < 0;
    }
    return num < max;
  }
  function canReduceNumber(num, min) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num && num !== 0) return true;
    if (largeNumber && isString(num)) {
      return compareNumber(num, min, largeNumber) > 0;
    }
    return num > min;
  }
  function putInRangeNumber(val, params) {
    if (val === "") return void 0;
    var max = params.max,
      min = params.min,
      lastValue = params.lastValue,
      largeNumber = params.largeNumber;
    if (!isInputNumber(val)) return lastValue;
    if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {
      if (compareNumber(max, val, largeNumber) < 0) return max;
      if (compareNumber(min, val, largeNumber) > 0) return min;
      return val;
    }
    return Math.max(Number(min), Math.min(Number(max), Number(val)));
  }
  function positiveAdd(num1, num2) {
    var _num1$toString$split$, _num2$toString$split$;
    if (!num1 || !num2) return (num1 || 0) + (num2 || 0);
    var r1 = ((_num1$toString$split$ = num1.toString().split(".")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;
    var r2 = ((_num2$toString$split$ = num2.toString().split(".")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;
    if (!r1 && !r2) return num1 + num2;
    var newNumber1 = num1;
    var newNumber2 = num2;
    var diff = Math.abs(r1 - r2);
    var digit = Math.pow(10, Math.max(r1, r2));
    if (diff > 0) {
      var cm = Math.pow(10, diff);
      if (r1 > r2) {
        newNumber1 = Number(num1.toString().replace(".", ""));
        newNumber2 = Number(num2.toString().replace(".", "")) * cm;
      } else {
        newNumber1 = Number(num1.toString().replace(".", "")) * cm;
        newNumber2 = Number(num2.toString().replace(".", ""));
      }
    } else {
      newNumber1 = Number(num1.toString().replace(".", ""));
      newNumber2 = Number(num2.toString().replace(".", ""));
    }
    return (newNumber1 + newNumber2) / digit;
  }
  function positiveSubtract(num1, num2) {
    var _num1$toString$split$2, _num2$toString$split$2;
    if (!num1 || !num2) return (num1 || 0) - (num2 || 0);
    var r1 = ((_num1$toString$split$2 = num1.toString().split(".")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;
    var r2 = ((_num2$toString$split$2 = num2.toString().split(".")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;
    var digit = Math.pow(10, Math.max(r1, r2));
    var n = r1 >= r2 ? r1 : r2;
    return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));
  }
  function add(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));
    if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;
    if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));
    return positiveAdd(num1, num2);
  }
  function subtract(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;
    if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));
    if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));
    return positiveSubtract(num1, num2);
  }
  function getStepValue(p) {
    var op = p.op,
      step = p.step,
      lastValue = p.lastValue,
      max = p.max,
      min = p.min,
      largeNumber = p.largeNumber;
    if (Number(step) <= 0) {
      log.error("InputNumber", "step must be larger than 0.");
      return lastValue;
    }
    var tStep = isNumber(step) ? String(step) : step;
    var newVal;
    if (op === "add") {
      if (largeNumber && isString(lastValue)) {
        newVal = largeNumberAdd(String(lastValue), String(tStep));
      } else {
        newVal = add(Number(lastValue || 0), Number(step));
      }
    } else if (op === "reduce") {
      if (largeNumber && isString(lastValue)) {
        newVal = largeNumberSubtract(String(lastValue), String(tStep));
      } else {
        newVal = subtract(Number(lastValue || 0), Number(step));
      }
    }
    if (isUndefined(lastValue)) {
      newVal = putInRangeNumber(newVal, {
        max: max,
        min: min,
        lastValue: lastValue,
        largeNumber: largeNumber
      });
    }
    return largeNumber ? newVal : Number(newVal);
  }
  function getMaxOrMinValidateResult(p) {
    var largeNumber = p.largeNumber,
      value = p.value,
      max = p.max,
      min = p.min;
    if (isUndefined(value) || isUndefined(largeNumber)) return void 0;
    if (largeNumber && isNumber(value)) {
      log.warn("InputNumber", "largeNumber value must be a string.");
    }
    var error;
    if (compareNumber(value, max, largeNumber) > 0) {
      error = "exceed-maximum";
    } else if (compareNumber(value, min, largeNumber) < 0) {
      error = "below-minimum";
    } else {
      error = void 0;
    }
    return error;
  }
  var specialCode = ["-", ".", "e", "E", "+"];
  function canInputNumber(number, largeNumber) {
    var _number$match, _number$match2;
    if (["", null, void 0].includes(number)) return true;
    if (number.slice(0, 2) === "00") return false;
    if (number.match(/\s/g)) return false;
    if (((_number$match = number.match(/\./g)) === null || _number$match === void 0 ? void 0 : _number$match.length) > 1) return false;
    if (((_number$match2 = number.match(/e/g)) === null || _number$match2 === void 0 ? void 0 : _number$match2.length) > 1) return false;
    var tmpNumber = number.slice(1);
    var tmpMatched = tmpNumber.match(/(\+|-)/g);
    if (tmpMatched && (!/e(\+|-)/i.test(tmpNumber) || tmpMatched.length > 1)) return false;
    var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));
    if (!isNumber2 && !specialCode.includes(number.slice(-1))) return false;
    if (/e/i.test(number) && (!/\de/i.test(number) || /e\./.test(number))) return false;
    return true;
  }
  function canSetValue(number, lastNumber) {
    return parseFloat(number) !== lastNumber && !Number.isNaN(Number(number));
  }
  function formatUnCompleteNumber(number) {
    var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (["", null, void 0].includes(number) || !/\d+/.test(number)) return void 0;
    var decimalPlaces = extra.decimalPlaces,
      largeNumber = extra.largeNumber,
      isToFixed = extra.isToFixed;
    var newNumber = number.replace(/[.|+|\-|e]$/, "");
    if (largeNumber) {
      newNumber = formatENumber(newNumber);
    }
    if (decimalPlaces !== void 0) {
      newNumber = largeNumberToFixed(newNumber, decimalPlaces, largeNumber);
    }
    if (largeNumber) return newNumber;
    return isToFixed ? newNumber : parseFloat(newNumber);
  }
  function formatThousandths(number) {
    var thousandthsRegExp = /^[-+]?\d{1,3}(,\d{3})*(\.(\d*))?$/;
    if (thousandthsRegExp.test(number)) return number.replace(/,/g, "");
    return number;
  }

  function useInputNumber(props) {
    var _useCommonClassName = useCommonClassName$1(),
      classPrefix = _useCommonClassName.classPrefix,
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;
    var _toRefs = Vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      max = _toRefs.max,
      min = _toRefs.min;
    var _useVModel = useVModel$1(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      tValue = _useVModel2[0],
      setTValue = _useVModel2[1];
    var inputRef = Vue.ref();
    var userInput = Vue.ref("");
    var tDisabled = useDisabled();
    var isReadonly = useReadonly();
    var isError = Vue.ref();
    var disabledReduce = Vue.computed(function () {
      return tDisabled.value || !canReduceNumber(tValue.value, props.min, props.largeNumber);
    });
    var disabledAdd = Vue.computed(function () {
      return tDisabled.value || !canAddNumber(tValue.value, props.max, props.largeNumber);
    });
    var wrapClasses = Vue.computed(function () {
      return ["".concat(classPrefix.value, "-input-number"), SIZE.value[props.size], _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, tDisabled.value), "".concat(classPrefix.value, "-is-controls-right"), props.theme === "column"), "".concat(classPrefix.value, "-input-number--").concat(props.theme), props.theme), "".concat(classPrefix.value, "-input-number--auto-width"), props.autoWidth)];
    });
    var reduceClasses = Vue.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__decrease"), _defineProperty$2({}, STATUS.value.disabled, disabledReduce.value)];
    });
    var addClasses = Vue.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__increase"), _defineProperty$2({}, STATUS.value.disabled, disabledAdd.value)];
    });
    var getUserInput = function getUserInput(value2) {
      var _inputRef$value;
      if (!value2 && value2 !== 0) return "";
      var inputStr = value2 || value2 === 0 ? String(value2) : "";
      if (!((_inputRef$value = inputRef.value) !== null && _inputRef$value !== void 0 && (_inputRef$value = _inputRef$value.inputRef) !== null && _inputRef$value !== void 0 && _inputRef$value.contains(document.activeElement))) {
        var num = formatUnCompleteNumber(inputStr, {
          decimalPlaces: props.decimalPlaces,
          largeNumber: props.largeNumber,
          isToFixed: true
        });
        inputStr = num || num === 0 ? String(num) : "";
        if (props.format) {
          inputStr = String(props.format(value2, {
            fixedNumber: inputStr
          }));
        }
      }
      return inputStr;
    };
    Vue.watch(tValue, function (val) {
      var largeNumber = props.largeNumber,
        decimalPlaces = props.decimalPlaces;
      var inputValue = [void 0, null].includes(val) ? "" : String(val);
      if (!largeNumber && !Number.isNaN(userInput.value)) {
        if (parseFloat(userInput.value) !== val) {
          userInput.value = getUserInput(inputValue);
        }
        var fixedNumber = Number(largeNumberToFixed(inputValue, decimalPlaces, largeNumber));
        if (decimalPlaces !== void 0 && ![void 0, null].includes(val) && Number(fixedNumber) !== Number(tValue.value)) {
          setTValue(fixedNumber, {
            type: "props",
            e: void 0
          });
        }
      }
      if (largeNumber) {
        userInput.value = getUserInput(inputValue);
        if (decimalPlaces !== void 0 && largeNumberToFixed(inputValue, decimalPlaces, largeNumber) !== val) {
          var _inputRef$value2;
          var completeValue = inputValue;
          if (!((_inputRef$value2 = inputRef.value) !== null && _inputRef$value2 !== void 0 && (_inputRef$value2 = _inputRef$value2.inputRef) !== null && _inputRef$value2 !== void 0 && _inputRef$value2.contains(document.activeElement))) {
            completeValue = formatUnCompleteNumber(completeValue, {
              decimalPlaces: props.decimalPlaces,
              largeNumber: props.largeNumber,
              isToFixed: true
            });
          }
          setTValue(completeValue, {
            type: "props",
            e: void 0
          });
        }
      }
    }, {
      immediate: true
    });
    Vue.watch([tValue, max, min], function () {
      var _props$onValidate;
      if ([void 0, "", null].includes(tValue.value)) return;
      var max2 = props.max,
        min2 = props.min,
        largeNumber = props.largeNumber;
      var error = getMaxOrMinValidateResult({
        value: tValue.value,
        largeNumber: largeNumber,
        max: max2,
        min: min2
      });
      isError.value = error;
      (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
        error: error
      });
    }, {
      immediate: true
    });
    var handleStepValue = function handleStepValue(op) {
      var newValue = getStepValue({
        op: op,
        step: props.step,
        max: props.max,
        min: props.min,
        lastValue: tValue.value,
        largeNumber: props.largeNumber
      });
      var largeNumber = props.largeNumber,
        max2 = props.max,
        min2 = props.min;
      var overLimit = getMaxOrMinValidateResult({
        value: newValue,
        largeNumber: largeNumber,
        max: max2,
        min: min2
      });
      return {
        overLimit: overLimit,
        newValue: newValue
      };
    };
    var handleReduce = function handleReduce(e) {
      if (disabledReduce.value || isReadonly.value) return;
      var r = handleStepValue("reduce");
      if (r.overLimit && !props.allowInputOverLimit) return;
      setTValue(r.newValue, {
        type: "reduce",
        e: e
      });
    };
    var handleAdd = function handleAdd(e) {
      if (disabledAdd.value || isReadonly.value) return;
      var r = handleStepValue("add");
      if (r.overLimit && !props.allowInputOverLimit) return;
      setTValue(r.newValue, {
        type: "add",
        e: e
      });
    };
    var onInnerInputChange = function onInnerInputChange(inputValue, _ref4) {
      var e = _ref4.e;
      var val = formatThousandths(inputValue);
      if (!canInputNumber(val, props.largeNumber)) return;
      var processedVal = val;
      if (props.decimalPlaces !== void 0 && val !== "" && val.includes(".")) {
        var parts = val.split(".");
        var decimalLimit = typeof props.decimalPlaces === "number" ? props.decimalPlaces : props.decimalPlaces.places;
        if (parts[1] && parts[1].length > decimalLimit) {
          processedVal = "".concat(parts[0], ".").concat(parts[1].substring(0, decimalLimit));
        }
      }
      userInput.value = processedVal;
      if (props.largeNumber) {
        setTValue(processedVal, {
          type: "input",
          e: e
        });
        return;
      }
      var newNumber = processedVal === "" ? void 0 : Number(processedVal);
      if (canSetValue(processedVal, Number(tValue.value))) {
        setTValue(newNumber, {
          type: "input",
          e: e
        });
      }
    };
    var handleBlur = function handleBlur(value2, ctx) {
      var _props$onBlur3;
      var largeNumber = props.largeNumber,
        max2 = props.max,
        min2 = props.min,
        decimalPlaces = props.decimalPlaces;
      if (!props.allowInputOverLimit && tValue.value !== void 0) {
        var r = getMaxOrMinValidateResult({
          value: tValue.value,
          largeNumber: largeNumber,
          max: max2,
          min: min2
        });
        if (r === "below-minimum") {
          var _props$onBlur;
          setTValue(min2, {
            type: "blur",
            e: ctx.e
          });
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, min2, ctx);
          return;
        }
        if (r === "exceed-maximum") {
          var _props$onBlur2;
          setTValue(max2, {
            type: "blur",
            e: ctx.e
          });
          (_props$onBlur2 = props.onBlur) === null || _props$onBlur2 === void 0 || _props$onBlur2.call(props, max2, ctx);
          return;
        }
      }
      var newValue = formatUnCompleteNumber(value2, {
        decimalPlaces: decimalPlaces,
        largeNumber: largeNumber
      });
      userInput.value = getUserInput(newValue);
      if (newValue !== tValue.value) {
        setTValue(newValue, {
          type: "blur",
          e: ctx.e
        });
      }
      (_props$onBlur3 = props.onBlur) === null || _props$onBlur3 === void 0 || _props$onBlur3.call(props, newValue, ctx);
    };
    var handleFocus = function handleFocus(value2, ctx) {
      var _props$onFocus;
      userInput.value = tValue.value || tValue.value === 0 ? String(tValue.value) : "";
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value2, ctx);
    };
    var handleKeydown = function handleKeydown(value2, ctx) {
      var _props$onKeydown;
      if (tDisabled.value) return;
      var e = ctx.e;
      var keyEvent = {
        ArrowUp: handleAdd,
        ArrowDown: handleReduce
      };
      var code = e.code || e.key;
      if (keyEvent[code] !== void 0) {
        keyEvent[code](e);
      }
      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 || _props$onKeydown.call(props, value2, ctx);
    };
    var handleKeyup = function handleKeyup(value2, ctx) {
      var _props$onKeyup;
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 || _props$onKeyup.call(props, value2, ctx);
    };
    var handleKeypress = function handleKeypress(value2, ctx) {
      var _props$onKeypress;
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 || _props$onKeypress.call(props, value2, ctx);
    };
    var handleEnter = function handleEnter(value2, ctx) {
      var _props$onEnter;
      userInput.value = getUserInput(value2);
      var newValue = formatUnCompleteNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });
      if (newValue !== value2 && String(newValue) !== value2) {
        setTValue(newValue, {
          type: "enter",
          e: ctx.e
        });
      }
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, ctx);
    };
    var focus = function focus() {
      if (tDisabled.value || isReadonly.value) return;
      inputRef.value.focus();
    };
    var blur = function blur() {
      inputRef.value.blur();
    };
    var listeners = {
      onBlur: handleBlur,
      onFocus: handleFocus,
      onKeydown: handleKeydown,
      onKeyup: handleKeyup,
      onKeypress: handleKeypress,
      onEnter: handleEnter,
      onClick: focus
    };
    return {
      classPrefix: classPrefix,
      wrapClasses: wrapClasses,
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      tDisabled: tDisabled,
      isError: isError,
      listeners: listeners,
      userInput: userInput,
      tValue: tValue,
      inputRef: inputRef,
      focus: focus,
      blur: blur,
      handleReduce: handleReduce,
      handleAdd: handleAdd,
      onInnerInputChange: onInnerInputChange,
      isReadonly: isReadonly
    };
  }

  function ownKeys$1U(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1T(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1U(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1U(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _InputNumber = Vue.defineComponent({
    name: "TInputNumber",
    props: props$15,
    setup: function setup(props2, context) {
      var _useGlobalIcon = useGlobalIcon({
          AddIcon: TdAddIcon,
          RemoveIcon: TdRemoveIcon,
          ChevronDownIcon: TdChevronDownIcon,
          ChevronUpIcon: TdChevronUpIcon
        }),
        AddIcon = _useGlobalIcon.AddIcon,
        RemoveIcon = _useGlobalIcon.RemoveIcon,
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon,
        ChevronUpIcon = _useGlobalIcon.ChevronUpIcon;
      var p = useInputNumber(props2);
      var inputRef = p.inputRef;
      context.expose(_objectSpread$1T({}, p));
      return function () {
        var reduceIcon = props2.theme === "column" ? Vue.createVNode(ChevronDownIcon, {
          "size": props2.size
        }, null) : Vue.createVNode(RemoveIcon, {
          "size": props2.size
        }, null);
        var addIcon = props2.theme === "column" ? Vue.createVNode(ChevronUpIcon, {
          "size": props2.size
        }, null) : Vue.createVNode(AddIcon, {
          "size": props2.size
        }, null);
        var status = p.isError.value ? "error" : props2.status;
        return Vue.createVNode("div", {
          "class": p.wrapClasses.value
        }, [props2.theme !== "normal" && Vue.createVNode(Button, {
          "class": p.reduceClasses.value,
          "disabled": p.tDisabled.value,
          "onClick": p.handleReduce,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return reduceIcon;
          }
        }, null), Vue.createVNode(Input, Vue.mergeProps({
          "ref": inputRef,
          "disabled": p.tDisabled.value,
          "readonly": p.isReadonly.value,
          "autocomplete": "off",
          "placeholder": props2.placeholder,
          "unselectable": p.isReadonly.value ? "on" : "off",
          "autoWidth": props2.autoWidth,
          "align": props2.align || (props2.theme === "row" ? "center" : void 0),
          "status": status,
          "label": props2.label,
          "suffix": props2.suffix,
          "tips": props2.tips
        }, p.listeners, props2.inputProps, {
          "value": p.userInput.value,
          "onChange": p.onInnerInputChange
        }), context.slots), props2.theme !== "normal" && Vue.createVNode(Button, {
          "class": p.addClasses.value,
          "disabled": p.tDisabled.value,
          "onClick": p.handleAdd,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return addIcon;
          }
        }, null)]);
      };
    }
  });

  var InputNumber = withInstall$1(_InputNumber);

  var props$14 = {
    allowInput: Boolean,
    autoWidth: Boolean,
    autofocus: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panel: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultPopupVisible: Boolean,
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    reserveKeyword: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array, Date],
      "default": void 0
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onClear: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onPopupVisibleChange: Function,
    onTagChange: Function
  };

  var props$13 = {
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    dragSort: Boolean,
    excessTagsDisplayType: {
      type: String,
      "default": "break-line",
      validator: function validator(val) {
        if (!val) return true;
        return ["scroll", "break-line"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number],
      "default": ""
    },
    label: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClick: Function,
    onDragSort: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onRemove: Function
  };

  function useDragSorter(props) {
    var sortOnDraggable = props.sortOnDraggable,
      onDragSort = props.onDragSort,
      onDragOverCheck = props.onDragOverCheck;
    var draggingIndex = Vue.ref(-1);
    var dragStartData = Vue.ref(null);
    var isDropped = Vue.ref(null);
    var startInfo = Vue.reactive({
      nodeX: 0,
      nodeWidth: 0,
      mouseX: 0
    });
    var onDragOver = function onDragOver(e, index, record) {
      e.preventDefault();
      if (draggingIndex.value === index || draggingIndex.value === -1) return;
      var target = e.target;
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp && !(onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp.test(target.className))) {
        return;
      }
      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.x && target) {
        if (!startInfo.nodeWidth) return;
        var _target$getBoundingCl = target.getBoundingClientRect(),
          x = _target$getBoundingCl.x,
          width = _target$getBoundingCl.width;
        var targetNodeMiddleX = x + width / 2;
        var draggingNodeLeft = e.clientX - (startInfo.mouseX - startInfo.nodeX);
        var draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;
        var overlap = false;
        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {
          overlap = draggingNodeLeft < targetNodeMiddleX;
        } else {
          overlap = draggingNodeRight > targetNodeMiddleX;
        }
        if (!overlap) return;
      }
      onDragSort === null || onDragSort === void 0 || onDragSort({
        currentIndex: draggingIndex.value,
        current: dragStartData,
        target: record,
        targetIndex: index
      });
      draggingIndex.value = index;
    };
    if (!sortOnDraggable) {
      return {};
    }
    function onDragStart(e, index, record) {
      draggingIndex.value = index;
      dragStartData.value = record;
      var target = e.target;
      if (onDragOverCheck && target) {
        var _target$getBoundingCl2 = target.getBoundingClientRect(),
          x = _target$getBoundingCl2.x,
          width = _target$getBoundingCl2.width;
        startInfo.nodeX = x;
        startInfo.nodeWidth = width;
        startInfo.mouseX = e.clientX;
      }
    }
    function _onDrop() {
      isDropped.value = true;
    }
    function onDragEnd() {
      if (!isDropped.value) ;
      isDropped.value = false;
      draggingIndex.value = -1;
      dragStartData.value = null;
    }
    function getDragProps(index, record) {
      if (sortOnDraggable) {
        return {
          draggable: true,
          onDragstart: function onDragstart(e) {
            onDragStart(e, index, record);
          },
          onDragover: function onDragover(e) {
            onDragOver(e, index, record);
          },
          onDrop: function onDrop() {
            _onDrop();
          },
          onDragend: function onDragend() {
            onDragEnd();
          }
        };
      }
      return {};
    }
    return {
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: _onDrop,
      onDragEnd: onDragEnd,
      getDragProps: getDragProps,
      dragging: draggingIndex.value !== -1
    };
  }

  function useHover(props) {
    var disabled = props.disabled,
      readonly = props.readonly,
      onMouseenter = props.onMouseenter,
      onMouseleave = props.onMouseleave;
    var isHover = Vue.ref(false);
    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      isHover.value = true;
      onMouseenter === null || onMouseenter === void 0 || onMouseenter(context);
    };
    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      isHover.value = false;
      onMouseleave === null || onMouseleave === void 0 || onMouseleave(context);
    };
    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  function useTagScroll(props) {
    var tagInputRef = Vue.ref();
    var _toRefs = Vue.toRefs(props),
      excessTagsDisplayType = _toRefs.excessTagsDisplayType,
      readonly = _toRefs.readonly,
      disabled = _toRefs.disabled;
    var scrollDistance = Vue.ref(0);
    var scrollElement = Vue.ref();
    var mouseEnterTimer = Vue.ref();
    var isScrollable = Vue.ref(false);
    var updateScrollElement = function updateScrollElement(element) {
      var inputElement = element.children[0];
      scrollElement.value = inputElement;
    };
    var updateScrollDistance = function updateScrollDistance() {
      scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
    };
    var scrollTo = function scrollTo(distance) {
      var _scrollElement$value;
      if (!isFunction((_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll)) return;
      scrollElement.value.scroll({
        left: distance,
        behavior: "smooth"
      });
    };
    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance.value);
      setTimeout(function () {
        isScrollable.value = true;
      }, 200);
    };
    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };
    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly.value || disabled.value) return;
      if (!scrollElement.value) return;
      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);
        scrollTo(_distance);
      }
    };
    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType.value !== "scroll") return;
      mouseEnterTimer.value = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer.value);
      }, 100);
    };
    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType.value !== "scroll") return;
      isScrollable.value = false;
      scrollTo(0);
      clearTimeout(mouseEnterTimer.value);
    };
    var init = function init() {
      var _tagInputRef$value;
      var element = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
      if (!element) return;
      updateScrollElement(element);
    };
    var clear = function clear() {
      clearTimeout(mouseEnterTimer.value);
    };
    Vue.onMounted(init);
    Vue.onUnmounted(clear);
    return {
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave,
      isScrollable: isScrollable
    };
  }

  // This file is autogenerated. It's used to publish ESM to npm.
  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
      return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360),
        s = Math.round(hsv.s * 100),
        v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360),
        s = Math.round(hsl.s * 100),
        l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function (color, opts) {
    if (_typeof$1(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof$1(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a
    };
  }

  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      l = (max + min) / 2;
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
      f = h - i,
      p = v * (1 - s),
      q = v * (1 - f * s),
      t = v * (1 - (1 - f) * s),
      mod = i % 6,
      r = [v, q, p, p, t, v][mod],
      g = [t, v, v, q, p, p][mod],
      b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
      s = hsv.s,
      v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level: level,
      size: size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };

  // Big List of Colors
  // ------------------
  // <https://www.w3.org/TR/css-color-4/#named-colors>
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level: level,
      size: size
    };
  }

  var props$12 = {
    closable: Boolean,
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function,
      "default": void 0
    },
    maxWidth: {
      type: [String, Number]
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        if (!val) return true;
        return ["square", "round", "mark"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "warning", "danger", "success"].includes(val);
      }
    },
    title: {
      type: String,
      "default": ""
    },
    variant: {
      type: String,
      "default": "dark",
      validator: function validator(val) {
        if (!val) return true;
        return ["dark", "light", "outline", "light-outline"].includes(val);
      }
    },
    onClick: Function,
    onClose: Function
  };

  var _Tag = Vue.defineComponent({
    name: "TTag",
    props: props$12,
    setup: function setup(props2) {
      var _useConfig = useConfig("tag"),
        tagGlobalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("tag");
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: TdCloseIcon
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var _getCurrentInstance = Vue.getCurrentInstance(),
        vnode = _getCurrentInstance.vnode;
      var tagClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME.value, "--").concat(props2.variant), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--ellipsis"), props2.maxWidth), "".concat(COMPONENT_NAME.value, "--close"), props2.closable), "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), SIZE.value[props2.size], props2.size !== "medium"), props2.shape !== "square" && "".concat(COMPONENT_NAME.value, "--").concat(props2.shape)];
      });
      var tagStyle = Vue.computed(function () {
        return getTagColorStyle();
      });
      var textStyle = Vue.computed(function () {
        if (!props2.maxWidth) return {};
        return {
          maxWidth: isNaN(Number(props2.maxWidth)) ? String(props2.maxWidth) : "".concat(props2.maxWidth, "px")
        };
      });
      var getTagColorStyle = function getTagColorStyle() {
        var color = props2.color,
          variant = props2.variant;
        if (!color) return {};
        var luminance = tinycolor(color).getLuminance();
        var style = {
          color: luminance > 0.5 ? "black" : "white"
        };
        if (variant === "outline" || variant === "light-outline") {
          style.borderColor = color;
        }
        if (variant !== "outline") {
          var getLightestShade = function getLightestShade() {
            var _tinycolor$toRgb = tinycolor(color).toRgb(),
              r = _tinycolor$toRgb.r,
              g = _tinycolor$toRgb.g,
              b = _tinycolor$toRgb.b;
            return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", 0.1)");
          };
          style.backgroundColor = variant === "dark" ? color : getLightestShade();
        }
        if (variant !== "dark") {
          style.color = color;
        }
        return style;
      };
      var handleClick = function handleClick(e) {
        var _props2$onClick;
        if (props2.disabled) return;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
          e: e
        });
      };
      var getCloseIcon = function getCloseIcon() {
        if (!props2.closable) return null;
        var iconClassName = "".concat(COMPONENT_NAME.value, "__icon-close");
        if (tagGlobalConfig.value.closeIcon) {
          return Vue.h(tagGlobalConfig.value.closeIcon(Vue.h), {
            "class": iconClassName
          });
        }
        return Vue.createVNode(CloseIcon, {
          "onClick": function onClick(_ref2) {
            var _props2$onClose;
            var e = _ref2.e;
            if (e) e.stopPropagation();
            (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
              e: e
            });
          },
          "class": iconClassName
        }, null);
      };
      var renderTitle = function renderTitle(tagContent) {
        var vProps = vnode.props || {};
        if (Reflect.has(vProps, "title")) {
          return vProps.title || void 0;
        }
        if (tagContent) {
          return tagContent;
        }
        return void 0;
      };
      return function () {
        var closeIcon = getCloseIcon();
        var tagContent = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        var title = renderTitle(isString(tagContent) ? tagContent : "");
        return Vue.createVNode("div", {
          "class": tagClass.value,
          "style": tagStyle.value,
          "onClick": handleClick
        }, [icon, Vue.createVNode("span", {
          "class": props2.maxWidth ? "".concat(COMPONENT_NAME.value, "--text") : void 0,
          "style": textStyle.value,
          "title": title
        }, [tagContent]), !props2.disabled && closeIcon]);
      };
    }
  });

  var props$11 = {
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    checkedProps: {
      type: Object
    },
    content: {
      type: [String, Number, Array, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    uncheckedProps: {
      type: Object
    },
    value: {
      type: [String, Number]
    },
    onChange: Function,
    onClick: Function
  };

  function ownKeys$1T(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1S(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1T(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1T(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$y(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _CheckTag = Vue.defineComponent({
    name: "TCheckTag",
    props: props$11,
    setup: function setup(props2) {
      var componentName = usePrefixClass("tag");
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var renderContent = useContent();
      var _toRefs = Vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var tagClass = Vue.computed(function () {
        return ["".concat(componentName.value), "".concat(componentName.value, "--check"), SIZE.value[props2.size], _defineProperty$2(_defineProperty$2({}, "".concat(componentName.value, "--checked"), innerChecked.value), "".concat(componentName.value, "--disabled"), props2.disabled)];
      });
      var checkTagProps = Vue.computed(function () {
        var checkedProps = _objectSpread$1S({
          theme: "primary"
        }, props2.checkedProps);
        var uncheckedProps = _objectSpread$1S({}, props2.uncheckedProps);
        return innerChecked.value ? checkedProps : uncheckedProps;
      });
      var handleClick = function handleClick(_ref2) {
        var e = _ref2.e;
        if (!props2.disabled) {
          var _props2$onClick;
          (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
            e: e
          });
          setInnerChecked(!innerChecked.value, {
            e: e,
            value: props2.value
          });
        }
      };
      var keyboardEventListener = function keyboardEventListener(e) {
        var _e$key;
        var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
        var isCheckedCode = SPACE_REG.test(code) || ENTER_REG.test(code);
        if (isCheckedCode) {
          e.preventDefault();
          setInnerChecked(!innerChecked.value, {
            e: e,
            value: props2.value
          });
        }
      };
      var onCheckboxFocus = function onCheckboxFocus(e) {
        e.currentTarget.addEventListener("keydown", keyboardEventListener);
      };
      var onCheckboxBlur = function onCheckboxBlur(e) {
        e.currentTarget.removeEventListener("keydown", keyboardEventListener);
      };
      return function () {
        var tagContent = renderContent("default", "content");
        return Vue.createVNode(_Tag, Vue.mergeProps({
          "class": tagClass.value,
          "disabled": props2.disabled,
          "tabindex": props2.disabled ? void 0 : "0",
          "onFocus": onCheckboxFocus,
          "onBlur": onCheckboxBlur
        }, checkTagProps.value, {
          "onClick": handleClick
        }), _isSlot$y(tagContent) ? tagContent : {
          "default": function _default() {
            return [tagContent];
          }
        });
      };
    }
  });

  var props$10 = {
    checkedProps: {
      type: Object
    },
    multiple: Boolean,
    options: {
      type: Array
    },
    uncheckedProps: {
      type: Object
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  function _isSlot$x(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _CheckTagGroup = Vue.defineComponent({
    name: "TCheckTagGroup",
    props: props$10,
    setup: function setup(props2, context) {
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        options = _toRefs.options;
      var componentName = usePrefixClass("check-tag-group");
      var checkTagGroupClasses = Vue.computed(function () {
        return [componentName.value];
      });
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var onCheckTagChange = function onCheckTagChange(checked, ctx) {
        var value2 = ctx.value;
        if (checked) {
          if (props2.multiple) {
            setInnerValue(innerValue.value.concat(value2), {
              e: ctx.e,
              type: "check",
              value: value2
            });
          } else {
            setInnerValue([value2], {
              e: ctx.e,
              type: "check",
              value: value2
            });
          }
        } else {
          var newValue = [];
          if (props2.multiple) {
            newValue = innerValue.value.filter(function (t) {
              return t !== value2;
            });
          }
          setInnerValue(newValue, {
            e: ctx.e,
            type: "uncheck",
            value: value2
          });
        }
      };
      var getTagContent = function getTagContent(option) {
        if (context.slots.option) return context.slots.option(option);
        if (context.slots.label) return context.slots.label(option);
        if (option.label) {
          return isFunction(option.label) ? option.label(Vue.h) : option.label;
        }
        if (option.content && isFunction(option.content)) return option.content(Vue.h);
        if (option["default"] && isFunction(option["default"])) return option["default"](Vue.h);
        return option.value;
      };
      return function () {
        return Vue.createVNode("div", {
          "class": checkTagGroupClasses.value
        }, [(options.value || []).map(function (option) {
          var _slot;
          return Vue.createVNode(_CheckTag, {
            "key": option.value,
            "value": option.value,
            "checkedProps": props2.checkedProps,
            "uncheckedProps": props2.uncheckedProps,
            "checked": innerValue.value.includes(option.value),
            "onChange": onCheckTagChange,
            "disabled": option.disabled,
            "size": option.size,
            "data-value": option.value
          }, _isSlot$x(_slot = getTagContent(option)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        })]);
      };
    }
  });

  var Tag = withInstall$1(_Tag);
  var CheckTag = withInstall$1(_CheckTag);
  var CheckTagGroup = withInstall$1(_CheckTagGroup);

  function ownKeys$1S(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1R(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1S(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1S(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTagList(props) {
    var renderTNode = useTNodeJSX();
    var classPrefix = usePrefixClass();
    var _toRefs = Vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      onRemove = _toRefs.onRemove,
      max = _toRefs.max,
      minCollapsedNum = _toRefs.minCollapsedNum,
      size = _toRefs.size,
      tagProps = _toRefs.tagProps,
      getDragProps = _toRefs.getDragProps;
    var _useVModel = useVModel$1(value, modelValue, props.defaultValue || [], props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      _tagValue = _useVModel2[0],
      setTagValue = _useVModel2[1];
    var tagValue = Vue.computed(function () {
      return _tagValue.value || [];
    });
    var oldInputValue = Vue.ref();
    var isDisabled = useDisabled();
    var isReadonly = useReadonly();
    var _onClose = function onClose(p) {
      var _onRemove$value;
      var arr = _toConsumableArray(tagValue.value);
      var _arr$splice = arr.splice(p.index, 1),
        _arr$splice2 = _slicedToArray(_arr$splice, 1),
        item = _arr$splice2[0];
      setTagValue(arr, _objectSpread$1R(_objectSpread$1R({
        trigger: "tag-remove"
      }, p), {}, {
        item: item
      }));
      (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 || _onRemove$value.call(onRemove, _objectSpread$1R(_objectSpread$1R({}, p), {}, {
        item: item,
        trigger: "tag-remove",
        value: arr
      }));
    };
    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };
    var onInnerEnter = function onInnerEnter(value2, context) {
      var _props$onEnter;
      var valueStr = value2 ? String(value2).trim() : "";
      var isLimitExceeded = max && tagValue.value.length >= max.value;
      var newValue = tagValue.value;
      if (!isLimitExceeded && valueStr) {
        newValue = tagValue.value.concat(String(valueStr));
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }
      props === null || props === void 0 || (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, _objectSpread$1R(_objectSpread$1R({}, context), {}, {
        inputValue: value2
      }));
    };
    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2) {
      if (!tagValue.value.length) return;
      oldInputValue.value = value2;
    };
    var onInputBackspaceKeyDown = function onInputBackspaceKeyDown(value2, context) {
      var e = context.e;
      if (!tagValue.value.length || e.key === "Process" || isReadonly.value) return;
      var isDelete = /(Backspace|NumpadDelete)/i.test(e.code) || /(Backspace|NumpadDelete)/i.test(e.key);
      if (!value2 && isDelete) {
        var _onRemove$value2;
        var index = tagValue.value.length - 1;
        var item = tagValue.value[index];
        var trigger = "backspace";
        var newValue = tagValue.value.slice(0, -1);
        setTagValue(newValue, {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 || _onRemove$value2.call(onRemove, {
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: newValue
        });
      }
      oldInputValue.value = value2;
    };
    var renderLabel = function renderLabel(_ref) {
      var displayNode = _ref.displayNode,
        label = _ref.label;
      var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
      var list = displayNode ? [displayNode] : newList.map(function (item, index) {
        var _getDragProps$value;
        var tagContent = renderTNode("tag", {
          params: {
            value: item
          }
        });
        return Vue.createVNode(Tag, Vue.mergeProps({
          "key": "".concat(item).concat(index),
          "size": size.value,
          "disabled": isDisabled.value,
          "onClose": function onClose(context) {
            return _onClose({
              e: context.e,
              index: index
            });
          },
          "closable": !isReadonly.value && !isDisabled.value
        }, (_getDragProps$value = getDragProps.value) === null || _getDragProps$value === void 0 ? void 0 : _getDragProps$value.call(getDragProps, index, item), tagProps.value), {
          "default": function _default() {
            return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
          }
        });
      }) || [];
      if (![null, void 0, ""].includes(label)) {
        list.unshift(Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-tag-input__prefix"),
          "key": "label"
        }, [label]));
      }
      if (newList.length !== tagValue.value.length) {
        var len = tagValue.value.length - newList.length;
        var more = renderTNode("collapsedItems", {
          params: {
            value: tagValue.value,
            count: tagValue.value.length - minCollapsedNum.value,
            collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
            collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
            onClose: _onClose
          }
        });
        list.push(more !== null && more !== void 0 ? more : Vue.createVNode(Tag, Vue.mergeProps({
          "key": "more",
          "size": size.value
        }, tagProps.value), {
          "default": function _default() {
            return ["+", len];
          }
        }));
      }
      return list;
    };
    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: _onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      onInputBackspaceKeyDown: onInputBackspaceKeyDown,
      renderLabel: renderLabel
    };
  }

  function ownKeys$1R(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1Q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1R(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1R(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useComponentClassName$1 = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("tag-input"),
      CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
      BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
    };
  };
  var _TagInput = Vue.defineComponent({
    name: "TTagInput",
    props: props$13,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var _useComponentClassNam = useComponentClassName$1(),
        NAME_CLASS = _useComponentClassNam.NAME_CLASS,
        CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS,
        BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: TdCloseCircleFilledIcon
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var isDisabled = useDisabled();
      var isReadonly = useReadonly();
      var _toRefs = Vue.toRefs(props2),
        inputValue = _toRefs.inputValue,
        inputProps = _toRefs.inputProps,
        borderless = _toRefs.borderless,
        size = _toRefs.size,
        tips = _toRefs.tips,
        status = _toRefs.status,
        suffix = _toRefs.suffix,
        autoWidth = _toRefs.autoWidth,
        onPaste = _toRefs.onPaste;
      var _useDefaultValue = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tInputValue = _useDefaultValue2[0],
        setTInputValue = _useDefaultValue2[1];
      var _toRefs2 = Vue.toRefs(props2),
        excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
        clearable = _toRefs2.clearable,
        placeholder = _toRefs2.placeholder;
      var _useHover = useHover({
          readonly: isReadonly.value,
          disabled: isDisabled.value,
          onMouseenter: props2.onMouseenter,
          onMouseleave: props2.onMouseleave
        }),
        isHover = _useHover.isHover,
        addHover = _useHover.addHover,
        cancelHover = _useHover.cancelHover;
      var isComposition = Vue.ref(false);
      var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;
      var isFocused = Vue.ref(false);
      var _useDragSorter = useDragSorter(_objectSpread$1Q(_objectSpread$1Q({}, props2), {}, {
          sortOnDraggable: props2.dragSort,
          onDragOverCheck: {
            x: true,
            targetClassNameRegExp: new RegExp("^".concat(classPrefix.value, "-tag"))
          }
        })),
        getDragProps = _useDragSorter.getDragProps;
      var _useTagScroll = useTagScroll(props2),
        scrollToRight = _useTagScroll.scrollToRight,
        onWheel = _useTagScroll.onWheel,
        scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
        scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
        tagInputRef = _useTagScroll.tagInputRef,
        isScrollable = _useTagScroll.isScrollable;
      var _useTagList = useTagList(Vue.reactive(_objectSpread$1Q(_objectSpread$1Q({}, Vue.toRefs(props2)), {}, {
          getDragProps: getDragProps
        }))),
        tagValue = _useTagList.tagValue,
        onInnerEnter = _useTagList.onInnerEnter,
        onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
        onInputBackspaceKeyDown = _useTagList.onInputBackspaceKeyDown,
        clearAll = _useTagList.clearAll,
        renderLabel = _useTagList.renderLabel,
        _onClose = _useTagList.onClose;
      var classes = Vue.computed(function () {
        var isEmpty = !(isArray$1(tagValue.value) && tagValue.value.length);
        return [NAME_CLASS.value, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line"), "".concat(classPrefix.value, "-is-empty"), isEmpty), "".concat(classPrefix.value, "-tag-input--with-tag"), !isEmpty), "".concat(classPrefix.value, "-tag-input--drag-sort"), props2.dragSort && !isReadonly.value && !isDisabled.value)];
      });
      var tagInputPlaceholder = Vue.computed(function () {
        var _tagValue$value;
        return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
      });
      var showClearIcon = Vue.computed(function () {
        var _tagValue$value2;
        return Boolean(!isReadonly.value && !isDisabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
      });
      var onInputEnter = function onInputEnter(value, context) {
        var _context$e, _context$e$preventDef;
        (_context$e = context.e) === null || _context$e === void 0 || (_context$e$preventDef = _context$e.preventDefault) === null || _context$e$preventDef === void 0 || _context$e$preventDef.call(_context$e);
        setTInputValue("", {
          e: context.e,
          trigger: "enter"
        });
        !isComposition.value && onInnerEnter(value, context);
        Vue.nextTick(function () {
          scrollToRight();
          isComposition.value = false;
        });
      };
      var onInputCompositionstart = function onInputCompositionstart(value, context) {
        var _inputProps$value, _inputProps$value$onC;
        isComposition.value = true;
        (_inputProps$value = inputProps.value) === null || _inputProps$value === void 0 || (_inputProps$value$onC = _inputProps$value.onCompositionstart) === null || _inputProps$value$onC === void 0 || _inputProps$value$onC.call(_inputProps$value, value, context);
      };
      var onInputCompositionend = function onInputCompositionend(value, context) {
        var _inputProps$value2, _inputProps$value2$on;
        isComposition.value = false;
        (_inputProps$value2 = inputProps.value) === null || _inputProps$value2 === void 0 || (_inputProps$value2$on = _inputProps$value2.onCompositionend) === null || _inputProps$value2$on === void 0 || _inputProps$value2$on.call(_inputProps$value2, value, context);
      };
      var onClick = function onClick(ctx) {
        var _tagInputRef$value, _props2$onClick;
        if (isDisabled.value) return;
        isFocused.value = true;
        (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 || _tagInputRef$value.focus();
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, ctx);
      };
      var onClearClick = function onClearClick(context) {
        var _props2$onClear;
        clearAll(context);
        setTInputValue("", {
          e: context.e,
          trigger: "clear"
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, context);
      };
      var onMouseEnter = function onMouseEnter(context) {
        addHover(context);
        scrollToRightOnEnter();
      };
      var onMouseLeave = function onMouseLeave(context) {
        cancelHover(context);
        scrollToLeftOnLeave();
      };
      var onInnerFocus = function onInnerFocus(inputValue2, context) {
        var _props2$onFocus;
        if (isFocused.value) return;
        isFocused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, tagValue.value, {
          e: context.e,
          inputValue: inputValue2
        });
      };
      var onInnerBlur = function onInnerBlur(inputValue2, context) {
        var _props2$onBlur;
        isFocused.value = false;
        setTInputValue("", {
          e: context.e,
          trigger: "blur"
        });
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, tagValue.value, {
          e: context.e,
          inputValue: inputValue2
        });
      };
      var onInnerChange = function onInnerChange(val, context) {
        setTInputValue(val, _objectSpread$1Q(_objectSpread$1Q({}, context), {}, {
          trigger: "input"
        }));
      };
      Vue.watch(function () {
        return isScrollable.value;
      }, function (v) {
        if (props2.excessTagsDisplayType !== "scroll") return;
        var scrollElementClass = "".concat(classPrefix.value, "-input__prefix");
        var scrollElement = tagInputRef.value.$el.querySelector(".".concat(scrollElementClass));
        if (v) scrollElement.classList.add("".concat(scrollElementClass, "--scrollable"));else scrollElement.classList.remove("".concat(scrollElementClass, "--scrollable"));
      });
      return function () {
        var _inputProps$value3, _tagValue$value3;
        var suffixIconNode = showClearIcon.value ? Vue.createVNode(CloseCircleFilledIcon, {
          "class": CLEAR_CLASS.value,
          "onClick": onClearClick
        }, null) : renderTNodeJSX("suffixIcon");
        var prefixIconNode = renderTNodeJSX("prefixIcon");
        var suffixClass = "".concat(classPrefix.value, "-tag-input__with-suffix-icon");
        if (suffixIconNode && !classes.value.includes(suffixClass)) {
          classes.value.push(suffixClass);
        }
        var displayNode = renderTNodeJSX("valueDisplay", {
          params: {
            value: tagValue.value,
            onClose: function onClose(index) {
              return _onClose({
                index: index
              });
            }
          }
        });
        var _label = renderTNodeJSX("label", {
          silent: true
        });
        var readonly = isReadonly.value || ((_inputProps$value3 = inputProps.value) === null || _inputProps$value3 === void 0 ? void 0 : _inputProps$value3.readonly);
        return Vue.createVNode(Input, Vue.mergeProps({
          "ref": tagInputRef,
          "borderless": borderless.value,
          "readonly": readonly,
          "showInput": !readonly || !tagValue.value || !((_tagValue$value3 = tagValue.value) !== null && _tagValue$value3 !== void 0 && _tagValue$value3.length),
          "value": tInputValue.value,
          "autoWidth": true,
          "size": size.value,
          "disabled": isDisabled.value,
          "label": function label() {
            return renderLabel({
              displayNode: displayNode,
              label: _label
            });
          },
          "class": classes.value,
          "tips": tips.value,
          "status": status.value,
          "placeholder": tagInputPlaceholder.value,
          "suffix": suffix.value,
          "suffixIcon": function suffixIcon() {
            return suffixIconNode;
          },
          "prefixIcon": function prefixIcon() {
            return prefixIconNode;
          },
          "keepWrapperWidth": !autoWidth.value,
          "onWheel": onWheel,
          "onChange": onInnerChange,
          "onPaste": onPaste.value,
          "onEnter": onInputEnter,
          "onKeyup": onInputBackspaceKeyUp,
          "onKeydown": onInputBackspaceKeyDown,
          "onMouseenter": onMouseEnter,
          "onMouseleave": onMouseLeave,
          "onFocus": onInnerFocus,
          "onBlur": onInnerBlur,
          "onClick": onClick,
          "onCompositionstart": onInputCompositionstart,
          "onCompositionend": onInputCompositionend
        }, inputProps.value), {
          suffix: slots.suffix
        });
      };
    }
  });

  var TagInput = withInstall$1(_TagInput);

  var _excluded$7 = ["tips"];
  function ownKeys$1Q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1P(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1Q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1Q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_KEYS$1 = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props, context, popupRef) {
    var _toRefs = Vue.toRefs(props),
      inputValue = _toRefs.inputValue;
    var classPrefix = usePrefixClass();
    var tagInputRef = Vue.ref();
    var isMultipleFocus = Vue.ref(props.autofocus);
    var _useDefaultValue = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tInputValue = _useDefaultValue2[0],
      setTInputValue = _useDefaultValue2[1];
    var disable = useDisabled();
    var isReadonly = useReadonly();
    var iKeys = Vue.computed(function () {
      return _objectSpread$1P(_objectSpread$1P({}, DEFAULT_KEYS$1), props.keys);
    });
    var tags = Vue.computed(function () {
      if (!(props.value instanceof Array)) {
        return isObject(props.value) ? [props.value[iKeys.value.label]] : [props.value];
      }
      return props.value.map(function (item) {
        return isObject(item) ? item[iKeys.value.label] : item;
      });
    });
    var tPlaceholder = Vue.computed(function () {
      return !tags.value || !tags.value.length ? props.placeholder : "";
    });
    var onTagInputChange = function onTagInputChange(val, context2) {
      var _props$onTagChange;
      if (context2.trigger === "tag-remove") {
        var _context2$e;
        (_context2$e = context2.e) === null || _context2$e === void 0 || _context2$e.stopPropagation();
      }
      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 || _props$onTagChange.call(props, val, context2);
    };
    var onInputChange = function onInputChange(val, ctx) {
      if (ctx.trigger === "enter" || ctx.trigger === "blur") return;
      setTInputValue(val, {
        trigger: ctx.trigger,
        e: ctx.e
      });
    };
    var onBlur = function onBlur(val, ctx) {
      var _popupRef$value, _props$onBlur;
      var overlayState = (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : _popupRef$value.getOverlayState();
      if (overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
      isMultipleFocus.value = false;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, props.value, _objectSpread$1P(_objectSpread$1P({}, ctx), {}, {
        tagInputValue: val
      }));
    };
    var onFocus = function onFocus(val, ctx) {
      var _popupRef$value2, _props$onFocus;
      var overlayState = (_popupRef$value2 = popupRef.value) === null || _popupRef$value2 === void 0 ? void 0 : _popupRef$value2.getOverlayState();
      if (isMultipleFocus.value || overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
      isMultipleFocus.value = true;
      var params = _objectSpread$1P(_objectSpread$1P({}, ctx), {}, {
        tagInputValue: val
      });
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, props.value, params);
    };
    var onEnter = function onEnter(val, ctx) {
      var _props$onEnter;
      var params = _objectSpread$1P(_objectSpread$1P({}, ctx), {}, {
        tagInputValue: val
      });
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, props.value, params);
    };
    var renderSelectMultiple = function renderSelectMultiple(p) {
      var tagInputProps = _objectSpread$1P(_objectSpread$1P({}, p.commonInputProps), {}, {
        tagProps: props.tagProps,
        label: props.label,
        autoWidth: props.autoWidth,
        readonly: isReadonly.value,
        placeholder: tPlaceholder.value,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        value: tags.value,
        valueDisplay: props.valueDisplay,
        inputValue: p.popupVisible && p.allowInput ? tInputValue.value : "",
        inputProps: _objectSpread$1P({
          readonly: !props.allowInput || isReadonly.value,
          inputClass: _defineProperty$2({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
        }, props.inputProps),
        suffixIcon: !disable.value && props.loading ? function () {
          return Vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon
      }, props.tagInputProps);
      var _context$slots = context.slots;
        _context$slots.tips;
        var slots = _objectWithoutProperties$1(_context$slots, _excluded$7);
      return Vue.createVNode(TagInput, Vue.mergeProps({
        "ref": tagInputRef
      }, tagInputProps, {
        "onInputChange": onInputChange,
        "onChange": onTagInputChange,
        "onClear": p.onInnerClear,
        "onBlur": onBlur,
        "onEnter": onEnter,
        "onFocus": onFocus
      }), slots);
    };
    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      isMultipleFocus: isMultipleFocus,
      multipleInputValue: tInputValue,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$1P(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1O(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1P(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1P(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var MAX_POPUP_WIDTH = 1e3;
  var RESERVE_WIDTH = 0;
  function useOverlayInnerStyle(props) {
    var _toRefs = Vue.toRefs(props),
      popupProps = _toRefs.popupProps,
      autoWidth = _toRefs.autoWidth;
    var innerPopupVisible = Vue.ref(false);
    var disable = useDisabled();
    var isReadonly = useReadonly();
    var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? RESERVE_WIDTH : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayInnerStyle = {};
      if (popupProps.value && _typeof$3(popupProps.value.overlayInnerStyle) === "object" && !popupProps.value.overlayInnerStyle.width) {
        otherOverlayInnerStyle = popupProps.value.overlayInnerStyle;
      }
      return _objectSpread$1O({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayInnerStyle);
    };
    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, ctx) {
      if (disable.value || isReadonly.value) return;
      var newVisible = ctx.trigger === "trigger-element-click" && props.allowInput ? true : visible;
      if (props.popupVisible !== newVisible) {
        var _props$onPopupVisible;
        innerPopupVisible.value = newVisible;
        (_props$onPopupVisible = props.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 || _props$onPopupVisible.call(props, newVisible, ctx);
      }
    };
    var getAutoWidthPopupStyleWidth = function getAutoWidthPopupStyleWidth(triggerElement, popupElement) {
      var _popupProps$value;
      return _objectSpread$1O({
        width: "".concat(Math.max(triggerElement.offsetWidth, popupElement.offsetWidth), "px")
      }, (_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayInnerStyle);
    };
    var tOverlayInnerStyle = Vue.computed(function () {
      var _popupProps$value2;
      var result = {};
      var overlayInnerStyle = ((_popupProps$value2 = popupProps.value) === null || _popupProps$value2 === void 0 ? void 0 : _popupProps$value2.overlayInnerStyle) || {};
      if (isFunction(overlayInnerStyle) || isObject(overlayInnerStyle) && overlayInnerStyle.width) {
        result = overlayInnerStyle;
      } else {
        if (autoWidth.value) {
          result = getAutoWidthPopupStyleWidth;
        } else {
          result = matchWidthFunc;
        }
      }
      return result;
    });
    return {
      tOverlayInnerStyle: tOverlayInnerStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  var _excluded$6 = ["tips"];
  function ownKeys$1O(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1N(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1O(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1O(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "prefixIcon", "suffix", "suffixIcon", "onPaste", "onMouseenter", "onMouseleave", "size", "autofocus"];
  var DEFAULT_KEYS = {
    label: "label",
    value: "value",
    children: "children"
  };
  function getInputValue(value, keys) {
    var iKeys = _objectSpread$1N(_objectSpread$1N({}, DEFAULT_KEYS), keys);
    return isObject(value) ? value[iKeys.label] : value;
  }
  function useSingle$1(props, context, popupRef) {
    var _props$defaultInputVa;
    var _toRefs = Vue.toRefs(props),
      value = _toRefs.value,
      keys = _toRefs.keys,
      propsInputValue = _toRefs.inputValue;
    var classPrefix = usePrefixClass();
    var isSingleFocus = Vue.ref(props.autofocus);
    var inputRef = Vue.ref();
    var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      inputValue = _useDefaultValue2[0],
      setInputValue = _useDefaultValue2[1];
    var renderTNode = useTNodeJSX();
    var disable = useDisabled();
    var isReadonly = useReadonly();
    var commonInputProps = Vue.computed(function () {
      return _objectSpread$1N(_objectSpread$1N({}, pick$1(props, COMMON_PROPERTIES)), {}, {
        disabled: disable.value,
        readonly: isReadonly.value
      });
    });
    var onInnerClear = function onInnerClear(context2) {
      var _context2$e, _props$onClear;
      context2 === null || context2 === void 0 || (_context2$e = context2.e) === null || _context2$e === void 0 || _context2$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context2);
      setInputValue("", {
        trigger: "clear"
      });
    };
    var onInnerInputChange = function onInnerInputChange(value2, context2) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$1N(_objectSpread$1N({}, context2), {}, {
          trigger: context2.trigger || "input"
        }));
      }
    };
    var renderSelectSingle = function renderSelectSingle(popupVisible) {
      var _context$attrs;
      var singleValueDisplay = renderTNode("valueDisplay");
      var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
      var prefixContent = renderPrefixContent(singleValueDisplay, popupVisible);
      var inputProps = _objectSpread$1N(_objectSpread$1N({}, commonInputProps.value), {}, {
        value: renderInputDisplay(singleValueDisplay, displayedValue, popupVisible),
        label: prefixContent.length ? function () {
          return prefixContent;
        } : void 0,
        autoWidth: props.autoWidth,
        readonly: !props.allowInput || isReadonly.value,
        placeholder: renderPlaceholder(singleValueDisplay),
        suffixIcon: !disable.value && props.loading ? function () {
          return Vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon,
        showClearIconOnEmpty: Boolean(props.clearable && (inputValue.value || displayedValue) && !disable.value && !isReadonly.value)
      }, props.inputProps);
      var _context$slots = context.slots;
        _context$slots.tips;
        var slots = _objectWithoutProperties$1(_context$slots, _excluded$6);
      var inputClassProps = popupVisible ? ["".concat(classPrefix.value, "-input--focused"), "".concat(classPrefix.value, "-is-focused"), inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputClass] : inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputClass;
      var onEnter = function onEnter(val, context2) {
        var _props$onEnter;
        (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, value.value, _objectSpread$1N(_objectSpread$1N({}, context2), {}, {
          inputValue: val
        }));
      };
      var onFocus = function onFocus(val, context2) {
        var _popupRef$value, _props$onFocus;
        var overlayState = (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : _popupRef$value.getOverlayState();
        if (isSingleFocus.value || overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
        isSingleFocus.value = true;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value.value, _objectSpread$1N(_objectSpread$1N({}, context2), {}, {
          inputValue: val
        }));
      };
      var onBlur = function onBlur(val, context2) {
        var _popupRef$value2, _props$onBlur;
        var overlayState = (_popupRef$value2 = popupRef.value) === null || _popupRef$value2 === void 0 ? void 0 : _popupRef$value2.getOverlayState();
        isSingleFocus.value = false;
        if (overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, value.value, _objectSpread$1N(_objectSpread$1N({}, context2), {}, {
          inputValue: val
        }));
      };
      return Vue.createVNode(Input, Vue.mergeProps({
        "ref": inputRef,
        "style": (_context$attrs = context.attrs) === null || _context$attrs === void 0 ? void 0 : _context$attrs.style
      }, _objectSpread$1N({
        onChange: onInnerInputChange,
        onClear: onInnerClear,
        onEnter: onEnter,
        onFocus: onFocus,
        onBlur: onBlur
      }, inputProps), {
        "inputClass": inputClassProps
      }), slots);
    };
    var renderPrefixContent = function renderPrefixContent(singleValueDisplay, popupVisible) {
      var label = renderTNode("label");
      if (!label && !singleValueDisplay) {
        return [];
      }
      if (singleValueDisplay) {
        var _props$valueDisplayOp;
        if (!value.value || (_props$valueDisplayOp = props.valueDisplayOptions) !== null && _props$valueDisplayOp !== void 0 && _props$valueDisplayOp.useInputDisplay && popupVisible || popupVisible && props.allowInput) {
          return [label];
        }
      }
      return [label, singleValueDisplay];
    };
    var renderInputDisplay = function renderInputDisplay(singleValueDisplay, displayedValue, popupVisible) {
      if (singleValueDisplay) {
        var _props$valueDisplayOp2, _props$valueDisplayOp3;
        if (popupVisible && props.allowInput) {
          return displayedValue;
        }
        if (!((_props$valueDisplayOp2 = props.valueDisplayOptions) !== null && _props$valueDisplayOp2 !== void 0 && _props$valueDisplayOp2.useInputDisplay) || (_props$valueDisplayOp3 = props.valueDisplayOptions) !== null && _props$valueDisplayOp3 !== void 0 && _props$valueDisplayOp3.useInputDisplay && !popupVisible) {
          return void 0;
        }
      }
      return displayedValue;
    };
    var renderPlaceholder = function renderPlaceholder(singleValueDisplay) {
      if (singleValueDisplay) {
        var _props$valueDisplayOp4, _props$valueDisplayOp5;
        if (!value.value || props.allowInput && props.popupVisible) return props.placeholder;
        if (!((_props$valueDisplayOp4 = props.valueDisplayOptions) !== null && _props$valueDisplayOp4 !== void 0 && _props$valueDisplayOp4.usePlaceholder) || (_props$valueDisplayOp5 = props.valueDisplayOptions) !== null && _props$valueDisplayOp5 !== void 0 && _props$valueDisplayOp5.usePlaceholder && value.value) {
          return "";
        }
      }
      return props.placeholder;
    };
    return {
      inputRef: inputRef,
      isSingleFocus: isSingleFocus,
      commonInputProps: commonInputProps,
      singleInputValue: inputValue,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  function ownKeys$1N(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1M(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1N(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1N(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useComponentClassName = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("select-input"),
      BASE_CLASS_BORDERLESS: usePrefixClass("select-input--borderless"),
      BASE_CLASS_MULTIPLE: usePrefixClass("select-input--multiple"),
      BASE_CLASS_POPUP_VISIBLE: usePrefixClass("select-input--popup-visible"),
      BASE_CLASS_EMPTY: usePrefixClass("select-input--empty")
    };
  };
  var _SelectInput = Vue.defineComponent({
    name: "TSelectInput",
    props: _objectSpread$1M(_objectSpread$1M({}, props$14), {}, {
      valueDisplayOptions: {
        type: Object
      }
    }),
    setup: function setup(props2, context) {
      var _useComponentClassNam = useComponentClassName(),
        NAME_CLASS = _useComponentClassNam.NAME_CLASS,
        BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS,
        BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE,
        BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE,
        BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var selectInputRef = Vue.ref();
      var popupRef = Vue.ref();
      var _toRefs = Vue.toRefs(props2),
        multiple = _toRefs.multiple,
        value = _toRefs.value,
        popupVisible = _toRefs.popupVisible,
        borderless = _toRefs.borderless,
        popupProps = _toRefs.popupProps,
        panel = _toRefs.panel,
        allowInput = _toRefs.allowInput,
        status = _toRefs.status;
      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
      var _useSingle = useSingle$1(props2, context, popupRef),
        isSingleFocus = _useSingle.isSingleFocus,
        commonInputProps = _useSingle.commonInputProps,
        onInnerClear = _useSingle.onInnerClear,
        renderSelectSingle = _useSingle.renderSelectSingle;
      var _useMultiple = useMultiple(props2, context, popupRef),
        isMultipleFocus = _useMultiple.isMultipleFocus,
        tagInputRef = _useMultiple.tagInputRef,
        renderSelectMultiple = _useMultiple.renderSelectMultiple;
      var isFocus = Vue.computed(function () {
        return props2.multiple ? isMultipleFocus.value : isSingleFocus.value;
      });
      var classes = Vue.computed(function () {
        var _popupVisible$value;
        return ["".concat(NAME_CLASS.value), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, BASE_CLASS_MULTIPLE.value, multiple.value), BASE_CLASS_BORDERLESS.value, borderless.value), BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), BASE_CLASS_EMPTY.value, value.value instanceof Array ? !value.value.length : !value.value)];
      });
      var addKeyboardEventListener = function addKeyboardEventListener(e) {
        var _e$key;
        var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
        if (/(ArrowDown|ArrowUp)/.test(code) && !popupVisible.value) {
          var _props2$onPopupVisibl;
          var ctx = _objectSpread$1M(_objectSpread$1M({}, context), {}, {
            trigger: "trigger-element-focus"
          });
          (_props2$onPopupVisibl = props2.onPopupVisibleChange) === null || _props2$onPopupVisibl === void 0 || _props2$onPopupVisibl.call(props2, true, ctx);
        }
      };
      Vue.watch([isFocus], function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 1),
          isFocus2 = _ref3[0];
        if (popupVisible.value) return;
        if (isFocus2) {
          selectInputRef.value.addEventListener("keydown", addKeyboardEventListener);
        } else {
          selectInputRef.value.removeEventListener("keydown", addKeyboardEventListener);
        }
      });
      Vue.onMounted(function () {
        if (!popupVisible.value && isFocus) {
          selectInputRef.value.addEventListener("keydown", addKeyboardEventListener);
        }
      });
      Vue.onBeforeUnmount(function () {
        var _selectInputRef$value;
        (_selectInputRef$value = selectInputRef.value) === null || _selectInputRef$value === void 0 || _selectInputRef$value.removeEventListener("keydown", addKeyboardEventListener);
      });
      var onOverlayClick = function onOverlayClick(ctx) {
        var _ctx$e, _tagInputRef$value, _tagInputRef$value$fo;
        (_ctx$e = ctx.e) === null || _ctx$e === void 0 || _ctx$e.stopPropagation();
        if (ctx.e.target.tabIndex >= 0) return;
        if (props2.multiple) (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 || (_tagInputRef$value$fo = _tagInputRef$value.focus) === null || _tagInputRef$value$fo === void 0 || _tagInputRef$value$fo.call(_tagInputRef$value);
      };
      context.expose({
        popupRef: popupRef,
        allowInput: allowInput
      });
      return function () {
        var _popupVisible$value2, _popupProps$value;
        var visibleProps = {
          visible: (_popupVisible$value2 = popupVisible.value) !== null && _popupVisible$value2 !== void 0 ? _popupVisible$value2 : innerPopupVisible.value
        };
        var mainContent = Vue.createVNode(Popup, Vue.mergeProps({
          "ref": popupRef,
          "trigger": ((_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.trigger) || "click",
          "placement": "bottom-left"
        }, visibleProps, {
          "content": panel.value,
          "hideEmptyPopup": true
        }, _objectSpread$1M(_objectSpread$1M({
          onVisibleChange: onInnerPopupVisibleChange,
          onOverlayClick: onOverlayClick
        }, popupProps.value), {}, {
          overlayInnerStyle: tOverlayInnerStyle.value
        })), _objectSpread$1M({
          "default": function _default() {
            return [multiple.value ? renderSelectMultiple({
              commonInputProps: commonInputProps.value,
              onInnerClear: onInnerClear,
              popupVisible: visibleProps.visible,
              allowInput: allowInput.value
            }) : renderSelectSingle(visibleProps.visible)];
          }
        }, _objectSpread$1M(_objectSpread$1M({}, context.slots), {}, {
          content: context.slots.panel
        })));
        var tipsNode = renderTNodeJSX("tips");
        var tipsClasses = ["".concat(classPrefix.value, "-input__tips"), "".concat(classPrefix.value, "-tips"), "".concat(classPrefix.value, "-is-").concat(status.value)];
        return Vue.createVNode("div", {
          "ref": selectInputRef,
          "class": classes.value
        }, [mainContent, tipsNode && Vue.createVNode("div", {
          "class": tipsClasses
        }, [tipsNode])]);
      };
    }
  });

  var SelectInput = withInstall$1(_SelectInput);

  var props$$ = {
    checkAll: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    label: {
      type: String,
      "default": ""
    },
    title: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean]
    }
  };

  var props$_ = {
    checkAll: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    indeterminate: Boolean,
    label: {
      type: [String, Function]
    },
    lazyLoad: Boolean,
    name: {
      type: String,
      "default": ""
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    title: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean]
    },
    onChange: Function
  };

  var CheckboxGroupInjectionKey = Symbol("CheckboxGroupProvide");

  function useCheckboxLazyLoad(labelRef, lazyLoad) {
    var ioObserver = Vue.ref();
    var showCheckbox = Vue.ref(true);
    var handleLazyLoad = function handleLazyLoad() {
      if (!lazyLoad.value) return;
      showCheckbox.value = false;
      var io = observe(labelRef.value, null, function () {
        showCheckbox.value = true;
      }, 0);
      ioObserver.value = io;
    };
    Vue.onMounted(handleLazyLoad);
    Vue.watch([lazyLoad, labelRef], handleLazyLoad);
    Vue.onBeforeUnmount(function () {
      if (!lazyLoad.value) return;
      ioObserver.value.unobserve(labelRef.value);
    });
    return {
      showCheckbox: showCheckbox
    };
  }

  function useKeyboardEvent(handleChange) {
    var keyboardEventListener = function keyboardEventListener(e) {
      var isCheckedCode = CHECKED_CODE_REG.test(e.key) || CHECKED_CODE_REG.test(e.code);
      if (isCheckedCode) {
        e.preventDefault();
        var _e$currentTarget$quer = e.currentTarget.querySelector("input"),
          disabled = _e$currentTarget$quer.disabled;
        !disabled && handleChange(e);
      }
    };
    var onCheckboxFocus = function onCheckboxFocus(e) {
      e.currentTarget.addEventListener("keydown", keyboardEventListener);
    };
    var onCheckboxBlur = function onCheckboxBlur(e) {
      e.currentTarget.removeEventListener("keydown", keyboardEventListener);
    };
    return {
      onCheckboxFocus: onCheckboxFocus,
      onCheckboxBlur: onCheckboxBlur
    };
  }

  function ownKeys$1M(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1L(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1M(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1M(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Checkbox = Vue.defineComponent({
    name: "TCheckbox",
    props: _objectSpread$1L(_objectSpread$1L({}, props$_), {}, {
      needRipple: Boolean,
      stopLabelTrigger: Boolean,
      index: Number,
      data: Object
    }),
    setup: function setup(props2) {
      var labelRef = Vue.ref();
      if (props2.needRipple) {
        useRipple(labelRef);
      }
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _toRefs = Vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue,
        lazyLoad = _toRefs.lazyLoad;
      var _useVModel = useVModel$1(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var checkboxGroupData = Vue.inject(CheckboxGroupInjectionKey, void 0);
      var tName = Vue.ref();
      Vue.watch(function () {
        return [props2.name, checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.name].join("_");
      }, function () {
        var name = props2.name || (checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.name);
        if (name) {
          tName.value = name;
        }
      }, {
        immediate: true
      });
      var tChecked = Vue.ref(false);
      var getChecked = function getChecked() {
        var value = props2.value,
          checkAll = props2.checkAll;
        if (checkAll) return checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.isCheckAll;
        return checkboxGroupData !== null && checkboxGroupData !== void 0 && checkboxGroupData.value ? checkboxGroupData.value.checkedValues.includes(value) : innerChecked.value;
      };
      Vue.watch(function () {
        var _checkboxGroupData$va;
        return [innerChecked.value, checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.isCheckAll, checkboxGroupData === null || checkboxGroupData === void 0 || (_checkboxGroupData$va = checkboxGroupData.value.checkedValues) === null || _checkboxGroupData$va === void 0 ? void 0 : _checkboxGroupData$va.join(",")];
      }, function () {
        tChecked.value = getChecked();
      }, {
        immediate: true
      });
      var beforeDisabled = Vue.computed(function () {
        if (!props2.checkAll && !tChecked.value && checkboxGroupData !== null && checkboxGroupData !== void 0 && checkboxGroupData.value.maxExceeded) {
          return true;
        }
        return null;
      });
      var afterDisabled = Vue.computed(function () {
        return checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.disabled;
      });
      var isDisabled = useDisabled({
        beforeDisabled: beforeDisabled,
        afterDisabled: afterDisabled
      });
      var afterReadonly = Vue.computed(function () {
        return checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.readonly;
      });
      var isReadonly = useReadonly({
        afterReadonly: afterReadonly
      });
      var tIndeterminate = Vue.ref(false);
      Vue.watch(function () {
        return [props2.checkAll, props2.indeterminate, checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.indeterminate];
      }, function () {
        tIndeterminate.value = props2.checkAll ? checkboxGroupData === null || checkboxGroupData === void 0 ? void 0 : checkboxGroupData.value.indeterminate : props2.indeterminate;
      }, {
        immediate: true
      });
      var COMPONENT_NAME = usePrefixClass("checkbox");
      var labelClasses = Vue.ref({});
      Vue.watch([tChecked, isDisabled, tIndeterminate], function () {
        labelClasses.value = ["".concat(COMPONENT_NAME.value), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.value.checked, tChecked.value), STATUS.value.disabled, isDisabled.value), STATUS.value.indeterminate, tIndeterminate.value)];
      }, {
        immediate: true
      });
      var handleChange = function handleChange(e) {
        if (isReadonly.value) return;
        var checked2 = !tChecked.value;
        setInnerChecked(checked2, {
          e: e
        });
        if (checkboxGroupData !== null && checkboxGroupData !== void 0 && checkboxGroupData.value.handleCheckboxChange) {
          checkboxGroupData.value.onCheckedChange({
            checked: checked2,
            checkAll: props2.checkAll,
            e: e,
            option: props2
          });
        }
      };
      var renderContent = useContent();
      var handleLabelClick = function handleLabelClick(e) {
        if (props2.stopLabelTrigger) e.preventDefault();
      };
      var _useCheckboxLazyLoad = useCheckboxLazyLoad(labelRef, lazyLoad),
        showCheckbox = _useCheckboxLazyLoad.showCheckbox;
      var _useKeyboardEvent = useKeyboardEvent(handleChange),
        onCheckboxFocus = _useKeyboardEvent.onCheckboxFocus,
        onCheckboxBlur = _useKeyboardEvent.onCheckboxBlur;
      return function () {
        var titleAttr = isString(props2.title) && props2.title ? props2.title : null;
        return Vue.createVNode("label", {
          "ref": labelRef,
          "class": labelClasses.value,
          "tabindex": isDisabled.value ? void 0 : "0",
          "onFocus": onCheckboxFocus,
          "onBlur": onCheckboxBlur,
          "onClick": handleLabelClick,
          "title": titleAttr
        }, [!showCheckbox.value ? null : [Vue.createVNode("input", {
          "type": "checkbox",
          "tabindex": "-1",
          "class": "".concat(COMPONENT_NAME.value, "__former"),
          "disabled": isDisabled.value,
          "readonly": isReadonly.value,
          "indeterminate": tIndeterminate.value,
          "name": tName.value,
          "value": props2.value ? props2.value : void 0,
          "checked": tChecked.value,
          "onChange": handleChange,
          "key": "input"
        }, null), Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__input"),
          "key": "input-span",
          "onClick": props2.stopLabelTrigger && handleChange
        }, null), Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__label"),
          "key": "label"
        }, [renderContent("default", "label")])]]);
      };
    }
  });

  var props$Z = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    lazyLoad: Boolean,
    max: {
      type: Number,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  var _Group$1 = Vue.defineComponent({
    name: "TCheckboxGroup",
    props: props$Z,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("checkbox-group");
      var renderTNodeJSX = useTNodeJSX();
      var isArray = Array.isArray;
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var optionList = Vue.ref([]);
      var intersectionLen = Vue.computed(function () {
        if (!isArray(innerValue.value)) return 0;
        var values = optionList.value.map(function (item) {
          return item.value;
        });
        var n = intersection$1(innerValue.value, values);
        return n.length;
      });
      var isCheckAll = Vue.computed(function () {
        var optionItems = optionList.value.filter(function (item) {
          return !item.disabled && !item.readonly && !item.checkAll;
        }).map(function (t) {
          return t.value;
        });
        var intersectionValues = intersection$1(optionItems, innerValue.value);
        return intersectionValues.length === optionItems.length;
      });
      var indeterminate = Vue.computed(function () {
        return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
      });
      var maxExceeded = Vue.computed(function () {
        return !isUndefined(props2.max) && innerValue.value.length === props2.max;
      });
      Vue.watchEffect(function () {
        if (!props2.options) return [];
        optionList.value = props2.options.map(function (item) {
          return isObject(item) ? item : {
            label: String(item),
            value: item
          };
        });
      });
      var getAllCheckboxValue = function getAllCheckboxValue() {
        var checkAllVal = /* @__PURE__ */new Set();
        var uncheckAllVal = /* @__PURE__ */new Set();
        for (var i = 0, len = optionList.value.length; i < len; i++) {
          var item = optionList.value[i];
          if (item.checkAll) continue;
          if (item.disabled) {
            if (!innerValue.value.includes(item.value)) continue;else uncheckAllVal.add(item.value);
          }
          if (item.readonly) {
            if (!innerValue.value.includes(item.value)) continue;else uncheckAllVal.add(item.value);
          }
          checkAllVal.add(item.value);
          if (maxExceeded.value) break;
        }
        return {
          checkAllVal: _toConsumableArray(checkAllVal),
          uncheckAllVal: _toConsumableArray(uncheckAllVal)
        };
      };
      var onCheckAllChange = function onCheckAllChange(checked, context) {
        var _getAllCheckboxValue = getAllCheckboxValue(),
          checkAllVal = _getAllCheckboxValue.checkAllVal,
          uncheckAllVal = _getAllCheckboxValue.uncheckAllVal;
        var value2 = checked ? checkAllVal : uncheckAllVal;
        setInnerValue(value2, {
          e: context.e,
          type: checked ? "check" : "uncheck",
          current: void 0,
          option: void 0
        });
      };
      var handleCheckboxChange = function handleCheckboxChange(data) {
        var currentValue = data.option.value;
        if (!isArray(innerValue.value)) {
          console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$3(innerValue.value)));
          return;
        }
        var val = _toConsumableArray(innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setInnerValue(val, {
          e: data.e,
          current: data.option.value,
          option: data.option,
          type: data.checked ? "check" : "uncheck"
        });
      };
      var onCheckedChange = function onCheckedChange(p) {
        var checked = p.checked,
          checkAll = p.checkAll,
          e = p.e;
        if (checkAll) {
          onCheckAllChange(checked, {
            e: e
          });
        } else {
          handleCheckboxChange(p);
        }
      };
      var getChildComponentSlots = useChildComponentSlots();
      var getOptionListBySlots = function getOptionListBySlots() {
        var nodes = getChildComponentSlots("Checkbox");
        var arr = [];
        nodes === null || nodes === void 0 || nodes.forEach(function (node) {
          var option = node.props;
          if (!option) return;
          if (option["check-all"] === "" || option["check-all"] === true) {
            option.checkAll = true;
          }
          arr.push(option);
        });
        return arr;
      };
      Vue.provide(CheckboxGroupInjectionKey, Vue.computed(function () {
        return {
          name: props2.name,
          isCheckAll: isCheckAll.value,
          checkedValues: innerValue.value || [],
          maxExceeded: maxExceeded.value,
          disabled: props2.disabled,
          readonly: props2.readonly,
          indeterminate: indeterminate.value,
          handleCheckboxChange: handleCheckboxChange,
          onCheckedChange: onCheckedChange
        };
      }));
      return function () {
        var _props2$options;
        var children = null;
        if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
          var _optionList$value;
          children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
            var _innerValue$value;
            return Vue.createVNode(_Checkbox, Vue.mergeProps({
              "key": "".concat(option.value || "").concat(index),
              "lazyLoad": props2.lazyLoad
            }, option, {
              "index": index,
              "checked": (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value.includes(option.value),
              "data": option
            }), null);
          });
        } else {
          var nodes = renderTNodeJSX("default");
          optionList.value = getOptionListBySlots();
          children = nodes;
        }
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value,
          "role": "group",
          "aria-label": "checkbox-group"
        }, [children]);
      };
    }
  });

  var Checkbox = withInstall$1(_Checkbox);
  var CheckboxGroup = withInstall$1(_Group$1);

  function _createForOfIteratorHelper$5(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$5(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$5(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$5(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$5(r, a) : void 0; } }
  function _arrayLikeToArray$5(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var getSingleContent$1 = function getSingleContent(value, isRemote, searchDisplayOptions, optionsMap) {
    if (isRemote) {
      var _searchDisplayOptions;
      return ((_searchDisplayOptions = searchDisplayOptions.value.filter(function (option2) {
        return option2.value === value;
      })[0]) === null || _searchDisplayOptions === void 0 ? void 0 : _searchDisplayOptions.label) || (value === null || value === void 0 ? void 0 : value.toString());
    }
    var option = optionsMap.value.get(value);
    return (option === null || option === void 0 ? void 0 : option.label) || (value === null || value === void 0 ? void 0 : value.toString());
  };
  var getMultipleContent$1 = function getMultipleContent(value, isRemote, searchDisplayOptions, optionsMap) {
    var res = [];
    var _iterator = _createForOfIteratorHelper$5(value),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var iterator = _step.value;
        var resLabel = getSingleContent$1(iterator, isRemote, searchDisplayOptions, optionsMap);
        if (resLabel) {
          res.push(resLabel);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return res;
  };
  var getNewMultipleValue = function getNewMultipleValue(innerValue, optionValue) {
    var value = cloneDeep(innerValue);
    var valueIndex = value.indexOf(optionValue);
    if (valueIndex < 0) {
      value.push(optionValue);
    } else {
      value.splice(valueIndex, 1);
    }
    return {
      value: value,
      isCheck: valueIndex < 0
    };
  };

  var selectInjectKey = Symbol("selectProvide");

  function ownKeys$1L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$w(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Option = Vue.defineComponent({
    name: "TOption",
    props: _objectSpread$1K(_objectSpread$1K({}, props$$), {}, {
      createAble: Boolean,
      multiple: Boolean,
      index: Number,
      rowIndex: Number,
      trs: Map,
      scrollType: String,
      isVirtual: Boolean,
      bufferSize: Number,
      checkAll: Boolean
    }),
    emits: ["row-mounted"],
    setup: function setup(props2, context) {
      var selectProvider = Vue.inject(selectInjectKey);
      var formDisabled = useDisabled();
      var _getCurrentInstance = Vue.getCurrentInstance(),
        vnode = _getCurrentInstance.vnode;
      var isReachMax = Vue.computed(function () {
        return selectProvider.value.max !== 0 && selectProvider.value.max <= selectProvider.value.selectValue.length;
      });
      var disabled = Vue.computed(function () {
        return formDisabled.value || props2.multiple && isReachMax.value && !isSelected.value && !selectProvider.value.isCheckAll;
      });
      var renderContent = useContent();
      var selectName = usePrefixClass("select");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var liRef = Vue.ref();
      var isHover = Vue.ref(false);
      var isSelected = Vue.computed(function () {
        if (selectProvider.value.isCheckAll && !props2.disabled) return true;
        return !props2.multiple ? selectProvider.value.selectValue === props2.value : selectProvider.value.selectValue.includes(props2.value);
      });
      var isIndeterminate = Vue.computed(function () {
        if (!props2.checkAll) return false;
        return selectProvider.value.indeterminate;
      });
      var classes = Vue.computed(function () {
        return ["".concat(selectName.value, "-option"), [SIZE.value[selectProvider.value.size]], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, disabled.value), STATUS.value.selected, isSelected.value), "".concat(selectName.value, "-option__hover"), (isHover.value || selectProvider.value.hoverIndex === props2.index) && !disabled.value)];
      });
      var labelText = Vue.computed(function () {
        return props2.label || props2.value;
      });
      var handleClick = function handleClick(e) {
        if (props2.disabled || disabled.value) return;
        if (props2.multiple) {
          handleCheckboxClick(!isSelected.value, {
            e: e
          });
          e.preventDefault();
          return;
        }
        if (props2.createAble) {
          var _selectProvider$value, _selectProvider$value2;
          (_selectProvider$value = (_selectProvider$value2 = selectProvider.value).handleCreate) === null || _selectProvider$value === void 0 || _selectProvider$value.call(_selectProvider$value2, props2.value);
          if (selectProvider.value.multiple) {
            selectProvider.value.handleValueChange([].concat(_toConsumableArray(selectProvider.value.selectValue), [props2.value]), {
              selectedOptions: selectProvider.value.getSelectedOptions(),
              trigger: "check",
              e: e
            });
            return;
          }
        }
        var selectedOptions = selectProvider.value.getSelectedOptions(props2.value);
        selectProvider.value.handleValueChange(props2.value, {
          option: selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions[0],
          selectedOptions: selectedOptions,
          trigger: "check",
          e: e
        });
        selectProvider.value.handlePopupVisibleChange(false, {
          e: e
        });
        selectProvider.value.emitBlur(e);
      };
      var handleCheckboxClick = function handleCheckboxClick(val, context2) {
        var _selectProvider$value3;
        if (props2.checkAll) {
          selectProvider.value.onCheckAllChange(val);
          return;
        }
        var newValue = getNewMultipleValue(selectProvider.value.selectValue, props2.value);
        var selectedOptions = selectProvider.value.getSelectedOptions(newValue.value);
        var currentOption = (_selectProvider$value3 = selectProvider.value.getSelectedOptions(props2.value)) === null || _selectProvider$value3 === void 0 ? void 0 : _selectProvider$value3[0];
        selectProvider.value.handleValueChange(newValue.value, {
          option: currentOption,
          selectedOptions: selectedOptions,
          trigger: val ? "check" : "uncheck",
          e: context2.e
        });
      };
      var renderTitle = function renderTitle() {
        var vProps = vnode.props || {};
        if (Reflect.has(vProps, "title")) {
          return props2.title;
        }
        if (typeof labelText.value === "string") return labelText.value;
        return null;
      };
      Vue.onMounted(function () {
        var trs = props2.trs,
          rowIndex = props2.rowIndex,
          isVirtual = props2.isVirtual;
        if (isVirtual) {
          trs.set(rowIndex, liRef.value);
          context.emit("row-mounted");
        }
      });
      Vue.onBeforeUnmount(function () {
        if (props2.isVirtual) {
          var trs = props2.trs,
            rowIndex = props2.rowIndex;
          trs["delete"](rowIndex);
        }
      });
      useRipple(liRef);
      return function () {
        var optionChild = renderContent("default", "content") || labelText.value;
        return Vue.createVNode("li", {
          "ref": liRef,
          "class": classes.value,
          "title": renderTitle(),
          "onMouseenter": function onMouseenter() {
            return isHover.value = true;
          },
          "onMouseleave": function onMouseleave() {
            return isHover.value = false;
          },
          "onClick": handleClick
        }, [selectProvider && props2.multiple ? Vue.createVNode(Checkbox, {
          "checked": isSelected.value,
          "disabled": disabled.value,
          "onChange": handleCheckboxClick,
          "indeterminate": isIndeterminate.value
        }, _isSlot$w(optionChild) ? optionChild : {
          "default": function _default() {
            return [optionChild];
          }
        }) : Vue.createVNode("span", null, [optionChild])]);
      };
    }
  });

  var props$Y = {
    divider: {
      type: Boolean,
      "default": true
    },
    label: {
      type: String
    }
  };

  var _OptionGroup = Vue.defineComponent({
    name: "TOptionGroup",
    props: props$Y,
    setup: function setup(props2) {
      var selectProvider = Vue.inject(selectInjectKey);
      var COMPONENT_NAME = usePrefixClass("select-option-group");
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var classes = Vue.computed(function () {
        return [COMPONENT_NAME.value, SIZE.value[selectProvider.value.size], _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__divider"), props2.divider)];
      });
      return function () {
        var _props2$label;
        return Vue.createVNode("li", {
          "class": classes.value
        }, [((_props2$label = props2.label) !== null && _props2$label !== void 0 ? _props2$label : false) && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [props2.label]), renderTNodeJSX("default")]);
      };
    }
  });

  var props$X = {
    autoWidth: Boolean,
    autofocus: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    creatable: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function]
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultPopupVisible: Boolean,
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    reserveKeyword: Boolean,
    scroll: {
      type: Object
    },
    selectInputProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Boolean, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean, Object, Array],
      "default": void 0
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCreate: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function
  };

  function useKeyboardControl(_ref) {
    var displayOptions = _ref.displayOptions,
      optionsList = _ref.optionsList,
      innerPopupVisible = _ref.innerPopupVisible,
      setInnerPopupVisible = _ref.setInnerPopupVisible,
      selectPanelRef = _ref.selectPanelRef,
      isFilterable = _ref.isFilterable,
      isRemoteSearch = _ref.isRemoteSearch,
      getSelectedOptions = _ref.getSelectedOptions,
      setInnerValue = _ref.setInnerValue,
      onCheckAllChange = _ref.onCheckAllChange,
      innerValue = _ref.innerValue,
      popupContentRef = _ref.popupContentRef,
      multiple = _ref.multiple,
      max = _ref.max,
      isCheckAll = _ref.isCheckAll;
    var hoverIndex = Vue.ref(-1);
    var filteredOptions = Vue.ref([]);
    var virtualFilteredOptions = Vue.ref([]);
    var classPrefix = usePrefixClass();
    var handleKeyDown = function handleKeyDown(e) {
      var _optionsList$value$ne, _optionsList$value$ne2;
      var optionsListLength = displayOptions.value.length;
      var newIndex = hoverIndex.value;
      switch (e.code) {
        case "ArrowUp":
          e.preventDefault();
          if (hoverIndex.value === -1) {
            newIndex = 0;
          } else if (hoverIndex.value === 0 || hoverIndex.value > displayOptions.value.length - 1) {
            newIndex = optionsListLength - 1;
          } else {
            newIndex--;
          }
          if ((_optionsList$value$ne = optionsList.value[newIndex]) !== null && _optionsList$value$ne !== void 0 && _optionsList$value$ne.disabled) {
            newIndex--;
          }
          hoverIndex.value = newIndex;
          break;
        case "ArrowDown":
          e.preventDefault();
          if (hoverIndex.value === -1 || hoverIndex.value >= optionsListLength - 1) {
            newIndex = 0;
          } else {
            newIndex++;
          }
          if ((_optionsList$value$ne2 = optionsList.value[newIndex]) !== null && _optionsList$value$ne2 !== void 0 && _optionsList$value$ne2.disabled) {
            newIndex++;
          }
          hoverIndex.value = newIndex;
          break;
        case "Enter":
          if (hoverIndex.value === -1) break;
          var finalOptions = selectPanelRef.value.isVirtual && isFilterable.value && virtualFilteredOptions.value.length ? virtualFilteredOptions.value : isRemoteSearch.value ? optionsList.value : filteredOptions.value;
          if (!finalOptions.length) finalOptions = optionsList.value;
          if (!innerPopupVisible.value) {
            setInnerPopupVisible(true, {
              e: e
            });
            break;
          }
          if (!multiple) {
            var selectedOptions = getSelectedOptions(finalOptions[hoverIndex.value].value);
            setInnerValue(finalOptions[hoverIndex.value].value, {
              option: selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions[0],
              selectedOptions: getSelectedOptions(finalOptions[hoverIndex.value].value),
              trigger: "check",
              e: e
            });
            setInnerPopupVisible(false, {
              e: e
            });
          } else {
            var _finalOptions$hoverIn;
            if (hoverIndex.value === -1) return;
            if (finalOptions[hoverIndex.value].checkAll) {
              onCheckAllChange(!isCheckAll.value);
              return;
            }
            var optionValue = (_finalOptions$hoverIn = finalOptions[hoverIndex.value]) === null || _finalOptions$hoverIn === void 0 ? void 0 : _finalOptions$hoverIn.value;
            if (!optionValue) return;
            var newValue = getNewMultipleValue(innerValue.value, optionValue);
            if (max > 0 && newValue.value.length > max) return;
            var _selectedOptions = getSelectedOptions(newValue.value);
            setInnerValue(newValue.value, {
              option: _selectedOptions.find(function (v) {
                return v.value == optionValue;
              }),
              selectedOptions: _selectedOptions,
              trigger: newValue.isCheck ? "check" : "uncheck",
              e: e
            });
            filteredOptions.value = [];
          }
          break;
        case "Escape":
          setInnerPopupVisible(false, {
            e: e
          });
          break;
      }
    };
    Vue.watch(innerPopupVisible, function (value) {
      if (value) {
        hoverIndex.value = -1;
        virtualFilteredOptions.value = [];
        filteredOptions.value = [];
      }
    });
    Vue.watch(hoverIndex, function (index) {
      var _selectPanelRef$value;
      var optionHeight = (_selectPanelRef$value = selectPanelRef.value) === null || _selectPanelRef$value === void 0 || (_selectPanelRef$value = _selectPanelRef$value.innerRef) === null || _selectPanelRef$value === void 0 || (_selectPanelRef$value = _selectPanelRef$value.querySelector(".".concat(classPrefix.value, "-select-option"))) === null || _selectPanelRef$value === void 0 ? void 0 : _selectPanelRef$value.clientHeight;
      var scrollHeight = optionHeight * index;
      popupContentRef.value.scrollTo({
        top: scrollHeight,
        behavior: "smooth"
      });
    });
    return {
      hoverIndex: hoverIndex,
      handleKeyDown: handleKeyDown,
      virtualFilteredOptions: virtualFilteredOptions,
      filteredOptions: filteredOptions
    };
  }

  var usePanelVirtualScroll = function usePanelVirtualScroll(props) {
    var _props$scroll3, _props$scroll4, _props$scroll5, _props$scroll6, _props$scroll7;
    var isVirtual = Vue.computed(function () {
      var _props$scroll, _props$options$value, _props$scroll2;
      return ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual" && ((_props$options$value = props.options.value) === null || _props$options$value === void 0 ? void 0 : _props$options$value.length) > (((_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.threshold) || 100);
    });
    var _ref = ((_props$scroll3 = props.scroll) === null || _props$scroll3 === void 0 ? void 0 : _props$scroll3.type) === "virtual" ? useVirtualScroll({
        container: props.popupContentRef,
        data: props.options,
        fixedHeight: ((_props$scroll4 = props.scroll) === null || _props$scroll4 === void 0 ? void 0 : _props$scroll4.isFixedRowHeight) || false,
        lineHeight: ((_props$scroll5 = props.scroll) === null || _props$scroll5 === void 0 ? void 0 : _props$scroll5.rowHeight) || 28,
        bufferSize: ((_props$scroll6 = props.scroll) === null || _props$scroll6 === void 0 ? void 0 : _props$scroll6.bufferSize) || 20,
        threshold: ((_props$scroll7 = props.scroll) === null || _props$scroll7 === void 0 ? void 0 : _props$scroll7.threshold) || 100
      }) : {},
      _ref$trs = _ref.trs,
      trs = _ref$trs === void 0 ? null : _ref$trs,
      _ref$visibleData = _ref.visibleData,
      visibleData = _ref$visibleData === void 0 ? null : _ref$visibleData,
      _ref$handleScroll = _ref.handleScroll,
      handleVirtualScroll = _ref$handleScroll === void 0 ? null : _ref$handleScroll,
      _ref$scrollHeight = _ref.scrollHeight,
      scrollHeight = _ref$scrollHeight === void 0 ? null : _ref$scrollHeight,
      _ref$translateY = _ref.translateY,
      translateY = _ref$translateY === void 0 ? null : _ref$translateY,
      _ref$handleRowMounted = _ref.handleRowMounted,
      handleRowMounted = _ref$handleRowMounted === void 0 ? null : _ref$handleRowMounted;
    var lastScrollY = -1;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      if (!isVirtual.value) {
        return;
      }
      var target = e.target;
      var top = target.scrollTop;
      if (Math.abs(lastScrollY - top) > 5) {
        handleVirtualScroll();
        lastScrollY = top;
      } else {
        lastScrollY = -1;
      }
    };
    Vue.onMounted(function () {
      var _props$popupContentRe;
      (_props$popupContentRe = props.popupContentRef.value) === null || _props$popupContentRe === void 0 || _props$popupContentRe.addEventListener("scroll", onInnerVirtualScroll);
    });
    Vue.onBeforeUnmount(function () {
      var _props$popupContentRe2;
      (_props$popupContentRe2 = props.popupContentRef.value) === null || _props$popupContentRe2 === void 0 || _props$popupContentRe2.removeEventListener("scroll", onInnerVirtualScroll);
    });
    var cursorStyle = Vue.computed(function () {
      return {
        position: "absolute",
        width: "1px",
        height: "1px",
        transition: "transform 0.2s",
        transform: "translate(0, ".concat(scrollHeight.value, "px)"),
        "-ms-transform": "translate(0, ".concat(scrollHeight.value, "px)"),
        "-moz-transform": "translate(0, ".concat(scrollHeight.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(scrollHeight.value, "px)")
      };
    });
    var panelStyle = Vue.computed(function () {
      return {
        transform: "translate(0, ".concat(translateY.value, "px)"),
        "-ms-transform": "translate(0, ".concat(translateY.value, "px)"),
        "-moz-transform": "translate(0, ".concat(translateY.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(translateY.value, "px)")
      };
    });
    return {
      trs: trs,
      scrollHeight: scrollHeight,
      translateY: translateY,
      visibleData: visibleData,
      handleRowMounted: handleRowMounted,
      isVirtual: isVirtual,
      cursorStyle: cursorStyle,
      panelStyle: panelStyle
    };
  };

  function _createForOfIteratorHelper$4(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$4(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$4(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$4(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$4(r, a) : void 0; } }
  function _arrayLikeToArray$4(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function ownKeys$1K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useSelectOptions = function useSelectOptions(props, keys, inputValue, innerValue) {
    var getChildComponentSlots = useChildComponentSlots();
    var optionsCache = Vue.ref([]);
    var options = Vue.computed(function () {
      var _props$options;
      var dynamicIndex = 0;
      var innerOptions = ((_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.map(function (option) {
        var getFormatOption = function getFormatOption(option2) {
          var _keys$value = keys.value,
            value = _keys$value.value,
            label = _keys$value.label,
            disabled = _keys$value.disabled;
          var res = _objectSpread$1J(_objectSpread$1J({}, option2), {}, {
            index: dynamicIndex,
            label: get(option2, label),
            value: get(option2, value),
            disabled: get(option2, disabled) || false
          });
          dynamicIndex++;
          return res;
        };
        if (option.children) {
          return _objectSpread$1J(_objectSpread$1J({}, option), {}, {
            children: option.children.map(function (child) {
              return getFormatOption(child);
            })
          });
        }
        return getFormatOption(option);
      })) || [];
      var optionsSlots = getChildComponentSlots("Option");
      var groupSlots = getChildComponentSlots("OptionGroup");
      if (isArray$1(groupSlots)) {
        var _iterator = _createForOfIteratorHelper$4(groupSlots),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _group$props;
            var group = _step.value;
            var groupOption = _objectSpread$1J(_objectSpread$1J({
              group: (_group$props = group.props) === null || _group$props === void 0 ? void 0 : _group$props.label
            }, group.props), {}, {
              children: []
            });
            var res = getChildComponentSlots("Option", group.children);
            if (!isArray$1(res)) continue;
            var _iterator2 = _createForOfIteratorHelper$4(res),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var child = _step2.value;
                groupOption.children.push(_objectSpread$1J(_objectSpread$1J({}, child.props), {}, {
                  slots: child.children,
                  index: dynamicIndex
                }));
                dynamicIndex++;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
            innerOptions.push(groupOption);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (isArray$1(optionsSlots)) {
        var _iterator3 = _createForOfIteratorHelper$4(optionsSlots),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _child = _step3.value;
            innerOptions.push(_objectSpread$1J(_objectSpread$1J({}, _child.props), {}, {
              slots: _child.children,
              index: dynamicIndex
            }));
            dynamicIndex++;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      return innerOptions;
    });
    var optionsList = Vue.computed(function () {
      var res = [];
      var _getOptionsList = function getOptionsList(options2) {
        var _iterator4 = _createForOfIteratorHelper$4(options2),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var option = _step4.value;
            if (option.children) {
              _getOptionsList(option.children);
            } else {
              res.push(option);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      };
      _getOptionsList(options.value);
      return res;
    });
    var optionsMap = Vue.computed(function () {
      var res = /* @__PURE__ */new Map();
      optionsCache.value.concat(optionsList.value).forEach(function (option) {
        res.set(option.value, option);
      });
      return res;
    });
    var filterMethods = function filterMethods(option) {
      var _option$label, _option$label$toLower;
      if (isFunction(props.filter)) {
        return props.filter("".concat(inputValue.value), option);
      }
      return ((_option$label = option.label) === null || _option$label === void 0 || (_option$label$toLower = _option$label.toLowerCase) === null || _option$label$toLower === void 0 ? void 0 : _option$label$toLower.call(_option$label).indexOf("".concat(inputValue.value).toLowerCase())) > -1;
    };
    var searchOptions = Vue.ref([]);
    var getSelectedOptions = function getSelectedOptions(options2, selectValue) {
      return options2.filter(function (option) {
        if (option.checkAll) return;
        if (isArray$1(selectValue)) return selectValue.includes(option.value);
        return selectValue === option.value;
      });
    };
    var searchDisplayOptions = Vue.computed(function () {
      var currentSelectedOptions = getSelectedOptions(optionsList.value, innerValue.value);
      searchOptions.value = uniqBy([].concat(_toConsumableArray(searchOptions.value), _toConsumableArray(currentSelectedOptions)), "value");
      var searchSelectedOptions = getSelectedOptions(searchOptions.value, innerValue.value);
      return uniqBy([].concat(_toConsumableArray(searchSelectedOptions), _toConsumableArray(optionsList.value)), "value");
    });
    var displayOptions = Vue.computed(function () {
      if (props.onSearch && props.filterable) return options.value;
      if (!inputValue.value || !(props.filterable || isFunction(props.filter))) return options.value;
      var checkAllOption;
      var res = [];
      options.value.forEach(function (option) {
        if (option.children) {
          res.push(_objectSpread$1J(_objectSpread$1J({}, option), {}, {
            children: option.children.filter(filterMethods)
          }));
        }
        if ((option === null || option === void 0 ? void 0 : option.checkAll) === true) checkAllOption = option;
        if (filterMethods(option)) {
          res.push(option);
        }
      });
      if (!isFunction(props.filter)) {
        var exactMatch = res.filter(function (item) {
          return item.label === inputValue.value;
        });
        var fuzzyMatch = res.filter(function (item) {
          return item.label !== inputValue.value;
        });
        res = exactMatch.concat(fuzzyMatch);
      }
      return res.length && checkAllOption ? [checkAllOption].concat(_toConsumableArray(res)) : res;
    });
    return {
      options: options,
      optionsMap: optionsMap,
      optionsList: optionsList,
      optionsCache: optionsCache,
      displayOptions: displayOptions,
      filterMethods: filterMethods,
      searchDisplayOptions: searchDisplayOptions
    };
  };

  function _isSlot$v(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var SelectPanel = Vue.defineComponent({
    name: "TSelectPanel",
    props: {
      inputValue: props$X.inputValue,
      panelTopContent: props$X.panelTopContent,
      panelBottomContent: props$X.panelBottomContent,
      empty: props$X.empty,
      creatable: props$X.creatable,
      loading: props$X.loading,
      loadingText: props$X.loadingText,
      multiple: props$X.multiple,
      filterable: props$X.filterable,
      filter: props$X.filter,
      scroll: props$X.scroll,
      keys: props$X.keys
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("select");
      var renderTNodeJSX = useTNodeJSX();
      var renderDefaultTNode = useTNodeDefault();
      var _useConfig = useConfig("select"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var tSelect = Vue.inject(selectInjectKey);
      var innerRef = Vue.ref(null);
      var keys = Vue.computed(function () {
        return props.keys;
      });
      var popupContentRef = Vue.computed(function () {
        return tSelect.value.popupContentRef.value;
      });
      var showCreateOption = Vue.computed(function () {
        return props.creatable && props.filterable && props.inputValue;
      });
      var displayOptions = Vue.computed(function () {
        return tSelect.value.displayOptions;
      });
      var _usePanelVirtualScrol = usePanelVirtualScroll({
          scroll: props.scroll,
          popupContentRef: popupContentRef,
          options: displayOptions
        }),
        trs = _usePanelVirtualScrol.trs,
        visibleData = _usePanelVirtualScrol.visibleData,
        handleRowMounted = _usePanelVirtualScrol.handleRowMounted,
        isVirtual = _usePanelVirtualScrol.isVirtual,
        panelStyle = _usePanelVirtualScrol.panelStyle,
        cursorStyle = _usePanelVirtualScrol.cursorStyle;
      var isEmpty = Vue.computed(function () {
        return !displayOptions.value.length;
      });
      var renderCreateOption = function renderCreateOption() {
        return Vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value, "__create-option"), "".concat(COMPONENT_NAME.value, "__list")]
        }, [Vue.createVNode(_Option, {
          "value": props.inputValue,
          "label": "".concat(props.inputValue),
          "createAble": true,
          "class": "".concat(COMPONENT_NAME.value, "__create-option--special")
        }, null)]);
      };
      var _renderOptionsContent = function renderOptionsContent(options) {
        return Vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__list")
        }, [options.map(function (item, index) {
          var _props$scroll, _props$scroll2;
          if (item.children) {
            var _slot;
            return Vue.createVNode(_OptionGroup, {
              "label": item.group,
              "divider": item.divider
            }, _isSlot$v(_slot = _renderOptionsContent(item.children)) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            });
          }
          var defaultOmit = ["index", "$index", "className", "tagName"];
          var _ref2 = keys.value || {},
            value = _ref2.value,
            label = _ref2.label,
            disabled = _ref2.disabled;
          var shouldOmitContent = [value, label, disabled].includes("content");
          var option = omit$1(item, defaultOmit.concat(shouldOmitContent ? "content" : []));
          return Vue.createVNode(_Option, Vue.mergeProps(option, isVirtual.value ? {
            rowIndex: item.$index,
            trs: trs,
            scrollType: (_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type,
            isVirtual: isVirtual.value,
            bufferSize: (_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.bufferSize,
            key: "".concat(item.$index || "", "_").concat(index, "_").concat(item.value)
          } : {
            key: "".concat(index, "_").concat(item.value)
          }, {
            "index": index,
            "multiple": props.multiple,
            "onRowMounted": handleRowMounted
          }), item.slots);
        })]);
      };
      var dropdownInnerSize = Vue.computed(function () {
        return {
          small: "s",
          medium: "m",
          large: "l"
        }[tSelect.value.size];
      });
      expose({
        innerRef: innerRef,
        visibleData: visibleData,
        isVirtual: isVirtual,
        displayOptions: displayOptions
      });
      var renderPanel = function renderPanel(options, extraStyle) {
        return Vue.createVNode("div", {
          "ref": innerRef,
          "class": ["".concat(COMPONENT_NAME.value, "__dropdown-inner"), "".concat(COMPONENT_NAME.value, "__dropdown-inner--size-").concat(dropdownInnerSize.value)],
          "style": extraStyle
        }, [showCreateOption.value && renderCreateOption(), props.loading && renderDefaultTNode("loadingText", {
          defaultNode: Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__loading-tips")
          }, [t(globalConfig.value.loadingText)])
        }), !props.loading && isEmpty.value && !showCreateOption.value && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__empty")
        }, [renderTNodeJSX("empty") || t(globalConfig.value.empty)]), !isEmpty.value && _renderOptionsContent(options)]);
      };
      return function () {
        return isVirtual.value ? Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), Vue.createVNode("div", null, [Vue.createVNode("div", {
          "style": cursorStyle.value
        }, null), renderPanel(visibleData.value, panelStyle.value)]), renderTNodeJSX("panelBottomContent")]) : Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), renderPanel(displayOptions.value), renderTNodeJSX("panelBottomContent")]);
      };
    }
  });

  var _excluded$5 = ["overlayClassName"];
  function _createForOfIteratorHelper$3(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
  function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function ownKeys$1J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Select = Vue.defineComponent({
    name: "TSelect",
    props: _objectSpread$1I(_objectSpread$1I({}, props$X), {}, {
      valueDisplayOptions: {
        type: Object
      }
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var classPrefix = usePrefixClass();
      var isDisabled = useDisabled();
      var isReadonly = useReadonly();
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("select");
      var _useConfig = useConfig("select"),
        globalConfig = _useConfig.globalConfig,
        t = _useConfig.t;
      var _toRefs = Vue.toRefs(props2),
        popupVisible = _toRefs.popupVisible,
        inputValue = _toRefs.inputValue,
        modelValue = _toRefs.modelValue,
        value = _toRefs.value;
      var _useDefaultValue = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerInputValue = _useDefaultValue2[0],
        setInputValue = _useDefaultValue2[1];
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        orgValue = _useVModel2[0],
        setOrgValue = _useVModel2[1];
      var selectPanelRef = Vue.ref(null);
      var selectInputRef = Vue.ref(null);
      var keys = Vue.computed(function () {
        var _props2$keys, _props2$keys2, _props2$keys3;
        return {
          label: ((_props2$keys = props2.keys) === null || _props2$keys === void 0 ? void 0 : _props2$keys.label) || "label",
          value: ((_props2$keys2 = props2.keys) === null || _props2$keys2 === void 0 ? void 0 : _props2$keys2.value) || "value",
          disabled: ((_props2$keys3 = props2.keys) === null || _props2$keys3 === void 0 ? void 0 : _props2$keys3.disabled) || "disabled"
        };
      });
      var isObjectType = Vue.computed(function () {
        return props2.valueType === "object";
      });
      var innerValue = Vue.computed(function () {
        if (orgValue.value === void 0) {
          return props2.multiple ? [] : void 0;
        }
        if (isObjectType.value) {
          return !props2.multiple ? orgValue.value[keys.value.value] : orgValue.value.map(function (option) {
            return option[keys.value.value];
          });
        }
        return orgValue.value;
      });
      var _useSelectOptions = useSelectOptions(props2, keys, innerInputValue, innerValue),
        optionsMap = _useSelectOptions.optionsMap,
        optionsList = _useSelectOptions.optionsList,
        optionsCache = _useSelectOptions.optionsCache,
        displayOptions = _useSelectOptions.displayOptions,
        filterMethods = _useSelectOptions.filterMethods,
        searchDisplayOptions = _useSelectOptions.searchDisplayOptions;
      var setInnerValue = function setInnerValue(newVal, context) {
        if (isObjectType.value) {
          var _keys$value = keys.value,
            value2 = _keys$value.value,
            label = _keys$value.label;
          var getOption = function getOption(val) {
            if (val === void 0) {
              return void 0;
            }
            var option = optionsMap.value.get(val);
            return _defineProperty$2(_defineProperty$2({}, value2, get(option, "value")), label, get(option, "label"));
          };
          newVal = props2.multiple ? newVal.map(function (val) {
            return getOption(val);
          }) : getOption(newVal);
        }
        if (newVal === orgValue.value) return;
        if (props2.multiple && !props2.reserveKeyword && context.trigger == "check") setInputValue("");
        setOrgValue(newVal, _objectSpread$1I({
          selectedOptions: getSelectedOptions(newVal)
        }, context));
        if (props2.multiple && context.trigger === "uncheck" && context.option) {
          var _props2$onRemove;
          (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 || _props2$onRemove.call(props2, {
            value: get(context.option, keys.value.value),
            data: context.option,
            e: context.e
          });
        }
      };
      var _useDefaultValue3 = useDefaultValue(popupVisible, false, function (visible, context) {
          var _props2$onPopupVisibl;
          (_props2$onPopupVisibl = props2.onPopupVisibleChange) === null || _props2$onPopupVisibl === void 0 || _props2$onPopupVisibl.call(props2, visible, context);
        }, "popupVisible"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        innerPopupVisible = _useDefaultValue4[0],
        setInnerPopupVisible = _useDefaultValue4[1];
      var placeholderText = Vue.computed(function () {
        var _ref3;
        return (_ref3 = !props2.multiple && innerPopupVisible.value && getSingleContent$1(innerValue.value, isRemoteSearch.value, currentSelectOptions, optionsMap) || props2.placeholder) !== null && _ref3 !== void 0 ? _ref3 : t(globalConfig.value.placeholder);
      });
      var displayText = Vue.computed(function () {
        return props2.multiple ? getMultipleContent$1(innerValue.value, isRemoteSearch.value, currentSelectOptions, optionsMap) : getSingleContent$1(innerValue.value, isRemoteSearch.value, currentSelectOptions, optionsMap);
      });
      var valueDisplayParams = Vue.computed(function () {
        if (!props2.multiple) {
          return _objectSpread$1I(_objectSpread$1I({}, optionsMap.value.get(innerValue.value)), {}, {
            value: innerValue.value,
            label: displayText.value
          });
        }
        var val = isArray$1(innerValue.value) ? innerValue.value.map(function (value2) {
          return optionsMap.value.get(value2);
        }) : [];
        var params = {
          value: val,
          onClose: props2.multiple ? function (index) {
            return removeTag(index);
          } : function () {}
        };
        if (props2.minCollapsedNum && isArray$1(innerValue.value)) {
          return _objectSpread$1I(_objectSpread$1I({}, params), {}, {
            displayValue: Array.isArray(val) ? val.slice(0, props2.minCollapsedNum) : []
          });
        }
        return params;
      });
      var isFilterable = Vue.computed(function () {
        return Boolean(props2.filterable || globalConfig.value.filterable || isFunction(props2.filter));
      });
      var isRemoteSearch = Vue.computed(function () {
        return Boolean((props2.filterable || globalConfig.value.filterable) && isFunction(props2.onSearch));
      });
      var removeTag = function removeTag(index, context) {
        var _props2$onRemove3;
        var _ref4 = context || {},
          e = _ref4.e,
          _ref4$trigger = _ref4.trigger,
          trigger = _ref4$trigger === void 0 ? "tag-remove" : _ref4$trigger;
        e && e.stopPropagation();
        var selectValue = cloneDeep(innerValue.value);
        var value2 = selectValue[index];
        selectValue.splice(index, 1);
        if (trigger === "backspace") {
          var _props2$onRemove2;
          var closest = -1;
          var len = index;
          var currentSelected = getCurrentSelectedOptions();
          while (len >= 0) {
            var _currentSelected$len;
            if (!((_currentSelected$len = currentSelected[len]) !== null && _currentSelected$len !== void 0 && _currentSelected$len.disabled)) {
              closest = len;
              break;
            }
            len -= 1;
          }
          if (closest < 0) return;
          var values = currentSelected[closest];
          var currentSelectedOptions = currentSelected.filter(function (item) {
            return item.value !== values.value;
          });
          setInnerValue(currentSelectedOptions.map(function (item) {
            return item.value;
          }), {
            selectedOptions: currentSelectedOptions,
            trigger: trigger,
            e: e
          });
          (_props2$onRemove2 = props2.onRemove) === null || _props2$onRemove2 === void 0 || _props2$onRemove2.call(props2, {
            value: values.value,
            data: values,
            e: e
          });
          return;
        }
        if (trigger !== "clear") {
          setInnerValue(selectValue, {
            selectedOptions: getSelectedOptions(selectValue),
            trigger: trigger,
            e: e
          });
        }
        (_props2$onRemove3 = props2.onRemove) === null || _props2$onRemove3 === void 0 || _props2$onRemove3.call(props2, {
          value: value2,
          data: optionsMap.value.get(value2),
          e: e
        });
      };
      var handleCreate = function handleCreate() {
        var _props2$onCreate;
        if (!innerInputValue.value) return;
        (_props2$onCreate = props2.onCreate) === null || _props2$onCreate === void 0 || _props2$onCreate.call(props2, innerInputValue.value);
        if (!innerPopupVisible.value) setInputValue("");
      };
      var popupContentRef = Vue.computed(function () {
        var _selectInputRef$value;
        return (_selectInputRef$value = selectInputRef.value) === null || _selectInputRef$value === void 0 ? void 0 : _selectInputRef$value.popupRef.getOverlay();
      });
      var optionalList = Vue.computed(function () {
        return optionsList.value.filter(function (item) {
          return !item.disabled && !(item["check-all"] || item["check-all"] === "") && !item.checkAll && filterMethods(item);
        });
      });
      var getSelectedOptions = function getSelectedOptions() {
        var selectValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : innerValue.value;
        return optionsList.value.filter(function (option) {
          if (option.checkAll) return;
          if (isArray$1(selectValue)) return selectValue.includes(option.value);
          return selectValue === option.value;
        });
      };
      var getCurrentSelectedOptions = function getCurrentSelectedOptions() {
        var options = [];
        var selectedValue = isObjectType.value ? orgValue.value : innerValue.value;
        var values = isArray$1(selectedValue) ? selectedValue : [selectedValue];
        values.forEach(function (value2) {
          var option = optionsMap.value.get(isObjectType.value ? value2.value : value2);
          if (option) options.push(option);else options.push(isObjectType.value ? value2 : {
            value: value2
          });
        });
        return options;
      };
      var onCheckAllChange = function onCheckAllChange(checked) {
        if (!props2.multiple) return;
        var value2 = keys.value.value;
        var lockedValues = innerValue.value.filter(function (value3) {
          return optionsList.value.find(function (item) {
            return item.value === value3 && item.disabled;
          });
        });
        var activeValues = optionalList.value.map(function (option) {
          return option.value;
        });
        var formattedOrgValue = isObjectType.value ? orgValue.value.map(function (v) {
          return get(v, value2);
        }) : orgValue.value;
        var values = checked ? _toConsumableArray(/* @__PURE__ */new Set([].concat(_toConsumableArray(formattedOrgValue), _toConsumableArray(activeValues), _toConsumableArray(lockedValues)))) : _toConsumableArray(lockedValues);
        setInnerValue(values, {
          selectedOptions: getSelectedOptions(values),
          trigger: checked ? "check" : "clear"
        });
      };
      var isCheckAll = Vue.computed(function () {
        if (intersectionLen.value === 0) return false;
        return intersectionLen.value === (isRemoteSearch.value ? searchDisplayOptions.value.length : optionalList.value.length);
      });
      var _useKeyboardControl = useKeyboardControl({
          displayOptions: displayOptions,
          optionsList: optionsList,
          innerPopupVisible: innerPopupVisible,
          setInnerPopupVisible: setInnerPopupVisible,
          selectPanelRef: selectPanelRef,
          isFilterable: isFilterable,
          isRemoteSearch: isRemoteSearch,
          getSelectedOptions: getSelectedOptions,
          setInnerValue: setInnerValue,
          onCheckAllChange: onCheckAllChange,
          isCheckAll: isCheckAll,
          innerValue: innerValue,
          popupContentRef: popupContentRef,
          multiple: props2.multiple,
          max: props2.max
        }),
        hoverIndex = _useKeyboardControl.hoverIndex,
        virtualFilteredOptions = _useKeyboardControl.virtualFilteredOptions,
        handleKeyDown = _useKeyboardControl.handleKeyDown,
        filteredOptions = _useKeyboardControl.filteredOptions;
      var intersectionLen = Vue.computed(function () {
        var values = optionalList.value.map(function (item) {
          return item.value;
        });
        var n = intersection$1(innerValue.value, values);
        return n.length;
      });
      var indeterminate = Vue.computed(function () {
        return !isCheckAll.value && intersectionLen.value !== 0;
      });
      var SelectProvider = Vue.computed(function () {
        return {
          max: props2.max,
          multiple: props2.multiple,
          hoverIndex: hoverIndex.value,
          selectValue: innerValue.value,
          reserveKeyword: props2.reserveKeyword,
          handleValueChange: setInnerValue,
          handlerInputChange: setInputValue,
          handlePopupVisibleChange: setInnerPopupVisible,
          handleCreate: handleCreate,
          size: props2.size,
          popupContentRef: popupContentRef,
          indeterminate: indeterminate.value,
          isCheckAll: isCheckAll.value,
          onCheckAllChange: onCheckAllChange,
          getSelectedOptions: getSelectedOptions,
          displayOptions: displayOptions.value,
          emitBlur: handleOptionEmitBlur
        };
      });
      Vue.provide(selectInjectKey, SelectProvider);
      var checkValueInvalid = function checkValueInvalid() {
        if (!props2.multiple && isArray$1(orgValue.value)) {
          setOrgValue(void 0, {
            selectedOptions: [],
            trigger: "default"
          });
        }
        if (props2.multiple && !isArray$1(orgValue.value)) {
          setOrgValue([], {
            selectedOptions: [],
            trigger: "default"
          });
        }
      };
      var handleSearch = debounce$1(function (value2, _ref5) {
        var _props2$onSearch;
        var e = _ref5.e;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 || _props2$onSearch.call(props2, "".concat(value2), {
          e: e
        });
      }, 300);
      var handlerInputChange = function handlerInputChange(value2, context) {
        if (value2) {
          !innerPopupVisible.value && setInnerPopupVisible(true, {
            e: context.e
          });
        }
        setInputValue(value2);
        handleSearch("".concat(value2), {
          e: context.e
        });
        Vue.nextTick(function () {
          var _selectPanelRef$value, _selectPanelRef$value2;
          virtualFilteredOptions.value = (_selectPanelRef$value = selectPanelRef.value) === null || _selectPanelRef$value === void 0 ? void 0 : _selectPanelRef$value.visibleData;
          filteredOptions.value = (_selectPanelRef$value2 = selectPanelRef.value) === null || _selectPanelRef$value2 === void 0 ? void 0 : _selectPanelRef$value2.displayOptions;
        });
      };
      var handleOptionEmitBlur = function handleOptionEmitBlur(e) {
        var _props2$onBlur;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
          e: e,
          value: innerValue.value
        });
      };
      var handlerPopupVisibleChange = function handlerPopupVisibleChange(visible, context) {
        setInnerPopupVisible(visible, context);
        if (visible && context.trigger === "trigger-element-click") setInputValue("");
      };
      var handlerPopupScrollToBottom = /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {
          var _popupProps$onScroll, _popupProps$onScrollT;
          var popupProps;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                popupProps = props2.popupProps;
                if (!props2.loading) {
                  _context.next = 1;
                  break;
                }
                return _context.abrupt("return");
              case 1:
                popupProps === null || popupProps === void 0 || (_popupProps$onScroll = popupProps["on-scroll-to-bottom"]) === null || _popupProps$onScroll === void 0 || _popupProps$onScroll.call(popupProps, context);
                popupProps === null || popupProps === void 0 || (_popupProps$onScrollT = popupProps.onScrollToBottom) === null || _popupProps$onScrollT === void 0 || _popupProps$onScrollT.call(popupProps, context);
              case 2:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function handlerPopupScrollToBottom(_x) {
          return _ref6.apply(this, arguments);
        };
      }();
      var addCache = function addCache(val) {
        if (props2.multiple) {
          var newCache = [];
          var _iterator = _createForOfIteratorHelper$3(val || []),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;
              var option = optionsMap.value.get(item);
              if (option) {
                newCache.push(option);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          optionsCache.value = Array.from(/* @__PURE__ */new Set([].concat(newCache, _toConsumableArray(optionsCache.value))));
        } else {
          var _option = optionsMap.value.get(val);
          if (_option) {
            optionsCache.value = Array.from(/* @__PURE__ */new Set([_option].concat(_toConsumableArray(optionsCache.value))));
          }
        }
      };
      Vue.watch(orgValue, function (val) {
        checkValueInvalid();
        Vue.nextTick(function () {
          addCache(val);
        });
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return props2.multiple;
      }, function () {
        checkValueInvalid();
      });
      var updateScrollTop = function updateScrollTop(content) {
        var _selectPanelRef$value3;
        if (!selectPanelRef.value) {
          return;
        }
        var firstSelectedNode = (_selectPanelRef$value3 = selectPanelRef.value) === null || _selectPanelRef$value3 === void 0 || (_selectPanelRef$value3 = _selectPanelRef$value3.innerRef) === null || _selectPanelRef$value3 === void 0 ? void 0 : _selectPanelRef$value3.querySelector(".".concat(classPrefix.value, "-is-selected"));
        Vue.nextTick(function () {
          if (firstSelectedNode && content) {
            var _getComputedStyle = getComputedStyle(firstSelectedNode),
              paddingBottom = _getComputedStyle.paddingBottom;
            var _getComputedStyle2 = getComputedStyle(content),
              marginBottom = _getComputedStyle2.marginBottom;
            var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
            var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
            content.scrollTop = updateValue;
          }
        });
      };
      var currentSelectOptions = Vue.computed(function () {
        return isRemoteSearch.value ? searchDisplayOptions.value : getCurrentSelectedOptions();
      });
      var renderValueDisplay = function renderValueDisplay() {
        var renderTag = function renderTag() {
          var _props2$selectInputPr, _innerValue$value$sli, _innerValue$value$sli2;
          if (!props2.multiple || ((_props2$selectInputPr = props2.selectInputProps) === null || _props2$selectInputPr === void 0 ? void 0 : _props2$selectInputPr.multiple) === false) {
            return void 0;
          }
          return (_innerValue$value$sli = (_innerValue$value$sli2 = innerValue.value.slice(0, props2.minCollapsedNum ? props2.minCollapsedNum : innerValue.value.length)).map) === null || _innerValue$value$sli === void 0 ? void 0 : _innerValue$value$sli.call(_innerValue$value$sli2, function (v, key) {
            var _option$label;
            var option = currentSelectOptions.value.find(function (item) {
              if (item.value === v) {
                return true;
              }
            });
            return Vue.createVNode(Tag, Vue.mergeProps({
              "key": key,
              "closable": !(option !== null && option !== void 0 && option.disabled) && !isDisabled.value && !isReadonly.value,
              "size": props2.size
            }, props2.tagProps, {
              "onClose": function onClose(_ref7) {
                var _props2$tagProps, _props2$tagProps$onCl;
                var e = _ref7.e;
                e.stopPropagation();
                (_props2$tagProps = props2.tagProps) === null || _props2$tagProps === void 0 || (_props2$tagProps$onCl = _props2$tagProps.onClose) === null || _props2$tagProps$onCl === void 0 || _props2$tagProps$onCl.call(_props2$tagProps, {
                  e: e
                });
                removeTag(key);
              }
            }), {
              "default": function _default() {
                return [option ? (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option === null || option === void 0 ? void 0 : option.value : v];
              }
            });
          });
        };
        return renderTNodeJSX("valueDisplay", {
          params: valueDisplayParams.value
        }) || renderTag();
      };
      Vue.provide("updateScrollTop", updateScrollTop);
      return function () {
        var _ref8 = props2.popupProps || {},
          overlayClassName = _ref8.overlayClassName,
          restPopupProps = _objectWithoutProperties$1(_ref8, _excluded$5);
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__wrap")
        }, [Vue.createVNode(SelectInput, Vue.mergeProps({
          autoWidth: props2.autoWidth,
          readonly: isReadonly.value,
          borderless: props2.borderless,
          multiple: props2.multiple,
          clearable: props2.clearable,
          loading: props2.loading,
          status: props2.status,
          tips: renderTNodeJSX("tips"),
          minCollapsedNum: props2.minCollapsedNum,
          autofocus: props2.autofocus,
          suffix: props2.suffix,
          valueDisplayOptions: props2.valueDisplayOptions
        }, {
          "ref": selectInputRef,
          "class": COMPONENT_NAME.value,
          "value": displayText.value,
          "disabled": isDisabled.value,
          "popupVisible": innerPopupVisible.value,
          "inputValue": innerPopupVisible.value ? innerInputValue.value : "",
          "placeholder": "".concat(placeholderText.value),
          "allowInput": isFilterable.value,
          "collapsed-items": props2.collapsedItems,
          "inputProps": _objectSpread$1I(_objectSpread$1I({
            size: props2.size,
            autofocus: props2.autofocus
          }, props2.inputProps), {}, {
            onkeydown: handleKeyDown
          }),
          "tagInputProps": _objectSpread$1I({
            size: props2.size
          }, props2.tagInputProps),
          "onTagChange": function onTagChange(val, ctx) {
            removeTag(ctx.index, ctx);
          },
          "tagProps": _objectSpread$1I({}, props2.tagProps),
          "popupProps": _objectSpread$1I(_objectSpread$1I({
            overlayClassName: ["".concat(COMPONENT_NAME.value, "__dropdown"), overlayClassName]
          }, restPopupProps), {}, {
            onScrollToBottom: handlerPopupScrollToBottom
          }),
          "label": props2.label,
          "prefixIcon": props2.prefixIcon,
          "suffix": props2.suffix,
          "suffixIcon": function suffixIcon() {
            if (props2.suffixIcon || slots.suffixIcon) {
              return renderTNodeJSX("suffixIcon");
            }
            return props2.showArrow && Vue.createVNode(FakeArrow, {
              "overlayClassName": "".concat(COMPONENT_NAME.value, "__right-icon"),
              "isActive": innerPopupVisible.value
            }, null);
          },
          "valueDisplay": renderValueDisplay,
          "onPopupVisibleChange": handlerPopupVisibleChange,
          "onInputChange": handlerInputChange,
          "onClear": function onClear(_ref9) {
            var _props2$onClear;
            var e = _ref9.e;
            setInnerValue(props2.multiple ? [] : void 0, {
              option: null,
              selectedOptions: getSelectedOptions(props2.multiple ? [] : void 0),
              trigger: "clear",
              e: e
            });
            (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, {
              e: e
            });
          },
          "onEnter": function onEnter(inputValue2, _ref0) {
            var e = _ref0.e;
            setTimeout(function () {
              var _props2$onEnter;
              (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 || _props2$onEnter.call(props2, {
                inputValue: "".concat(innerInputValue.value),
                e: e,
                value: innerValue.value
              });
              handleCreate();
            }, 0);
          },
          "onBlur": function onBlur(inputValue2, _ref1) {
            var _props2$onBlur2;
            var e = _ref1.e;
            (_props2$onBlur2 = props2.onBlur) === null || _props2$onBlur2 === void 0 || _props2$onBlur2.call(props2, {
              e: e,
              value: innerValue.value
            });
          },
          "onFocus": function onFocus(inputValue2, _ref10) {
            var _props2$onFocus;
            var e = _ref10.e;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
              e: e,
              value: innerValue.value
            });
          }
        }, props2.selectInputProps), {
          label: slots.label,
          prefixIcon: slots.prefixIcon,
          suffix: slots.suffix,
          panel: function panel() {
            return Vue.createVNode(SelectPanel, Vue.mergeProps({
              "ref": selectPanelRef
            }, pick$1(props2, ["size", "multiple", "empty", "loading", "loadingText", "filterable", "creatable", "panelTopContent", "panelBottomContent", "filter", "scroll", "keys"]), {
              "inputValue": innerInputValue.value
            }), slots);
          },
          collapsedItems: slots.collapsedItems
        })]);
      };
    }
  });

  var Select = withInstall$1(_Select);
  var Option = withInstall$1(_Option);
  var OptionGroup = withInstall$1(_OptionGroup);

  var props$W = {
    append: {
      type: [String, Function]
    },
    prepend: {
      type: [String, Function]
    }
  };

  var _InputAdornment = Vue.defineComponent({
    name: "TInputAdornment",
    props: props$W,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("input-adornment");
      var renderTNodeJSX = useTNodeJSX();
      var renderAddon = function renderAddon(h2, type, addon) {
        var addonNode;
        var isContentNode = isString(addon) || isNumber(addon);
        if (!slots[type] && isString(addon) && !addon) return null;
        if (slots[type]) {
          if (slots[type](null).length === 1 && typeof slots[type](null)[0].children === "string") {
            addonNode = Vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME.value, "__text")
            }, [slots[type](null)]);
          } else {
            addonNode = slots[type](null);
          }
        } else if (isFunction(addon)) {
          addonNode = addon(h2);
        } else {
          addonNode = isContentNode ? Vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__text")
          }, [addon]) : addon;
        }
        return addonNode ? Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__").concat(type)
        }, [addonNode]) : addonNode;
      };
      return function () {
        var prepend = renderAddon(Vue.h, "prepend", props2.prepend);
        var append = renderAddon(Vue.h, "append", props2.append);
        var defaultSlot = renderTNodeJSX("default") || [null];
        var className = [COMPONENT_NAME.value, _defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--prepend"), prepend), "".concat(COMPONENT_NAME.value, "--append"), append)];
        if (!prepend && !append) {
          return defaultSlot[0];
        }
        return Vue.createVNode("div", {
          "class": className
        }, [prepend, defaultSlot[0], append]);
      };
    }
  });

  var InputAdornment = withInstall$1(_InputAdornment);

  var props$V = {
    current: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultCurrent: {
      type: Number,
      "default": 1
    },
    disabled: Boolean,
    foldedMaxPageBtn: {
      type: Number,
      "default": 5
    },
    maxPageBtn: {
      type: Number,
      "default": 10
    },
    pageEllipsisMode: {
      type: String,
      "default": "mid",
      validator: function validator(val) {
        if (!val) return true;
        return ["mid", "both-ends"].includes(val);
      }
    },
    pageSize: {
      type: Number,
      "default": void 0
    },
    defaultPageSize: {
      type: Number,
      "default": 10
    },
    pageSizeOptions: {
      type: Array,
      "default": function _default() {
        return [5, 10, 20, 50];
      }
    },
    selectProps: {
      type: Object
    },
    showFirstAndLastPageBtn: Boolean,
    showJumper: Boolean,
    showPageNumber: {
      type: Boolean,
      "default": true
    },
    showPageSize: {
      type: Boolean,
      "default": true
    },
    showPreviousAndNextBtn: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "simple"].includes(val);
      }
    },
    total: {
      type: Number,
      "default": 0
    },
    totalContent: {
      type: [Boolean, Function],
      "default": true
    },
    onChange: Function,
    onCurrentChange: Function,
    onPageSizeChange: Function
  };

  function useMoreAction(props, pageCount, innerCurrent) {
    var prevMore = Vue.ref(false);
    var nextMore = Vue.ref(false);
    var curPageLeftCount = Vue.computed(function () {
      return Math.ceil((props.foldedMaxPageBtn - 1) / 2);
    });
    var curPageRightCount = Vue.computed(function () {
      return Math.floor((props.foldedMaxPageBtn - 1) / 2);
    });
    var isPrevMoreShow = Vue.computed(function () {
      return 2 + curPageLeftCount.value < innerCurrent.value;
    });
    var isNextMoreShow = Vue.computed(function () {
      return pageCount.value - 1 - curPageRightCount.value > innerCurrent.value;
    });
    return {
      prevMore: prevMore,
      nextMore: nextMore,
      curPageLeftCount: curPageLeftCount,
      curPageRightCount: curPageRightCount,
      isPrevMoreShow: isPrevMoreShow,
      isNextMoreShow: isNextMoreShow
    };
  }

  function usePaginationClasses(props, innerCurrent, innerPageSize, name) {
    var _useCommonClassName = useCommonClassName$1(),
      SIZE = _useCommonClassName.SIZE,
      STATUS = _useCommonClassName.STATUS;
    var pageCount = Vue.computed(function () {
      var c = Math.ceil(props.total / innerPageSize.value);
      return c > 0 ? c : 1;
    });
    var paginationClass = Vue.computed(function () {
      return ["".concat(name.value), SIZE.value[props.size], _defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, props.disabled), "".concat(name.value, "-ie"), getIEVersion() < 11), props.theme === "simple" ? "".concat(name.value, "--simple") : ""];
    });
    var totalClass = Vue.computed(function () {
      return ["".concat(name.value, "__total")];
    });
    var sizerClass = Vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });
    var preBtnClass = Vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-prev"), _defineProperty$2({}, STATUS.value.disabled, props.disabled || innerCurrent.value === 1)];
    });
    var nextBtnClass = Vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-next"), _defineProperty$2({}, STATUS.value.disabled, props.disabled || innerCurrent.value === pageCount.value)];
    });
    var btnWrapClass = Vue.computed(function () {
      return ["".concat(name.value, "__pager")];
    });
    var btnMoreClass = Vue.computed(function () {
      return ["".concat(name.value, "__number"), "".concat(name.value, "__number--more"), _defineProperty$2({}, STATUS.value.disabled, props.disabled)];
    });
    var jumperClass = Vue.computed(function () {
      return ["".concat(name.value, "__jump")];
    });
    var jumperInputClass = Vue.computed(function () {
      return ["".concat(name.value, "__input")];
    });
    var simpleClass = Vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });
    var getButtonClass = function getButtonClass(index) {
      return ["".concat(name.value, "__number"), _defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, props.disabled), STATUS.value.current, innerCurrent.value === index)];
    };
    return {
      pageCount: pageCount,
      paginationClass: paginationClass,
      totalClass: totalClass,
      sizerClass: sizerClass,
      preBtnClass: preBtnClass,
      nextBtnClass: nextBtnClass,
      btnWrapClass: btnWrapClass,
      btnMoreClass: btnMoreClass,
      jumperClass: jumperClass,
      jumperInputClass: jumperInputClass,
      simpleClass: simpleClass,
      getButtonClass: getButtonClass
    };
  }

  var _excluded$4 = ["pageCount"];
  var min = 1;
  var _Pagination = Vue.defineComponent({
    name: "TPagination",
    props: props$V,
    setup: function setup(props2) {
      var _getCurrentInstance = Vue.getCurrentInstance(),
        emit = _getCurrentInstance.emit;
      var _toRefs = Vue.toRefs(props2),
        modelValue = _toRefs.modelValue,
        pageSize = _toRefs.pageSize,
        current = _toRefs.current;
      var renderTNodeJSX = useTNodeJSX();
      var _useVModel = useVModel$1(current, modelValue, props2.defaultCurrent, props2.onCurrentChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(pageSize, props2.defaultPageSize, props2.onPageSizeChange, "pageSize"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerPageSize = _useDefaultValue2[0],
        setInnerPageSize = _useDefaultValue2[1];
      var _useConfig = useConfig("pagination"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("pagination");
      var _useGlobalIcon = useGlobalIcon({
          PageFirstIcon: TdPageFirstIcon,
          PageLastIcon: TdPageLastIcon,
          ChevronLeftIcon: TdChevronLeftIcon,
          ChevronRightIcon: TdChevronRightIcon,
          ChevronLeftDoubleIcon: TdChevronLeftDoubleIcon,
          ChevronRightDoubleIcon: TdChevronRightDoubleIcon,
          EllipsisIcon: TdEllipsisIcon
        }),
        PageFirstIcon = _useGlobalIcon.PageFirstIcon,
        PageLastIcon = _useGlobalIcon.PageLastIcon,
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftDoubleIcon = _useGlobalIcon.ChevronLeftDoubleIcon,
        ChevronRightDoubleIcon = _useGlobalIcon.ChevronRightDoubleIcon,
        EllipsisIcon = _useGlobalIcon.EllipsisIcon;
      var _usePaginationClasses = usePaginationClasses(props2, innerCurrent, innerPageSize, COMPONENT_NAME),
        pageCount = _usePaginationClasses.pageCount,
        CLASS_MAP = _objectWithoutProperties$1(_usePaginationClasses, _excluded$4);
      var _useMoreAction = useMoreAction(props2, pageCount, innerCurrent),
        prevMore = _useMoreAction.prevMore,
        isPrevMoreShow = _useMoreAction.isPrevMoreShow,
        curPageLeftCount = _useMoreAction.curPageLeftCount,
        nextMore = _useMoreAction.nextMore,
        isNextMoreShow = _useMoreAction.isNextMoreShow,
        curPageRightCount = _useMoreAction.curPageRightCount;
      var jumpIndex = Vue.ref(innerCurrent.value);
      var isFolded = Vue.computed(function () {
        return pageCount.value > props2.maxPageBtn;
      });
      var sizeOptions = Vue.computed(function () {
        var pageSizeOptions = props2.pageSizeOptions;
        var options = pageSizeOptions.map(function (option) {
          return isObject(option) ? option : {
            label: t(globalConfig.value.itemsPerPage, {
              size: option
            }),
            value: Number(option)
          };
        });
        return options.sort(function (a, b) {
          return a.value - b.value;
        });
      });
      var isMidEllipsis = Vue.computed(function () {
        return props2.pageEllipsisMode === "mid";
      });
      var pages = Vue.computed(function () {
        var array = [];
        var start;
        var end;
        if (isFolded.value) {
          if (isPrevMoreShow.value && isNextMoreShow.value) {
            start = innerCurrent.value - curPageLeftCount.value;
            end = innerCurrent.value + curPageRightCount.value;
          } else {
            var foldedStart = isMidEllipsis.value ? 2 : 1;
            var foldedEnd = isMidEllipsis.value ? pageCount.value - 1 : pageCount.value;
            if (isPrevMoreShow.value) {
              start = Math.min(innerCurrent.value - 1, pageCount.value - props2.foldedMaxPageBtn + 1);
            } else {
              start = foldedStart;
            }
            if (isNextMoreShow.value) {
              end = Math.max(innerCurrent.value + 1, props2.foldedMaxPageBtn);
            } else {
              end = foldedEnd;
            }
          }
        } else {
          start = 1;
          end = pageCount.value;
        }
        for (var i = start; i <= end; i++) {
          array.push(i);
        }
        return array;
      });
      Vue.watch(function () {
        return pageCount.value;
      }, function () {
        if (innerCurrent.value > pageCount.value) innerCurrent.value = 1;
      });
      Vue.watch(function () {
        return innerCurrent.value;
      }, function (val) {
        return jumpIndex.value = val;
      });
      var toPage = function toPage(pageIndex, pageInfo) {
        if (props2.disabled) {
          return;
        }
        var current2 = pageIndex;
        if (pageIndex < min) {
          current2 = min;
        } else if (pageIndex > pageCount.value) {
          current2 = pageCount.value;
        }
        if (innerCurrent.value !== current2) {
          var prev = innerCurrent.value;
          pageInfo = pageInfo || {
            current: current2,
            previous: prev,
            pageSize: innerPageSize.value
          };
          if (pageInfo) {
            var _props2$onChange;
            setInnerCurrent(current2, pageInfo);
            (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 || _props2$onChange.call(props2, pageInfo);
          } else {
            emit("update:modelValue", current2);
          }
        }
      };
      var handlePageChange = function handlePageChange(type) {
        var pageChangeMap = {
          prevPage: function prevPage() {
            return toPage(innerCurrent.value - 1);
          },
          nextPage: function nextPage() {
            return toPage(innerCurrent.value + 1);
          },
          prevMorePage: function prevMorePage() {
            return toPage(Math.max(2, innerCurrent.value - props2.foldedMaxPageBtn));
          },
          nextMorePage: function nextMorePage() {
            return toPage(Math.min(innerCurrent.value + props2.foldedMaxPageBtn, pageCount.value - 1));
          }
        };
        pageChangeMap[type]();
      };
      var onSelectorChange = function onSelectorChange(e) {
        if (props2.disabled) {
          return;
        }
        var pageSize2 = parseInt(e, 10);
        var pageCount2 = 1;
        if (pageSize2 > 0) {
          pageCount2 = Math.max(Math.ceil(props2.total / pageSize2), 1);
        }
        var isIndexChange = false;
        if (innerCurrent.value > pageCount2) {
          isIndexChange = true;
        }
        var pageInfo = {
          current: isIndexChange ? pageCount2 : innerCurrent.value,
          previous: innerCurrent.value,
          pageSize: pageSize2
        };
        setInnerPageSize(pageSize2, pageInfo);
        if (isIndexChange) {
          toPage(pageCount2, pageInfo);
        } else {
          var _props2$onChange2;
          (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 || _props2$onChange2.call(props2, pageInfo);
        }
      };
      var onJumperChange = function onJumperChange(val) {
        var currentIndex = Math.trunc(+val);
        if (isNaN$1(currentIndex)) return;
        jumpIndex.value = currentIndex;
        toPage(currentIndex);
      };
      return function () {
        var total = props2.total,
          pageSizeOptions = props2.pageSizeOptions,
          size = props2.size,
          disabled = props2.disabled,
          showPageSize = props2.showPageSize;
        if (pageCount.value < 1) return null;
        var Jumper = Vue.createVNode("div", {
          "class": CLASS_MAP.jumperClass.value
        }, [t(globalConfig.value.jumpTo), Vue.createVNode(InputAdornment, {
          "append": "/ ".concat(pageCount.value, " ").concat(t(globalConfig.value.page))
        }, {
          "default": function _default() {
            return [Vue.createVNode(InputNumber, {
              "class": CLASS_MAP.jumperInputClass.value,
              "modelValue": jumpIndex.value,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return jumpIndex.value = $event;
              },
              "onBlur": onJumperChange,
              "onEnter": onJumperChange,
              "max": pageCount.value,
              "min": min,
              "size": size,
              "disabled": disabled,
              "theme": "normal",
              "placeholder": ""
            }, null)];
          }
        })]);
        return Vue.createVNode("div", {
          "class": CLASS_MAP.paginationClass.value
        }, [renderTNodeJSX("totalContent", Vue.createVNode("div", {
          "class": CLASS_MAP.totalClass.value
        }, [t(globalConfig.value.total, total)])), showPageSize && pageSizeOptions.length > 0 && Vue.createVNode(Select, Vue.mergeProps({
          "size": size,
          "value": innerPageSize,
          "disabled": disabled,
          "class": CLASS_MAP.sizerClass.value,
          "autoWidth": true,
          "onChange": onSelectorChange,
          "options": sizeOptions.value
        }, props2.selectProps), null), props2.showFirstAndLastPageBtn ? Vue.createVNode("div", {
          "class": CLASS_MAP.preBtnClass.value,
          "onClick": function onClick() {
            return toPage(1);
          }
        }, [Vue.createVNode(PageFirstIcon, null, null)]) : null, props2.showPreviousAndNextBtn ? Vue.createVNode("div", {
          "class": CLASS_MAP.preBtnClass.value,
          "onClick": function onClick() {
            return handlePageChange("prevPage");
          }
        }, [Vue.createVNode(ChevronLeftIcon, null, null)]) : null, props2.showPageNumber && props2.theme === "default" ? Vue.createVNode("ul", {
          "class": CLASS_MAP.btnWrapClass.value
        }, [isFolded.value && isMidEllipsis.value && Vue.createVNode("li", {
          "class": CLASS_MAP.getButtonClass(1),
          "onClick": function onClick() {
            return toPage(min);
          }
        }, [min]), isFolded.value && isPrevMoreShow.value && isMidEllipsis.value ? Vue.createVNode("li", {
          "class": CLASS_MAP.btnMoreClass.value,
          "onClick": function onClick() {
            return handlePageChange("prevMorePage");
          },
          "onMouseover": function onMouseover() {
            return prevMore.value = true;
          },
          "onMouseout": function onMouseout() {
            return prevMore.value = false;
          }
        }, [prevMore.value ? Vue.createVNode(ChevronLeftDoubleIcon, null, null) : Vue.createVNode(EllipsisIcon, null, null)]) : null, pages.value.map(function (i) {
          return Vue.createVNode("li", {
            "class": CLASS_MAP.getButtonClass(i),
            "key": i,
            "onClick": function onClick() {
              return toPage(i);
            }
          }, [i]);
        }), isFolded.value && isNextMoreShow.value && isMidEllipsis.value ? Vue.createVNode("li", {
          "class": CLASS_MAP.btnMoreClass.value,
          "onClick": function onClick() {
            return handlePageChange("nextMorePage");
          },
          "onMouseover": function onMouseover() {
            return nextMore.value = true;
          },
          "onMouseout": function onMouseout() {
            return nextMore.value = false;
          }
        }, [nextMore.value ? Vue.createVNode(ChevronRightDoubleIcon, null, null) : Vue.createVNode(EllipsisIcon, null, null)]) : null, isFolded.value && isMidEllipsis.value ? Vue.createVNode("li", {
          "class": CLASS_MAP.getButtonClass(pageCount.value),
          "onClick": function onClick() {
            return toPage(pageCount.value);
          }
        }, [pageCount.value]) : null]) : null, props2.theme === "simple" && Jumper, props2.showPreviousAndNextBtn ? Vue.createVNode("div", {
          "class": CLASS_MAP.nextBtnClass.value,
          "onClick": function onClick() {
            return handlePageChange("nextPage");
          }
        }, [Vue.createVNode(ChevronRightIcon, null, null)]) : null, props2.showFirstAndLastPageBtn ? Vue.createVNode("div", {
          "class": CLASS_MAP.nextBtnClass.value,
          "onClick": function onClick() {
            return toPage(pageCount.value);
          }
        }, [Vue.createVNode(PageLastIcon, null, null)]) : null, props2.theme === "default" && props2.showJumper && Jumper]);
      };
    }
  });

  var props$U = {
    disabled: {
      type: [Boolean, Object]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    showCurrent: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tips: {
      type: Object
    },
    variant: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "outline"].includes(val);
      }
    },
    onChange: Function
  };

  function _isSlot$u(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _PaginationMini = Vue.defineComponent({
    name: "TPaginationMini",
    props: props$U,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("pagination-mini");
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: TdChevronLeftIcon,
          RoundIcon: TdRoundIcon,
          ChevronRightIcon: TdChevronRightIcon,
          ChevronUpIcon: TdChevronUpIcon,
          ChevronDownIcon: TdChevronDownIcon
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        RoundIcon = _useGlobalIcon.RoundIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronUpIcon = _useGlobalIcon.ChevronUpIcon,
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;
      var titleConfig = Vue.computed(function () {
        if (isObject(props2.tips)) return props2.tips;
        if (props2.tips === true) return {
          prev: "\u4E0A\u4E00\u9875",
          current: "\u5F53\u524D",
          next: "\u4E0B\u4E00\u9875"
        };
        return {};
      });
      var disabledConfig = Vue.computed(function () {
        if (isObject(props2.disabled)) return props2.disabled;
        if (props2.disabled === true) return {
          prev: true,
          current: true,
          next: true
        };
        return {
          prev: false,
          current: false,
          next: false
        };
      });
      var renderWithTooltip = function renderWithTooltip(content, node) {
        if (!content) return node;
        return Vue.createVNode(Tooltip, {
          "content": content,
          "showArrow": false
        }, _isSlot$u(node) ? node : {
          "default": function _default() {
            return [node];
          }
        });
      };
      return function () {
        var jumperClass = [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--outline"), props2.variant === "outline")];
        return Vue.createVNode("div", {
          "class": jumperClass
        }, [renderWithTooltip(titleConfig.value.prev, Vue.createVNode(Button, {
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange;
            return (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, {
              e: e,
              trigger: "prev"
            });
          },
          "icon": props2.layout === "horizontal" ? function () {
            return Vue.createVNode(ChevronLeftIcon, null, null);
          } : function () {
            return Vue.createVNode(ChevronUpIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__prev"),
          "disabled": disabledConfig.value.prev
        }, null)), props2.showCurrent && renderWithTooltip(titleConfig.value.current, Vue.createVNode(Button, {
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange2;
            return (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, {
              e: e,
              trigger: "current"
            });
          },
          "icon": function icon() {
            return Vue.createVNode(RoundIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__current"),
          "disabled": disabledConfig.value.current
        }, null)), renderWithTooltip(titleConfig.value.next, Vue.createVNode(Button, {
          "variant": props2.variant,
          "size": props2.size,
          "shape": "square",
          "onClick": function onClick(e) {
            var _props2$onChange3;
            return (_props2$onChange3 = props2.onChange) === null || _props2$onChange3 === void 0 ? void 0 : _props2$onChange3.call(props2, {
              e: e,
              trigger: "next"
            });
          },
          "icon": props2.layout === "horizontal" ? function () {
            return Vue.createVNode(ChevronRightIcon, null, null);
          } : function () {
            return Vue.createVNode(ChevronDownIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__next"),
          "disabled": disabledConfig.value.next
        }, null))]);
      };
    }
  });

  var Pagination = withInstall$1(_Pagination);
  var PaginationMini = withInstall$1(_PaginationMini);

  var props$T = {
    current: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultCurrent: {
      type: [String, Number]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    options: {
      type: Array
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    separator: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        if (!val) return true;
        return ["line", "dashed", "arrow"].includes(val);
      }
    },
    sequence: {
      type: String,
      "default": "positive",
      validator: function validator(val) {
        if (!val) return true;
        return ["positive", "reverse"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    },
    onChange: Function
  };

  var stepItemProps = {
    content: {
      type: [String, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    extra: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "process", "finish", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  function ownKeys$1I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _StepItem = Vue.defineComponent({
    name: "TStepItem",
    props: _objectSpread$1H(_objectSpread$1H({}, stepItemProps), {}, {
      index: Number
    }),
    setup: function setup(props2) {
      var stepsState = Vue.inject("StepsState", void 0);
      var stepsProps = Vue.inject("StepsProps", void 0);
      var _useConfig = useConfig("steps"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CheckIcon: CheckIcon,
          CloseIcon: TdCloseIcon
        }),
        CheckIcon$1 = _useGlobalIcon.CheckIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var canClick = Vue.computed(function () {
        return props2.status !== "process" && !(stepsProps !== null && stepsProps !== void 0 && stepsProps.readonly);
      });
      var onStepClick = function onStepClick(e) {
        if (!canClick.value) return;
        var val = props2.value === void 0 ? props2.index : props2.value;
        stepsState.setCurrent(val, stepsState.current, {
          e: e
        });
      };
      var COMPONENT_NAME = usePrefixClass("steps-item");
      var statusClass = Vue.computed(function () {
        return _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--").concat(props2.status), props2.status);
      });
      var baseClass = Vue.computed(function () {
        return [COMPONENT_NAME.value, statusClass.value];
      });
      var iconClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__icon"), statusClass.value];
      });
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var renderIcon = function renderIcon() {
        var defaultIcon;
        if (stepsProps.theme === "default") {
          var icon = "";
          switch (props2.status) {
            case "finish":
              if (isFunction(globalConfig.value.checkIcon)) {
                icon = globalConfig.value.checkIcon(Vue.h);
              } else {
                icon = Vue.createVNode(CheckIcon$1, null, null);
              }
              break;
            case "error":
              if (isFunction(globalConfig.value.errorIcon)) {
                icon = globalConfig.value.errorIcon(Vue.h);
              } else {
                icon = Vue.createVNode(CloseIcon, null, null);
              }
              break;
            default:
              icon = String(props2.index + 1);
              break;
          }
          defaultIcon = Vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__icon--number")
          }, [icon]);
        }
        return renderTNodeJSX("icon", defaultIcon);
      };
      return function () {
        return Vue.createVNode("div", {
          "class": baseClass.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(canClick.value ? "".concat(COMPONENT_NAME.value, "--clickable") : ""),
          "onClick": onStepClick
        }, [Vue.createVNode("div", {
          "class": iconClass.value
        }, [renderIcon()]), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNodeJSX("title")]), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description")
        }, [renderContent("default", "content")]), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__extra")
        }, [renderTNodeJSX("extra")])])])]);
      };
    }
  });

  var _Steps = Vue.defineComponent({
    name: "TSteps",
    props: props$T,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("steps");
      var _toRefs = Vue.toRefs(props2),
        current = _toRefs.current,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      Vue.provide("StepsState", Vue.reactive({
        current: innerCurrent,
        setCurrent: setInnerCurrent
      }));
      Vue.provide("StepsProps", props2);
      var indexMap = Vue.ref({});
      var handleStatus = function handleStatus(itemProps, index) {
        if (itemProps.status && itemProps.status !== "default") return itemProps.status;
        if (innerCurrent.value === "FINISH") return "finish";
        if (itemProps.value === void 0 && index < Number(innerCurrent.value)) return "finish";
        if (itemProps.value !== void 0) {
          var matchIndex = Number(indexMap.value[innerCurrent.value]);
          if (matchIndex === void 0) {
            console.warn("TDesign Steps Warn: The current `value` is not exist.");
            return "default";
          }
          if (props2.sequence === "positive" && index < matchIndex) return "finish";
          if (props2.sequence === "reverse" && index > matchIndex) return "finish";
        }
        var key = itemProps.value === void 0 ? index : itemProps.value;
        if (key === innerCurrent.value) return "process";
        return "default";
      };
      var getChildComponentByName = useChildComponentSlots();
      var getOptionListBySlots = function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 || nodes.forEach(function (node) {
          var option = (node === null || node === void 0 ? void 0 : node.props) || {};
          var children = node === null || node === void 0 ? void 0 : node.children;
          if (!option && !children) return;
          if (children && isObject(children)) {
            for (var key in children) {
              if (key in stepItemProps && !option[key]) {
                option[key] = children[key];
              }
            }
          }
          props2.sequence === "reverse" ? arr.unshift(option) : arr.push(option);
        });
        return arr;
      };
      var getOptions = function getOptions() {
        var _props2$options;
        var options;
        if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
          options = props2.sequence === "reverse" ? props2.options.slice().reverse() : props2.options;
        } else {
          var nodes = getChildComponentByName("StepItem");
          options = getOptionListBySlots(nodes);
        }
        (options || []).forEach(function (item, index) {
          if (item.value !== void 0) indexMap.value[item.value] = index;
        });
        return options;
      };
      var renderContent = function renderContent() {
        var options = getOptions();
        return options.map(function (item, index) {
          var stepIndex = props2.sequence === "reverse" ? options.length - index - 1 : index;
          index = item.value !== void 0 ? index : stepIndex;
          return Vue.createVNode(_StepItem, Vue.mergeProps(item, {
            "index": stepIndex,
            "status": handleStatus(item, index),
            "key": item.value || index
          }), null);
        });
      };
      var handleTheme = function handleTheme() {
        var theme = props2.theme;
        var options = getOptions();
        options.forEach(function (item) {
          if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
            theme = "default";
          }
        });
        return theme;
      };
      var baseClass = Vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.layout), "".concat(COMPONENT_NAME.value, "--").concat(handleTheme(), "-anchor"), "".concat(COMPONENT_NAME.value, "--").concat(props2.sequence), "".concat(COMPONENT_NAME.value, "--").concat(props2.separator, "-separator")];
      });
      return function () {
        return Vue.createVNode("div", {
          "class": baseClass.value
        }, [renderContent()]);
      };
    }
  });

  var Steps = withInstall$1(_Steps);
  var StepItem = withInstall$1(_StepItem);

  var props$S = {
    list: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    offset: {
      type: Array
    },
    placement: {
      type: String,
      "default": "right-bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["right-top", "right-center", "right-bottom", "left-top", "left-center", "left-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        if (!val) return true;
        return ["square", "round"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "compact"].includes(val);
      }
    },
    width: {
      type: [String, Number]
    },
    onClick: Function,
    onHover: Function
  };

  var stickyItemProps = {
    icon: {
      type: Function
    },
    label: {
      type: [String, Function]
    },
    popup: {
      type: [String, Function]
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click"].includes(val);
      }
    }
  };

  function ownKeys$1H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _StickyItem = Vue.defineComponent({
    name: "TStickyItem",
    props: _objectSpread$1G(_objectSpread$1G({}, stickyItemProps), {}, {
      type: props$S.type,
      shape: props$S.shape,
      placement: props$S.placement,
      basePopupProps: Object,
      baseWidth: props$S.width,
      onClick: props$S.onClick,
      onHover: props$S.onHover
    }),
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("sticky-item");
      var baseClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props.type), "".concat(COMPONENT_NAME.value, "--").concat(props.shape)];
      });
      var labelClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__label")];
      });
      var popupPlacement = Vue.computed(function () {
        return props.placement.indexOf("right") !== -1 ? "left" : "right";
      });
      var styles = Vue.computed(function () {
        var styles2 = {};
        if (props.baseWidth) {
          var selfWidth = props.type === "normal" ? "56px" : "40px";
          styles2.margin = "calc((".concat(props.baseWidth, " - ").concat(selfWidth, ")/2)");
        }
        return styles2;
      });
      var handleClickItem = function handleClickItem(e) {
        var item = {};
        Object.keys(stickyItemProps).forEach(function (i) {
          return item[i] = props[i];
        });
        props.onClick({
          e: e,
          item: item
        });
      };
      var handleHoverItem = function handleHoverItem(e) {
        var item = {};
        Object.keys(stickyItemProps).forEach(function (i) {
          return item[i] = props[i];
        });
        props.onHover({
          e: e,
          item: item
        });
      };
      var renderTNodeJSX = useTNodeJSX();
      var popupProps = Object.assign({
        hideEmptyPopup: true
      }, props.basePopupProps, props.popupProps);
      return function () {
        return Vue.createVNode(Popup, Vue.mergeProps({
          "overlayInnerClassName": "".concat(usePrefixClass("sticky-tool").value, "-popup-content"),
          "trigger": props.trigger,
          "placement": popupPlacement.value,
          "content": function content() {
            return renderTNodeJSX("popup");
          }
        }, popupProps), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": baseClass.value,
              "style": styles.value,
              "onClick": handleClickItem,
              "onMouseenter": handleHoverItem
            }, [renderTNodeJSX("icon"), props.type === "normal" ? Vue.createVNode("div", {
              "class": labelClass.value
            }, [renderTNodeJSX("label")]) : null])];
          }
        });
      };
    }
  });

  function ownKeys$1G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _StickyTool = Vue.defineComponent({
    name: "TStickyTool",
    props: props$S,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("sticky-tool");
      var classes = Vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.shape)];
      });
      var styles = Vue.computed(function () {
        var styles2 = getOffset();
        if (props2.width) styles2.width = typeof props2.width === "number" ? "".concat(props2.width, "px") : props2.width;
        return styles2;
      });
      var getChildComponentByName = useChildComponentSlots();
      var getList = function getList() {
        var _props2$list;
        var list;
        if ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length) {
          list = props2.list;
        } else {
          var nodes = getChildComponentByName("StickyItem");
          list = getListBySlots(nodes);
        }
        return list;
      };
      var getListBySlots = function getListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 || nodes.forEach(function (node) {
          var list = (node === null || node === void 0 ? void 0 : node.props) || {};
          var children = node === null || node === void 0 ? void 0 : node.children;
          if (!list && !children) return;
          if (children && isObject(children)) {
            for (var key in children) {
              if (key in stickyItemProps && !list[key]) {
                list[key] = children[key];
              }
            }
          }
          arr.push(list);
        });
        return arr;
      };
      var getOffset = function getOffset() {
        var _props2$offset;
        var position = props2.offset ? [80, 24] : ["80px", "24px"];
        (_props2$offset = props2.offset) === null || _props2$offset === void 0 || _props2$offset.forEach(function (item, index) {
          position[index] = isNaN(Number(item)) ? "calc( ".concat(position[index], "px + ").concat(item, ")") : "".concat(position[index] + item, "px");
        });
        var offsetStyle = {};
        props2.placement.split("-").forEach(function (item, index) {
          if (item !== "center") {
            offsetStyle[item] = position[index];
          } else {
            offsetStyle.top = "50%";
            offsetStyle.transform = "translate(0, -50%)";
          }
        });
        return offsetStyle;
      };
      var handleClick = function handleClick(context) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, context);
      };
      var handleHover = function handleHover(context) {
        var _props2$onHover;
        (_props2$onHover = props2.onHover) === null || _props2$onHover === void 0 || _props2$onHover.call(props2, context);
      };
      var renderContent = function renderContent() {
        var list = getList();
        var content = list.map(function (item, index) {
          var type = props2.type,
            shape = props2.shape,
            placement = props2.placement,
            popupProps = props2.popupProps;
          var itemProps = _objectSpread$1F(_objectSpread$1F({}, item), {}, {
            type: type,
            shape: shape,
            placement: placement,
            basePopupProps: popupProps,
            baseWidth: styles.value.width,
            onClick: handleClick,
            onHover: handleHover
          });
          return Vue.createVNode(_StickyItem, Vue.mergeProps(itemProps, {
            "key": index
          }), null);
        });
        return content;
      };
      return function () {
        return Vue.createVNode("div", {
          "class": classes.value,
          "style": styles.value
        }, [renderContent()]);
      };
    }
  });

  var StickyItem = withInstall$1(_StickyItem);
  var StickyTool = withInstall$1(_StickyTool);

  var props$R = {
    container: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 200
    },
    offset: {
      type: Array,
      "default": function _default() {
        return ["24px", "80px"];
      }
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        if (!val) return true;
        return ["circle", "square"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "small"].includes(val);
      }
    },
    target: {
      type: [String, Function],
      "default": "body"
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "primary", "dark"].includes(val);
      }
    },
    visibleHeight: {
      type: [String, Number],
      "default": "200px"
    },
    onClick: Function
  };

  var _BackTop = Vue.defineComponent({
    name: "TBackTop",
    props: props$R,
    setup: function setup(props2) {
      var visible = Vue.ref(false);
      var containerRef = Vue.ref(null);
      var componentName = usePrefixClass("back-top");
      var _useConfig = useConfig("alert"),
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          BacktopIcon: TdBackTopIcon
        }),
        BacktopIcon = _useGlobalIcon.BacktopIcon;
      var renderContent = useContent();
      var getContainer = function getContainer(container) {
        if (typeof container === "string" && (typeof document === "undefined" ? "undefined" : _typeof$3(document)) !== void 0) {
          if (container === "body") {
            return document;
          }
          return document.querySelector(container);
        }
        if (typeof container === "function") {
          return container();
        }
        return null;
      };
      Vue.onMounted(function () {
        containerRef.value = getContainer(props2.container);
        var visibleHeight;
        if (typeof props2.visibleHeight === "string") {
          visibleHeight = Number(props2.visibleHeight.replace("px", ""));
        } else {
          visibleHeight = props2.visibleHeight;
        }
        if (visibleHeight === 0) {
          visible.value = true;
          return;
        }
        var scrollDOM;
        if (containerRef.value.scrollTop === void 0) {
          scrollDOM = document.documentElement;
        } else {
          scrollDOM = containerRef.value;
        }
        containerRef.value.onscroll = function () {
          var _scrollDOM;
          var scrollTop = (_scrollDOM = scrollDOM) === null || _scrollDOM === void 0 ? void 0 : _scrollDOM.scrollTop;
          if (scrollTop >= visibleHeight) {
            visible.value = true;
          }
          if (scrollTop < visibleHeight && visible.value) {
            visible.value = false;
          }
        };
      });
      Vue.onBeforeUnmount(function () {
        containerRef.value.onscroll = null;
      });
      return function () {
        var theme = props2.theme,
          shape = props2.shape,
          size = props2.size,
          target = props2.target,
          duration = props2.duration,
          offset = props2.offset,
          container = props2.container;
        var getChild = useChildSlots();
        var children = getChild();
        if (children.length < 1) children = null;
        var cls = Vue.computed(function () {
          return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, componentName.value, true), "".concat(componentName.value, "--theme-").concat(theme), true), "".concat(componentName.value, "--").concat(shape), true), "".concat(componentName.value, "--show"), visible.value), "".concat(classPrefix.value, "-size-s"), size === "small"), "".concat(classPrefix.value, "-size-m"), size === "medium");
        });
        var defaultContent = Vue.createVNode(Vue.Fragment, null, [Vue.createVNode(BacktopIcon, {
          "class": "".concat(componentName.value, "__icon"),
          "size": "24"
        }, null), Vue.createVNode("span", {
          "class": "".concat(componentName.value, "__text")
        }, [Vue.createTextVNode("TOP")])]);
        var getBackTo = function getBackTo() {
          if (target === container) return 0;
          if (target === "body") return 0;
          if (!target) return 0;
          var targetNode = getContainer(target);
          if (!targetNode) return 0;
          var y = targetNode.getBoundingClientRect().y;
          return y;
        };
        var handleClick = function handleClick(e) {
          var _props2$onClick;
          var y = getBackTo();
          scrollTo(y, {
            container: containerRef.value,
            duration: duration
          });
          (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
            e: e
          });
        };
        var positionStyle = Vue.computed(function () {
          return {
            insetInlineEnd: offset[0],
            insetBlockEnd: offset[1]
          };
        });
        return Vue.createVNode("button", {
          "type": "button",
          "class": cls.value,
          "style": positionStyle.value,
          "onClick": handleClick
        }, [renderContent("content", "default", defaultContent)]);
      };
    }
  });

  var BackTop = withInstall$1(_BackTop);

  var props$Q = {
    autofocus: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: {
      type: Boolean,
      "default": true
    },
    highlightKeyword: {
      type: Boolean,
      "default": true
    },
    inputProps: {
      type: Object
    },
    options: {
      type: Array
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    textareaProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    triggerElement: {
      type: [String, Function]
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onSelect: Function
  };

  var _HighlightOption = Vue.defineComponent({
    name: "HighlightOption",
    props: {
      content: String,
      keyword: String
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var words = Vue.computed(function () {
        var _content$match;
        var content = props.content,
          keyword = props.keyword;
        if (!content) return {
          list: []
        };
        if (!isString(content) || !keyword) return {
          list: [content]
        };
        var regExp = new RegExp(escapeRegExp(keyword), "i");
        var splitKeyword = (_content$match = content.match(regExp)) === null || _content$match === void 0 ? void 0 : _content$match[0];
        return {
          list: content.split(splitKeyword),
          keyword: splitKeyword
        };
      });
      return function () {
        var _words$value = words.value,
          list = _words$value.list,
          keyword = _words$value.keyword;
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-select-option__highlight-item")
        }, [list.map(function (item, index) {
          if (!index) return item;
          return [Vue.createVNode("b", {
            "class": "".concat(classPrefix.value, "-is-highlight"),
            "key": item + keyword
          }, [keyword]), item];
        })]);
      };
    }
  });

  function ownKeys$1F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var AutoCompleteOptionList = Vue.defineComponent({
    name: "AutoCompleteOptionList",
    props: {
      sizeClassNames: Object,
      value: String,
      size: String,
      options: Array,
      popupVisible: Boolean,
      highlightKeyword: Boolean,
      filterable: Boolean,
      filter: Function,
      empty: [String, Function]
    },
    emits: ["select"],
    setup: function setup(props, _ref) {
      var emit = _ref.emit,
        slots = _ref.slots,
        expose = _ref.expose;
      var active = Vue.ref("");
      var classPrefix = usePrefixClass();
      var _useConfig = useConfig("autoComplete"),
        globalConfig = _useConfig.globalConfig;
      var classes = Vue.computed(function () {
        return "".concat(classPrefix.value, "-select__list");
      });
      var optionClasses = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-select-option"), _defineProperty$2({}, props.sizeClassNames.value[props.size], props.size)];
      });
      var tOptions = Vue.computed(function () {
        var options = (props.options || []).map(function (item) {
          var option = {};
          if (isString(item)) {
            option = {
              text: item,
              label: item
            };
          } else {
            if (item.text && !isString(item.text)) {
              log.warn("AutoComplete", "`text` must be a string.");
            }
            if (!item.text) {
              if (isString(item.label)) {
                option = _objectSpread$1E(_objectSpread$1E({}, item), {}, {
                  text: item.label
                });
              } else {
                log.warn("AutoComplete", "one of `label` and `text` must be a existed string.");
              }
            } else {
              option = item;
            }
          }
          return option;
        });
        if (props.filter) {
          options = options.filter(function (option) {
            return props.filter(props.value, option);
          });
        } else if (props.filterable) {
          var regExp = new RegExp(escapeRegExp(props.value), "i");
          options = options.filter(function (item) {
            return regExp.test(item.text);
          });
        }
        return options;
      });
      var onOptionClick = function onOptionClick(e) {
        var liNode = e.target;
        while (liNode && liNode.tagName !== "LI") {
          liNode = liNode.parentNode;
        }
        var keyword = liNode.getAttribute("title");
        active.value = keyword;
        emit("select", keyword, {
          e: e
        });
      };
      var onKeyInnerPress = function onKeyInnerPress(e) {
        if (ARROW_UP_REG.test(e.code) || ARROW_UP_REG.test(e.key)) {
          var _tOptions$value$newIn;
          var index = tOptions.value.findIndex(function (item) {
            return item.text === active.value;
          });
          var newIndex = index - 1 < 0 ? tOptions.value.length - 1 : index - 1;
          active.value = (_tOptions$value$newIn = tOptions.value[newIndex]) === null || _tOptions$value$newIn === void 0 ? void 0 : _tOptions$value$newIn.text;
        } else if (ARROW_DOWN_REG.test(e.code) || ARROW_DOWN_REG.test(e.key)) {
          var _tOptions$value$_newI;
          var _index = tOptions.value.findIndex(function (item) {
            return item.text === active.value;
          });
          var _newIndex = _index + 1 >= tOptions.value.length ? 0 : _index + 1;
          active.value = (_tOptions$value$_newI = tOptions.value[_newIndex]) === null || _tOptions$value$_newI === void 0 ? void 0 : _tOptions$value$_newI.text;
        } else if (ENTER_REG.test(e.code) || ENTER_REG.test(e.key)) {
          if (active.value) {
            emit("select", active.value, {
              e: e
            });
          }
        }
      };
      var addKeyboardListener = function addKeyboardListener() {
        on$1(document, "keydown", onKeyInnerPress);
      };
      var removeKeyboardListener = function removeKeyboardListener() {
        off$1(document, "keydown", onKeyInnerPress);
      };
      expose({
        addKeyboardListener: addKeyboardListener,
        removeKeyboardListener: removeKeyboardListener
      });
      Vue.watch(function () {
        return props.popupVisible;
      }, function () {
        if (props.popupVisible) {
          addKeyboardListener();
        } else {
          removeKeyboardListener();
        }
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return props.value;
      }, function () {
        if (!props.value) {
          active.value = "";
        }
      }, {
        immediate: true
      });
      Vue.onBeforeUnmount(function () {
        removeKeyboardListener();
      });
      return function () {
        if (!tOptions.value.length) {
          return Vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-auto-complete__panel--empty")
          }, [props.empty || globalConfig.value.empty]);
        }
        return Vue.createVNode("ul", {
          "class": classes.value
        }, [tOptions.value.map(function (item) {
          var cls = _toConsumableArray(optionClasses.value);
          if (item.text === active.value) {
            cls.push("".concat(classPrefix.value, "-select-option--hover"));
          }
          var labelNode = item.label;
          if (isFunction(item.label)) {
            labelNode = item.label(Vue.h);
          } else if (slots.option) {
            var _slots$option;
            labelNode = (_slots$option = slots.option) === null || _slots$option === void 0 ? void 0 : _slots$option.call(slots, {
              option: item
            });
          }
          var content = labelNode || item.text;
          return Vue.createVNode("li", {
            "key": item.text,
            "class": cls,
            "title": item.text,
            "onClick": onOptionClick
          }, [isString(content) && props.highlightKeyword ? Vue.createVNode(_HighlightOption, {
            "content": content,
            "keyword": props.value
          }, null) : content]);
        })]);
      };
    }
  });

  function ownKeys$1E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$t(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _AutoComplete = Vue.defineComponent({
    name: "TAutoComplete",
    props: props$Q,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tValue = _useVModel2[0],
        setTValue = _useVModel2[1];
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var _useCommonClassName = useCommonClassName$1(),
        classPrefix = _useCommonClassName.classPrefix,
        SIZE = _useCommonClassName.SIZE;
      var _useConfig = useConfig("input"),
        global = _useConfig.globalConfig;
      var isDisabled = useDisabled();
      var isReadonly = useReadonly();
      var popupVisible = Vue.ref();
      var optionListRef = Vue.ref();
      var getOverlayStyle = function getOverlayStyle(trigger, popupElement) {
        var _props2$popupProps;
        var triggerWidth = trigger.getBoundingClientRect().width || trigger.offsetWidth || trigger.clientWidth;
        var popupWidth = popupElement.getBoundingClientRect().width || popupElement.offsetWidth || popupElement.clientWidth;
        return _objectSpread$1D({
          width: triggerWidth >= popupWidth ? "".concat(triggerWidth, "px") : "auto"
        }, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayInnerStyle);
      };
      var classes = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-auto-complete")];
      });
      var popupClasses = Vue.computed(function () {
        var _props2$popupProps2;
        var classes2 = ["".concat(classPrefix.value, "-select__dropdown")];
        if ((_props2$popupProps2 = props2.popupProps) !== null && _props2$popupProps2 !== void 0 && _props2$popupProps2.overlayClassName) {
          classes2 = classes2.concat(props2.popupProps.overlayClassName);
        }
        return classes2;
      });
      var popupInnerClasses = Vue.computed(function () {
        var _props2$popupProps3;
        var classes2 = ["".concat(classPrefix.value, "-select__dropdown-inner")];
        if ((_props2$popupProps3 = props2.popupProps) !== null && _props2$popupProps3 !== void 0 && _props2$popupProps3.overlayInnerClassName) {
          classes2 = classes2.concat(props2.popupProps.overlayInnerClassName);
        }
        return classes2;
      });
      var onInputChange = function onInputChange(value2, context) {
        setTValue(value2, context);
      };
      var innerInputProps = Vue.computed(function () {
        var tProps = _objectSpread$1D({
          value: tValue.value,
          size: props2.size
        }, props2.inputProps);
        return tProps;
      });
      var onInnerFocus = function onInnerFocus(value2, context) {
        var _props2$onFocus;
        if (isReadonly.value || isDisabled.value) return;
        popupVisible.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, _objectSpread$1D(_objectSpread$1D({}, context), {}, {
          value: value2
        }));
        Vue.nextTick(function () {
          var _optionListRef$value;
          (_optionListRef$value = optionListRef.value) === null || _optionListRef$value === void 0 || _optionListRef$value.addKeyboardListener();
        });
      };
      var onInnerBlur = function onInnerBlur(value2, context) {
        var _props2$onBlur;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, _objectSpread$1D(_objectSpread$1D({}, context), {}, {
          value: value2
        }));
      };
      var onInnerCompositionend = function onInnerCompositionend(value2, context) {
        var _props2$onComposition;
        (_props2$onComposition = props2.onCompositionend) === null || _props2$onComposition === void 0 || _props2$onComposition.call(props2, _objectSpread$1D(_objectSpread$1D({}, context), {}, {
          value: value2
        }));
      };
      var onInnerCompositionstart = function onInnerCompositionstart(value2, context) {
        var _props2$onComposition2;
        (_props2$onComposition2 = props2.onCompositionstart) === null || _props2$onComposition2 === void 0 || _props2$onComposition2.call(props2, _objectSpread$1D(_objectSpread$1D({}, context), {}, {
          value: value2
        }));
      };
      var onInnerEnter = function onInnerEnter(value2, context) {
        var _props2$onEnter;
        (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 || _props2$onEnter.call(props2, _objectSpread$1D(_objectSpread$1D({}, context), {}, {
          value: value2
        }));
      };
      var onInnerSelect = function onInnerSelect(value2, context) {
        var _props2$onSelect;
        if (isReadonly.value || isDisabled.value) return;
        popupVisible.value = false;
        setTValue(value2, context);
        (_props2$onSelect = props2.onSelect) === null || _props2$onSelect === void 0 || _props2$onSelect.call(props2, value2, context);
      };
      var onPopupVisibleChange = function onPopupVisibleChange(visible, _ref2) {
        var trigger = _ref2.trigger;
        if (isReadonly.value || isDisabled.value) return;
        if (trigger !== "trigger-element-click") {
          popupVisible.value = visible;
        }
      };
      return function () {
        var _props2$placeholder;
        var triggerNode = renderContent("default", "triggerElement") || Vue.createVNode(Input, Vue.mergeProps({
          "borderless": props2.borderless,
          "placeholder": (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global.value.placeholder,
          "tips": props2.tips,
          "status": props2.status,
          "readonly": isReadonly.value,
          "disabled": isDisabled.value,
          "autofocus": props2.autofocus,
          "clearable": props2.clearable,
          "onChange": onInputChange,
          "onFocus": onInnerFocus,
          "onBlur": onInnerBlur,
          "onClear": props2.onClear,
          "onCompositionend": onInnerCompositionend,
          "onCompositionstart": onInnerCompositionstart,
          "onEnter": onInnerEnter
        }, innerInputProps.value), slots);
        var listContent = Array.isArray(props2.options) && Vue.createVNode(AutoCompleteOptionList, {
          "ref": optionListRef,
          "value": tValue.value,
          "options": props2.options,
          "size": props2.size,
          "sizeClassNames": SIZE,
          "onSelect": onInnerSelect,
          "popupVisible": popupVisible.value,
          "highlightKeyword": props2.highlightKeyword,
          "filterable": props2.filterable,
          "filter": props2.filter,
          "empty": renderTNodeJSX("empty")
        }, {
          option: slots.option
        });
        var topContent = renderTNodeJSX("panelTopContent");
        var bottomContent = renderTNodeJSX("panelBottomContent");
        var panelContent = topContent || listContent || bottomContent ? Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-auto-complete__panel")
        }, [topContent, listContent, bottomContent]) : null;
        var popupProps = _objectSpread$1D(_objectSpread$1D({}, props2.popupProps), {}, {
          overlayInnerStyle: getOverlayStyle,
          overlayInnerClassName: popupInnerClasses.value,
          overlayClassName: popupClasses.value
        });
        return Vue.createVNode("div", {
          "class": classes.value
        }, [Vue.createVNode(Popup, Vue.mergeProps({
          "visible": popupVisible.value,
          "onVisibleChange": onPopupVisibleChange,
          "trigger": "focus",
          "placement": "bottom-left",
          "hideEmptyPopup": true,
          "content": panelContent ? function () {
            return panelContent;
          } : null
        }, popupProps), _isSlot$t(triggerNode) ? triggerNode : {
          "default": function _default() {
            return [triggerNode];
          }
        })]);
      };
    }
  });

  var AutoComplete = withInstall$1(_AutoComplete);
  var HighlightOption = withInstall$1(_HighlightOption);

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$2({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      value = cascaderContext.value,
      max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    if (!multiple && !checkStrictly && !isLeaf) {
      isSelected = node.expanded;
    }
    return [_defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.selected, !isDisabled && isSelected), STATUS.expanded, !isDisabled && expandedActive), STATUS.disabled, isDisabled)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], _defineProperty$2(_defineProperty$2({}, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), "".concat(prefix, "-cascader__item--leaf"), node.isLeaf())]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon"), "".concat(prefix, "-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    if (multiple || value !== 0 && !value) return "";
    if (isArray$1(value)) return "";
    var node = treeStore && treeStore.getNodes(value);
    if (!(node && node.length)) {
      return value;
    }
    var path = node && node[0].getPath();
    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path.at(-1).label;
    }
    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !isArray$1(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var _node2$;
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2[0]) : (_node2$ = node2[0]) === null || _node2$ === void 0 ? void 0 : _node2$.label;
    }).filter(function (item) {
      return !!item;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
    return node === null || node === void 0 ? void 0 : node.getPath().map(function (node2) {
      return node2.label;
    }).join(separator);
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];
    if (isArray$1(value)) {
      if (value.length > 0 && isObject(value[0])) {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (!isEmptyValues(value)) {
      if (isObject(value)) {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }
    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }
    var val = value;
    if (multiple) {
      return val.map(function (item) {
        return item.at(-1);
      });
    }
    return val.at(-1);
  };
  function isEmptyValues(value) {
    if (isNumber(value) && !isNaN(value)) return false;
    return isEmpty(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
      showAllLevels = cascaderContext.showAllLevels,
      valueType = cascaderContext.valueType;
    return multiple && !isArray$1(value) || !multiple && isArray$1(value) && valueType === "single" && !showAllLevels;
  }

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
      multiple = cascaderContext.multiple,
      treeStore = cascaderContext.treeStore,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      setTreeNodes = cascaderContext.setTreeNodes,
      setExpend = cascaderContext.setExpend,
      value = cascaderContext.value,
      max = cascaderContext.max,
      valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;
    if (propsTrigger === trigger) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);
      if (multiple) {
        setExpend(expanded);
      }
    }
    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);
      var _checked = _slicedToArray(checked, 1),
        value2 = _checked[0];
      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());
      if (!checkStrictly || propsTrigger === "hover") {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
      max = cascaderContext.max,
      inputVal = cascaderContext.inputVal,
      multiple = cascaderContext.multiple,
      setVisible = cascaderContext.setVisible,
      setValue = cascaderContext.setValue,
      treeNodes = cascaderContext.treeNodes,
      treeStore = cascaderContext.treeStore,
      valueType = cascaderContext.valueType;
    if (!node || disabled || node.disabled) {
      return;
    }
    var checked = node.setChecked(!node.isChecked());
    if (isNumber(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }
    if (checked.length > max && isNumber(max) && max > 0) {
      return;
    }
    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }
    if (!multiple) {
      setVisible(false, {});
    }
    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });
    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, node.checked ? "uncheck" : "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
      multiple = cascaderContext.multiple,
      setValue = cascaderContext.setValue;
    setVisible(false, {});
    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
      setValue = cascaderContext.setValue,
      value = cascaderContext.value,
      valueType = cascaderContext.valueType,
      treeStore = cascaderContext.treeStore;
    if (disabled) return;
    if (index !== void 0) {
      var newValue = cloneDeep(value);
      var res = newValue.splice(index, 1);
      var node = treeStore.getNodes(res[0])[0];
      var checked = node.setChecked(!node.isChecked());
      var resValue = valueType === "single" ? checked : checked.map(function (val) {
        return treeStore.getNode(val).getPath().map(function (item) {
          return item.value;
        });
      });
      setValue(resValue, "uncheck", node.getModel());
      if (isFunction(onRemove)) {
        onRemove({
          value: checked,
          node: node
        });
      }
    } else {
      if (isFunction(onRemove)) {
        onRemove({
          value: value,
          node: void 0
        });
      }
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
    if (!treeStore) return;
    var nodes = [];
    if (inputVal) {
      var filterMethods = function filterMethods(node) {
        if (!node.isLeaf()) return;
        if (isFunction(filter)) {
          return filter("".concat(inputVal), node);
        }
        var fullPathLabel = getFullPathLabel(node, "");
        return fullPathLabel.indexOf("".concat(inputVal)) > -1;
      };
      nodes = treeStore.nodes.filter(filterMethods);
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }
    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;
    if (isArray$1(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();
      var _treeValue = _slicedToArray(treeValue, 1),
        val = _treeValue[0];
      if (!isEmptyValues(val)) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);
        if (!node) {
          treeStore.refreshNodes();
          return;
        }
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      }
    }
    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }
    treeStore.refreshNodes();
  };

  function _isSlot$s(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var props$P = {
    node: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    optionChild: {
      type: [Object, Array]
    },
    cascaderContext: {
      type: Object
    },
    onChange: Function,
    onClick: Function,
    onMouseenter: Function
  };
  var Item = Vue.defineComponent({
    name: "TCascaderItem",
    props: props$P,
    setup: function setup(props2) {
      var liRef = Vue.ref();
      useRipple(liRef);
      var COMPONENT_NAME = usePrefixClass("cascader__item");
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: TdChevronRightIcon
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var itemClass = Vue.computed(function () {
        return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
      });
      var iconClass = Vue.computed(function () {
        return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
      });
      function RenderLabelInner(node, cascaderContext) {
        var inputVal = cascaderContext.inputVal;
        var labelText = inputVal ? getFullPathLabel(node) : node.label;
        if (inputVal) {
          var texts = labelText.split(inputVal);
          var doms = [];
          for (var index = 0; index < texts.length; index++) {
            doms.push(Vue.createVNode("span", {
              "key": index
            }, [texts[index]]));
            if (index === texts.length - 1) break;
            doms.push(Vue.createVNode("span", {
              "key": "".concat(index, "filter"),
              "class": "".concat(COMPONENT_NAME.value, "-label--filter")
            }, [inputVal]));
          }
          return doms;
        }
        return labelText;
      }
      var renderTitle = function renderTitle(node) {
        if (typeof node.label === "string") return node.label;
        return null;
      };
      function RenderLabelContent(node, cascaderContext) {
        var label = RenderLabelInner(node, cascaderContext);
        var labelCont = Vue.createVNode("span", {
          "title": cascaderContext.inputVal ? getFullPathLabel(node) : renderTitle(node),
          "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
          "role": "label"
        }, [label]);
        return labelCont;
      }
      function RenderCheckBox(node, cascaderContext) {
        var checkProps = cascaderContext.checkProps,
          value = cascaderContext.value,
          max = cascaderContext.max,
          inputVal = cascaderContext.inputVal;
        var label = RenderLabelInner(node, cascaderContext);
        return Vue.createVNode(Checkbox, Vue.mergeProps({
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled() || value.length >= max && max !== 0,
          "name": String(node.value),
          "stopLabelTrigger": !!node.children,
          "title": inputVal ? getFullPathLabel(node) : renderTitle(node),
          "onChange": function onChange() {
            props2.onChange();
          }
        }, checkProps), _isSlot$s(label) ? label : {
          "default": function _default() {
            return [label];
          }
        });
      }
      return function () {
        var cascaderContext = props2.cascaderContext,
          node = props2.node,
          optionChild = props2.optionChild;
        var isOptionChildAndMultiple = optionChild && cascaderContext.multiple;
        return Vue.createVNode("li", {
          "ref": liRef,
          "class": itemClass.value,
          "onClick": function onClick() {
            return isOptionChildAndMultiple ? props2.onChange() : props2.onClick();
          },
          "onMouseenter": props2.onMouseenter
        }, [optionChild || (cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext)), node.children && (node.loading ? Vue.createVNode(Loading, {
          "class": iconClass.value,
          "size": "small"
        }, null) : Vue.createVNode(ChevronRightIcon, {
          "class": iconClass.value
        }, null))]);
      };
    }
  });

  var props$O = {
    autofocus: Boolean,
    borderless: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    load: {
      type: Function
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function]
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    option: {
      type: Function
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: Boolean,
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    reserveKeyword: Boolean,
    selectInputProps: {
      type: Object
    },
    showAllLevels: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["large", "medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    trigger: {
      type: String,
      "default": "click",
      validator: function validator(val) {
        if (!val) return true;
        return ["click", "hover"].includes(val);
      }
    },
    value: {
      type: [String, Number, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    valueType: {
      type: String,
      "default": "single",
      validator: function validator(val) {
        if (!val) return true;
        return ["single", "full"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPopupVisibleChange: Function,
    onRemove: Function
  };

  var Panel = Vue.defineComponent({
    name: "TCascaderSubPanel",
    props: {
      option: props$O.option,
      empty: props$O.empty,
      trigger: props$O.trigger,
      onChange: props$O.onChange,
      loading: props$O.loading,
      loadingText: props$O.loadingText,
      cascaderContext: {
        type: Object
      }
    },
    setup: function setup(props) {
      var renderTNodeJSXDefault = useTNodeDefault();
      var COMPONENT_NAME = usePrefixClass("cascader");
      var _useConfig = useConfig("cascader"),
        globalConfig = _useConfig.globalConfig;
      var panels = Vue.computed(function () {
        return getPanels(props.cascaderContext.treeNodes);
      });
      var handleExpand = function handleExpand(node, trigger) {
        var propsTrigger = props.trigger,
          cascaderContext = props.cascaderContext;
        expendClickEffect(propsTrigger, trigger, node, cascaderContext);
      };
      var renderItem = function renderItem(node, index) {
        var optionChild = node.data.content ? getDefaultNode(node.data.content(Vue.h)) : renderTNodeJSXDefault("option", {
          params: {
            item: node.data,
            index: index
          }
        });
        return Vue.createVNode(Item, {
          "key": node.value,
          "node": node,
          "optionChild": optionChild,
          "cascaderContext": props.cascaderContext,
          "onClick": function onClick() {
            handleExpand(node, "click");
          },
          "onMouseenter": function onMouseenter() {
            handleExpand(node, "hover");
          },
          "onChange": function onChange() {
            valueChangeEffect(node, props.cascaderContext);
          }
        }, null);
      };
      var renderList = function renderList(treeNodes) {
        var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        return Vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value, "__menu"), "narrow-scrollbar", _defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__menu--segment"), segment), "".concat(COMPONENT_NAME.value, "__menu--filter"), isFilter)],
          "key": "".concat(COMPONENT_NAME, "__menu").concat(index)
        }, [treeNodes.map(function (node) {
          return renderItem(node, index);
        })]);
      };
      var renderPanels = function renderPanels() {
        var _props$cascaderContex = props.cascaderContext,
          inputVal = _props$cascaderContex.inputVal,
          treeNodes = _props$cascaderContex.treeNodes;
        return inputVal ? renderList(treeNodes, true) : panels.value.map(function (treeNodes2, index) {
          return renderList(treeNodes2, false, index !== panels.value.length - 1, index);
        });
      };
      return function () {
        var content;
        if (props.loading) {
          content = renderTNodeJSXDefault("loadingText", Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
          }, [globalConfig.value.loadingText]));
        } else {
          content = panels.value.length ? renderPanels() : renderTNodeJSXDefault("empty", Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
          }, [globalConfig.value.empty]));
        }
        return Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__panel"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--normal"), panels.value.length && !props.loading)]
        }, [content]);
      };
    }
  });

  function mitt (n) {
    return {
      all: n = n || new Map(),
      on: function on(t, e) {
        var i = n.get(t);
        i ? i.push(e) : n.set(t, [e]);
      },
      off: function off(t, e) {
        var i = n.get(t);
        i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n.set(t, []));
      },
      emit: function emit(t, e) {
        var i = n.get(t);
        i && i.slice().map(function (n) {
          n(e);
        }), (i = n.get("*")) && i.slice().map(function (n) {
          n(t, e);
        });
      }
    };
  }

  var nodeKey = "__tdesign_tree-node__";
  var TreeNodeModel = /*#__PURE__*/function () {
    function TreeNodeModel(node) {
      _classCallCheck(this, TreeNodeModel);
      _defineProperty$2(this, nodeKey, void 0);
      this[nodeKey] = node;
    }
    return _createClass(TreeNodeModel, [{
      key: "value",
      get: function get() {
        var node = this[nodeKey];
        return node.value;
      }
    }, {
      key: "label",
      get: function get() {
        var node = this[nodeKey];
        return node.label;
      }
    }, {
      key: "data",
      get: function get() {
        var node = this[nodeKey];
        return node.data;
      }
    }, {
      key: "actived",
      get: function get() {
        var node = this[nodeKey];
        return node.actived;
      }
    }, {
      key: "expanded",
      get: function get() {
        var node = this[nodeKey];
        return node.expanded;
      }
    }, {
      key: "checked",
      get: function get() {
        var node = this[nodeKey];
        return node.checked;
      }
    }, {
      key: "indeterminate",
      get: function get() {
        var node = this[nodeKey];
        return node.indeterminate;
      }
    }, {
      key: "loading",
      get: function get() {
        var node = this[nodeKey];
        return node.loading;
      }
    }, {
      key: "disabled",
      get: function get() {
        var node = this[nodeKey];
        return node.isDisabled();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var node = this[nodeKey];
        return node.getLevel();
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var node = this[nodeKey];
        return node.getIndex();
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var node = this[nodeKey];
        return node.isFirst();
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var node = this[nodeKey];
        return node.isLast();
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var node = this[nodeKey];
        return node.isLeaf();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var node = this[nodeKey];
        return node.insertBefore(newData);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var node = this[nodeKey];
        return node.insertAfter(newData);
      }
    }, {
      key: "appendData",
      value: function appendData(data) {
        var node = this[nodeKey];
        return node.append(data);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var node = this[nodeKey];
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      }
    }, {
      key: "getParent",
      value: function getParent() {
        var _node$parent;
        var node = this[nodeKey];
        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var node = this[nodeKey];
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var node = this[nodeKey];
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var node = this[nodeKey];
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      }
    }, {
      key: "getChildren",
      value: function getChildren(deep) {
        var node = this[nodeKey];
        var childrenModel = false;
        var children = node.children;
        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (isBoolean(children)) {
          childrenModel = children;
        }
        return childrenModel;
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this[nodeKey];
        if (!value) {
          node.remove();
          return;
        }
        var tree = node.tree;
        var targetNode = tree.getNode(value);
        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }
        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });
        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }
        targetNode.remove();
      }
    }, {
      key: "setData",
      value: function setData(data) {
        var node = this[nodeKey];
        var syncAttrs = ["value", "label", "disabled"];
        var cleanData = omit$1(data, ["children"].concat(syncAttrs));
        var keys = node.tree.config.keys;
        syncAttrs.forEach(function (attr) {
          var dataAttrValue = get(data, (keys === null || keys === void 0 ? void 0 : keys[attr]) || attr);
          if (!isUndefined(dataAttrValue)) cleanData[attr] = dataAttrValue;
        });
        Object.assign(node.data, cleanData);
        Object.assign(node, cleanData);
        node.update();
      }
    }]);
  }();
  function createNodeModel(node) {
    var model = new TreeNodeModel(node);
    return model;
  }

  function ownKeys$1D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1D(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var settableStatus = {
    expandMutex: null,
    activable: null,
    checkable: null,
    draggable: null,
    loading: false
  };
  var settableProps = Object.keys(settableStatus);
  var syncableProps = [].concat(settableProps, ["actived", "expanded", "checked"]);
  var privateKey = "__tdesign_id__";
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      var _this = this;
      _classCallCheck(this, TreeNode);
      _defineProperty$2(this, "tree", void 0);
      _defineProperty$2(this, privateKey, void 0);
      _defineProperty$2(this, "value", void 0);
      _defineProperty$2(this, "label", void 0);
      _defineProperty$2(this, "data", void 0);
      _defineProperty$2(this, "parent", void 0);
      _defineProperty$2(this, "children", void 0);
      _defineProperty$2(this, "model", void 0);
      _defineProperty$2(this, "vmIsLeaf", void 0);
      _defineProperty$2(this, "vmIsFirst", void 0);
      _defineProperty$2(this, "vmIsLast", void 0);
      _defineProperty$2(this, "vmIsRest", void 0);
      _defineProperty$2(this, "vmIsLocked", void 0);
      _defineProperty$2(this, "expanded", void 0);
      _defineProperty$2(this, "expandMutex", void 0);
      _defineProperty$2(this, "actived", void 0);
      _defineProperty$2(this, "activable", void 0);
      _defineProperty$2(this, "checkable", void 0);
      _defineProperty$2(this, "vmCheckable", void 0);
      _defineProperty$2(this, "checked", void 0);
      _defineProperty$2(this, "indeterminate", void 0);
      _defineProperty$2(this, "disabled", void 0);
      _defineProperty$2(this, "draggable", void 0);
      _defineProperty$2(this, "visible", void 0);
      _defineProperty$2(this, "level", void 0);
      _defineProperty$2(this, "loading", void 0);
      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = config.keys || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      var propDisabled = keys.disabled || "disabled";
      this.model = null;
      this.children = null;
      this.level = 0;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = false;
      this.vmIsLocked = false;
      this.visible = false;
      this.actived = false;
      this.checked = false;
      this.indeterminate = false;
      this.loading = false;
      this.expanded = config.expandAll;
      this.activable = null;
      this.checkable = null;
      this.expandMutex = null;
      this.draggable = null;
      this[privateKey] = uniqueId(prefix);
      this.value = isNil(get(data, propValue)) ? this[privateKey] : get(data, propValue);
      var nodeMap = tree.nodeMap,
        privateMap = tree.privateMap;
      if (nodeMap.get(this.value)) {
        log.warn("Tree", "Dulplicate value: ".concat(this.value));
      }
      nodeMap.set(this.value, this);
      privateMap.set(this[privateKey], this);
      this.label = get(data, propLabel) || "";
      this.disabled = get(data, propDisabled) || false;
      var children = data[propChildren];
      if (children === true) {
        this.children = children;
      }
      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }
      syncableProps.forEach(function (prop) {
        if (typeof data[prop] !== "undefined") {
          _this[prop] = data[prop];
        }
      });
      this.initActived();
      this.initExpanded();
      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }
      this.initChecked();
      this.updateChecked();
      this.update();
      tree.reflow(this);
    }
    return _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
          value = this.value,
          parent = this.parent;
        var checkedMap = tree.checkedMap;
        var checkStrictly = tree.config.checkStrictly;
        if (this.checked) {
          checkedMap.set(value, true);
        }
        if (!checkStrictly && parent !== null && parent !== void 0 && parent.checked) {
          checkedMap.set(value, true);
        }
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;
        if (isNumber(config.expandLevel) && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }
        if (this.children === true && config.lazy) {
          expanded = false;
        }
        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }
        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
          actived = this.actived;
        if (actived && this.isActivable()) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this2 = this;
        var list = [];
        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }
        if (list.length <= 0) {
          return;
        }
        if (!Array.isArray(this.children)) {
          this.children = [];
        }
        var children = this.children,
          tree = this.tree;
        list.forEach(function (item) {
          var node = null;
          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this2.tree, _this2);
          } else {
            node = new TreeNode(_this2.tree, item, _this2);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this3 = this;
        var parentNode = parent;
        var targetIndex = -1;
        if (isNumber(index)) {
          targetIndex = index;
        }
        var targetParents = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.getParents()) || [];
        var includeCurrent = targetParents.some(function (pnode) {
          return pnode === _this3;
        });
        if (includeCurrent) {
          throw new Error("\u65E0\u6CD5\u5C06\u7236\u8282\u70B9\u63D2\u5165\u5230\u5B50\u8282\u70B9");
        }
        if (parentNode === this) {
          throw new Error("\u65E0\u6CD5\u5C06\u8282\u70B9\u63D2\u5165\u5230\u672C\u8282\u70B9");
        }
        if (Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
          var targetPosNode = parentNode === null || parentNode === void 0 ? void 0 : parentNode.children[targetIndex];
          if (targetPosNode && targetPosNode === this) {
            return;
          }
        }
        var siblings = null;
        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
            parentNode.children = [];
          }
          siblings = parent.children;
        } else {
          siblings = tree.children;
        }
        if (!Array.isArray(siblings)) {
          throw new Error("\u65E0\u6CD5\u63D2\u5165\u5230\u76EE\u6807\u4F4D\u7F6E\uFF0C\u53EF\u63D2\u5165\u7684\u8282\u70B9\u5217\u8868\u4E0D\u5B58\u5728");
        }
        var prevLength = siblings.length;
        var prevIndex = this.getIndex();
        this.remove();
        if (isNumber(index)) {
          var targetIndex2 = index;
          if (parentNode === this.parent) {
            var curLength = siblings.length;
            if (curLength < prevLength && prevIndex <= targetIndex2) {
              targetIndex2 -= 1;
            }
          }
          siblings.splice(targetIndex2, 0, this);
        } else {
          siblings.push(this);
        }
        this.parent = parentNode;
        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);
          tree.privateMap.set(node[privateKey], node);
          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.walk()) || tree.children.map(function (item) {
          return item.walk();
        }).flat();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
          parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;
        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);
          if (isNumber(index)) {
            siblings.splice(index, 0, node);
          }
          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }
        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();
        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }
        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
          value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
        tree.filterMap["delete"](value);
        tree.privateMap["delete"](this[privateKey]);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var config, list;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                config = get(this, "tree.config") || {};
                if (!(this.children === true && !this.loading)) {
                  _context.next = 2;
                  break;
                }
                if (!isFunction(config.load)) {
                  _context.next = 2;
                  break;
                }
                this.loading = true;
                this.update();
                list = [];
                _context.next = 1;
                return config.load(this);
              case 1:
                list = _context.sent;
                this.tree.emit("load", {
                  node: this,
                  data: list
                });
                this.loading = false;
                if (Array.isArray(list) && list.length > 0) {
                  this.append(list);
                } else {
                  this.children = false;
                }
                this.update();
              case 2:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }
        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this4 = this;
        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty.call(settableStatus, key) || key === "label") {
            _this4[key] = item[key];
          }
          if (key === "disabled") {
            _this4.setDisabled(item[key]);
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;
        while (node) {
          parents.push(node);
          node = node.parent;
        }
        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
          tree = this.tree;
        var list = [];
        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }
        return list;
      }
    }, {
      key: "getChildren",
      value: function getChildren(deep) {
        var childrenModel = false;
        var children = this.children;
        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = this.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (isBoolean(children)) {
          childrenModel = children;
        }
        return childrenModel;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
          config = _this$tree.config,
          filterMap = _this$tree.filterMap,
          hasFilter = _this$tree.hasFilter;
        var rest = false;
        if (hasFilter) {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }
        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }
        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var _this$tree2 = this.tree,
          nodeMap = _this$tree2.nodeMap,
          hasFilter = _this$tree2.hasFilter,
          config = _this$tree2.config;
        var allowFoldNodeOnFilter = config.allowFoldNodeOnFilter;
        var visible = true;
        if (!nodeMap.get(this.value)) {
          return false;
        }
        if (hasFilter && !allowFoldNodeOnFilter) {
          visible = this.vmIsLocked || this.vmIsRest;
          return visible;
        }
        var expandVisible = true;
        var parents = this.getParents();
        if (parents.length > 0) {
          expandVisible = parents.every(function (node) {
            return node.expanded;
          });
        }
        if (hasFilter) {
          visible = expandVisible && (this.vmIsRest || this.vmIsLocked);
        } else {
          visible = expandVisible;
        }
        return visible;
      }
    }, {
      key: "isDisabledState",
      value: function isDisabledState() {
        var tree = this.tree,
          parent = this.parent;
        var config = tree.config;
        var disabled = config.disabled,
          disableCheck = config.disableCheck,
          checkStrictly = config.checkStrictly;
        var state = disabled || false;
        if (this.disabled) {
          state = true;
        }
        if (!checkStrictly && parent !== null && parent !== void 0 && parent.isDisabledState()) {
          state = true;
        }
        if (typeof disableCheck === "boolean") {
          if (disableCheck) {
            state = true;
          }
        } else if (typeof disableCheck === "function") {
          if (disableCheck(this.getModel())) {
            state = true;
          }
        }
        return state;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        var tree = this.tree;
        var hasFilter = tree.hasFilter,
          config = tree.config;
        var allowFoldNodeOnFilter = config.allowFoldNodeOnFilter;
        if (hasFilter && !allowFoldNodeOnFilter && this.vmIsLocked && !this.vmIsRest) {
          return true;
        }
        return this.isDisabledState();
      }
    }, {
      key: "isDraggable",
      value: function isDraggable() {
        var state = !!get(this, "tree.config.draggable");
        if (typeof this.draggable === "boolean") {
          state = this.draggable;
        }
        return state;
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        var state = !!get(this, "tree.config.expandMutex");
        if (typeof this.expandMutex === "boolean") {
          state = this.expandMutex;
        }
        return state;
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        var state = !!get(this, "tree.config.activable");
        if (typeof this.activable === "boolean") {
          state = this.activable;
        }
        return state;
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        var state = !!get(this, "tree.config.checkable");
        if (typeof this.checkable === "boolean") {
          state = this.checkable;
        }
        return state;
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
          value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
          value = this.value,
          vmIsLocked = this.vmIsLocked;
        var hasFilter = tree.hasFilter,
          config = tree.config;
        var allowFoldNodeOnFilter = config.allowFoldNodeOnFilter;
        if (hasFilter && !allowFoldNodeOnFilter && vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
          tree = this.tree,
          value = this.value;
        var _tree$config = tree.config,
          checkStrictly = _tree$config.checkStrictly,
          valueMode = _tree$config.valueMode;
        if (!tree.nodeMap.get(value)) return false;
        if (!this.isCheckable()) return false;
        var checkedMap = map || tree.checkedMap;
        if (checkStrictly) {
          return !!checkedMap.get(value);
        }
        var checked = false;
        if (checkedMap.get(value) && (valueMode !== "onlyLeaf" || this.isLeaf())) {
          return true;
        }
        if (Array.isArray(children) && children.length > 0) {
          checked = children.every(function (node) {
            var childIsChecked = node.isChecked(checkedMap);
            return childIsChecked;
          });
        } else {
          var parents = this.getParents();
          checked = parents.some(function (node) {
            return checkedMap.get(node.value);
          });
        }
        return checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
          tree = this.tree,
          value = this.value;
        var checkStrictly = tree.config.checkStrictly;
        if (!tree.nodeMap.get(value)) return false;
        if (!this.isCheckable()) return false;
        if (checkStrictly) return false;
        if (!Array.isArray(children)) return false;
        var childChecked = null;
        var indeterminate = children.some(function (node) {
          if (node.isIndeterminate()) {
            return true;
          }
          if (isNull(childChecked)) {
            childChecked = node.isChecked();
          }
          if (childChecked !== node.isChecked()) {
            return true;
          }
          return false;
        });
        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;
        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }
        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();
        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
        this.updateChildren();
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded(opts) {
        return this.setExpanded(!this.isExpanded(), opts);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;
        var config = tree.config;
        var options = _objectSpread$1C({
          directly: false
        }, opts);
        var map = tree.expandedMap;
        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }
        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);
          if (config.expandParent) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }
          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;
            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config2;
              isExpandMutex = tree === null || tree === void 0 || (_tree$config2 = tree.config) === null || _tree$config2 === void 0 ? void 0 : _tree$config2.expandMutex;
            }
            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
                snode.update();
                snode.updateChildren();
              });
            }
            map.set(node.value, true);
            node.update();
            node.updateChildren();
          });
        } else {
          map["delete"](this.value);
        }
        if (options.directly) {
          this.afterExpanded();
        }
        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived(opts) {
        return this.setActived(!this.isActived(), opts);
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;
        var options = _objectSpread$1C({
          isAction: true,
          directly: false
        }, opts);
        var config = tree.config || {};
        var map = tree.activedMap;
        if (!options.directly) {
          map = new Map(tree.activedMap);
        }
        if (options.isAction && this.isDisabledState()) {
          return tree.getActived(map);
        }
        if (this.isActivable()) {
          if (actived) {
            var prevKeys = Array.from(map.keys());
            if (!config.activeMultiple) {
              map.clear();
            }
            prevKeys.forEach(function (value) {
              var node = tree.getNode(value);
              node === null || node === void 0 || node.update();
            });
            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }
        this.update();
        return tree.getActived(map);
      }
    }, {
      key: "hasEnableUnCheckedChild",
      value: function hasEnableUnCheckedChild() {
        var children = this.children;
        if (!Array.isArray(children) || children.length <= 0) {
          return false;
        }
        var state = false;
        children.some(function (child) {
          if (child.isDisabledState()) return false;
          if (child.isChecked()) return false;
          if (child.isIndeterminate()) {
            if (child.hasEnableUnCheckedChild()) {
              state = true;
              return true;
            }
            return false;
          }
          state = true;
          return true;
        });
        return state;
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked(opts) {
        if (this.isIndeterminate()) {
          var expectState = this.hasEnableUnCheckedChild();
          return this.setChecked(expectState, opts);
        }
        return this.setChecked(!this.isChecked(), opts);
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};
        var options = _objectSpread$1C({
          isAction: true,
          directly: false
        }, opts);
        var map = tree.checkedMap;
        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }
        if (!this.isCheckable()) {
          return tree.getChecked(map);
        }
        if (options.isAction && this.isDisabledState()) {
          return tree.getChecked(map);
        }
        if (checked === this.isChecked()) {
          var shouldSet = this.isIndeterminate() && !this.hasEnableUnCheckedChild();
          if (!shouldSet) {
            return tree.getChecked(map);
          }
        }
        if (checked) {
          map.set(this.value, true);
        } else {
          map["delete"](this.value);
        }
        if (config.checkStrictly) {
          if (options.directly) {
            this.updateChecked();
          }
        } else {
          this.spreadChildrenChecked(checked, map, options);
          this.spreadParentChecked(checked, map, options);
          if (options.directly) {
            var relatedNodes = tree.getRelatedNodes([this.value], {
              reverse: true
            });
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }
        return tree.getChecked(map);
      }
    }, {
      key: "spreadParentChecked",
      value: function spreadParentChecked(checked, map, opts) {
        var options = _objectSpread$1C({
          isAction: true,
          directly: false
        }, opts);
        if (!this.isCheckable()) return;
        var children = this.children;
        if (Array.isArray(children) && children.length > 0) {
          map["delete"](this.value);
        }
        var parent = this.parent;
        if (!parent) return;
        parent.spreadParentChecked(checked, map, options);
      }
    }, {
      key: "spreadChildrenChecked",
      value: function spreadChildrenChecked(checked, map, opts) {
        var options = _objectSpread$1C({
          isAction: true,
          directly: false
        }, opts);
        if (!this.isCheckable()) return;
        if (options.isAction && this.isDisabledState()) return;
        var children = this.children;
        if (!Array.isArray(children)) return;
        if (children.length <= 0) return;
        map["delete"](this.value);
        children.forEach(function (node) {
          if (options.isAction && node.isDisabledState()) return;
          if (checked) {
            map.set(node.value, true);
          } else {
            map["delete"](node.value);
          }
          node.spreadChildrenChecked(checked, map, options);
        });
      }
    }, {
      key: "setDisabled",
      value: function setDisabled(disabled) {
        this.disabled = disabled;
        this.update();
        this.updateChildren();
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.vmCheckable = this.isCheckable();
        this.vmIsRest = this.isRest();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked() {
        var tree = this.tree,
          value = this.value;
        var checkedMap = tree.checkedMap;
        this.checked = this.isChecked();
        this.indeterminate = this.isIndeterminate();
        if (this.checked) {
          checkedMap.set(value, true);
        }
        tree.updated(this);
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var _this5 = this;
        this.spreadChildren(function (node) {
          if (node === _this5) return;
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var _this6 = this;
        this.spreadParents(function (node) {
          if (node === _this6) return;
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "walk",
      value: function walk() {
        var list = [];
        this.spreadChildren(function (node) {
          list.push(node);
        });
        return list;
      }
    }, {
      key: "spreadChildren",
      value: function spreadChildren(fn) {
        fn(this);
        var children = this.children;
        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            node === null || node === void 0 || node.spreadChildren(fn);
          });
        }
      }
    }, {
      key: "spreadParents",
      value: function spreadParents(fn) {
        fn(this);
        var parent = this.parent;
        if (!parent) return;
        parent === null || parent === void 0 || parent.spreadParents(fn);
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;
        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }
        return model;
      }
    }]);
  }();

  function ownKeys$1C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1C(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function nextTick(fn) {
    var pm = Promise.resolve();
    pm.then(fn);
    return pm;
  }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);
      _defineProperty$2(this, "children", void 0);
      _defineProperty$2(this, "nodes", void 0);
      _defineProperty$2(this, "nodeMap", void 0);
      _defineProperty$2(this, "privateMap", void 0);
      _defineProperty$2(this, "config", void 0);
      _defineProperty$2(this, "activedMap", void 0);
      _defineProperty$2(this, "updatedMap", void 0);
      _defineProperty$2(this, "checkedMap", void 0);
      _defineProperty$2(this, "expandedMap", void 0);
      _defineProperty$2(this, "filterMap", void 0);
      _defineProperty$2(this, "hasFilter", void 0);
      _defineProperty$2(this, "emitter", void 0);
      _defineProperty$2(this, "updateTick", void 0);
      _defineProperty$2(this, "shouldReflow", void 0);
      _defineProperty$2(this, "prevFilter", void 0);
      var config = _objectSpread$1B({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        disableCheck: false,
        draggable: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        allowFoldNodeOnFilter: false,
        onLoad: null,
        onReflow: null,
        onUpdate: null
      }, options);
      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.privateMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTick = null;
      this.shouldReflow = false;
      this.hasFilter = isFunction(config.filter);
      this.emitter = mitt();
    }
    return _createClass(TreeStore, [{
      key: "setConfig",
      value: function setConfig(options) {
        var config = this.config;
        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];
          if (val !== config[key]) {
            hasChanged = true;
            config[key] = val;
          }
        });
        this.hasFilter = isFunction(config.filter);
        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;
        if (isString(item) || isNumber(item)) {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }
        if (!node) node = null;
        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);
        if (node) {
          parent = node.getParent();
        }
        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];
        if (node) {
          parents = node.getParents();
        }
        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;
        if (node) {
          index = node.getIndex();
        }
        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";
        if (isString(item) || isNumber(item)) {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }
        if (!val && val !== 0) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);
          if (node) {
            nodes = node.walk();
          }
        }
        if (options) {
          var conf = _objectSpread$1B({
            filter: null,
            level: Infinity
          }, options);
          if (isNumber(conf.level) && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }
          if (isFunction(conf.filter)) {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }
          if (isPlainObject(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }
        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this = this;
        list.forEach(function (item) {
          var node = new TreeNode(_this, item);
          _this.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;
        if (isString(para) || isNumber(para)) {
          value = para;
          node = this.getNode(value);
          data = item;
        } else if (para instanceof TreeNode) {
          if (item) {
            node = para;
            data = item;
          } else {
            data = para;
          }
        } else {
          data = para;
        }
        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);
        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (isArray$1(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }
            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);
        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
          nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this2 = this;
        var updatedMap = this.updatedMap;
        if (node) {
          updatedMap.set(node[privateKey], "changed");
        } else {
          this.getNodes().forEach(function (itemNode) {
            updatedMap.set(itemNode[privateKey], "changed");
          });
        }
        if (this.updateTick) return;
        this.updateTick = nextTick(function () {
          _this2.updateTick = null;
          if (_this2.shouldReflow) {
            _this2.refreshNodes();
            _this2.emit("reflow");
          }
          _this2.lockFilterPathNodes();
          var stateId = "t".concat(new Date().getTime());
          var updatedList = Array.from(updatedMap.keys());
          var updatedNodes = updatedList.map(function (nodePrivateKey) {
            updatedMap.set(nodePrivateKey, stateId);
            return _this2.privateMap.get(nodePrivateKey);
          });
          _this2.emit("update", {
            nodes: updatedNodes,
            map: updatedMap
          });
          _this2.shouldReflow = false;
          updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this3 = this;
        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);
        if (!activeMultiple) {
          list.length = 1;
        }
        list.forEach(function (val) {
          _this3.activedMap.set(val, true);
          var node = _this3.getNode(val);
          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference$1(list, expanded);
        var removed = difference$1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this4 = this;
        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this4.expandedMap.set(val, true);
          } else {
            _this4.expandedMap["delete"](val);
          }
          var node = _this4.getNode(val);
          if (node) {
            node.afterExpanded();
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodeMap = this.nodeMap,
          config = this.config;
        var valueMode = config.valueMode,
          checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodeMap.forEach(function (node) {
          if (!node.isChecked(checkedMap)) return;
          if (valueMode === "parentFirst" && !checkStrictly) {
            if (!node.parent || !node.parent.isChecked(checkedMap)) {
              list.push(node.value);
            }
          } else if (valueMode === "onlyLeaf" && !checkStrictly) {
            if (node.isLeaf()) {
              list.push(node.value);
            }
          } else {
            list.push(node.value);
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list) {
        var _this5 = this;
        var _this$config = this.config,
          checkStrictly = _this$config.checkStrictly,
          checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this5.getNode(val);
          if (!node) return;
          if (checkStrictly) {
            _this5.checkedMap.set(val, true);
            node.updateChecked();
          } else {
            var childrenNodes = node.walk();
            childrenNodes.forEach(function (childNode) {
              _this5.checkedMap.set(childNode.value, true);
            });
          }
        });
        if (!checkStrictly) {
          var checkedValues = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checkedValues);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodeMap = this.nodeMap;
        nodeMap.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodeMap = this.nodeMap;
        nodeMap.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);
        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.nodeMap.clear();
        this.privateMap.clear();
        this.updatedMap.clear();
        this.nodes = [];
        this.children = [];
        this.reflow();
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this6 = this;
        var conf = _objectSpread$1B({
          reverse: false,
          withParents: true
        }, options);
        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;
          var node = _this6.getNode(value);
          if (node) {
            var parents = node.getParents().reverse();
            var children = node.walk();
            var related = [];
            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }
            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        if (conf.reverse) {
          relatedNodes = relatedNodes.reverse();
        }
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config,
          emitter = this.emitter;
        var methodName = camelCase$1("on-".concat(name));
        var method = config[methodName];
        if (isFunction(method)) {
          method(state);
        }
        emitter.emit(name, state);
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var config = this.config;
        var allNodes = this.getNodes();
        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            if (node.vmIsLocked) {
              node.lock(false);
            }
          });
        }
        var currentFilter = config.filter;
        if (!currentFilter || !isFunction(currentFilter)) return;
        this.prevFilter = config.filter;
        allNodes.reverse().forEach(function (node) {
          var parent = node.getParent();
          if (!parent) return;
          if (node.vmIsRest || node.vmIsLocked) {
            if (!parent.vmIsLocked) {
              parent.lock(true);
            }
          }
        });
      }
    }]);
  }();

  function ownKeys$1B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1B(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
    var statusContext = Vue.reactive({
      treeStore: null,
      inputVal: null,
      scopeVal: void 0,
      treeNodes: [],
      expend: []
    });
    return {
      statusContext: statusContext,
      cascaderContext: Vue.computed(function () {
        var size = props.size,
          checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          multiple = props.multiple,
          filterable = props.filterable,
          clearable = props.clearable,
          checkProps = props.checkProps,
          max = props.max,
          disabled = props.disabled,
          showAllLevels = props.showAllLevels,
          minCollapsedNum = props.minCollapsedNum,
          valueType = props.valueType,
          modelValue = props.modelValue;
        return _objectSpread$1A(_objectSpread$1A({
          value: statusContext.scopeVal,
          size: size,
          checkStrictly: checkStrictly,
          lazy: lazy,
          multiple: multiple,
          filterable: filterable,
          clearable: clearable,
          checkProps: checkProps,
          max: max,
          disabled: disabled,
          showAllLevels: showAllLevels,
          minCollapsedNum: minCollapsedNum,
          valueType: valueType,
          visible: innerPopupVisible.value
        }, statusContext), {}, {
          setTreeNodes: function setTreeNodes(nodes) {
            statusContext.treeNodes = nodes;
          },
          setValue: function setValue(val, source, node) {
            if (isEqual(val, modelValue)) return;
            setInnerValue(val, {
              source: source,
              node: node
            });
          },
          setVisible: setPopupVisible,
          setInputVal: function setInputVal(val) {
            statusContext.inputVal = val;
          },
          setExpend: function setExpend(val) {
            statusContext.expend = val;
          }
        });
      })
    };
  };
  var useCascaderContext = function useCascaderContext(props) {
    var disabled = useDisabled();
    var _toRefs = Vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      popupVisible = _toRefs.popupVisible;
    var _useVModel = useVModel$1(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      innerPopupVisible = _useDefaultValue2[0],
      setPopupVisible = _useDefaultValue2[1];
    var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
      cascaderContext = _useContext.cascaderContext,
      statusContext = _useContext.statusContext;
    var isFilterable = Vue.computed(function () {
      return Boolean(props.filterable || isFunction(props.filter));
    });
    var updatedTreeNodes = function updatedTreeNodes() {
      var _cascaderContext$valu = cascaderContext.value,
        inputVal = _cascaderContext$valu.inputVal,
        treeStore = _cascaderContext$valu.treeStore,
        setTreeNodes = _cascaderContext$valu.setTreeNodes;
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
    };
    var updateExpend = function updateExpend() {
      var _cascaderContext$valu2 = cascaderContext.value,
        value2 = _cascaderContext$valu2.value,
        treeStore = _cascaderContext$valu2.treeStore;
      var expend = statusContext.expend;
      treeStoreExpendEffect(treeStore, value2, expend);
      treeStore.replaceChecked(getTreeValue(value2));
    };
    Vue.watch(function () {
      return props.options;
    }, function () {
      var options = props.options,
        _props$keys = props.keys,
        keys = _props$keys === void 0 ? {} : _props$keys,
        checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      var treeStore = statusContext.treeStore;
      if (!options.length && !treeStore) return;
      if (!treeStore) {
        var store = new TreeStore({
          keys: _objectSpread$1A(_objectSpread$1A({}, keys), {}, {
            children: isString(keys.children) ? keys.children : "children"
          }),
          checkable: true,
          expandMutex: true,
          expandParent: true,
          lazy: lazy,
          load: load,
          valueMode: valueMode,
          checkStrictly: checkStrictly,
          onLoad: function onLoad() {
            Vue.nextTick(function () {
              store.refreshNodes();
              updatedTreeNodes();
            });
          }
        });
        store.append(options);
        statusContext.treeStore = store;
      } else {
        treeStore.reload(options);
        treeStore.refreshNodes();
      }
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true,
      deep: true
    });
    Vue.watch(function () {
      var checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      return JSON.stringify({
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        lazy: lazy,
        load: load
      });
    }, function () {
      var treeStore = statusContext.treeStore;
      if (!treeStore) return;
      var checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        load = props.load,
        valueMode = props.valueMode;
      var treeProps = {
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      };
      treeStore.setConfig(treeProps);
    }, {
      immediate: true
    });
    Vue.watch(innerValue, function () {
      var _cascaderContext$valu3 = cascaderContext.value,
        setValue = _cascaderContext$valu3.setValue,
        multiple = _cascaderContext$valu3.multiple,
        valueType = _cascaderContext$valu3.valueType;
      if (isValueInvalid(innerValue.value, cascaderContext.value)) {
        setValue(multiple ? [] : "", "invalid-value");
      }
      if (!isEmptyValues(innerValue.value)) {
        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
      } else {
        statusContext.scopeVal = multiple ? [] : "";
      }
      if (!statusContext.treeStore) return;
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return innerPopupVisible.value && isFilterable.value;
    }, function (visible) {
      var setInputVal = cascaderContext.value.setInputVal;
      if (visible) {
        setInputVal("");
      }
    });
    Vue.watch(function () {
      return statusContext.inputVal;
    }, function () {
      updatedTreeNodes();
    });
    var getCascaderItems = function getCascaderItems(arrValue) {
      var options = [];
      arrValue.forEach(function (value2) {
        var _statusContext$treeSt;
        var nodes = (_statusContext$treeSt = statusContext.treeStore) === null || _statusContext$treeSt === void 0 ? void 0 : _statusContext$treeSt.getNodes(value2);
        nodes && nodes[0] && options.push(nodes[0].data);
      });
      return options;
    };
    return {
      cascaderContext: cascaderContext,
      isFilterable: isFilterable,
      innerValue: innerValue,
      getCascaderItems: getCascaderItems
    };
  };

  function ownKeys$1A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1A(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Cascader = Vue.defineComponent({
    name: "TCascader",
    props: props$O,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("cascader");
      var classPrefix = usePrefixClass();
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var overlayClassName = usePrefixClass("cascader__popup");
      var _useConfig = useConfig("cascader"),
        globalConfig = _useConfig.globalConfig;
      var isDisabled = useDisabled();
      var isReadonly = useReadonly();
      var renderTNodeJSX = useTNodeJSX();
      var _useCascaderContext = useCascaderContext(props2),
        cascaderContext = _useCascaderContext.cascaderContext,
        innerValue = _useCascaderContext.innerValue,
        isFilterable = _useCascaderContext.isFilterable,
        getCascaderItems = _useCascaderContext.getCascaderItems;
      var displayValue = Vue.computed(function () {
        return props2.multiple ? getMultipleContent(cascaderContext.value) : getSingleContent(cascaderContext.value);
      });
      var panels = Vue.computed(function () {
        return getPanels(cascaderContext.value.treeNodes);
      });
      var inputPlaceholder = Vue.computed(function () {
        var _props2$placeholder;
        return cascaderContext.value.visible && !props2.multiple && getSingleContent(cascaderContext.value) || ((_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : globalConfig.value.placeholder);
      });
      var renderSuffixIcon = function renderSuffixIcon() {
        if (props2.suffixIcon || slots.suffixIcon) {
          return renderTNodeJSX("suffixIcon");
        }
        var _cascaderContext$valu = cascaderContext.value,
          visible = _cascaderContext$valu.visible,
          disabled = _cascaderContext$valu.disabled;
        return Vue.createVNode(FakeArrow, {
          "overlayClassName": getFakeArrowIconClass(classPrefix.value, STATUS.value, cascaderContext.value),
          "isActive": visible,
          "disabled": disabled
        }, null);
      };
      var valueDisplayParams = Vue.computed(function () {
        var arrayValue = innerValue.value instanceof Array ? innerValue.value : [innerValue.value];
        var displayValue2 = props2.multiple && props2.minCollapsedNum ? arrayValue.slice(0, props2.minCollapsedNum) : innerValue.value;
        var options = getCascaderItems(arrayValue);
        return {
          value: innerValue.value,
          selectedOptions: options,
          onClose: function onClose(index) {
            handleRemoveTagEffect(cascaderContext.value, index, props2.onRemove);
          },
          displayValue: displayValue2
        };
      });
      var renderValueDisplay = function renderValueDisplay() {
        return renderTNodeJSX("valueDisplay", {
          params: valueDisplayParams.value
        });
      };
      var renderLabel = function renderLabel() {
        var label = renderTNodeJSX("label");
        if (props2.multiple) return label;
        if (!label) return null;
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-tag-input__prefix")
        }, [label]);
      };
      var cascaderClassNames = Vue.computed(function () {
        return [COMPONENT_NAME.value, props2.multiple ? "".concat(COMPONENT_NAME.value, "--multiple") : "".concat(COMPONENT_NAME.value, "--single")];
      });
      return function () {
        var _props2$popupProps;
        var _cascaderContext$valu2 = cascaderContext.value,
          setVisible = _cascaderContext$valu2.setVisible,
          visible = _cascaderContext$valu2.visible,
          inputVal = _cascaderContext$valu2.inputVal,
          setInputVal = _cascaderContext$valu2.setInputVal;
        return Vue.createVNode(SelectInput, Vue.mergeProps({
          "class": cascaderClassNames.value,
          "value": displayValue.value,
          "inputValue": visible ? inputVal : "",
          "popupVisible": visible,
          "keys": props2.keys,
          "allowInput": isFilterable.value,
          "min-collapsed-num": props2.minCollapsedNum,
          "collapsed-items": props2.collapsedItems,
          "readonly": isReadonly.value,
          "disabled": isDisabled.value,
          "clearable": props2.clearable,
          "placeholder": inputPlaceholder.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "status": props2.status,
          "tips": props2.tips,
          "borderless": props2.borderless,
          "label": renderLabel,
          "valueDisplay": renderValueDisplay,
          "prefixIcon": props2.prefixIcon,
          "suffix": props2.suffix,
          "suffixIcon": function suffixIcon() {
            return renderSuffixIcon();
          },
          "popupProps": _objectSpread$1z(_objectSpread$1z({}, props2.popupProps), {}, {
            overlayInnerStyle: panels.value.length && !props2.loading ? {
              width: "auto"
            } : "",
            overlayClassName: [overlayClassName.value, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayClassName]
          }),
          "inputProps": _objectSpread$1z({
            size: props2.size
          }, props2.inputProps),
          "tagInputProps": _objectSpread$1z({
            size: props2.size
          }, props2.tagInputProps),
          "tagProps": _objectSpread$1z({}, props2.tagProps),
          "onInputChange": function onInputChange(value, ctx) {
            var _props2$selectInputPr, _props2$selectInputPr2;
            if (!isFilterable.value) return;
            setInputVal("".concat(value));
            props2 === null || props2 === void 0 || (_props2$selectInputPr = props2.selectInputProps) === null || _props2$selectInputPr === void 0 || (_props2$selectInputPr2 = _props2$selectInputPr.onInputChange) === null || _props2$selectInputPr2 === void 0 || _props2$selectInputPr2.call(_props2$selectInputPr, value, ctx);
          },
          "onTagChange": function onTagChange(val, ctx) {
            var _props2$selectInputPr3, _props2$selectInputPr4;
            if (ctx.trigger === "enter") return;
            handleRemoveTagEffect(cascaderContext.value, ctx.index, props2.onRemove);
            props2 === null || props2 === void 0 || (_props2$selectInputPr3 = props2.selectInputProps) === null || _props2$selectInputPr3 === void 0 || (_props2$selectInputPr4 = _props2$selectInputPr3.onTagChange) === null || _props2$selectInputPr4 === void 0 || _props2$selectInputPr4.call(_props2$selectInputPr3, val, ctx);
          },
          "onPopupVisibleChange": function onPopupVisibleChange(val, context) {
            var _props2$selectInputPr5, _props2$selectInputPr6;
            if (isDisabled.value) return;
            setVisible(val, context);
            props2 === null || props2 === void 0 || (_props2$selectInputPr5 = props2.selectInputProps) === null || _props2$selectInputPr5 === void 0 || (_props2$selectInputPr6 = _props2$selectInputPr5.onPopupVisibleChange) === null || _props2$selectInputPr6 === void 0 || _props2$selectInputPr6.call(_props2$selectInputPr5, val, context);
          },
          "onBlur": function onBlur(val, context) {
            var _props2$onBlur, _props2$selectInputPr7, _props2$selectInputPr8;
            (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
              value: cascaderContext.value.value,
              inputValue: context.inputValue || "",
              e: context.e
            });
            props2 === null || props2 === void 0 || (_props2$selectInputPr7 = props2.selectInputProps) === null || _props2$selectInputPr7 === void 0 || (_props2$selectInputPr8 = _props2$selectInputPr7.onBlur) === null || _props2$selectInputPr8 === void 0 || _props2$selectInputPr8.call(_props2$selectInputPr7, val, context);
          },
          "onFocus": function onFocus(val, context) {
            var _props2$onFocus, _props2$selectInputPr9, _props2$selectInputPr0;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
              value: cascaderContext.value.value,
              e: context.e
            });
            props2 === null || props2 === void 0 || (_props2$selectInputPr9 = props2.selectInputProps) === null || _props2$selectInputPr9 === void 0 || (_props2$selectInputPr0 = _props2$selectInputPr9.onFocus) === null || _props2$selectInputPr0 === void 0 || _props2$selectInputPr0.call(_props2$selectInputPr9, val, context);
          },
          "onClear": function onClear(context) {
            var _props2$selectInputPr1, _props2$selectInputPr10;
            closeIconClickEffect(cascaderContext.value);
            props2 === null || props2 === void 0 || (_props2$selectInputPr1 = props2.selectInputProps) === null || _props2$selectInputPr1 === void 0 || (_props2$selectInputPr10 = _props2$selectInputPr1.onClear) === null || _props2$selectInputPr10 === void 0 || _props2$selectInputPr10.call(_props2$selectInputPr1, context);
          }
        }, omit$1(props2.selectInputProps, ["onTagChange", "onInputChange", "onPopupVisibleChange", "onBlur", "onFocus", "onClear"])), {
          label: slots.label,
          suffix: slots.suffix,
          prefixIcon: slots.prefixIcon,
          panel: function panel() {
            return Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("panelTopContent"), Vue.createVNode(Panel, {
              "option": props2.option,
              "empty": props2.empty,
              "visible": visible,
              "trigger": props2.trigger,
              "loading": props2.loading,
              "loadingText": props2.loadingText,
              "cascaderContext": cascaderContext.value
            }, {
              option: slots.option,
              empty: slots.empty,
              loadingText: slots.loadingText
            }), renderTNodeJSX("panelBottomContent")]);
          },
          collapsedItems: slots.collapsedItems
        });
      };
    }
  });

  var _CascaderPanel = Vue.defineComponent({
    name: "TCascaderPanel",
    props: props$O,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _useCascaderContext = useCascaderContext(props2),
        cascaderContext = _useCascaderContext.cascaderContext;
      return function () {
        return Vue.createVNode(Panel, {
          "trigger": props2.trigger,
          "cascaderContext": cascaderContext.value,
          "empty": props2.empty
        }, {
          empty: slots.empty,
          option: slots.option,
          loadingText: slots.loadingText
        });
      };
    }
  });

  var Cascader = withInstall$1(_Cascader);
  var CascaderPanel = withInstall$1(_CascaderPanel);

  var isoWeeksInYear$1 = {exports: {}};

  isoWeeksInYear$1.exports;
  (function (module, exports) {
    !function (e, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      return function (e, n) {
        n.prototype.isoWeeksInYear = function () {
          var e = this.isLeapYear(),
            n = this.endOf("y").day();
          return 4 === n || e && 5 === n ? 53 : 52;
        };
      };
    });
  })(isoWeeksInYear$1, isoWeeksInYear$1.exports);
  var isoWeeksInYearExports = isoWeeksInYear$1.exports;
  var isoWeeksInYear = /*@__PURE__*/getDefaultExportFromCjs(isoWeeksInYearExports);

  var isLeapYear$1 = {exports: {}};

  isLeapYear$1.exports;
  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.isLeapYear = function () {
          return this.$y % 4 == 0 && this.$y % 100 != 0 || this.$y % 400 == 0;
        };
      };
    });
  })(isLeapYear$1, isLeapYear$1.exports);
  var isLeapYearExports = isLeapYear$1.exports;
  var isLeapYear = /*@__PURE__*/getDefaultExportFromCjs(isLeapYearExports);

  dayjs.extend(isoWeeksInYear);
  dayjs.extend(isLeapYear);
  var TIME_FORMAT$1 = "HH:mm:ss";
  function extractTimeFormat() {
    var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return dateFormat.replace(/\W?Y{2,4}|\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, "").trim();
  }
  function parseToDayjs(value, format, timeOfDay, dayjsLocale) {
    if (value === "" || value === null) return dayjs();
    var dateText = value;
    if (/[w|W]/g.test(format)) {
      if (!isString(dateText)) {
        dateText = dayjs(dateText).locale(dayjsLocale || "zh-cn").format(format);
      }
      var yearStr = dateText.split(/[-/.\s]/)[0];
      var weekStr = dateText.split(/[-/.\s]/)[1];
      var weekFormatStr = format.split(/[-/.\s]/)[1];
      var firstWeek = dayjs(yearStr, "YYYY").locale(dayjsLocale || "zh-cn").startOf("year");
      if (firstWeek.day() > 4 || firstWeek.day() === 0) firstWeek = firstWeek.add(1, "week");
      var weekCounts = dayjs(yearStr, "YYYY").locale(dayjsLocale || "zh-cn").isoWeeksInYear();
      for (var i = 0; i <= weekCounts; i += 1) {
        var nextWeek = firstWeek.add(i, "week");
        if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");
        if (nextWeek.format(weekFormatStr) === weekStr) {
          return nextWeek;
        }
      }
    }
    if (/Q/g.test(format)) {
      if (!isString(dateText)) {
        dateText = dayjs(dateText).locale(dayjsLocale || "zh-cn").format(format);
      }
      var _yearStr = dateText.split(/[-/.\s]/)[0];
      var quarterStr = dateText.split(/[-/.\s]/)[1];
      var quarterFormatStr = format.split(/[-/.\s]/)[1];
      var firstQuarter = dayjs(_yearStr, "YYYY").startOf("year");
      for (var _i = 0; _i < 4; _i += 1) {
        var nextQuarter = firstQuarter.add(_i, "quarter");
        if (nextQuarter.format(quarterFormatStr) === quarterStr) {
          return nextQuarter;
        }
      }
    }
    var result = dayjs(dateText, format).isValid() ? dayjs(dateText, format) : dayjs(dateText);
    if (!result.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\n value: '".concat(value, "', format: '").concat(format, "'"));
      return dayjs();
    }
    return result;
  }
  function formatRange(_ref) {
    var newDate = _ref.newDate,
      format = _ref.format,
      dayjsLocale = _ref.dayjsLocale,
      targetFormat = _ref.targetFormat,
      autoSwap = _ref.autoSwap;
    if (!newDate || !Array.isArray(newDate)) return [];
    var dayjsDateList = newDate.map(function (d) {
      return d && parseToDayjs(d, format).locale(dayjsLocale);
    });
    if (autoSwap && dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
      dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
    }
    if (dayjsDateList.some(function (r) {
      return r && !r.isValid();
    })) {
      log.error("DatePicker", "Check whether the value\u3001format\u3001valueType format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "' valueType: '").concat(targetFormat, "'"));
      return [];
    }
    if (targetFormat === "time-stamp") return dayjsDateList.map(function (da) {
      return da && da.toDate().getTime();
    });
    if (targetFormat === "Date") return dayjsDateList.map(function (da) {
      return da && da.toDate();
    });
    return dayjsDateList.map(function (da) {
      return da && da.format(targetFormat || format);
    });
  }
  function formatSingle(_ref2) {
    var newDate = _ref2.newDate,
      format = _ref2.format,
      targetFormat = _ref2.targetFormat,
      dayjsLocale = _ref2.dayjsLocale;
    if (!newDate) return "";
    var dayJsDate = parseToDayjs(newDate, format).locale(dayjsLocale);
    if (!dayJsDate.isValid()) {
      log.error("DatePicker", "Check whether the format\u3001value format is valid.\nformat: '".concat(format, "' value: '").concat(newDate, "'"));
      return "";
    }
    if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
    if (targetFormat === "Date") return dayJsDate.toDate();
    return dayJsDate.format(targetFormat || format);
  }
  function isValidDate(value, format) {
    if (Array.isArray(value)) {
      return value.every(function (v) {
        if (v === "") return true;
        return dayjs(v, format).isValid() || dayjs(v).isValid();
      });
    }
    if (value === "") return true;
    return dayjs(value, format).isValid() || dayjs(value).isValid();
  }
  function formatDate(newDate, _ref3) {
    var format = _ref3.format,
      targetFormat = _ref3.targetFormat,
      _ref3$dayjsLocale = _ref3.dayjsLocale,
      dayjsLocale = _ref3$dayjsLocale === void 0 ? "zh-cn" : _ref3$dayjsLocale,
      autoSwap = _ref3.autoSwap;
    var result;
    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        dayjsLocale: dayjsLocale,
        targetFormat: targetFormat,
        autoSwap: autoSwap
      });
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        dayjsLocale: dayjsLocale,
        targetFormat: targetFormat
      });
    }
    return result;
  }
  function calcFormatTime(time, timeFormat) {
    if (time && timeFormat) {
      var timeArr = time.split(":");
      var timeFormatArr = timeFormat.split(":");
      return timeArr.slice(0, timeFormatArr.length).join(":");
    }
    return time;
  }
  function formatTime(value, format, timeFormat, defaultTime) {
    var _result;
    var result = Array.isArray(value) ? value : [value];
    defaultTime = Array.isArray(defaultTime) ? defaultTime : [defaultTime, defaultTime];
    result = result.map(function (v, i) {
      if (v) return dayjs(v, typeof v === "string" ? format : void 0).format(timeFormat);
      return calcFormatTime(defaultTime[i], timeFormat);
    });
    result = result.length ? result : defaultTime.map(function (t) {
      return calcFormatTime(t, timeFormat);
    });
    return Array.isArray(value) ? result : (_result = result) === null || _result === void 0 ? void 0 : _result[0];
  }
  function getDefaultFormat(_ref4) {
    var _ref4$mode = _ref4.mode,
      mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
      format = _ref4.format,
      valueType = _ref4.valueType,
      enableTimePicker = _ref4.enableTimePicker;
    if (mode === "year") {
      return {
        format: format || "YYYY",
        valueType: valueType || format || "YYYY",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "month") {
      return {
        format: format || "YYYY-MM",
        valueType: valueType || format || "YYYY-MM",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "quarter") {
      return {
        format: format || "YYYY-[Q]Q",
        valueType: valueType || format || "YYYY-[Q]Q",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "week") {
      return {
        format: format || "gggg-wo",
        valueType: valueType || format || "gggg-wo",
        timeFormat: TIME_FORMAT$1
      };
    }
    if (mode === "date") {
      return {
        format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        valueType: valueType || format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT$1
      };
    }
    log.error("DatePicker", "Invalid mode: ".concat(mode));
    return {};
  }
  function initYearMonthTime(_ref5) {
    var value = _ref5.value,
      _ref5$mode = _ref5.mode,
      mode = _ref5$mode === void 0 ? "date" : _ref5$mode,
      format = _ref5.format,
      _ref5$timeFormat = _ref5.timeFormat,
      timeFormat = _ref5$timeFormat === void 0 ? "HH:mm:ss" : _ref5$timeFormat,
      enableTimePicker = _ref5.enableTimePicker;
    var defaultYearMonthTime = {
      year: [dayjs().year(), dayjs().year()],
      month: [dayjs().month(), dayjs().month()],
      time: [dayjs().format(timeFormat), dayjs().format(timeFormat)]
    };
    if (mode === "year") {
      defaultYearMonthTime.year[1] += 10;
    } else if (mode === "month" || mode === "quarter") {
      defaultYearMonthTime.year[1] += 1;
    } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
      if (defaultYearMonthTime.month[0] === 11) {
        defaultYearMonthTime.year[1] += 1;
        defaultYearMonthTime.month[1] = 0;
      } else {
        defaultYearMonthTime.month[1] += 1;
      }
    }
    if (!value || !Array.isArray(value) || !value.length) {
      return defaultYearMonthTime;
    }
    return {
      year: value.map(function (v) {
        return parseToDayjs(v, format).year();
      }),
      month: value.map(function (v) {
        return parseToDayjs(v, format).month();
      }),
      time: value.map(function (v) {
        return parseToDayjs(v, format).format(timeFormat);
      })
    };
  }

  function useSingleValue(props) {
    var _value$value, _value$value2, _value$value3, _value$value4;
    var _toRefs = Vue.toRefs(props),
      valueFromProps = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel$1(valueFromProps, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      value = _useVModel2[0],
      onChange = _useVModel2[1];
    var formatRef = Vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.multiple ? false : props.enableTimePicker
      });
    });
    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }
    var time = Vue.ref(formatTime(props.multiple ? (_value$value = value.value) === null || _value$value === void 0 ? void 0 : _value$value[0] : value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime));
    var month = Vue.ref(parseToDayjs(props.multiple ? (_value$value2 = value.value) === null || _value$value2 === void 0 ? void 0 : _value$value2[0] : value.value, formatRef.value.format).month());
    var year = Vue.ref(parseToDayjs(props.multiple ? (_value$value3 = value.value) === null || _value$value3 === void 0 ? void 0 : _value$value3[0] : value.value, formatRef.value.format).year());
    var cacheValue = Vue.ref(formatDate(props.multiple ? (_value$value4 = value.value) === null || _value$value4 === void 0 ? void 0 : _value$value4[0] : value.value, {
      format: formatRef.value.format
    }));
    Vue.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = "";
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useSingle(props) {
    var COMPONENT_NAME = usePrefixClass("date-picker");
    var disabled = useDisabled();
    var inputRef = Vue.ref();
    var isReadOnly = useReadonly();
    var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      month = _useSingleValue.month,
      year = _useSingleValue.year,
      cacheValue = _useSingleValue.cacheValue;
    var formatRef = Vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.multiple ? false : props.enableTimePicker
      });
    });
    var popupVisible = Vue.ref(false);
    var isHoverCell = Vue.ref(false);
    var inputValue = Vue.ref(props.multiple ? formatDate(value.value, {
      format: formatRef.value.format
    }) || [] : formatDate(value.value, {
      format: formatRef.value.format
    }));
    var inputProps = Vue.computed(function () {
      var defaultInputProps = _objectSpread$1y(_objectSpread$1y({}, props.inputProps), {}, {
        size: props.size,
        ref: inputRef,
        readonly: isReadOnly.value || !props.allowInput,
        "class": [_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value)],
        onClear: function onClear(context) {
          var _context$e;
          context === null || context === void 0 || (_context$e = context.e) === null || _context$e === void 0 || _context$e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 || onChange("", {
            dayjsValue: dayjs(),
            trigger: "clear"
          });
        }
      });
      return props.multiple ? defaultInputProps : _objectSpread$1y(_objectSpread$1y({}, defaultInputProps), {}, {
        onBlur: function onBlur(val, context) {
          var _props$onBlur;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
            value: val,
            e: context.e
          });
        },
        onFocus: function onFocus(_, _ref2) {
          var _props$onFocus;
          var e = _ref2.e;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
            value: value.value,
            e: e
          });
        },
        onChange: function onChange(val) {
          inputValue.value = val;
          if (!isValidDate(val, formatRef.value.format)) return;
          cacheValue.value = val;
          var newMonth = parseToDayjs(val, formatRef.value.format).month();
          var newYear = parseToDayjs(val, formatRef.value.format).year();
          var newTime = formatTime(val, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
          !Number.isNaN(newYear) && (year.value = newYear);
          !Number.isNaN(newMonth) && (month.value = newMonth);
          !Number.isNaN(newTime) && (time.value = newTime);
        },
        onEnter: function onEnter(val) {
          if (!val) {
            onChange("", {
              dayjsValue: dayjs(),
              trigger: "enter"
            });
            popupVisible.value = false;
            return;
          }
          if (!isValidDate(val, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;
          if (isValidDate(val, formatRef.value.format)) {
            onChange === null || onChange === void 0 || onChange(formatDate(val, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }), {
              dayjsValue: parseToDayjs(val, formatRef.value.format),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format
            });
          } else {
            inputValue.value = "";
          }
        }
      });
    });
    var popupProps = Vue.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;
      return _objectSpread$1y(_objectSpread$1y({
        expandAnimation: true
      }, omit$1(props.popupProps, "on-visible-change")), {}, {
        disabled: disabled.value,
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          var _props$popupProps3, _props$popupProps3$on, _props$popupProps4, _props$popupProps4$on;
          if (disabled.value) return;
          (_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 || (_props$popupProps3$on = _props$popupProps3.onVisibleChange) === null || _props$popupProps3$on === void 0 || _props$popupProps3$on.call(_props$popupProps3, visible, context);
          (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4["on-visible-change"]) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
          if (context.trigger === "trigger-element-click") {
            popupVisible.value = true;
            return;
          }
          popupVisible.value = visible;
        }
      });
    });
    Vue.watch(value, function (value2) {
      if (!value2) {
        inputValue.value = "";
        return;
      }
      if (!isValidDate(value2, formatRef.value.format)) return;
      inputValue.value = formatDate(value2, {
        format: formatRef.value.format
      });
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      inputProps: inputProps,
      popupProps: popupProps,
      inputRef: inputRef,
      cacheValue: cacheValue,
      isHoverCell: isHoverCell,
      onChange: onChange
    };
  }

  function _objectDestructuringEmpty(t) {
    if (null == t) throw new TypeError("Cannot destructure " + t);
  }

  function _extends$1() {
    return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends$1.apply(null, arguments);
  }

  var isBetween = {exports: {}};

  isBetween.exports;
  (function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
            o = t(i),
            r = "(" === (f = f || "()")[0],
            u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween, isBetween.exports);
  var isBetweenExports = isBetween.exports;
  var dayJsIsBetween = /*@__PURE__*/getDefaultExportFromCjs(isBetweenExports);

  var weekOfYear$1 = {exports: {}};

  weekOfYear$1.exports;
  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "week",
        t = "year";
      return function (i, n, r) {
        var f = n.prototype;
        f.week = function (i) {
          if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
          var n = this.$locale().yearStart || 1;
          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
              s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }
          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
            o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function (e) {
          return void 0 === e && (e = null), this.week(e);
        };
      };
    });
  })(weekOfYear$1, weekOfYear$1.exports);
  var weekOfYearExports = weekOfYear$1.exports;
  var weekOfYear = /*@__PURE__*/getDefaultExportFromCjs(weekOfYearExports);

  var weekYear$1 = {exports: {}};

  weekYear$1.exports;
  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.weekYear = function () {
          var e = this.month(),
            t = this.week(),
            n = this.year();
          return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
      };
    });
  })(weekYear$1, weekYear$1.exports);
  var weekYearExports = weekYear$1.exports;
  var weekYear = /*@__PURE__*/getDefaultExportFromCjs(weekYearExports);

  var localeData$1 = {exports: {}};

  localeData$1.exports;
  (function (module, exports) {
    !function (n, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      return function (n, e, t) {
        var r = e.prototype,
          o = function o(n) {
            return n && (n.indexOf ? n : n.s);
          },
          u = function u(n, e, t, r, _u) {
            var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f = a || s.map(function (n) {
                return n.slice(0, r);
              });
            if (!_u) return f;
            var d = i.weekStart;
            return f.map(function (n, e) {
              return f[(e + (d || 0)) % 7];
            });
          },
          i = function i() {
            return t.Ls[t.locale()];
          },
          a = function a(n, e) {
            return n.formats[e] || function (n) {
              return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
                return e || t.slice(1);
              });
            }(n.formats[e.toUpperCase()]);
          },
          s = function s() {
            var n = this;
            return {
              months: function months(e) {
                return e ? e.format("MMMM") : u(n, "months");
              },
              monthsShort: function monthsShort(e) {
                return e ? e.format("MMM") : u(n, "monthsShort", "months", 3);
              },
              firstDayOfWeek: function firstDayOfWeek() {
                return n.$locale().weekStart || 0;
              },
              weekdays: function weekdays(e) {
                return e ? e.format("dddd") : u(n, "weekdays");
              },
              weekdaysMin: function weekdaysMin(e) {
                return e ? e.format("dd") : u(n, "weekdaysMin", "weekdays", 2);
              },
              weekdaysShort: function weekdaysShort(e) {
                return e ? e.format("ddd") : u(n, "weekdaysShort", "weekdays", 3);
              },
              longDateFormat: function longDateFormat(e) {
                return a(n.$locale(), e);
              },
              meridiem: this.$locale().meridiem,
              ordinal: this.$locale().ordinal
            };
          };
        r.localeData = function () {
          return s.bind(this)();
        }, t.localeData = function () {
          var n = i();
          return {
            firstDayOfWeek: function firstDayOfWeek() {
              return n.weekStart || 0;
            },
            weekdays: function weekdays() {
              return t.weekdays();
            },
            weekdaysShort: function weekdaysShort() {
              return t.weekdaysShort();
            },
            weekdaysMin: function weekdaysMin() {
              return t.weekdaysMin();
            },
            months: function months() {
              return t.months();
            },
            monthsShort: function monthsShort() {
              return t.monthsShort();
            },
            longDateFormat: function longDateFormat(e) {
              return a(n, e);
            },
            meridiem: n.meridiem,
            ordinal: n.ordinal
          };
        }, t.months = function () {
          return u(i(), "months");
        }, t.monthsShort = function () {
          return u(i(), "monthsShort", "months", 3);
        }, t.weekdays = function (n) {
          return u(i(), "weekdays", null, null, n);
        }, t.weekdaysShort = function (n) {
          return u(i(), "weekdaysShort", "weekdays", 3, n);
        }, t.weekdaysMin = function (n) {
          return u(i(), "weekdaysMin", "weekdays", 2, n);
        };
      };
    });
  })(localeData$1, localeData$1.exports);
  var localeDataExports = localeData$1.exports;
  var localeData = /*@__PURE__*/getDefaultExportFromCjs(localeDataExports);

  var quarterOfYear$1 = {exports: {}};

  quarterOfYear$1.exports;
  (function (module, exports) {
    !function (t, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      var t = "month",
        n = "quarter";
      return function (e, i) {
        var r = i.prototype;
        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };
        var s = r.add;
        r.add = function (e, i) {
          return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };
        var u = r.startOf;
        r.startOf = function (e, i) {
          var r = this.$utils(),
            s = !!r.u(i) || i;
          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }
          return u.bind(this)(e, i);
        };
      };
    });
  })(quarterOfYear$1, quarterOfYear$1.exports);
  var quarterOfYearExports = quarterOfYear$1.exports;
  var quarterOfYear = /*@__PURE__*/getDefaultExportFromCjs(quarterOfYearExports);

  var advancedFormat$1 = {exports: {}};

  advancedFormat$1.exports;
  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        var r = t.prototype,
          n = r.format;
        r.format = function (e) {
          var t = this,
            r = this.$locale();
          if (!this.isValid()) return n.bind(this)(e);
          var s = this.$utils(),
            a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function (e) {
              switch (e) {
                case "Q":
                  return Math.ceil((t.$M + 1) / 3);
                case "Do":
                  return r.ordinal(t.$D);
                case "gggg":
                  return t.weekYear();
                case "GGGG":
                  return t.isoWeekYear();
                case "wo":
                  return r.ordinal(t.week(), "W");
                case "w":
                case "ww":
                  return s.s(t.week(), "w" === e ? 1 : 2, "0");
                case "W":
                case "WW":
                  return s.s(t.isoWeek(), "W" === e ? 1 : 2, "0");
                case "k":
                case "kk":
                  return s.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");
                case "X":
                  return Math.floor(t.$d.getTime() / 1e3);
                case "x":
                  return t.$d.getTime();
                case "z":
                  return "[" + t.offsetName() + "]";
                case "zzz":
                  return "[" + t.offsetName("long") + "]";
                default:
                  return e;
              }
            });
          return n.bind(this)(a);
        };
      };
    });
  })(advancedFormat$1, advancedFormat$1.exports);
  var advancedFormatExports = advancedFormat$1.exports;
  var advancedFormat = /*@__PURE__*/getDefaultExportFromCjs(advancedFormatExports);

  var customParseFormat$1 = {exports: {}};

  customParseFormat$1.exports;
  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        },
        t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
        n = /\d\d/,
        r = /\d\d?/,
        i = /\d*[^-_:/,()\s\d]+/,
        o = {},
        s = function s(e) {
          return (e = +e) + (e > 68 ? 1900 : 2e3);
        };
      var a = function a(e) {
          return function (t) {
            this[e] = +t;
          };
        },
        f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
          (this.zone || (this.zone = {})).offset = function (e) {
            if (!e) return 0;
            if ("Z" === e) return 0;
            var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
            return 0 === n ? 0 : "+" === t[0] ? -n : n;
          }(e);
        }],
        h = function h(e) {
          var t = o[e];
          return t && (t.indexOf ? t : t.s.concat(t.f));
        },
        u = function u(e, t) {
          var n,
            r = o.meridiem;
          if (r) {
            for (var i = 1; i <= 24; i += 1) if (e.indexOf(r(i, 0, t)) > -1) {
              n = i > 12;
              break;
            }
          } else n = e === (t ? "pm" : "PM");
          return n;
        },
        d = {
          A: [i, function (e) {
            this.afternoon = u(e, !1);
          }],
          a: [i, function (e) {
            this.afternoon = u(e, !0);
          }],
          S: [/\d/, function (e) {
            this.milliseconds = 100 * +e;
          }],
          SS: [n, function (e) {
            this.milliseconds = 10 * +e;
          }],
          SSS: [/\d{3}/, function (e) {
            this.milliseconds = +e;
          }],
          s: [r, a("seconds")],
          ss: [r, a("seconds")],
          m: [r, a("minutes")],
          mm: [r, a("minutes")],
          H: [r, a("hours")],
          h: [r, a("hours")],
          HH: [r, a("hours")],
          hh: [r, a("hours")],
          D: [r, a("day")],
          DD: [n, a("day")],
          Do: [i, function (e) {
            var t = o.ordinal,
              n = e.match(/\d+/);
            if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) t(r).replace(/\[|\]/g, "") === e && (this.day = r);
          }],
          M: [r, a("month")],
          MM: [n, a("month")],
          MMM: [i, function (e) {
            var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
                return e.slice(0, 3);
              })).indexOf(e) + 1;
            if (n < 1) throw new Error();
            this.month = n % 12 || n;
          }],
          MMMM: [i, function (e) {
            var t = h("months").indexOf(e) + 1;
            if (t < 1) throw new Error();
            this.month = t % 12 || t;
          }],
          Y: [/[+-]?\d+/, a("year")],
          YY: [n, function (e) {
            this.year = s(e);
          }],
          YYYY: [/\d{4}/, a("year")],
          Z: f,
          ZZ: f
        };
      function c(n) {
        var r, i;
        r = n, i = o && o.formats;
        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
            var o = r && r.toUpperCase();
            return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
              return t || n.slice(1);
            });
          })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
            u = d[h],
            c = u && u[0],
            l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }
        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                f = i.parser,
                h = e.slice(r),
                u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }
          return function (e) {
            var t = e.afternoon;
            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }
      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
          i = r.parse;
        r.parse = function (e) {
          var t = e.date,
            r = e.utc,
            s = e.args;
          this.$u = r;
          var a = s[1];
          if ("string" == typeof a) {
            var f = !0 === s[2],
              h = !0 === s[3],
              u = f || h,
              d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                  i = r.year,
                  o = r.month,
                  s = r.day,
                  a = r.hours,
                  f = r.minutes,
                  h = r.seconds,
                  u = r.milliseconds,
                  d = r.zone,
                  l = new Date(),
                  m = s || (i || o ? 1 : l.getDate()),
                  M = i || l.getFullYear(),
                  Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                  v = f || 0,
                  D = h || 0,
                  g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  })(customParseFormat$1, customParseFormat$1.exports);
  var customParseFormatExports = customParseFormat$1.exports;
  var customParseFormat = /*@__PURE__*/getDefaultExportFromCjs(customParseFormatExports);

  function ownKeys$1y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(weekOfYear);
  dayjs.extend(weekYear);
  dayjs.extend(localeData);
  dayjs.extend(quarterOfYear);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(dayJsIsBetween);
  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }
  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
      month = _ref.month;
    return new Date(year, month, 1);
  }
  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
      month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }
  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
      month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }
  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }
  function isSameQuarter(date1, date2) {
    return isSameYear(date1, date2) && dayjs(date1).quarter() === dayjs(date2).quarter();
  }
  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }
  function isSameWeek(date1, date2) {
    var dayjsLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "zh-cn";
    return isSameMonth(date1, date2) && dayjs(date1).locale(dayjsLocale).week() === dayjs(date2).locale(dayjsLocale).week();
  }
  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }
  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }
  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var dayjsLocale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "zh-cn";
    var func = {
      isSameYear: isSameYear,
      isSameQuarter: isSameQuarter,
      isSameMonth: isSameMonth,
      isSameWeek: isSameWeek,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2, dayjsLocale);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function subtractMonth(date, num) {
    return dayjs(date).subtract(num, "month").toDate();
  }
  function addMonth(date, num) {
    return dayjs(date).add(num, "month").toDate();
  }
  function getWeeks(_ref4, _ref5) {
    var year = _ref4.year,
      month = _ref4.month;
    var firstDayOfWeek = _ref5.firstDayOfWeek,
      _ref5$showWeekOfYear = _ref5.showWeekOfYear,
      showWeekOfYear = _ref5$showWeekOfYear === void 0 ? false : _ref5$showWeekOfYear,
      _ref5$disableDate = _ref5.disableDate,
      disableDate = _ref5$disableDate === void 0 ? function () {
        return false;
      } : _ref5$disableDate,
      minDate = _ref5.minDate,
      maxDate = _ref5.maxDate,
      _ref5$dayjsLocale = _ref5.dayjsLocale,
      dayjsLocale = _ref5$dayjsLocale === void 0 ? "zh-cn" : _ref5$dayjsLocale,
      _ref5$cancelRangeSele = _ref5.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref5$cancelRangeSele === void 0 ? false : _ref5$cancelRangeSele;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();
    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: isFunction(disableDate) && disableDate(currentDay) || !cancelRangeSelectLimit && outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month",
        dayjsObj: dayjs(currentDay).locale(dayjsLocale)
      });
    }
    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);
      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: isFunction(disableDate) && disableDate(prependDay) || !cancelRangeSelectLimit && outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month",
          dayjsObj: dayjs(prependDay).locale(dayjsLocale)
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }
    var LEN = 42;
    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: isFunction(disableDate) && disableDate(appendDay) || !cancelRangeSelectLimit && outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month",
        dayjsObj: dayjs(appendDay).locale(dayjsLocale)
      });
    }
    var dataList = chunk(daysArr, 7);
    if (showWeekOfYear) {
      dataList.forEach(function (d) {
        d.unshift(_objectSpread$1x(_objectSpread$1x({}, d[0]), {}, {
          active: false,
          value: d[0].value,
          text: dayjs(d[0].value).locale(dayjsLocale).week(),
          dayjsObj: dayjs(d[0].value).locale(dayjsLocale)
        }));
      });
    }
    return dataList;
  }
  function getQuarters(year, _ref6) {
    var _ref6$disableDate = _ref6.disableDate,
      disableDate = _ref6$disableDate === void 0 ? function () {
        return false;
      } : _ref6$disableDate,
      minDate = _ref6.minDate,
      maxDate = _ref6.maxDate,
      quarterLocal = _ref6.quarterLocal,
      _ref6$dayjsLocale = _ref6.dayjsLocale,
      dayjsLocale = _ref6$dayjsLocale === void 0 ? "zh-cn" : _ref6$dayjsLocale,
      _ref6$cancelRangeSele = _ref6.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref6$cancelRangeSele === void 0 ? false : _ref6$cancelRangeSele;
    var quarterArr = [];
    var today = getToday();
    for (var i = 1; i <= 4; i++) {
      var date = dayjs(new Date(year, 0)).quarter(i).toDate();
      quarterArr.push({
        value: date,
        now: isSame(date, today, "quarter"),
        disabled: isFunction(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: quarterLocal[i - 1],
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(quarterArr, 4);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
      disableDate = _ref7$disableDate === void 0 ? function () {
        return false;
      } : _ref7$disableDate,
      minDate = _ref7.minDate,
      maxDate = _ref7.maxDate,
      _ref7$dayjsLocale = _ref7.dayjsLocale,
      dayjsLocale = _ref7$dayjsLocale === void 0 ? "zh-cn" : _ref7$dayjsLocale,
      _ref7$cancelRangeSele = _ref7.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _ref7$cancelRangeSele === void 0 ? false : _ref7$cancelRangeSele;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();
    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 0);
      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: isFunction(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: "".concat(date.getFullYear()),
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(yearArr, 3);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
      disableDate = _params$disableDate === void 0 ? function () {
        return false;
      } : _params$disableDate,
      minDate = params.minDate,
      maxDate = params.maxDate,
      monthLocal = params.monthLocal,
      _params$dayjsLocale = params.dayjsLocale,
      dayjsLocale = _params$dayjsLocale === void 0 ? "zh-cn" : _params$dayjsLocale,
      _params$cancelRangeSe = params.cancelRangeSelectLimit,
      cancelRangeSelectLimit = _params$cancelRangeSe === void 0 ? false : _params$cancelRangeSe;
    var MonthArr = [];
    var today = getToday();
    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: isFunction(disableDate) && disableDate(date) || !cancelRangeSelectLimit && outOfRanges(date, minDate, maxDate),
        active: false,
        text: monthLocal[date.getMonth()],
        dayjsObj: dayjs(date).locale(dayjsLocale)
      });
    }
    return chunk(MonthArr, 3);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, (_objectDestructuringEmpty(_ref8), _ref8));
    var start = args.start,
      end = args.end,
      hoverStart = args.hoverStart,
      hoverEnd = args.hoverEnd,
      _args$type = args.type,
      type = _args$type === void 0 ? "date" : _args$type,
      _args$isRange = args.isRange,
      isRange = _args$isRange === void 0 ? false : _args$isRange,
      value = args.value,
      _args$multiple = args.multiple,
      multiple = _args$multiple === void 0 ? false : _args$multiple;
    if (type === "week") return data;
    if (!isRange) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          if (multiple) {
            var _value$some;
            _item.active = value === null || value === void 0 || (_value$some = value.some) === null || _value$some === void 0 ? void 0 : _value$some.call(value, function (val) {
              return isSame(dayjs(val).toDate(), _item.value, type) && !_item.additional;
            });
          } else {
            _item.active = start && isSame(item.value, start, type) && !_item.additional;
          }
          return _item;
        });
      });
    }
    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = start && isSame(start, date, type);
        var isHoverStart = hoverStart && isSame(hoverStart, date, type);
        var isEnd = end && isSame(end, date, type);
        var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
        _item.active = (isStart || isEnd) && !_item.additional;
        if (start && end) {
          _item.highlight = dayjs(date).isBetween(start, end, type, "[]") && !_item.additional;
          _item.startOfRange = isStart;
          _item.endOfRange = isEnd;
        }
        if (hoverStart && hoverEnd) {
          _item.hoverHighlight = dayjs(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
          _item.hoverStartOfRange = isHoverStart;
          _item.hoverEndOfRange = isHoverEnd;
        }
        return _item;
      });
    });
  }
  function extractTimeObj() {
    var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
    var timeReg = /\d{1,2}(:\d{1,2})?(:\d{1,2})?(:\d{1,3})?/;
    var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];
    var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
      _matchedTimeStr$0$spl2 = _slicedToArray(_matchedTimeStr$0$spl, 4),
      _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
      hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
      _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
      minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
      _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
      seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
      _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
      milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;
    return {
      hours: +hours,
      minutes: +minutes,
      seconds: +seconds,
      milliseconds: +milliseconds,
      meridiem: matchedMeridiem[0]
    };
  }
  function isEnabledDate(_ref9) {
    var value = _ref9.value,
      disableDate = _ref9.disableDate,
      mode = _ref9.mode,
      format = _ref9.format;
    if (!disableDate) return true;
    var availableMode = mode === "quarter" ? "date" : mode;
    var isEnabled = true;
    if (isFunction(disableDate)) {
      return !disableDate(value);
    }
    if (Array.isArray(disableDate)) {
      var formattedDisabledDate = disableDate.map(function (item) {
        return parseToDayjs(item, format);
      });
      var isIncludes = formattedDisabledDate.some(function (item) {
        return item.isSame(dayjs(value));
      });
      return !isIncludes;
    }
    var from = disableDate.from,
      to = disableDate.to,
      before = disableDate.before,
      after = disableDate.after;
    if (from && to) {
      var compareMin = dayjs(from).startOf("day");
      var compareMax = dayjs(to).endOf("day");
      return !dayjs(value).isBetween(compareMin, compareMax, availableMode, "[]");
    }
    var min = before ? new Date(dayjs(before).startOf("day").format()) : null;
    var max = after ? new Date(dayjs(after).endOf("day").format()) : null;
    if (max && min) {
      var _compareMin = dayjs(new Date(min));
      var _compareMax = dayjs(new Date(max));
      isEnabled = dayjs(value).isBetween(_compareMin, _compareMax, availableMode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs(new Date(min));
      isEnabled = !dayjs(value).isBefore(_compareMin2, availableMode);
    } else if (max) {
      var _compareMax2 = dayjs(new Date(max));
      isEnabled = !dayjs(value).isAfter(_compareMax2, availableMode);
    }
    return isEnabled;
  }
  function covertToDate(value, valueType) {
    return valueType === "time-stamp" ? new Date(value) : dayjs(value, valueType).toDate();
  }

  var datePickerProps = {
    allowInput: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    defaultTime: {
      type: String,
      "default": "00:00:00"
    },
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    multiple: Boolean,
    needConfirm: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    selectInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Array, Date],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Array, Date],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array, Date],
      "default": ""
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueType: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onConfirm: Function,
    onFocus: Function,
    onPick: Function,
    onPresetClick: Function
  };

  var TDateHeader = Vue.defineComponent({
    name: "TDatePickerHeader",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      year: Number,
      month: Number,
      onMonthChange: Function,
      onYearChange: Function,
      onJumperClick: Function
    },
    setup: function setup(props) {
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var COMPONENT_NAME = usePrefixClass("date-picker__header");
      var _useConfig2 = useConfig("datePicker"),
        globalConfig = _useConfig2.globalConfig;
      var yearOptions = Vue.ref(initOptions(props.year));
      var showMonthPicker = Vue.computed(function () {
        return props.mode === "date" || props.mode === "week";
      });
      var nearestYear = Vue.computed(function () {
        var _yearOptions$value$fi;
        return ((_yearOptions$value$fi = yearOptions.value.find(function (option) {
          return option.value - props.year <= 9 && option.value - props.year >= 0;
        })) === null || _yearOptions$value$fi === void 0 ? void 0 : _yearOptions$value$fi.value) || props.year;
      });
      var monthOptions = Vue.computed(function () {
        return globalConfig.value.months.map(function (item, index) {
          return {
            label: item,
            value: index
          };
        });
      });
      function initOptions(year) {
        var options = [];
        if (props.mode === "year") {
          var extraYear = year % 10;
          var minYear = year - extraYear - 100;
          var maxYear = year - extraYear + 100;
          for (var i = minYear; i <= maxYear; i += 10) {
            options.push({
              label: "".concat(i, " - ").concat(i + 9),
              value: i + 9
            });
          }
        } else {
          options.push({
            label: "".concat(year),
            value: year
          });
          for (var _i = 1; _i <= 10; _i++) {
            options.push({
              label: "".concat(year + _i),
              value: year + _i
            });
            options.unshift({
              label: "".concat(year - _i),
              value: year - _i
            });
          }
        }
        return options;
      }
      function loadMoreYear(year, type) {
        var options = [];
        if (props.mode === "year") {
          var extraYear = year % 10;
          if (type === "add") {
            for (var i = year - extraYear + 10; i <= year - extraYear + 50; i += 10) {
              options.push({
                label: "".concat(i, " - ").concat(i + 9),
                value: i
              });
            }
          } else {
            for (var _i2 = year - extraYear - 1; _i2 > year - extraYear - 50; _i2 -= 10) {
              options.unshift({
                label: "".concat(_i2 - 9, " - ").concat(_i2),
                value: _i2
              });
            }
          }
        } else if (type === "add") {
          for (var _i3 = year + 1; _i3 <= year + 10; _i3++) {
            options.push({
              label: "".concat(_i3),
              value: _i3
            });
          }
        } else {
          for (var _i4 = year - 1; _i4 > year - 10; _i4--) {
            options.unshift({
              label: "".concat(_i4),
              value: _i4
            });
          }
        }
        return options;
      }
      var labelMap = Vue.computed(function () {
        return {
          year: {
            prev: globalConfig.value.preDecade,
            current: globalConfig.value.now,
            next: globalConfig.value.nextDecade
          },
          month: {
            prev: globalConfig.value.preYear,
            current: globalConfig.value.now,
            next: globalConfig.value.nextYear
          },
          date: {
            prev: globalConfig.value.preMonth,
            current: globalConfig.value.now,
            next: globalConfig.value.nextMonth
          },
          quarter: {
            prev: globalConfig.value.preYear,
            current: globalConfig.value.now,
            next: globalConfig.value.nextYear
          },
          week: {
            prev: globalConfig.value.preMonth,
            current: globalConfig.value.now,
            next: globalConfig.value.nextMonth
          }
        };
      });
      function handleScroll(_ref) {
        var e = _ref.e;
        if (e.target.scrollTop === 0) {
          handlePanelTopClick(e);
        } else if (e.target.scrollTop === e.target.scrollHeight - e.target.clientHeight) {
          handlePanelBottomClick(e);
        }
      }
      function handlePanelTopClick(e) {
        var _e$stopPropagation;
        e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
        var firstYear = yearOptions.value[0].value;
        var options = loadMoreYear(firstYear, "reduce");
        yearOptions.value = [].concat(_toConsumableArray(options), _toConsumableArray(yearOptions.value));
      }
      function handlePanelBottomClick(e) {
        var _e$stopPropagation2;
        e === null || e === void 0 || (_e$stopPropagation2 = e.stopPropagation) === null || _e$stopPropagation2 === void 0 || _e$stopPropagation2.call(e);
        var lastYear = yearOptions.value.slice(-1)[0].value;
        var options = loadMoreYear(lastYear, "add");
        yearOptions.value = [].concat(_toConsumableArray(yearOptions.value), _toConsumableArray(options));
      }
      Vue.watch(function () {
        return props.mode;
      }, function () {
        yearOptions.value = initOptions(props.year);
      });
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-controller")
        }, [showMonthPicker.value && Vue.createVNode(Select, {
          "class": "".concat(COMPONENT_NAME.value, "-controller-month"),
          "value": props.month,
          "options": monthOptions.value,
          "onChange": function onChange(val) {
            var _props$onMonthChange;
            return (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, val);
          },
          "popupProps": {
            attach: function attach(triggerElement) {
              return triggerElement.parentNode;
            },
            overlayClassName: "".concat(COMPONENT_NAME.value, "-controller-month-popup")
          }
        }, null), Vue.createVNode(Select, {
          "class": "".concat(COMPONENT_NAME.value, "-controller-year"),
          "value": props.mode === "year" ? nearestYear.value : props.year,
          "options": yearOptions.value,
          "onChange": function onChange(val) {
            var _props$onYearChange;
            return (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, val);
          },
          "popupProps": {
            onScroll: handleScroll,
            attach: function attach(triggerElement) {
              return triggerElement.parentNode;
            },
            overlayClassName: "".concat(COMPONENT_NAME.value, "-controller-year-popup")
          },
          "panelTopContent": function panelTopContent() {
            return Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select-option"),
              "onClick": handlePanelTopClick
            }, [Vue.createTextVNode("...")]);
          },
          "panelBottomContent": function panelBottomContent() {
            return Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select-option"),
              "onClick": handlePanelBottomClick
            }, [Vue.createTextVNode("...")]);
          }
        }, null)]), Vue.createVNode(PaginationMini, {
          "tips": labelMap.value[props.mode],
          "size": "small",
          "onChange": props.onJumperClick
        }, null)]);
      };
    }
  });

  var TDatePickerCell = Vue.defineComponent({
    name: "TDatePickerCell",
    props: {
      time: String,
      text: [String, Number],
      value: Date,
      active: Boolean,
      highlight: Boolean,
      disabled: Boolean,
      startOfRange: Boolean,
      endOfRange: Boolean,
      hoverHighlight: Boolean,
      hoverStartOfRange: Boolean,
      hoverEndOfRange: Boolean,
      additional: Boolean,
      now: Boolean,
      firstDayOfMonth: Boolean,
      lastDayOfMonth: Boolean,
      onClick: Function,
      onMouseEnter: Function,
      dayjsObj: dayjs_minExports.Dayjs
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__cell");
      var cellClass = Vue.computed(function () {
        var _ref;
        return [COMPONENT_NAME.value, (_ref = {}, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_ref, "".concat(COMPONENT_NAME.value, "--now"), props.now), "".concat(COMPONENT_NAME.value, "--active"), props.active), "".concat(COMPONENT_NAME.value, "--disabled"), props.disabled), "".concat(COMPONENT_NAME.value, "--highlight"), props.highlight), "".concat(COMPONENT_NAME.value, "--hover-highlight"), props.hoverHighlight), "".concat(COMPONENT_NAME.value, "--active-start"), props.startOfRange), "".concat(COMPONENT_NAME.value, "--active-end"), props.endOfRange), "".concat(COMPONENT_NAME.value, "--hover-start"), props.hoverStartOfRange), "".concat(COMPONENT_NAME.value, "--hover-end"), props.hoverEndOfRange), "".concat(COMPONENT_NAME.value, "--additional"), props.additional), _defineProperty$2(_defineProperty$2(_ref, "".concat(COMPONENT_NAME.value, "--first-day-of-month"), props.firstDayOfMonth), "".concat(COMPONENT_NAME.value, "--last-day-of-month"), props.lastDayOfMonth))];
      });
      function handleClick(e) {
        var _props$onClick;
        if (props.disabled) return;
        if (props.time) {
          var _extractTimeObj = extractTimeObj(props.time),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;
          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, props.value, {
          e: e
        });
      }
      function handleMouseEnter() {
        var _props$onMouseEnter;
        if (props.disabled) return;
        if (props.time) {
          var _extractTimeObj2 = extractTimeObj(props.time),
            hours = _extractTimeObj2.hours,
            minutes = _extractTimeObj2.minutes,
            seconds = _extractTimeObj2.seconds,
            milliseconds = _extractTimeObj2.milliseconds,
            meridiem = _extractTimeObj2.meridiem;
          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }
        (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 || _props$onMouseEnter.call(props, props.value);
      }
      return function () {
        return Vue.createVNode("td", {
          "class": cellClass.value,
          "onClick": handleClick,
          "onMouseenter": handleMouseEnter
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-inner")
        }, [props.text])]);
      };
    }
  });

  function ownKeys$1x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1x(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TDateTable = Vue.defineComponent({
    name: "TDatePickerTable",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      value: [String, Number, Array, Date],
      format: String,
      firstDayOfWeek: Number,
      multiple: Boolean,
      data: Array,
      time: String,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__table");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var dayjsLocale = globalConfig.value.dayjsLocale;
      var weekArr = Vue.computed(function () {
        var weekArr2 = [];
        var wi = props.firstDayOfWeek - 1;
        var len = globalConfig.value.weekdays.length;
        while (weekArr2.length < len) {
          weekArr2.push(globalConfig.value.weekdays[wi]);
          wi = (wi + len + 1) % len;
        }
        if (props.mode === "week") weekArr2.unshift(globalConfig.value.weekAbbreviation);
        return weekArr2;
      });
      var showThead = Vue.computed(function () {
        return props.mode === "date" || props.mode === "week";
      });
      var weekRowClass = function weekRowClass(value, targetValue) {
        if (props.mode !== "week" || !value) return {};
        if (isArray$1(value)) {
          var _startObj$locale, _startObj$locale$week, _endObj$locale, _endObj$locale$week;
          if (!value.length) return {};
          var _value$map = value.map(function (v) {
              return v && parseToDayjs(v, props.format);
            }),
            _value$map2 = _slicedToArray(_value$map, 2),
            startObj = _value$map2[0],
            endObj = _value$map2[1];
          var startYear = startObj && startObj.year();
          var startWeek = startObj === null || startObj === void 0 || (_startObj$locale = startObj.locale) === null || _startObj$locale === void 0 || (_startObj$locale = _startObj$locale.call(startObj, dayjsLocale)) === null || _startObj$locale === void 0 || (_startObj$locale$week = _startObj$locale.week) === null || _startObj$locale$week === void 0 ? void 0 : _startObj$locale$week.call(_startObj$locale);
          var endYear = endObj && endObj.year();
          var endWeek = endObj === null || endObj === void 0 || (_endObj$locale = endObj.locale) === null || _endObj$locale === void 0 || (_endObj$locale = _endObj$locale.call(endObj, dayjsLocale)) === null || _endObj$locale === void 0 || (_endObj$locale$week = _endObj$locale.week) === null || _endObj$locale$week === void 0 ? void 0 : _endObj$locale$week.call(_endObj$locale);
          var targetObj = parseToDayjs(targetValue, props.format);
          var targetYear = targetObj.year();
          var targetWeek = targetObj.week();
          var isActive = targetYear === startYear && targetWeek === startWeek || targetYear === endYear && targetWeek === endWeek;
          var isRange = targetYear >= startYear && targetYear <= endYear && targetWeek > startWeek && targetWeek < endWeek;
          return _defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), isActive), "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--range"), isRange);
        }
        var valueDayjs = parseToDayjs(value, props.format).locale(dayjsLocale);
        var targetDayjs = parseToDayjs(targetValue, props.format).locale(dayjsLocale);
        return _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), valueDayjs.year() === targetDayjs.year() && valueDayjs.week() === targetDayjs.week());
      };
      var multipleWeekRowClass = function multipleWeekRowClass(value, targetValue) {
        var _value$map3;
        var targetDayjs = parseToDayjs(targetValue, props.format);
        if (props.mode !== "week" || Array.isArray(value) && !value.length) return {};
        var isSomeYearWeek = (_value$map3 = value.map) === null || _value$map3 === void 0 ? void 0 : _value$map3.call(value, function (v) {
          return parseToDayjs(v, props.format);
        }).some(function (item) {
          return item.week() === targetDayjs.week() && item.year() === targetDayjs.year();
        });
        return _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), isSomeYearWeek);
      };
      var activeRowCss = props.multiple ? multipleWeekRowClass : weekRowClass;
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value,
          "onMouseleave": function onMouseleave(e) {
            var _props$onCellMouseLea;
            return (_props$onCellMouseLea = props.onCellMouseLeave) === null || _props$onCellMouseLea === void 0 ? void 0 : _props$onCellMouseLea.call(props, {
              e: e
            });
          }
        }, [Vue.createVNode("table", null, [showThead.value && Vue.createVNode("thead", null, [Vue.createVNode("tr", {
          "class": "".concat(COMPONENT_NAME.value, "-header-row")
        }, [weekArr.value.map(function (value, i) {
          return Vue.createVNode("th", {
            "class": "".concat(COMPONENT_NAME.value, "-header-cell"),
            "key": i
          }, [value]);
        })])]), Vue.createVNode("tbody", null, [props.data.map(function (row, i) {
          return Vue.createVNode("tr", {
            "key": i,
            "class": _objectSpread$1w(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row"), true), activeRowCss(props.value, row[0].value))
          }, [row.map(function (col, j) {
            return Vue.createVNode(TDatePickerCell, Vue.mergeProps(col, {
              "key": j,
              "time": props.time,
              "onClick": props.onCellClick,
              "onMouseEnter": props.onCellMouseEnter
            }), null);
          })]);
        })])])]);
      };
    }
  });

  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["milliSecond"] = "millisecond";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});
  var TIME_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
  var TWELVE_HOUR_FORMAT = /[h]{1}/;

  var props$N = {
    allowInput: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    disableTime: {
      type: Function
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    inputProps: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    presets: {
      type: Object
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    selectInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClose: Function,
    onConfirm: Function,
    onFocus: Function,
    onInput: Function,
    onOpen: Function,
    onPick: Function
  };

  function ownKeys$1w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1w(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var BooleanType = {
    type: Boolean,
    "default": true,
    validator: function validator(v) {
      return isBoolean(v);
    }
  };
  var panelProps = function panelProps() {
    return {
      disabled: _objectSpread$1v(_objectSpread$1v({}, BooleanType), {
        "default": false
      }),
      isFocus: _objectSpread$1v(_objectSpread$1v({}, BooleanType), {
        "default": false
      }),
      value: {
        type: String,
        "default": ""
      },
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      steps: _objectSpread$1v({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      isShowPanel: _objectSpread$1v(_objectSpread$1v({}, BooleanType), {
        "default": true
      }),
      activeIndex: {
        type: Number
      },
      presets: {
        type: Object
      },
      hideDisabledTime: _objectSpread$1v({}, props$N.hideDisabledTime),
      disableTime: {
        type: Function
      },
      isFooterDisplay: _objectSpread$1v({}, BooleanType)
    };
  };
  var panelColProps = function panelColProps() {
    return {
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      cols: {
        type: Array,
        "default": function _default() {
          return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
        }
      },
      value: {
        type: String,
        "default": ""
      },
      range: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      steps: _objectSpread$1v({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      hideDisabledTime: _objectSpread$1v({}, props$N.hideDisabledTime),
      disableTime: {
        type: Function
      },
      localeMeridiems: {
        type: Array
      }
    };
  };

  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  function validateInputValue(value, format) {
    return dayjs(value, format).format(format) === value;
  }
  function formatInputValue(value, format) {
    return dayjs(value, format).format(format);
  }
  function closestLookup(availableArr, calcVal, step) {
    if (step <= 1) return calcVal;
    return availableArr.sort(function (a, b) {
      return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
    })[0];
  }
  function getPickerCols(format) {
    var renderCol = [];
    var meridiem = EPickerCols.meridiem,
      hour = EPickerCols.hour,
      minute = EPickerCols.minute,
      second = EPickerCols.second,
      milliSecond = EPickerCols.milliSecond;
    var match = format.match(TIME_FORMAT);
    match.forEach(function (m) {
      switch (m) {
        case "H":
        case "HH":
        case "h":
        case "hh":
          renderCol.push(hour);
          break;
        case "a":
        case "A":
          renderCol.push(meridiem);
          break;
        case "m":
        case "mm":
          renderCol.push(minute);
          break;
        case "s":
        case "ss":
          renderCol.push(second);
          break;
        case "SSS":
          renderCol.push(milliSecond);
          break;
      }
    });
    return renderCol;
  }

  function ownKeys$1v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1v(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(customParseFormat);
  var timeArr = [EPickerCols.hour, EPickerCols.minute, EPickerCols.second, EPickerCols.milliSecond];
  var panelOffset = {
    top: 15,
    bottom: 21
  };
  var SinglePanel = Vue.defineComponent({
    name: "TTimePickerPanelCol",
    props: _objectSpread$1u(_objectSpread$1u({}, panelColProps()), {}, {
      position: String,
      triggerScroll: Boolean,
      onChange: Function,
      resetTriggerScroll: Function,
      isShowPanel: Boolean
    }),
    setup: function setup(props) {
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("time-picker__panel");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _toRefs = Vue.toRefs(props),
        steps = _toRefs.steps,
        value = _toRefs.value,
        format = _toRefs.format,
        position = _toRefs.position,
        triggerScroll = _toRefs.triggerScroll;
      var cols = Vue.ref([]);
      var bodyRef = Vue.ref();
      var maskRef = Vue.ref(null);
      var colsRef = Vue.reactive({
        0: null,
        1: null,
        2: null,
        3: null,
        4: null,
        5: null
      });
      var dayjsValue = Vue.computed(function () {
        var isStepsSet = !!steps.value.filter(function (step) {
          return Number(step) > 1;
        }).length;
        if (value.value) return dayjs(value.value, format.value);
        if (isStepsSet) return dayjs().hour(0).minute(0).second(0);
        return dayjs();
      });
      Vue.watch(function () {
        return dayjsValue.value;
      }, function () {
        if (dayjsValue.value && value.value) updateTimeScrollPos(true);
      });
      Vue.watch(function () {
        return triggerScroll.value;
      }, function () {
        if (triggerScroll.value) {
          updateTimeScrollPos(true);
        }
      });
      Vue.onMounted(function () {
        cols.value = getPickerCols(format.value);
      });
      var getItemHeight = function getItemHeight() {
        var _maskRef$value;
        var maskDom = (_maskRef$value = maskRef.value) === null || _maskRef$value === void 0 ? void 0 : _maskRef$value.querySelector("div");
        if (!maskDom) {
          return {
            offsetHeight: 0,
            margin: 0
          };
        }
        return {
          offsetHeight: parseFloat(getComputedStyle(maskDom).height),
          margin: parseFloat(getComputedStyle(maskDom).marginTop)
        };
      };
      var timeItemCanUsed = function timeItemCanUsed(col, el) {
        var colIdx = timeArr.indexOf(col);
        if (colIdx !== -1) {
          var _props$disableTime;
          var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second(), dayjsValue.value.millisecond()];
          params[colIdx] = Number(el);
          return !((_props$disableTime = props.disableTime) !== null && _props$disableTime !== void 0 && (_props$disableTime = _props$disableTime.call.apply(_props$disableTime, [props].concat(params, [{
            partial: position.value || "start"
          }]))) !== null && _props$disableTime !== void 0 && (_props$disableTime = _props$disableTime[col]) !== null && _props$disableTime !== void 0 && _props$disableTime.includes(Number(el)));
        }
        return true;
      };
      var getColList = function getColList(col) {
        var count = 0;
        if (timeArr.includes(col)) {
          var colIdx = timeArr.indexOf(col);
          var colStep = steps.value[colIdx] || 1;
          if (col === EPickerCols.hour) count = TWELVE_HOUR_FORMAT.test(format.value) ? 11 : 23;else if (col === EPickerCols.milliSecond) count = 999;else count = 59;
          var colList = range$1(0, count + 1, Number(colStep)).map(function (v) {
            return padStart(String(v), 2, "0");
          }) || [];
          return props.hideDisabledTime && !!props.disableTime ? colList.filter(function (t) {
            var _props$disableTime2;
            var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second(), dayjsValue.value.millisecond()];
            params[colIdx] = Number(t);
            return !((_props$disableTime2 = props.disableTime) !== null && _props$disableTime2 !== void 0 && (_props$disableTime2 = _props$disableTime2.call.apply(_props$disableTime2, [props].concat(params, [{
              partial: position.value || "start"
            }]))) !== null && _props$disableTime2 !== void 0 && (_props$disableTime2 = _props$disableTime2[col]) !== null && _props$disableTime2 !== void 0 && _props$disableTime2.includes(Number(t)));
          }) : colList;
        }
        return MERIDIEM_LIST;
      };
      var getScrollDistance = function getScrollDistance(col, time) {
        if (col === EPickerCols.hour && /[h]{1}/.test(format.value)) time %= 12;
        var itemIdx = getColList(col).indexOf(padStart(String(time), 2, "0"));
        var _getItemHeight = getItemHeight(),
          offsetHeight = _getItemHeight.offsetHeight,
          margin = _getItemHeight.margin;
        var timeItemTotalHeight = offsetHeight + margin;
        var distance = Math.abs(Math.max(0, itemIdx) * timeItemTotalHeight);
        return distance;
      };
      var handleScroll = function handleScroll(col, idx, e) {
        var _colsRef$idx, _props$onChange;
        var val;
        var formattedVal;
        if (!props.isShowPanel) return;
        var scrollTop = (((_colsRef$idx = colsRef[idx]) === null || _colsRef$idx === void 0 ? void 0 : _colsRef$idx.scrollTop) || 0) + panelOffset.top;
        var _getItemHeight2 = getItemHeight(),
          offsetHeight = _getItemHeight2.offsetHeight,
          margin = _getItemHeight2.margin;
        var timeItemTotalHeight = offsetHeight + margin;
        var colStep = Math.abs(Math.round(scrollTop / timeItemTotalHeight + 0.5));
        var meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
        if (Number.isNaN(colStep)) colStep = 1;
        if (timeArr.includes(col)) {
          var max = 59;
          if (col === EPickerCols.hour) max = /[h]{1}/.test(format.value) ? 11 : 23;else if (col === EPickerCols.milliSecond) max = 999;
          var colIdx = timeArr.indexOf(col);
          var availableArr = range$1(0, max + 1, Number(steps.value[colIdx]) || 1);
          val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps.value[colIdx]) || 1);
          if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];
          if (col === EPickerCols.hour && cols.value.includes(EPickerCols.meridiem) && dayjsValue.value.hour() >= 12) {
            val = Number(val) + 12;
          }
        } else val = meridiem;
        var distance = getScrollDistance(col, val);
        if (!dayjs(dayjsValue.value).isValid() || value.value && !dayjs(value.value, format.value, true).isValid()) return;
        if (timeArr.includes(col)) {
          var _dayjsValue$value$col, _dayjsValue$value;
          if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$value$col = (_dayjsValue$value = dayjsValue.value)[col]) === null || _dayjsValue$value$col === void 0 ? void 0 : _dayjsValue$value$col.call(_dayjsValue$value, val).format(format.value);else formattedVal = dayjsValue.value.format(format.value);
        } else {
          var currentHour = dayjsValue.value.hour();
          if (meridiem === AM && currentHour >= 12) {
            formattedVal = dayjsValue.value.hour(currentHour - 12).format(format.value);
          } else if (meridiem === PM && currentHour < 12) {
            formattedVal = dayjsValue.value.hour(currentHour + 12).format(format.value);
          } else {
            formattedVal = dayjsValue.value.format(format.value);
          }
        }
        if (formattedVal !== value.value) (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, formattedVal, e);
        if (distance !== scrollTop) {
          var _scrollCtrl$scrollTo;
          var scrollCtrl = colsRef[cols.value.indexOf(col)];
          if (!scrollCtrl || scrollCtrl.scrollTop === distance) return;
          (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 || _scrollCtrl$scrollTo.call(scrollCtrl, {
            top: distance,
            behavior: "smooth"
          });
        }
      };
      var scrollToTime = function scrollToTime(col, time, idx) {
        var _scrollCtrl$scrollTo2;
        var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
        var distance = getScrollDistance(col, time);
        var scrollCtrl = colsRef[idx];
        if (!scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
        (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 || _scrollCtrl$scrollTo2.call(scrollCtrl, {
          top: distance,
          behavior: behavior
        });
      };
      var handleTimeItemClick = function handleTimeItemClick(col, el, idx, e) {
        if (!timeItemCanUsed(col, el)) return;
        if (timeArr.includes(col)) {
          if (col === EPickerCols.hour && dayjsValue.value.format("a") === PM && cols.value.includes(EPickerCols.meridiem)) {
            el = Number(el) + 12;
          }
          scrollToTime(col, el, idx, "smooth");
        } else {
          var currentHour = dayjsValue.value.hour();
          if (el === AM && currentHour >= 12) {
            var _props$onChange2;
            (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 || _props$onChange2.call(props, dayjsValue.value.hour(currentHour - 12).format(format.value), e);
          } else if (el === PM && currentHour < 12) {
            var _props$onChange3;
            (_props$onChange3 = props.onChange) === null || _props$onChange3 === void 0 || _props$onChange3.call(props, dayjsValue.value.hour(currentHour + 12).format(format.value), e);
          }
        }
      };
      var updateTimeScrollPos = function updateTimeScrollPos() {
        var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var behavior = value.value && !isAutoScroll ? "smooth" : "auto";
        var isStepsSet = !!steps.value.filter(function (step) {
          return Number(step) > 1;
        }).length;
        Vue.nextTick(function () {
          cols.value.forEach(function (col, idx) {
            if (!isStepsSet || isStepsSet && value.value) {
              var _dayjsValue$value$col2, _dayjsValue$value2;
              scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$value$col2 = (_dayjsValue$value2 = dayjsValue.value)[col]) === null || _dayjsValue$value$col2 === void 0 ? void 0 : _dayjsValue$value$col2.call(_dayjsValue$value2) : dayjsValue.value.format("a"), idx, behavior);
            } else {
              var _getColList;
              scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
            }
          });
        });
        props.resetTriggerScroll();
      };
      var isCurrent = function isCurrent(col, colItem) {
        var _dayjsValue$value$col3, _dayjsValue$value3;
        var colVal;
        if (col === EPickerCols.meridiem) {
          var currentMeridiem = dayjsValue.value.format("a");
          return currentMeridiem === colItem;
        }
        colVal = (_dayjsValue$value$col3 = (_dayjsValue$value3 = dayjsValue.value)[col]) === null || _dayjsValue$value$col3 === void 0 ? void 0 : _dayjsValue$value$col3.call(_dayjsValue$value3);
        if (col === EPickerCols.hour && /[h]{1}/.test(format.value)) {
          colVal %= 12;
        }
        return colVal === Number(colItem);
      };
      return function () {
        var _cols$value$map, _cols$value, _cols$value$map2, _cols$value2;
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-body"),
          "ref": bodyRef
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-body-active-mask"),
          "ref": maskRef
        }, [(_cols$value$map = (_cols$value = cols.value).map) === null || _cols$value$map === void 0 ? void 0 : _cols$value$map.call(_cols$value, function (col, idx) {
          return Vue.createVNode("div", {
            "key": "".concat(col, "_").concat(idx)
          }, null);
        })]), (_cols$value$map2 = (_cols$value2 = cols.value).map) === null || _cols$value$map2 === void 0 ? void 0 : _cols$value$map2.call(_cols$value2, function (col, idx) {
          return Vue.createVNode("ul", {
            "key": "".concat(col, "_").concat(idx),
            "ref": function ref(el) {
              return colsRef[idx] = el;
            },
            "class": "".concat(COMPONENT_NAME.value, "-body-scroll"),
            "onScroll": debounce$1(function (e) {
              return handleScroll(col, idx, e);
            }, 50)
          }, [getColList(col).map(function (el) {
            return Vue.createVNode("li", {
              "key": el,
              "class": ["".concat(COMPONENT_NAME.value, "-body-scroll-item"), _defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, !timeItemCanUsed(col, el)), STATUS.value.current, isCurrent(col, el))],
              "onClick": function onClick(e) {
                return handleTimeItemClick(col, el, idx, e);
              }
            }, [timeArr.includes(col) ? TWELVE_HOUR_FORMAT.test(format.value) && col === EPickerCols.hour && el === "00" ? "12" : el : globalConfig.value[el === AM ? "anteMeridiem" : "postMeridiem"]]);
          })]);
        })]);
      };
    }
  });

  function ownKeys$1u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1u(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$r(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  dayjs.extend(customParseFormat);
  var _TimePickerPanel = Vue.defineComponent({
    name: "TTimePickerPanel",
    props: _objectSpread$1t(_objectSpread$1t({}, panelProps()), {}, {
      isFooterDisplay: Boolean,
      handleConfirmClick: Function,
      onChange: Function
    }),
    setup: function setup(props) {
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("time-picker__panel");
      var _toRefs = Vue.toRefs(props),
        steps = _toRefs.steps,
        isFooterDisplay = _toRefs.isFooterDisplay,
        isShowPanel = _toRefs.isShowPanel;
      var triggerScroll = Vue.ref(false);
      var panelRef = Vue.ref();
      var showNowTimeBtn = Vue.computed(function () {
        return !!steps.value.filter(function (step) {
          return Number(step) > 1;
        }).length;
      });
      var defaultValue = Vue.computed(function () {
        var isStepsSet = showNowTimeBtn.value;
        var formattedValue = dayjs(props.value, props.format);
        if (props.value && formattedValue.isValid()) {
          return formattedValue.format(props.format);
        }
        if (isStepsSet) {
          return dayjs().hour(0).minute(0).second(0).format(props.format);
        }
        return dayjs().hour(0).minute(0).second(0).format(props.format);
      });
      var panelColUpdate = function panelColUpdate() {
        Vue.nextTick(function () {
          triggerScroll.value = true;
        });
      };
      var resetTriggerScroll = function resetTriggerScroll() {
        triggerScroll.value = false;
      };
      var handlePresetClick = function handlePresetClick(presetValue) {
        var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
        if (typeof props.activeIndex === "number") {
          if (Array.isArray(presetVal)) {
            var _props$onChange;
            (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, presetVal[props.activeIndex]);
          } else {
            log.error("TimePicker", "preset: ".concat(props.presets, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
          }
        } else {
          var _props$onChange2;
          (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 || _props$onChange2.call(props, presetVal);
        }
      };
      var renderFooter = function renderFooter() {
        if (!isUndefined(props.presets)) return Object.keys(props.presets || []).map(function (key) {
          return Vue.createVNode(TButton, {
            "key": key,
            "theme": "primary",
            "size": "small",
            "variant": "text",
            "onClick": function onClick() {
              return handlePresetClick(props.presets[key]);
            }
          }, _isSlot$r(key) ? key : {
            "default": function _default() {
              return [key];
            }
          });
        });
        return !showNowTimeBtn.value ? Vue.createVNode(TButton, {
          "theme": "primary",
          "variant": "text",
          "size": "small",
          "onClick": function onClick() {
            var _props$onChange3;
            return (_props$onChange3 = props.onChange) === null || _props$onChange3 === void 0 ? void 0 : _props$onChange3.call(props, dayjs().format(props.format));
          }
        }, {
          "default": function _default() {
            return [globalConfig.value.now];
          }
        }) : null;
      };
      Vue.onMounted(function () {
        panelColUpdate();
      });
      Vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        panelColUpdate();
      });
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-section-body")
        }, [Vue.createVNode(SinglePanel, Vue.mergeProps(props, {
          "ref": panelRef,
          "format": props.format || DEFAULT_FORMAT,
          "steps": props.steps || DEFAULT_STEPS,
          "value": dayjs(props.value, props.format).isValid() ? props.value : defaultValue.value,
          "triggerScroll": triggerScroll.value,
          "onChange": props.onChange,
          "resetTriggerScroll": resetTriggerScroll,
          "isShowPanel": props.isShowPanel
        }), null)]), isFooterDisplay.value ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-section-footer")
        }, [Vue.createVNode(TButton, {
          "theme": "primary",
          "variant": "base",
          "disabled": !props.value,
          "onClick": function onClick(e) {
            var _props$handleConfirmC;
            return (_props$handleConfirmC = props.handleConfirmClick) === null || _props$handleConfirmC === void 0 ? void 0 : _props$handleConfirmC.call(props, e, defaultValue.value);
          },
          "size": "small"
        }, {
          "default": function _default() {
            return [globalConfig.value.confirm];
          }
        }), renderFooter()]) : null]);
      };
    }
  });

  function ownKeys$1t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1t(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TPanelContent = Vue.defineComponent({
    name: "TPanelContent",
    props: {
      mode: String,
      format: String,
      enableTimePicker: Boolean,
      timePickerProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      year: Number,
      month: Number,
      tableData: Array,
      time: String,
      multiple: Boolean,
      firstDayOfWeek: Number,
      partial: String,
      popupVisible: Boolean,
      onYearChange: Function,
      onMonthChange: Function,
      onJumperClick: Function,
      onCellMouseEnter: Function,
      onCellClick: Function,
      onCellMouseLeave: Function,
      onTimePickerChange: Function,
      value: [String, Number, Array, Date]
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");
      var _getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        }),
        timeFormat = _getDefaultFormat.timeFormat;
      var defaultTimeValue = "00:00:00";
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-").concat(props.mode)
        }, [Vue.createVNode(TDateHeader, {
          "mode": props.mode,
          "year": props.year,
          "month": props.month,
          "onMonthChange": function onMonthChange(val) {
            var _props$onMonthChange;
            return (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, val, {
              partial: props.partial
            });
          },
          "onYearChange": function onYearChange(val) {
            var _props$onYearChange;
            return (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, val, {
              partial: props.partial
            });
          },
          "onJumperClick": function onJumperClick(_ref) {
            var _props$onJumperClick;
            var trigger = _ref.trigger;
            return (_props$onJumperClick = props.onJumperClick) === null || _props$onJumperClick === void 0 ? void 0 : _props$onJumperClick.call(props, {
              trigger: trigger,
              partial: props.partial
            });
          }
        }, null), Vue.createVNode(TDateTable, {
          "mode": props.mode,
          "data": props.tableData,
          "time": props.time,
          "value": props.value,
          "format": props.format,
          "multiple": props.multiple,
          "firstDayOfWeek": props.firstDayOfWeek,
          "onCellClick": function onCellClick(date, _ref2) {
            var _props$onCellClick;
            var e = _ref2.e;
            return (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, date, {
              e: e,
              partial: props.partial
            });
          },
          "onCellMouseEnter": function onCellMouseEnter(date) {
            var _props$onCellMouseEnt;
            return (_props$onCellMouseEnt = props.onCellMouseEnter) === null || _props$onCellMouseEnt === void 0 ? void 0 : _props$onCellMouseEnt.call(props, date, {
              partial: props.partial
            });
          },
          "onCellMouseLeave": props.onCellMouseLeave
        }, null)]), props.enableTimePicker && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-time")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-time-viewer")
        }, [props.time || defaultTimeValue]), Vue.createVNode(_TimePickerPanel, _objectSpread$1s({
          key: props.partial,
          isShowPanel: props.popupVisible,
          format: timeFormat,
          value: props.time || defaultTimeValue,
          onChange: props.onTimePickerChange
        }, props.timePickerProps), null)])]);
      };
    }
  });

  function _isSlot$q(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var TDateFooter = Vue.defineComponent({
    name: "TDatePickerTable",
    props: {
      enableTimePicker: Boolean,
      presetsPlacement: String,
      presets: Object,
      needConfirm: Boolean,
      selectedValue: [String, Number, Array, Date],
      onPresetClick: Function,
      onConfirmClick: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__footer");
      var presetsClass = usePrefixClass("date-picker__presets");
      var _useConfig = useConfig("datePicker"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var footerClass = Vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props.presetsPlacement)];
      });
      return function () {
        var _slot;
        return Vue.createVNode("div", {
          "class": footerClass.value
        }, [Vue.createVNode("div", {
          "class": presetsClass.value
        }, [props.presets && Object.keys(props.presets).map(function (key) {
          return Vue.createVNode(Button, {
            "key": key,
            "size": "small",
            "variant": "text",
            "onClick": function onClick(e) {
              var _props$onPresetClick;
              return (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, props.presets[key], {
                e: e,
                preset: _defineProperty$2({}, key, props.presets[key])
              });
            }
          }, _isSlot$q(key) ? key : {
            "default": function _default() {
              return [key];
            }
          });
        })]), props.enableTimePicker && props.needConfirm && Vue.createVNode(Button, {
          "disabled": !props.selectedValue,
          "size": "small",
          "theme": "primary",
          "onClick": function onClick(e) {
            var _props$onConfirmClick;
            return (_props$onConfirmClick = props.onConfirmClick) === null || _props$onConfirmClick === void 0 ? void 0 : _props$onConfirmClick.call(props, {
              e: e
            });
          }
        }, _isSlot$q(_slot = t(globalConfig.value.confirm)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]);
      };
    }
  });

  var TExtraContent = Vue.defineComponent({
    name: "TExtraContent",
    props: {
      presets: Object,
      enableTimePicker: Boolean,
      presetsPlacement: String,
      needConfirm: Boolean,
      onPresetClick: Function,
      onConfirmClick: Function,
      selectedValue: [String, Number, Array, Date]
    },
    setup: function setup(props) {
      var showPanelFooter = Vue.computed(function () {
        return props.needConfirm || props.presets;
      });
      return function () {
        return showPanelFooter.value ? Vue.createVNode(TDateFooter, {
          "presets": props.presets,
          "onPresetClick": props.onPresetClick,
          "enableTimePicker": props.enableTimePicker,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement,
          "selectedValue": props.selectedValue,
          "needConfirm": props.needConfirm
        }, null) : null;
      };
    }
  });

  function useDisableDate(props) {
    var _disableDate = props.disableDate,
      format = props.format,
      mode = props.mode,
      start = props.start,
      end = props.end;
    return {
      disableDate: function disableDate(value) {
        return !isEnabledDate({
          disableDate: _disableDate,
          format: format,
          mode: mode,
          value: value
        });
      },
      minDate: isObject(_disableDate) && "before" in _disableDate ? new Date(dayjs(_disableDate.before).startOf("day").format()) : start,
      maxDate: isObject(_disableDate) && "after" in _disableDate ? new Date(dayjs(_disableDate.after).endOf("day").format()) : end
    };
  }

  function useRangeValue(props) {
    var _toRefs = Vue.toRefs(props),
      valueFromProps = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel$1(valueFromProps, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      value = _useVModel2[0],
      onChange = _useVModel2[1];
    var formatRef = Vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }
    if (!isArray$1(value.value)) {
      console.error("typeof value: ".concat(value.value, " must be Array!"));
    } else if (!isValidDate(value.value, formatRef.value.format)) {
      console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
    }
    var isFirstValueSelected = Vue.ref(false);
    var time = Vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      timeFormat: formatRef.value.timeFormat
    }).time);
    var month = Vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      enableTimePicker: props.enableTimePicker
    }).month);
    var year = Vue.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format
    }).year);
    var cacheValue = Vue.ref(formatDate(value.value, {
      format: formatRef.value.format
    }));
    Vue.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = [];
        return;
      }
      if (!isValidDate(value.value, formatRef.value.format)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1s(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var PARTIAL_MAP = {
    first: "start",
    second: "end"
  };
  function useRange(props) {
    var COMPONENT_NAME = usePrefixClass("date-range-picker");
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: TdCalendarIcon
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var renderTNodeJSX = useTNodeJSX();
    var isMountedRef = Vue.ref(false);
    var inputRef = Vue.ref();
    var _useRangeValue = useRangeValue(props),
      value = _useRangeValue.value,
      onChange = _useRangeValue.onChange,
      time = _useRangeValue.time,
      month = _useRangeValue.month,
      year = _useRangeValue.year,
      cacheValue = _useRangeValue.cacheValue,
      isFirstValueSelected = _useRangeValue.isFirstValueSelected;
    var formatRef = Vue.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    var popupVisible = Vue.ref(false);
    var isHoverCell = Vue.ref(false);
    var activeIndex = Vue.ref(0);
    var inputValue = Vue.ref(formatDate(props.value, {
      format: formatRef.value.format
    }));
    var isReadOnly = useReadonly();
    var rangeInputProps = Vue.computed(function () {
      return _objectSpread$1r(_objectSpread$1r({}, props.rangeInputProps), {}, {
        size: props.size,
        ref: inputRef,
        borderless: props.borderless,
        clearable: props.clearable && !isReadOnly.value,
        prefixIcon: function prefixIcon() {
          return renderTNodeJSX("prefixIcon");
        },
        readonly: isReadOnly.value || !props.allowInput,
        separator: props.separator || globalConfig.value.rangeSeparator,
        placeholder: props.placeholder || globalConfig.value.placeholder[props.mode],
        activeIndex: popupVisible.value ? activeIndex.value : void 0,
        suffixIcon: function suffixIcon() {
          return renderTNodeJSX("suffixIcon") || Vue.createVNode(CalendarIcon, null, null);
        },
        "class": _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value),
        onClick: function onClick(_ref) {
          var position = _ref.position;
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onClear: function onClear(_ref2) {
          var e = _ref2.e;
          e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 || onChange([], {
            dayjsValue: [],
            trigger: "clear"
          });
        },
        onBlur: function onBlur(newVal, _ref3) {
          var _props$onBlur;
          var e = _ref3.e,
            position = _ref3.position;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
        },
        onFocus: function onFocus(newVal, _ref4) {
          var _props$onFocus;
          var e = _ref4.e,
            position = _ref4.position;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onChange: function onChange(newVal, _ref5) {
          _ref5.e;
            _ref5.position;
          inputValue.value = newVal;
          if (!isValidDate(newVal, formatRef.value.format)) return;
          cacheValue.value = newVal;
          var newYear = [];
          var newMonth = [];
          var newTime = [];
          newVal.forEach(function (v) {
            newYear.push(parseToDayjs(v, formatRef.value.format).year());
            newMonth.push(parseToDayjs(v, formatRef.value.format).month());
            newTime.push(parseToDayjs(v, formatRef.value.format).format(formatRef.value.timeFormat));
          });
          year.value = newYear;
          month.value = newMonth;
          time.value = newTime;
        },
        onEnter: function onEnter(newVal) {
          if (!isValidDate(newVal, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;
          if (isValidDate(newVal, formatRef.value.format)) {
            onChange === null || onChange === void 0 || onChange(formatDate(newVal, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: newVal.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format
            });
          } else {
            inputValue.value = [];
          }
        }
      });
    });
    var popupProps = Vue.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;
      return _objectSpread$1r(_objectSpread$1r({
        expandAnimation: true
      }, omit$1(props.popupProps, "on-visible-change")), {}, {
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          var _props$popupProps3, _props$popupProps3$on, _props$popupProps4, _props$popupProps4$on;
          if (isReadOnly.value) return;
          (_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 || (_props$popupProps3$on = _props$popupProps3.onVisibleChange) === null || _props$popupProps3$on === void 0 || _props$popupProps3$on.call(_props$popupProps3, visible, context);
          (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4["on-visible-change"]) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
          if (context.trigger === "trigger-element-click") {
            var indexMap = {
              0: "first",
              1: "second"
            };
            inputRef.value.focus({
              position: indexMap[activeIndex.value]
            });
            popupVisible.value = true;
            return;
          }
          popupVisible.value = visible;
        }
      });
    });
    Vue.watch(value, function (value2) {
      if (!value2) {
        inputValue.value = [];
        return;
      }
      if (!isValidDate(value2, formatRef.value.format)) return;
      inputValue.value = formatDate(value2, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
    }, {
      immediate: true
    });
    Vue.watch(activeIndex, function (index) {
      var _inputRef$value, _inputRef$value$focus;
      if (!isMountedRef.value) {
        isMountedRef.value = true;
        return;
      }
      if (!popupVisible.value) return;
      var indexMap = {
        0: "first",
        1: "second"
      };
      (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 || _inputRef$value$focus.call(_inputRef$value, {
        position: indexMap[index]
      });
    }, {
      immediate: true
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      rangeInputProps: rangeInputProps,
      popupProps: popupProps,
      isHoverCell: isHoverCell,
      activeIndex: activeIndex,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function useTableData(props) {
    var _props$firstDayOfWeek;
    var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var options = {
      minDate: props.minDate,
      maxDate: props.maxDate,
      disableDate: props.disableDate,
      firstDayOfWeek: (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : globalConfig.value.firstDayOfWeek,
      monthLocal: globalConfig.value.months,
      quarterLocal: globalConfig.value.quarters,
      showWeekOfYear: props.mode === "week",
      dayjsLocale: globalConfig.value.dayjsLocale,
      cancelRangeSelectLimit: props.cancelRangeSelectLimit
    };
    var data = [];
    if (props.mode === "date") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "week") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "quarter") {
      data = getQuarters(props.year, options);
    } else if (props.mode === "month") {
      data = getMonths(props.year, options);
    } else if (props.mode === "year") {
      data = getYears(props.year, options);
    }
    return flagActive(data, {
      start: props.start,
      end: props.end,
      hoverStart: props.hoverStart,
      hoverEnd: props.hoverEnd,
      type: props.mode,
      isRange: props.isRange,
      value: props.value,
      multiple: props.multiple
    });
  }

  function ownKeys$1r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1r(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TSinglePanel = Vue.defineComponent({
    name: "TSinglePanel",
    props: {
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: [String, Number, Array, Date],
      timePickerProps: Object,
      presets: Object,
      enableTimePicker: Boolean,
      firstDayOfWeek: Number,
      year: Number,
      month: Number,
      time: String,
      popupVisible: Boolean,
      multiple: Boolean,
      needConfirm: Boolean,
      onPanelClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var format = Vue.computed(function () {
        var _getDefaultFormat;
        return (_getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        })) === null || _getDefaultFormat === void 0 ? void 0 : _getDefaultFormat.format;
      });
      var disableDateOptions = Vue.computed(function () {
        return useDisableDate({
          format: format.value,
          mode: props.mode,
          disableDate: props.disableDate
        });
      });
      var tableData = Vue.computed(function () {
        return useTableData(_objectSpread$1q({
          year: props.year,
          month: props.month,
          mode: props.mode,
          start: props.value ? parseToDayjs(props.multiple ? props.value[0] : props.value, format.value).toDate() : void 0,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek,
          multiple: props.multiple,
          value: props.value
        }, disableDateOptions.value));
      });
      var panelContentProps = Vue.computed(function () {
        return {
          format: format.value,
          value: props.value,
          mode: props.mode,
          year: props.year,
          month: props.month,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek,
          tableData: tableData.value,
          popupVisible: props.popupVisible,
          multiple: props.multiple,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          time: props.time,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      var extraProps = Vue.computed(function () {
        return {
          presets: props.presets,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          onPresetClick: props.onPresetClick,
          onConfirmClick: props.onConfirmClick,
          selectedValue: props.value,
          needConfirm: props.needConfirm
        };
      });
      return function () {
        return Vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--direction-row"), ["left", "right"].includes(props.presetsPlacement))],
          "onClick": function onClick(e) {
            var _props$onPanelClick;
            return (_props$onPanelClick = props.onPanelClick) === null || _props$onPanelClick === void 0 ? void 0 : _props$onPanelClick.call(props, {
              e: e
            });
          }
        }, [["top", "left"].includes(props.presetsPlacement) ? Vue.createVNode(TExtraContent, extraProps.value, null) : null, Vue.createVNode(TPanelContent, panelContentProps.value, null), ["bottom", "right"].includes(props.presetsPlacement) ? Vue.createVNode(TExtraContent, extraProps.value, null) : null]);
      };
    }
  });

  var _DatePicker = Vue.defineComponent({
    name: "TDatePicker",
    props: datePickerProps,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("date-picker");
      var _useSingle = useSingle(props2),
        inputValue = _useSingle.inputValue,
        popupVisible = _useSingle.popupVisible,
        inputProps = _useSingle.inputProps,
        popupProps = _useSingle.popupProps,
        isHoverCell = _useSingle.isHoverCell,
        cacheValue = _useSingle.cacheValue,
        value = _useSingle.value,
        year = _useSingle.year,
        month = _useSingle.month,
        time = _useSingle.time,
        inputRef = _useSingle.inputRef,
        onChange = _useSingle.onChange;
      var disabled = useDisabled();
      var renderTNodeJSX = useTNodeJSX();
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var isReadOnly = useReadonly();
      var _useGlobalIcon = useGlobalIcon({
          CalendarIcon: TdCalendarIcon
        }),
        CalendarIcon = _useGlobalIcon.CalendarIcon;
      var formatRef = Vue.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          format: props2.format,
          valueType: props2.valueType,
          enableTimePicker: props2.multiple ? false : props2.enableTimePicker
        });
      });
      var valueDisplayParams = Vue.computed(function () {
        return {
          value: value.value,
          displayValue: inputValue.value
        };
      });
      Vue.watch(popupVisible, function (visible) {
        var _formatRef$value;
        if (props2.multiple) return;
        if (!props2.needConfirm && props2.enableTimePicker && !visible) {
          var nextValue = formatDate(inputValue.value, {
            format: formatRef.value.format
          });
          if (nextValue) {
            onChange === null || onChange === void 0 || onChange(formatDate(inputValue.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }), {
              dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
              trigger: "confirm"
            });
          } else {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format
            });
          }
        }
        var dateValue = value.value && !isDate$3(value.value) && !["week", "quarter"].includes(props2.mode) ? covertToDate(value.value, (_formatRef$value = formatRef.value) === null || _formatRef$value === void 0 ? void 0 : _formatRef$value.valueType) : value.value;
        cacheValue.value = formatDate(dateValue, {
          format: formatRef.value.valueType,
          targetFormat: formatRef.value.format
        });
        inputValue.value = formatDate(dateValue, {
          format: formatRef.value.valueType,
          targetFormat: formatRef.value.format
        });
        if (visible) {
          year.value = parseToDayjs(value.value, formatRef.value.valueType).year();
          month.value = parseToDayjs(value.value, formatRef.value.format).month();
          time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
        } else {
          isHoverCell.value = false;
        }
      });
      function onCellMouseEnter(date) {
        if (props2.multiple) return;
        isHoverCell.value = true;
        inputValue.value = formatDate(date, {
          format: formatRef.value.format
        });
      }
      function onCellMouseLeave() {
        if (props2.multiple) return;
        isHoverCell.value = false;
        inputValue.value = formatDate(cacheValue.value, {
          format: formatRef.value.format
        });
      }
      function onCellClick(date) {
        var _props2$onPick;
        isHoverCell.value = false;
        if (props2.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }
        if (props2.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format
          });
        } else {
          if (props2.multiple) {
            var newDate = processDate(date);
            onChange(newDate, {
              dayjsValue: parseToDayjs(date, formatRef.value.format),
              trigger: "pick"
            });
            return;
          }
          onChange === null || onChange === void 0 || onChange(formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
          popupVisible.value = false;
        }
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, date);
      }
      function processDate(date) {
        var isSameDate;
        var currentValue = value.value || [];
        var dayjsLocale = globalConfig.value.dayjsLocale;
        var currentDate;
        if (props2.mode !== "week") isSameDate = currentValue.some(function (val) {
          return isSame(parseToDayjs(val, formatRef.value.format).toDate(), date, props2.mode, dayjsLocale);
        });else {
          isSameDate = currentValue.some(function (val) {
            return val === dayjs(date).locale(dayjsLocale).format(formatRef.value.format);
          });
        }
        if (!isSameDate) {
          currentDate = currentValue.concat(formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }));
        } else {
          currentDate = currentValue.filter(function (val) {
            return formatDate(val, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }) !== formatDate(date, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            });
          });
        }
        return currentDate;
      }
      function onTagRemoveClick(ctx) {
        if (["week", "quarter"].includes(props2.mode)) {
          onChange === null || onChange === void 0 || onChange(ctx.value, {
            trigger: "tag-remove"
          });
          return;
        }
        var removeDate = dayjs(ctx.item).toDate();
        var newDate = processDate(removeDate);
        onChange === null || onChange === void 0 || onChange(newDate, {
          dayjsValue: parseToDayjs(removeDate, formatRef.value.format),
          trigger: "tag-remove"
        });
      }
      function onTagClearClick(_ref) {
        var e = _ref.e;
        e.stopPropagation();
        popupVisible.value = false;
        onChange === null || onChange === void 0 || onChange([], {
          dayjsValue: dayjs(),
          trigger: "clear"
        });
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props2$onPick2;
        time.value = val;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs(inputValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(inputValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        inputValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        cacheValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 || _props2$onPick2.call(props2, nextDate);
      }
      function onConfirmClick(_ref3) {
        var e = _ref3.e;
        var nextValue = formatDate(inputValue.value, {
          format: formatRef.value.format
        });
        if (nextValue) {
          var _props2$onConfirm;
          props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
            date: dayjs(nextValue).toDate(),
            e: e
          });
          onChange === null || onChange === void 0 || onChange(formatDate(inputValue.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: parseToDayjs(inputValue.value, formatRef.value.format),
            trigger: "confirm"
          });
        } else {
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format
          });
        }
        popupVisible.value = false;
      }
      function onPresetClick(presetValue) {
        var presetVal = isFunction(presetValue) ? presetValue() : presetValue;
        onChange === null || onChange === void 0 || onChange(formatDate(presetVal, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
          trigger: "preset"
        });
        inputValue.value = formatDate(presetVal, {
          format: formatRef.value.format
        });
        popupVisible.value = false;
      }
      function onYearChange(nextYear) {
        year.value = nextYear;
      }
      function onMonthChange(nextMonth) {
        month.value = nextMonth;
      }
      var panelProps = Vue.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          multiple: props2.multiple,
          time: props2.multiple ? "" : time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.multiple ? false : props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          popupVisible: popupVisible.value,
          needConfirm: props2.needConfirm,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange,
          onPanelClick: function onPanelClick() {
            var _inputRef$value, _inputRef$value$focus;
            return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
          }
        };
      });
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode(SelectInput, Vue.mergeProps({
          "borderless": props2.borderless,
          "disabled": disabled.value,
          "value": inputValue.value,
          "label": function label() {
            return renderTNodeJSX("label");
          },
          "status": props2.status,
          "tips": props2.tips,
          "clearable": props2.clearable,
          "readonly": isReadOnly.value,
          "multiple": props2.multiple,
          "popupProps": popupProps.value,
          "inputProps": inputProps.value,
          "placeholder": props2.placeholder || globalConfig.value.placeholder[props2.mode],
          "popupVisible": !isReadOnly.value && popupVisible.value,
          "valueDisplay": function valueDisplay() {
            return renderTNodeJSX("valueDisplay", {
              params: valueDisplayParams.value
            });
          },
          "needConfirm": props2.needConfirm
        }, props2.selectInputProps, {
          "panel": function panel() {
            return Vue.createVNode(TSinglePanel, panelProps.value, null);
          },
          "tagInputProps": {
            onRemove: onTagRemoveClick
          },
          "onClear": onTagClearClick,
          "prefixIcon": function prefixIcon() {
            return renderTNodeJSX("prefixIcon");
          },
          "suffixIcon": function suffixIcon() {
            return renderTNodeJSX("suffixIcon") || Vue.createVNode(CalendarIcon, null, null);
          }
        }), null)]);
      };
    }
  });

  var datePickerPanelProps = {
    defaultTime: {
      type: String,
      "default": "00:00:00"
    },
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$1q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _DatePickerPanel = Vue.defineComponent({
    name: "TDatePickerPanel",
    props: _objectSpread$1p({
      value: datePickerProps.value,
      defaultValue: datePickerProps.defaultValue,
      modelValue: datePickerProps.modelValue,
      disabled: datePickerProps.disabled,
      disableDate: datePickerProps.disableDate,
      enableTimePicker: datePickerProps.enableTimePicker,
      firstDayOfWeek: datePickerProps.firstDayOfWeek,
      format: datePickerProps.format,
      mode: datePickerProps.mode,
      presets: datePickerProps.presets,
      presetsPlacement: datePickerProps.presetsPlacement,
      timePickerProps: datePickerProps.timePickerProps
    }, datePickerPanelProps),
    setup: function setup(props) {
      var _useSingleValue = useSingleValue(props),
        cacheValue = _useSingleValue.cacheValue,
        value = _useSingleValue.value,
        year = _useSingleValue.year,
        month = _useSingleValue.month,
        time = _useSingleValue.time,
        onChange = _useSingleValue.onChange;
      var formatRef = Vue.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        });
      });
      function onCellClick(date, _ref) {
        var _props$onCellClick;
        var e = _ref.e;
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
          date: date,
          e: e
        });
        if (props.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }
        if (props.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format
          });
        } else {
          onChange === null || onChange === void 0 || onChange(formatDate(date, {
            format: formatRef.value.format
          }), {
            dayjsValue: parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
        }
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();
        if (year.value !== nextYear) {
          var _props$onYearChange;
          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
            year: nextYear,
            date: dayjs(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }
        if (month.value !== nextMonth) {
          var _props$onMonthChange;
          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
            month: nextMonth,
            date: dayjs(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props$onTimeChange;
        time.value = val;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs(cacheValue.value, formatRef.value.format).isValid() ? dayjs() : dayjs(cacheValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        cacheValue.value = formatDate(nextDate, {
          format: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
          time: val,
          date: dayjs(value.value).toDate(),
          trigger: "time-hour"
        });
      }
      function onConfirmClick(_ref3) {
        var _props$onConfirm;
        var e = _ref3.e;
        onChange === null || onChange === void 0 || onChange(formatDate(cacheValue.value, {
          format: formatRef.value.format
        }), {
          dayjsValue: parseToDayjs(cacheValue.value, formatRef.value.format),
          trigger: "confirm"
        });
        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
          date: dayjs(cacheValue.value).toDate(),
          e: e
        });
      }
      function onPresetClick(preset, context) {
        var _props$onPresetClick;
        var presetVal = isFunction(preset) ? preset() : preset;
        onChange === null || onChange === void 0 || onChange(formatDate(presetVal, {
          format: formatRef.value.format
        }), {
          dayjsValue: parseToDayjs(presetVal, formatRef.value.format),
          trigger: "preset"
        });
        (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
      }
      function onYearChange(nextYear) {
        var _props$onYearChange2;
        year.value = nextYear;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
          year: year.value,
          date: dayjs(value.value).toDate(),
          trigger: "year-select"
        });
      }
      function onMonthChange(nextMonth) {
        var _props$onMonthChange2;
        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
          month: month.value,
          date: dayjs(value.value).toDate(),
          trigger: "month-select"
        });
      }
      var panelProps = Vue.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          popupVisible: true,
          panelClick: props.onPanelClick,
          onCellClick: onCellClick,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return Vue.createVNode(TSinglePanel, panelProps.value, null);
      };
    }
  });

  var dateRangePickerProps = {
    allowInput: Boolean,
    borderless: Boolean,
    cancelRangeSelectLimit: Boolean,
    clearable: Boolean,
    defaultTime: {
      type: Array,
      "default": function _default() {
        return ["00:00:00", "23:59:59"];
      }
    },
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": ""
    },
    label: {
      type: [String, Function]
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    needConfirm: {
      type: Boolean,
      "default": true
    },
    panelPreselection: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array]
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    rangeInputProps: {
      type: Object
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    separator: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueType: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["time-stamp", "Date", "YYYY", "YYYY-MM", "YYYY-MM-DD", "YYYY-MM-DD HH", "YYYY-MM-DD HH:mm", "YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD HH:mm:ss:SSS"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onConfirm: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function,
    onPresetClick: Function
  };

  var props$M = {
    activeIndex: {
      type: Number
    },
    borderless: Boolean,
    clearable: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    format: {
      type: [Array, Function]
    },
    inputProps: {
      type: [Object, Array]
    },
    label: {
      type: [String, Function]
    },
    placeholder: {
      type: [String, Array]
    },
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    separator: {
      type: [String, Function],
      "default": "-"
    },
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClick: Function,
    onEnter: Function,
    onFocus: Function,
    onMouseenter: Function,
    onMouseleave: Function
  };

  function ownKeys$1p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1p(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function calcArrayValue(value) {
    if (isArray$1(value)) {
      return value;
    }
    return [value, value];
  }
  var _RangeInput = Vue.defineComponent({
    name: "TRangeInput",
    inheritAttrs: false,
    props: props$M,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose,
        attrs = _ref.attrs;
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("range-input");
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: TdCloseCircleFilledIcon
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var renderTNodeJSX = useTNodeJSX();
      var isDisabled = useDisabled();
      var isReadonly = useReadonly();
      var focused = Vue.ref(false);
      var isHover = Vue.ref(false);
      var format = Vue.computed(function () {
        return calcArrayValue(props2.format);
      });
      var inputProps = Vue.computed(function () {
        return calcArrayValue(props2.inputProps);
      });
      var placeholder = Vue.computed(function () {
        return calcArrayValue(props2.placeholder);
      });
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var inputValue = Vue.computed(function () {
        var _ref2, _innerValue$value, _innerValue$value2;
        return String((_ref2 = ((_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value[0]) || ((_innerValue$value2 = innerValue.value) === null || _innerValue$value2 === void 0 ? void 0 : _innerValue$value2[1])) !== null && _ref2 !== void 0 ? _ref2 : "");
      });
      var isShowClearIcon = Vue.computed(function () {
        var _inputValue$value;
        return (props2.clearable && ((_inputValue$value = inputValue.value) === null || _inputValue$value === void 0 ? void 0 : _inputValue$value.length) && !isDisabled.value || props2.showClearIconOnEmpty) && isHover.value;
      });
      var inputRefs = {
        firstInputRef: Vue.ref(),
        secondInputRef: Vue.ref()
      };
      function handleClear(context) {
        var _props2$onClear;
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, context);
        setInnerValue(["", ""], _objectSpread$1o(_objectSpread$1o({}, context), {}, {
          trigger: "clear",
          position: "all"
        }));
      }
      function handleEnter(rangeValue, context) {
        var _props2$onEnter;
        (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 || _props2$onEnter.call(props2, rangeValue, context);
      }
      function handleFocus(rangeValue, context) {
        var _props2$onFocus;
        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, rangeValue, context);
      }
      function handleBlur(rangeValue, context) {
        var _props2$onBlur;
        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, rangeValue, context);
      }
      function handleMouseEnter(e) {
        var _props2$onMouseenter;
        isHover.value = true;
        props2 === null || props2 === void 0 || (_props2$onMouseenter = props2.onMouseenter) === null || _props2$onMouseenter === void 0 || _props2$onMouseenter.call(props2, {
          e: e
        });
      }
      function handleMouseLeave(e) {
        var _props2$onMouseleave;
        isHover.value = false;
        props2 === null || props2 === void 0 || (_props2$onMouseleave = props2.onMouseleave) === null || _props2$onMouseleave === void 0 || _props2$onMouseleave.call(props2, {
          e: e
        });
      }
      expose({
        firstInputElement: inputRefs.firstInputRef.value,
        secondInputElement: inputRefs.secondInputRef.value,
        focus: function focus(options) {
          var _inputRefs$value;
          var _ref3 = options || {},
            _ref3$position = _ref3.position,
            position = _ref3$position === void 0 ? "first" : _ref3$position;
          (_inputRefs$value = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value === void 0 || _inputRefs$value.focus();
        },
        blur: function blur(options) {
          var _inputRefs$value2;
          var _ref4 = options || {},
            _ref4$position = _ref4.position,
            position = _ref4$position === void 0 ? "first" : _ref4$position;
          (_inputRefs$value2 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value2 === void 0 || _inputRefs$value2.blur();
        },
        select: function select(options) {
          var _inputRefs$value3;
          var _ref5 = options || {},
            _ref5$position = _ref5.position,
            position = _ref5$position === void 0 ? "first" : _ref5$position;
          (_inputRefs$value3 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value3 === void 0 || _inputRefs$value3.select();
        }
      });
      return function () {
        var _innerValue$value3, _innerValue$value8;
        var labelContent = renderTNodeJSX("label");
        var prefixIconContent = renderTNodeJSX("prefixIcon");
        var suffixContent = renderTNodeJSX("suffix");
        var suffixIconContent = renderTNodeJSX("suffixIcon");
        var tips = renderTNodeJSX("tips");
        var separator = renderTNodeJSX("separator");
        var RangeInputContent = Vue.createVNode("div", Vue.mergeProps(attrs, {
          "class": [COMPONENT_NAME.value, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE.value[props2.size], props2.size !== "medium"), STATUS.value.disabled, isDisabled.value), STATUS.value.focused, focused.value), STATUS.value.success, props2.status === "success"), STATUS.value.warning, props2.status === "warning"), STATUS.value.error, props2.status === "error"), "".concat(COMPONENT_NAME.value, "--prefix"), prefixIconContent || labelContent), "".concat(COMPONENT_NAME.value, "--suffix"), suffixContent || suffixIconContent), "".concat(COMPONENT_NAME.value, "--borderless"), props2.borderless)],
          "onMouseenter": handleMouseEnter,
          "onMouseleave": handleMouseLeave
        }), [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [prefixIconContent && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix")
        }, [prefixIconContent]), labelContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix")
        }, [labelContent]) : null, Vue.createVNode(Input, Vue.mergeProps({
          "ref": inputRefs.firstInputRef,
          "class": "".concat(COMPONENT_NAME.value, "__inner-left"),
          "inputClass": _defineProperty$2({}, "".concat(classPrefix.value, "-is-focused"), props2.activeIndex === 0),
          "placeholder": placeholder.value[0],
          "disabled": isDisabled.value,
          "readonly": isReadonly.value,
          "format": format.value[0],
          "value": (_innerValue$value3 = innerValue.value) === null || _innerValue$value3 === void 0 ? void 0 : _innerValue$value3[0],
          "onClick": function onClick(_ref8) {
            var _props2$onClick;
            var e = _ref8.e;
            return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e,
              position: "first"
            });
          },
          "onClear": function onClear() {
            return setInnerValue([], {
              position: "first",
              trigger: "input"
            });
          },
          "onEnter": function onEnter(val, _ref9) {
            var _innerValue$value4;
            var e = _ref9.e;
            return handleEnter([val, (_innerValue$value4 = innerValue.value) === null || _innerValue$value4 === void 0 ? void 0 : _innerValue$value4[1]], {
              e: e,
              position: "first"
            });
          },
          "onFocus": function onFocus(val, _ref0) {
            var _innerValue$value5;
            var e = _ref0.e;
            return handleFocus([val, (_innerValue$value5 = innerValue.value) === null || _innerValue$value5 === void 0 ? void 0 : _innerValue$value5[1]], {
              e: e,
              position: "first"
            });
          },
          "onBlur": function onBlur(val, _ref1) {
            var _innerValue$value6;
            var e = _ref1.e;
            return handleBlur([val, (_innerValue$value6 = innerValue.value) === null || _innerValue$value6 === void 0 ? void 0 : _innerValue$value6[1]], {
              e: e,
              position: "first"
            });
          },
          "onChange": function onChange(val, _ref10) {
            var _innerValue$value7;
            var e = _ref10.e;
            return setInnerValue([val, (_innerValue$value7 = innerValue.value) === null || _innerValue$value7 === void 0 ? void 0 : _innerValue$value7[1]], {
              e: e,
              position: "first",
              trigger: "input"
            });
          }
        }, inputProps.value[0]), null), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner-separator")
        }, [separator]), Vue.createVNode(Input, Vue.mergeProps({
          "ref": inputRefs.secondInputRef,
          "class": "".concat(COMPONENT_NAME.value, "__inner-right"),
          "inputClass": _defineProperty$2({}, "".concat(classPrefix.value, "-is-focused"), props2.activeIndex === 1),
          "placeholder": placeholder.value[1],
          "disabled": isDisabled.value,
          "readonly": isReadonly.value,
          "format": format.value[1],
          "value": (_innerValue$value8 = innerValue.value) === null || _innerValue$value8 === void 0 ? void 0 : _innerValue$value8[1],
          "onClick": function onClick(_ref12) {
            var _props2$onClick2;
            var e = _ref12.e;
            return (_props2$onClick2 = props2.onClick) === null || _props2$onClick2 === void 0 ? void 0 : _props2$onClick2.call(props2, {
              e: e,
              position: "second"
            });
          },
          "onClear": function onClear() {
            return setInnerValue([], {
              position: "second",
              trigger: "input"
            });
          },
          "onEnter": function onEnter(val, _ref13) {
            var _innerValue$value9;
            var e = _ref13.e;
            return handleEnter([(_innerValue$value9 = innerValue.value) === null || _innerValue$value9 === void 0 ? void 0 : _innerValue$value9[0], val], {
              e: e,
              position: "second"
            });
          },
          "onFocus": function onFocus(val, _ref14) {
            var _innerValue$value0;
            var e = _ref14.e;
            return handleFocus([(_innerValue$value0 = innerValue.value) === null || _innerValue$value0 === void 0 ? void 0 : _innerValue$value0[0], val], {
              e: e,
              position: "second"
            });
          },
          "onBlur": function onBlur(val, _ref15) {
            var _innerValue$value1;
            var e = _ref15.e;
            return handleBlur([(_innerValue$value1 = innerValue.value) === null || _innerValue$value1 === void 0 ? void 0 : _innerValue$value1[0], val], {
              e: e,
              position: "second"
            });
          },
          "onChange": function onChange(val, _ref16) {
            var _innerValue$value10;
            var e = _ref16.e;
            return setInnerValue([(_innerValue$value10 = innerValue.value) === null || _innerValue$value10 === void 0 ? void 0 : _innerValue$value10[0], val], {
              e: e,
              position: "second",
              trigger: "input"
            });
          }
        }, inputProps.value[1]), null), suffixContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [suffixContent]) : null, (suffixIconContent || isShowClearIcon.value) && Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix ").concat(COMPONENT_NAME.value, "__suffix-icon")
        }, [isShowClearIcon.value ? Vue.createVNode(CloseCircleFilledIcon, {
          "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
          "onClick": handleClear
        }, null) : suffixIconContent])])]);
        var tipsClasses = ["".concat(COMPONENT_NAME.value, "__tips"), "".concat(classPrefix.value, "-tips"), "".concat(classPrefix.value, "-is-").concat(props2.status)];
        return Vue.createVNode(Vue.Fragment, null, [RangeInputContent, tips && Vue.createVNode("div", {
          "class": tipsClasses
        }, [tips])]);
      };
    }
  });

  var props$L = {
    autoWidth: Boolean,
    disabled: Boolean,
    inputValue: {
      type: Array,
      "default": void 0
    },
    defaultInputValue: {
      type: Array
    },
    label: {
      type: [String, Function]
    },
    panel: {
      type: [String, Function]
    },
    popupProps: {
      type: Object
    },
    popupVisible: Boolean,
    rangeInputProps: {
      type: Object
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    onInputChange: Function,
    onPopupVisibleChange: Function
  };

  function ownKeys$1o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1o(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _RangeInputPopup = Vue.defineComponent({
    name: "TRangeInputPopup",
    props: props$L,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("range-input-popup");
      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
        tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
        innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
        onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
      var popupClasses = Vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--visible"), props2.popupVisible || innerPopupVisible.value)];
      });
      return function () {
        return Vue.createVNode("div", {
          "class": popupClasses.value
        }, [Vue.createVNode(Popup, Vue.mergeProps({
          "hideEmptyPopup": true,
          "content": props2.panel,
          "trigger": "click",
          "placement": "bottom-left",
          "disabled": props2.disabled,
          "visible": props2.popupVisible || innerPopupVisible.value
        }, _objectSpread$1n({
          overlayInnerStyle: tOverlayInnerStyle.value,
          onVisibleChange: onInnerPopupVisibleChange
        }, props2.popupProps)), {
          "default": function _default() {
            return [Vue.createVNode(_RangeInput, _objectSpread$1n({
              value: props2.inputValue,
              onChange: props2.onInputChange,
              disabled: props2.disabled,
              label: props2.label,
              status: props2.status,
              tips: props2.tips
            }, props2.rangeInputProps), null)];
          }
        })]);
      };
    }
  });

  var RangeInput = withInstall$1(_RangeInput);
  var RangeInputPopup = withInstall$1(_RangeInputPopup);

  function ownKeys$1n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1n(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TRangePanel = Vue.defineComponent({
    name: "TRangePanel",
    props: {
      hoverValue: Array,
      activeIndex: Number,
      isFirstValueSelected: Boolean,
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: Array,
      timePickerProps: Object,
      presets: Object,
      popupVisible: Boolean,
      enableTimePicker: Boolean,
      panelPreselection: Boolean,
      firstDayOfWeek: Number,
      year: Array,
      month: Array,
      time: Array,
      cancelRangeSelectLimit: Boolean,
      onClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function,
      needConfirm: Boolean
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-range-picker__panel");
      var _useConfig = useConfig("datePicker"),
        globalConfig = _useConfig.globalConfig;
      var format = Vue.computed(function () {
        var _getDefaultFormat;
        return (_getDefaultFormat = getDefaultFormat({
          mode: props.mode,
          format: props.format,
          enableTimePicker: props.enableTimePicker
        })) === null || _getDefaultFormat === void 0 ? void 0 : _getDefaultFormat.format;
      });
      var hidePreselection = !props.panelPreselection && props.value.length === 2;
      var disableDateOptions = Vue.computed(function () {
        return useDisableDate({
          format: format.value,
          mode: props.mode,
          disableDate: props.disableDate,
          start: props.isFirstValueSelected && props.activeIndex === 1 ? new Date(parseToDayjs(props.value[0], format.value, "start").toDate().setHours(0, 0, 0)) : void 0,
          end: props.isFirstValueSelected && props.activeIndex === 0 ? new Date(parseToDayjs(props.value[1], format.value).toDate().setHours(23, 59, 59)) : void 0
        });
      });
      var startTableData = Vue.computed(function () {
        return useTableData(_objectSpread$1m(_objectSpread$1m({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format.value).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format.value).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format.value).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format.value).toDate() : void 0,
          year: props.year[0],
          month: props.month[0],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek
        }, disableDateOptions.value), {}, {
          cancelRangeSelectLimit: props.cancelRangeSelectLimit
        }));
      });
      var endTableData = Vue.computed(function () {
        return useTableData(_objectSpread$1m(_objectSpread$1m({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format.value).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format.value).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format.value).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format.value).toDate() : void 0,
          year: props.year[1],
          month: props.month[1],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek
        }, disableDateOptions.value), {}, {
          cancelRangeSelectLimit: props.cancelRangeSelectLimit
        }));
      });
      var panelContentProps = Vue.computed(function () {
        return {
          format: format.value,
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || globalConfig.value.firstDayOfWeek,
          popupVisible: props.popupVisible,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      return function () {
        return Vue.createVNode("div", {
          "class": [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--direction-row"), ["left", "right"].includes(props.presetsPlacement))],
          "onClick": function onClick(e) {
            var _props$onClick;
            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        }, [["top", "left"].includes(props.presetsPlacement) ? Vue.createVNode(TExtraContent, {
          "presets": props.presets,
          "selectedValue": props.value[props.activeIndex],
          "enableTimePicker": props.enableTimePicker,
          "onPresetClick": props.onPresetClick,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement,
          "needConfirm": props.needConfirm
        }, null) : null, Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content-wrapper")
        }, [!props.enableTimePicker ? [Vue.createVNode(TPanelContent, Vue.mergeProps({
          "key": "startPanel",
          "partial": "start",
          "year": props.year[0],
          "month": props.month[0],
          "time": props.time[props.activeIndex],
          "value": props.value,
          "tableData": startTableData.value
        }, panelContentProps.value), null), Vue.createVNode(TPanelContent, Vue.mergeProps({
          "key": "endPanel",
          "partial": "end",
          "year": props.year[1],
          "month": props.month[1],
          "time": props.time[props.activeIndex],
          "value": props.value,
          "tableData": endTableData.value
        }, panelContentProps.value), null)] : Vue.createVNode(TPanelContent, Vue.mergeProps({
          "key": "start",
          "partial": props.activeIndex ? "end" : "start",
          "year": props.activeIndex ? props.year[1] : props.year[0],
          "month": props.activeIndex ? props.month[1] : props.month[0],
          "time": props.activeIndex ? props.time[1] : props.time[0],
          "value": props.value,
          "tableData": props.activeIndex ? endTableData.value : startTableData.value
        }, panelContentProps.value), null)]), ["bottom", "right"].includes(props.presetsPlacement) ? Vue.createVNode(TExtraContent, {
          "presets": props.presets,
          "selectedValue": props.value[props.activeIndex],
          "enableTimePicker": props.enableTimePicker,
          "onPresetClick": props.onPresetClick,
          "onConfirmClick": props.onConfirmClick,
          "presetsPlacement": props.presetsPlacement,
          "needConfirm": props.needConfirm
        }, null) : null]);
      };
    }
  });

  function dateCorrection(partialIndex, preYear, preMonth, onlyYearSelect) {
    var nextYear = preYear;
    var nextMonth = preMonth;
    if (partialIndex === 0) {
      if (nextYear[1] <= nextYear[0]) {
        if (onlyYearSelect) nextYear[1] = nextYear[0] + 1;else {
          nextYear[1] = nextYear[0];
          if (nextMonth[1] <= nextMonth[0]) {
            nextMonth[1] = nextMonth[0] + 1;
            if (nextMonth[1] === 12) {
              nextMonth[1] = 0;
              nextYear = [nextYear[0], nextYear[1] + 1];
            }
          }
        }
      }
    }
    if (partialIndex === 1) {
      if (nextYear[0] >= nextYear[1]) {
        if (onlyYearSelect) nextYear[0] = nextYear[1] - 1;else {
          nextYear[0] = nextYear[1];
          if (nextMonth[0] >= nextMonth[1]) {
            nextMonth[0] = nextMonth[1] - 1;
            if (nextMonth[0] === -1) {
              nextMonth[0] = 11;
              nextYear = [nextYear[0] - 1, nextYear[1]];
            }
          }
        }
      }
    }
    return {
      nextYear: nextYear,
      nextMonth: nextMonth
    };
  }

  var _DateRangePicker = Vue.defineComponent({
    name: "TDateRangePicker",
    props: dateRangePickerProps,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("date-range-picker");
      var _useRange = useRange(props2),
        inputValue = _useRange.inputValue,
        popupVisible = _useRange.popupVisible,
        rangeInputProps = _useRange.rangeInputProps,
        popupProps = _useRange.popupProps,
        value = _useRange.value,
        year = _useRange.year,
        month = _useRange.month,
        time = _useRange.time,
        cacheValue = _useRange.cacheValue,
        activeIndex = _useRange.activeIndex,
        isHoverCell = _useRange.isHoverCell,
        isFirstValueSelected = _useRange.isFirstValueSelected,
        onChange = _useRange.onChange;
      var disabled = useDisabled();
      var isReadOnly = useReadonly();
      var formatRef = Vue.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          enableTimePicker: props2.enableTimePicker,
          format: props2.format,
          valueType: props2.valueType
        });
      });
      var isSelected = Vue.ref(false);
      Vue.watch(popupVisible, function (visible) {
        if (visible) {
          isSelected.value = false;
          cacheValue.value = formatDate(value.value || [], {
            format: formatRef.value.valueType,
            targetFormat: formatRef.value.format
          });
          time.value = formatTime(value.value || [dayjs().format(formatRef.value.timeFormat), dayjs().format(formatRef.value.timeFormat)], formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
          if (!value.value.length) {
            var _initYearMonthTime = initYearMonthTime({
                value: value.value,
                mode: props2.mode,
                format: formatRef.value.format,
                enableTimePicker: props2.enableTimePicker
              }),
              defaultYear = _initYearMonthTime.year,
              defaultMonth = _initYearMonthTime.month;
            year.value = defaultYear;
            month.value = defaultMonth;
          } else if (value.value.length === 2 && !props2.enableTimePicker) {
            var nextMonth = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).month();
            });
            year.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.valueType).year();
            });
            if (year.value[0] === year.value[1] && nextMonth[0] === nextMonth[1]) {
              nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
            }
            month.value = nextMonth;
            if ((props2.mode === "month" || props2.mode === "quarter") && year.value[0] === year.value[1]) {
              year.value = [year.value[0], year.value[0] + 1];
            }
          } else {
            year.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).year();
            });
            if (year.value.length === 1) year.value = [year.value[0], year.value[0]];
            month.value = value.value.map(function (v) {
              return parseToDayjs(v, formatRef.value.format).month();
            });
            if (month.value.length === 1) month.value = [month.value[0], Math.min(month.value[0] + 1, 11)];
          }
        } else {
          activeIndex.value = 0;
          isHoverCell.value = false;
          isFirstValueSelected.value = false;
          if (props2.needConfirm) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.valueType,
              targetFormat: formatRef.value.format
            });
          } else {
            confirmValueChange();
          }
        }
      });
      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        var nextValue = _toConsumableArray(inputValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        inputValue.value = nextValue;
      }
      function onCellMouseLeave() {
        isHoverCell.value = false;
        inputValue.value = cacheValue.value;
      }
      function onCellClick(date, _ref2) {
        var _props2$onPick;
        var e = _ref2.e;
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, date, {
          e: e,
          partial: activeIndex.value ? "end" : "start"
        });
        isHoverCell.value = false;
        isSelected.value = true;
        var nextValue = _toConsumableArray(inputValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        cacheValue.value = nextValue;
        inputValue.value = nextValue;
        if (props2.enableTimePicker) return;
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });
        if (notValidIndex === -1 && nextValue.length === 2) {
          if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
            nextValue[activeIndex.value ? 0 : 1] = "";
            cacheValue.value = nextValue;
            inputValue.value = nextValue;
          } else {
            onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: nextValue.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "pick"
            });
          }
        }
        if (!isFirstValueSelected.value || !activeIndex.value) {
          var nextIndex = notValidIndex;
          if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
          activeIndex.value = nextIndex;
          isFirstValueSelected.value = !!nextValue[0];
        } else {
          popupVisible.value = false;
        }
      }
      function onJumperClick(_ref3) {
        var trigger = _ref3.trigger,
          partial = _ref3.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = next.getFullYear();
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = next.getMonth();
        var onlyYearSelect = ["year", "quarter", "month"].includes(props2.mode);
        var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
        nextYear = correctedDate.nextYear;
        nextMonth = correctedDate.nextMonth;
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextInputValue = _toConsumableArray(inputValue.value);
        var changedInputValue = nextInputValue[activeIndex.value];
        var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;
        var nextTime = _toConsumableArray(time.value);
        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        inputValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
      }
      var confirmValueChange = function confirmValueChange(e) {
        var nextValue = _toConsumableArray(inputValue.value);
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });
        if (notValidIndex === -1 && nextValue.length === 2) {
          if (!isFirstValueSelected.value && parseToDayjs(nextValue[0], formatRef.value.format).isAfter(parseToDayjs(nextValue[1], formatRef.value.format))) {
            nextValue[activeIndex.value ? 0 : 1] = "";
            cacheValue.value = nextValue;
            inputValue.value = nextValue;
          } else {
            var _props2$onConfirm;
            props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
              date: nextValue.map(function (v) {
                return dayjs(v).toDate();
              }),
              e: e || null,
              partial: activeIndex.value ? "end" : "start"
            });
            onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType,
              autoSwap: true
            }), {
              dayjsValue: nextValue.map(function (v) {
                return parseToDayjs(v, formatRef.value.format);
              }),
              trigger: "confirm"
            });
          }
        }
      };
      function onConfirmClick(_ref4) {
        var e = _ref4.e;
        confirmValueChange(e);
        var nextValue = _toConsumableArray(inputValue.value);
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });
        if (!isFirstValueSelected.value || !activeIndex.value) {
          var nextIndex = notValidIndex;
          if (nextIndex === -1) nextIndex = activeIndex.value ? 0 : 1;
          activeIndex.value = nextIndex;
          isFirstValueSelected.value = !!nextValue[0];
        } else if (nextValue.length === 2) {
          popupVisible.value = false;
        }
      }
      function onPresetClick(preset, context) {
        var presetValue = preset;
        if (isFunction(preset)) {
          presetValue = preset();
        }
        if (!isArray$1(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          var _props2$onPresetClick;
          onChange === null || onChange === void 0 || onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType,
            autoSwap: true
          }), {
            dayjsValue: presetValue.map(function (p) {
              return parseToDayjs(p, formatRef.value.format);
            }),
            trigger: "preset"
          });
          popupVisible.value = false;
          (_props2$onPresetClick = props2.onPresetClick) === null || _props2$onPresetClick === void 0 || _props2$onPresetClick.call(props2, context);
        }
      }
      function onYearChange(nextVal, _ref5) {
        var partial = _ref5.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;
        var nextYear = _toConsumableArray(year.value);
        var nextMonth = _toConsumableArray(month.value);
        nextYear[partialIndex] = nextVal;
        var onlyYearSelect = ["year", "quarter", "month"].includes(props2.mode);
        var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
        nextYear = correctedDate.nextYear;
        nextMonth = correctedDate.nextMonth;
        year.value = nextYear;
        if (!onlyYearSelect) month.value = nextMonth;
      }
      function onMonthChange(nextVal, _ref6) {
        var partial = _ref6.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = nextVal;
        if (year.value[0] === year.value[1]) {
          if (partialIndex === 0) {
            if (nextMonth[1] <= nextMonth[0]) {
              nextMonth[1] = nextMonth[0] + 1;
              if (nextMonth[1] === 12) {
                var _year$value, _year$value2;
                nextMonth[1] = 0;
                year.value = [(_year$value = year.value) === null || _year$value === void 0 ? void 0 : _year$value[0], ((_year$value2 = year.value) === null || _year$value2 === void 0 ? void 0 : _year$value2[1]) + 1];
              }
            }
          }
          if (partialIndex === 1) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
            if (nextMonth[0] >= nextMonth[1]) {
              nextMonth[0] -= 1;
              if (nextMonth[0] === -1) {
                var _year$value3, _year$value4;
                nextMonth[0] = 11;
                year.value = [((_year$value3 = year.value) === null || _year$value3 === void 0 ? void 0 : _year$value3[0]) - 1, (_year$value4 = year.value) === null || _year$value4 === void 0 ? void 0 : _year$value4[1]];
              }
            }
          }
        }
        month.value = nextMonth;
      }
      var panelProps = Vue.computed(function () {
        return {
          hoverValue: isHoverCell.value ? inputValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          isFirstValueSelected: isFirstValueSelected.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          time: time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          popupVisible: popupVisible.value,
          panelPreselection: props2.panelPreselection,
          cancelRangeSelectLimit: props2.cancelRangeSelectLimit,
          needConfirm: props2.needConfirm,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode(RangeInputPopup, {
          "readonly": isReadOnly.value,
          "disabled": disabled.value,
          "label": props2.label,
          "status": props2.status,
          "tips": props2.tips || slots.tips,
          "inputValue": inputValue.value,
          "popupProps": popupProps.value,
          "rangeInputProps": rangeInputProps.value,
          "popupVisible": popupVisible.value,
          "panel": function panel() {
            return Vue.createVNode(TRangePanel, panelProps.value, null);
          }
        }, null)]);
      };
    }
  });

  var dateRangePickerPanelProps = {
    defaultTime: {
      type: Array,
      "default": function _default() {
        return ["00:00:00", "23:59:59"];
      }
    },
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$1m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1m(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _DateRangePickerPanel = Vue.defineComponent({
    name: "TDateRangePickerPanel",
    props: _objectSpread$1l({
      value: dateRangePickerProps.value,
      defaultValue: dateRangePickerProps.defaultValue,
      modelValue: dateRangePickerProps.modelValue,
      disabled: dateRangePickerProps.disabled,
      disableDate: dateRangePickerProps.disableDate,
      enableTimePicker: dateRangePickerProps.enableTimePicker,
      firstDayOfWeek: dateRangePickerProps.firstDayOfWeek,
      format: dateRangePickerProps.format,
      mode: dateRangePickerProps.mode,
      presets: dateRangePickerProps.presets,
      presetsPlacement: dateRangePickerProps.presetsPlacement,
      timePickerProps: dateRangePickerProps.timePickerProps,
      panelPreselection: dateRangePickerProps.panelPreselection
    }, dateRangePickerPanelProps),
    setup: function setup(props) {
      var _useRangeValue = useRangeValue(props),
        value = _useRangeValue.value,
        year = _useRangeValue.year,
        month = _useRangeValue.month,
        time = _useRangeValue.time,
        cacheValue = _useRangeValue.cacheValue,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected,
        onChange = _useRangeValue.onChange;
      var formatRef = Vue.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          enableTimePicker: props.enableTimePicker,
          format: props.format
        });
      });
      var isSelected = Vue.ref(false);
      var isHoverCell = Vue.ref(false);
      var hoverValue = Vue.ref([]);
      var activeIndex = Vue.computed(function () {
        return isFirstValueSelected.value ? 1 : 0;
      });
      Vue.onMounted(function () {
        if (value.value.length === 2 && !props.enableTimePicker) {
          var nextMonth = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).month();
          });
          year.value = value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.valueType).year();
          });
          if (year.value[0] === year.value[1] && nextMonth[0] === nextMonth[1]) {
            nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
          }
          month.value = nextMonth;
          if (["month", "quarter"].includes(props.mode) && year.value[0] === year.value[1]) {
            year.value = [year.value[0], year.value[0] + 1];
          }
        }
      });
      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        var nextValue = _toConsumableArray(hoverValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        hoverValue.value = nextValue;
      }
      function onCellMouseLeave() {
        isHoverCell.value = false;
        hoverValue.value = cacheValue.value;
      }
      function onCellClick(date, _ref) {
        var _props$onCellClick;
        var e = _ref.e;
        isHoverCell.value = false;
        isSelected.value = true;
        var nextValue = _toConsumableArray(cacheValue.value);
        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format
        });
        cacheValue.value = nextValue;
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, {
          e: e,
          partial: activeIndex.value ? "end" : "start",
          date: nextValue.map(function (v) {
            return dayjs(v).toDate();
          })
        });
        if (props.enableTimePicker) return;
        if (nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "pick"
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }
      }
      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger,
          partial = _ref2.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;
        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = next.getFullYear();
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = next.getMonth();
        var onlyYearSelect = ["year", "quarter", "month"].includes(props.mode);
        var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
        nextYear = correctedDate.nextYear;
        nextMonth = correctedDate.nextMonth;
        if (year.value.some(function (y) {
          return !nextYear.includes(y);
        })) {
          var _props$onYearChange;
          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 || _props$onYearChange.call(props, {
            partial: partial,
            year: nextYear[partialIndex],
            date: value.value.map(function (v) {
              return dayjs(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }
        if (month.value.some(function (m) {
          return !nextMonth.includes(m);
        })) {
          var _props$onMonthChange;
          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 || _props$onMonthChange.call(props, {
            partial: partial,
            month: nextMonth[partialIndex],
            date: value.value.map(function (v) {
              return dayjs(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }
        year.value = nextYear;
        month.value = nextMonth;
      }
      function onTimePickerChange(val) {
        var _props$onTimeChange;
        var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;
        var nextInputValue = _toConsumableArray(cacheValue.value);
        var changedInputValue = cacheValue.value[activeIndex.value];
        var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;
        var nextTime = _toConsumableArray(time.value);
        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 || _props$onTimeChange.call(props, {
          time: val,
          date: value.value.map(function (v) {
            return parseToDayjs(v, formatRef.value.format).toDate();
          }),
          partial: activeIndex.value ? "end" : "start",
          trigger: "time-hour"
        });
      }
      function onConfirmClick(_ref3) {
        var _props$onConfirm;
        var e = _ref3.e;
        var nextValue = _toConsumableArray(cacheValue.value);
        if (nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 || onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: nextValue.map(function (v) {
              return parseToDayjs(v, formatRef.value.format);
            }),
            trigger: "confirm"
          });
          year.value = nextValue.map(function (v) {
            return dayjs(v, formatRef.value.format).year();
          });
          month.value = nextValue.map(function (v) {
            return dayjs(v, formatRef.value.format).month();
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }
        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, {
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          e: e
        });
      }
      function onPresetClick(preset, context) {
        var presetValue = preset;
        if (isFunction(preset)) {
          presetValue = preset();
        }
        if (!isArray$1(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          var _props$onPresetClick;
          onChange === null || onChange === void 0 || onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            autoSwap: true
          }), {
            dayjsValue: presetValue.map(function (p) {
              return parseToDayjs(p, formatRef.value.format);
            }),
            trigger: "preset"
          });
          (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 || _props$onPresetClick.call(props, context);
        }
      }
      function onYearChange(nextVal, _ref4) {
        var _props$onYearChange2;
        var partial = _ref4.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;
        var nextYear = _toConsumableArray(year.value);
        nextYear[partialIndex] = nextVal;
        var nextMonth = _toConsumableArray(month.value);
        var onlyYearSelect = ["year", "quarter", "month"].includes(props.mode);
        var correctedDate = dateCorrection(partialIndex, nextYear, nextMonth, onlyYearSelect);
        nextYear = correctedDate.nextYear;
        nextMonth = correctedDate.nextMonth;
        year.value = nextYear;
        if (!onlyYearSelect) month.value = nextMonth;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 || _props$onYearChange2.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: "year-select"
        });
      }
      function onMonthChange(nextVal, _ref5) {
        var _props$onMonthChange2;
        var partial = _ref5.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;
        var nextMonth = _toConsumableArray(month.value);
        nextMonth[partialIndex] = nextVal;
        if (year.value[0] === year.value[1]) {
          if (partialIndex === 0) {
            if (nextMonth[1] <= nextMonth[0]) {
              nextMonth[1] = nextMonth[0] + 1;
              if (nextMonth[1] === 12) {
                var _year$value, _year$value2;
                nextMonth[1] = 0;
                year.value = [(_year$value = year.value) === null || _year$value === void 0 ? void 0 : _year$value[0], ((_year$value2 = year.value) === null || _year$value2 === void 0 ? void 0 : _year$value2[1]) + 1];
              }
            }
          }
          if (partialIndex === 1) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
            if (nextMonth[0] >= nextMonth[1]) {
              nextMonth[0] -= 1;
              if (nextMonth[0] === -1) {
                var _year$value3, _year$value4;
                nextMonth[0] = 11;
                year.value = [((_year$value3 = year.value) === null || _year$value3 === void 0 ? void 0 : _year$value3[0]) - 1, (_year$value4 = year.value) === null || _year$value4 === void 0 ? void 0 : _year$value4[1]];
              }
            }
          }
        }
        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 || _props$onMonthChange2.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: "month-select"
        });
      }
      var panelProps = Vue.computed(function () {
        return {
          hoverValue: isHoverCell.value ? hoverValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          panelPreselection: props.panelPreselection,
          popupVisible: true,
          panelClick: props.onPanelClick,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return function () {
        return Vue.createVNode(TRangePanel, panelProps.value, null);
      };
    }
  });

  var DatePicker = withInstall$1(_DatePicker);
  var DatePickerPanel = withInstall$1(_DatePickerPanel);
  var DateRangePicker = withInstall$1(_DateRangePicker);
  var DateRangePickerPanel = withInstall$1(_DateRangePickerPanel);

  var props$K = {
    colon: Boolean,
    data: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    errorMessage: {
      type: Object
    },
    id: {
      type: String,
      "default": void 0
    },
    labelAlign: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number],
      "default": "100px"
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "inline"].includes(val);
      }
    },
    preventSubmitDefault: {
      type: Boolean,
      "default": true
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    requiredMarkPosition: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    resetType: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "initial"].includes(val);
      }
    },
    rules: {
      type: Object
    },
    scrollToFirstError: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["", "smooth", "auto"].includes(val);
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": true
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    submitWithWarningMessage: Boolean,
    onReset: Function,
    onSubmit: Function,
    onValidate: Function
  };

  var isDate$1 = {exports: {}};

  var merge = {exports: {}};

  merge.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;
      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);
  var mergeExports = merge.exports;

  isDate$1.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;
    var _merge = _interopRequireDefault(mergeExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _slicedToArray(r, e) {
      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e,
          n,
          i,
          u,
          a = [],
          f = !0,
          o = !1;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = !1;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
          o = !0, n = r;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    function _createForOfIteratorHelper(r, e) {
      var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (!t) {
        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
          t && (r = t);
          var _n = 0,
            F = function F() {};
          return {
            s: F,
            n: function n() {
              return _n >= r.length ? {
                done: !0
              } : {
                done: !1,
                value: r[_n++]
              };
            },
            e: function e(r) {
              throw r;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o,
        a = !0,
        u = !1;
      return {
        s: function s() {
          t = t.call(r);
        },
        n: function n() {
          var r = t.next();
          return a = r.done, r;
        },
        e: function e(r) {
          u = !0, o = r;
        },
        f: function f() {
          try {
            a || null == t["return"] || t["return"]();
          } finally {
            if (u) throw o;
          }
        }
      };
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };
    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }
    function zip(date, format) {
      var zippedArr = [],
        len = Math.max(date.length, format.length);
      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }
      return zippedArr;
    }
    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatibility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }
      if (typeof input === 'string' && isValidFormat(options.format)) {
        if (options.strictMode && input.length !== options.format.length) return false;
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};
        var _iterator = _createForOfIteratorHelper(dateAndFormat),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              dateWord = _step$value[0],
              formatWord = _step$value[1];
            if (!dateWord || !formatWord || dateWord.length !== formatWord.length) {
              return false;
            }
            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var fullYear = dateObj.y;

        // Check if the year starts with a hyphen
        if (fullYear.startsWith('-')) {
          return false; // Hyphen before year is not allowed
        }
        if (dateObj.y.length === 2) {
          var parsedYear = parseInt(dateObj.y, 10);
          if (isNaN(parsedYear)) {
            return false;
          }
          var currentYearLastTwoDigits = new Date().getFullYear() % 100;
          if (parsedYear < currentYearLastTwoDigits) {
            fullYear = "20".concat(dateObj.y);
          } else {
            fullYear = "19".concat(dateObj.y);
          }
        }
        var month = dateObj.m;
        if (dateObj.m.length === 1) {
          month = "0".concat(dateObj.m);
        }
        var day = dateObj.d;
        if (dateObj.d.length === 1) {
          day = "0".concat(dateObj.d);
        }
        return new Date("".concat(fullYear, "-").concat(month, "-").concat(day, "T00:00:00.000Z")).getUTCDate() === +dateObj.d;
      }
      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$1, isDate$1.exports);
  var isDateExports = isDate$1.exports;
  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDateExports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  assertString.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;
    function assertString(input) {
      if (input === undefined || input === null) throw new TypeError("Expected a string but received a ".concat(input));
      if (input.constructor.name !== 'String') throw new TypeError("Expected a string but received a ".concat(input.constructor.name));
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);
  var assertStringExports = assertString.exports;

  var checkHost = {exports: {}};

  checkHost.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = checkHost;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(checkHost, checkHost.exports);
  var checkHostExports = checkHost.exports;

  var isByteLength = {exports: {}};

  isByteLength.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;
    var _assertString = _interopRequireDefault(assertStringExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }
    /* eslint-disable prefer-rest-params */
    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;
      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);
  var isByteLengthExports = isByteLength.exports;

  var isFQDN = {exports: {}};

  isFQDN.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;
    var _assertString = _interopRequireDefault(assertStringExports);
    var _merge = _interopRequireDefault(mergeExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false,
      ignore_max_length: false
    };
    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);

      /* Remove the optional trailing dot before checking validity */
      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }

      /* Remove the optional wildcard before checking validity */
      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }
      var parts = str.split('.');
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }
        if (!options.allow_numeric_tld && !/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }

        // disallow spaces
        if (/\s/.test(tld)) {
          return false;
        }
      }

      // reject numeric TLDs
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function (part) {
        if (part.length > 63 && !options.ignore_max_length) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }

        // disallow full-width chars
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }

        // disallow parts starting or ending with hyphen
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);
  var isFQDNExports = isFQDN.exports;

  var isIP = {exports: {}};

  isIP.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;
    var _assertString = _interopRequireDefault(assertStringExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }
    /**
    11.3.  Examples
    	   The following addresses
    	             fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    	   would be represented as follows:
    	             fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    	   (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    	   If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    	            fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    	   where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */
    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z.]{1,})?$');
    function isIP(ipAddress) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _assertString["default"])(ipAddress);

      // accessing 'arguments' for backwards compatibility: isIP(ipAddress [, version])
      // eslint-disable-next-line prefer-rest-params
      var version = (_typeof(options) === 'object' ? options.version : arguments[1]) || '';
      if (!version) {
        return isIP(ipAddress, {
          version: 4
        }) || isIP(ipAddress, {
          version: 6
        });
      }
      if (version.toString() === '4') {
        return IPv4AddressRegExp.test(ipAddress);
      }
      if (version.toString() === '6') {
        return IPv6AddressRegExp.test(ipAddress);
      }
      return false;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);
  var isIPExports = isIP.exports;

  isEmail$1.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;
    var _assertString = _interopRequireDefault(assertStringExports);
    var _checkHost = _interopRequireDefault(checkHostExports);
    var _isByteLength = _interopRequireDefault(isByteLengthExports);
    var _isFQDN = _interopRequireDefault(isFQDNExports);
    var _isIP = _interopRequireDefault(isIPExports);
    var _merge = _interopRequireDefault(mergeExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    var default_email_options = {
      allow_display_name: false,
      allow_underscores: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: [],
      host_whitelist: []
    };

    /* eslint-disable max-len */
    /* eslint-disable no-control-regex */
    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A1-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */
    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */
    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1');
      // display name with only spaces is not valid
      if (!display_name_without_quotes.trim()) {
        return false;
      }

      // check whether display name contains illegal character
      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        }

        // the quotes in display name must start with character symbol \
        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1];

          // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)
          str = str.replace(display_name, '').replace(/(^<|>$)/g, '');

          // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space
          if (display_name.endsWith(' ')) {
            display_name = display_name.slice(0, -1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.length > 0 && (0, _checkHost["default"])(lower_domain, options.host_blacklist)) {
        return false;
      }
      if (options.host_whitelist.length > 0 && !(0, _checkHost["default"])(lower_domain, options.host_whitelist)) {
        return false;
      }
      var user = parts.join('@');
      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
        Previously we removed dots for gmail addresses before validating.
        This was removed because it allows `multiple..dots@gmail.com`
        to be reported as valid, but it is not.
        Gmail only normalizes single dots, removing them from here is pointless,
        should be done in normalizeEmail
        */
        user = user.toLowerCase();

        // Removing sub-address from username before gmail validation
        var username = user.split('+')[0];

        // Dots are not included in gmail length restriction
        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split('.');
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld,
        ignore_max_length: options.ignore_max_length,
        allow_underscores: options.allow_underscores
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }
          var noBracketdomain = domain.slice(1, -1);
          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }
      if (user[0] === '"' && user[user.length - 1] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);
  var isEmailExports = isEmail$1.exports;
  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmailExports);

  var isURL$1 = {exports: {}};

  var includesString = {exports: {}};

  includesString.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var includes = function includes(str, val) {
      return str.indexOf(val) !== -1;
    };
    exports["default"] = includes;
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(includesString, includesString.exports);
  var includesStringExports = includesString.exports;

  isURL$1.exports;
  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;
    var _assertString = _interopRequireDefault(assertStringExports);
    var _checkHost = _interopRequireDefault(checkHostExports);
    var _includesString = _interopRequireDefault(includesStringExports);
    var _isFQDN = _interopRequireDefault(isFQDNExports);
    var _isIP = _interopRequireDefault(isIPExports);
    var _merge = _interopRequireDefault(mergeExports);
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }
    function _slicedToArray(r, e) {
      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }
    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e,
          n,
          i,
          u,
          a = [],
          f = !0,
          o = !1;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = !1;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
          o = !0, n = r;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    /*
    options for isURL method
    	protocols - valid protocols can be modified with this option.
    require_tld - If set to false isURL will not check if the URL's host includes a top-level domain.
    require_protocol - if set to true isURL will return false if protocol is not present in the URL.
    require_host - if set to false isURL will not check if host is present in the URL.
    require_port - if set to true isURL will check if port is present in the URL.
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option.
    allow_underscores - if set to true, the validator will allow underscores in the URL.
    host_whitelist - if set to an array of strings or regexp, and the domain matches none of the strings
                     defined in it, the validation fails.
    host_blacklist - if set to an array of strings or regexp, and the domain matches any of the strings
                     defined in it, the validation fails.
    allow_trailing_dot - if set to true, the validator will allow the domain to end with
                         a `.` character.
    allow_protocol_relative_urls - if set to true protocol relative URLs will be allowed.
    allow_fragments - if set to false isURL will return false if fragments are present.
    allow_query_components - if set to false isURL will return false if query components are present.
    disallow_auth - if set to true, the validator will fail if the URL contains an authentication
                    component, e.g. `http://username:password@example.com`
    validate_length - if set to false isURL will skip string length validation. `max_allowed_length`
                      will be ignored if this is set as `false`.
    max_allowed_length - if set, isURL will not allow URLs longer than the specified value (default is
                         2084 that IE maximum URL length).
    	*/

    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true,
      max_allowed_length: 2084
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isURL(url, options) {
      (0, _assertString["default"])(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf('mailto:') === 0) {
        return false;
      }
      options = (0, _merge["default"])(options, default_url_options);
      if (options.validate_length && url.length > options.max_allowed_length) {
        return false;
      }
      if (!options.allow_fragments && (0, _includesString["default"])(url, '#')) {
        return false;
      }
      if (!options.allow_query_components && ((0, _includesString["default"])(url, '?') || (0, _includesString["default"])(url, '&'))) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.slice(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.slice(2);
      }
      url = split.join('://');
      if (url === '') {
        return false;
      }
      split = url.split('/');
      url = split.shift();
      if (url === '' && !options.require_host) {
        return true;
      }
      split = url.split('@');
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === '') {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }
        var _auth$split = auth.split(':'),
          _auth$split2 = _slicedToArray(_auth$split, 2),
          user = _auth$split2[0],
          password = _auth$split2[1];
        if (user === '' && password === '') {
          return false;
        }
      }
      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();
        if (split.length) {
          port_str = split.join(':');
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return (0, _checkHost["default"])(host, options.host_whitelist);
      }
      if (host === '' && !options.require_host) {
        return true;
      }
      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && (0, _checkHost["default"])(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);
  var isURLExports = isURL$1.exports;
  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURLExports);

  function ownKeys$1l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1l(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };
    if (type === typeMap.Date) {
      return false;
    }
    return isObject(val) ? isEmpty(val) : ["", void 0, null].includes(val);
  }
  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    whitespace: function whitespace(val) {
      return !(/^\s+$/.test(val) || val === "");
    },
    "boolean": function boolean(val) {
      return isBoolean(val);
    },
    max: function max(val, num) {
      return isNumber(val) ? val <= num : getCharacterLength(val) <= num;
    },
    min: function min(val, num) {
      return isNumber(val) ? val >= num : getCharacterLength(val) >= num;
    },
    len: function len(val, num) {
      return getCharacterLength(String(val)) === num;
    },
    number: function number(val) {
      return isNumber(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }
  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return _regeneratorRuntime.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            validateResult = {
              result: true
            };
            keys = Object.keys(rule);
            i = 0;
          case 1:
            if (!(i < keys.length)) {
              _context.next = 4;
              break;
            }
            key = keys[i];
            if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 2:
            validateRule = VALIDATE_MAP[key];
            if (!(validateRule && (rule[key] || rule[key] === 0))) {
              _context.next = 3;
              break;
            }
            vOptions = rule[key] === true ? void 0 : rule[key];
            vValidateFun = validateRule;
            return _context.abrupt("continue", 4);
          case 3:
            i++;
            _context.next = 1;
            break;
          case 4:
            if (!vValidateFun) {
              _context.next = 7;
              break;
            }
            _context.next = 5;
            return vValidateFun(value, vOptions);
          case 5:
            validateResult = _context.sent;
            if (!isBoolean(validateResult)) {
              _context.next = 6;
              break;
            }
            return _context.abrupt("return", _objectSpread$1k(_objectSpread$1k({}, rule), {}, {
              result: validateResult
            }));
          case 6:
            if (!isObject(validateResult)) {
              _context.next = 7;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 7:
            return _context.abrupt("return", validateResult);
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }
  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }
  function _validate() {
    _validate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, rules) {
      var all, r;
      return _regeneratorRuntime.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            all = rules.map(function (rule) {
              return validateOneRule(value, rule);
            });
            _context2.next = 1;
            return Promise.all(all);
          case 1:
            r = _context2.sent;
            return _context2.abrupt("return", r);
          case 2:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  function getFormItemClassName(componentName, name) {
    if (!name) return "";
    return "".concat(componentName, "__").concat(name).replace(/(\[|\]|\.)+/g, "_");
  }

  var _Form = Vue.defineComponent({
    name: "TForm",
    props: props$K,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var renderContent = useTNodeJSX();
      var _toRefs = Vue.toRefs(props2),
        disabled = _toRefs.disabled,
        readonly = _toRefs.readonly;
      Vue.provide("formDisabled", {
        disabled: disabled
      });
      Vue.provide("formReadonly", {
        readonly: readonly
      });
      var formRef = Vue.ref(null);
      var children = Vue.ref([]);
      var _toRefs2 = Vue.toRefs(props2),
        showErrorMessage = _toRefs2.showErrorMessage,
        labelWidth = _toRefs2.labelWidth,
        labelAlign = _toRefs2.labelAlign,
        data = _toRefs2.data,
        colon = _toRefs2.colon,
        requiredMark = _toRefs2.requiredMark,
        requiredMarkPosition = _toRefs2.requiredMarkPosition,
        rules = _toRefs2.rules,
        errorMessage = _toRefs2.errorMessage,
        resetType = _toRefs2.resetType;
      Vue.provide(FormInjectionKey, Vue.reactive({
        showErrorMessage: showErrorMessage,
        labelWidth: labelWidth,
        labelAlign: labelAlign,
        data: data,
        colon: colon,
        requiredMark: requiredMark,
        requiredMarkPosition: requiredMarkPosition,
        rules: rules,
        errorMessage: errorMessage,
        resetType: resetType,
        children: children,
        renderContent: renderContent
      }));
      var COMPONENT_NAME = usePrefixClass("form");
      var CLASS_NAMES = useCLASSNAMES();
      var formClass = Vue.computed(function () {
        return [CLASS_NAMES.value.form, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-inline"), props2.layout === "inline")];
      });
      var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item");
      var getFirstError = function getFirstError(result) {
        if (isBoolean(result)) return "";
        var _Object$keys = Object.keys(result),
          _Object$keys2 = _slicedToArray(_Object$keys, 1),
          firstKey = _Object$keys2[0];
        if (props2.scrollToFirstError) {
          var tmpClassName = getFormItemClassName(FORM_ITEM_CLASS_PREFIX.value, firstKey);
          scrollTo(tmpClassName);
        }
        var resArr = result[firstKey];
        if (!isArray$1(resArr)) return "";
        return resArr.filter(function (item) {
          return !item.result;
        })[0].message;
      };
      var scrollTo = function scrollTo(selector) {
        var _formRef$value$getEle = formRef.value.getElementsByClassName(selector),
          _formRef$value$getEle2 = _slicedToArray(_formRef$value$getEle, 1),
          dom = _formRef$value$getEle2[0];
        var behavior = props2.scrollToFirstError;
        if (behavior) {
          dom && dom.scrollIntoView({
            behavior: behavior
          });
        }
      };
      var needValidate = function needValidate(name, fields) {
        if (!fields || !isArray$1(fields)) return true;
        return fields.indexOf("".concat(name)) !== -1;
      };
      var formatValidateResult = function formatValidateResult(validateResultList) {
        var result = validateResultList.reduce(function (r, err) {
          return Object.assign(r || {}, err);
        }, {});
        Object.keys(result).forEach(function (key) {
          if (result[key] === true) {
            delete result[key];
          }
        });
        return isEmpty(result) ? true : result;
      };
      var validate = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(param) {
          var _props2$onValidate;
          var _ref4, fields, _ref4$trigger, trigger, showErrorMessage2, list, arr, result, firstError;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _ref4 = param || {}, fields = _ref4.fields, _ref4$trigger = _ref4.trigger, trigger = _ref4$trigger === void 0 ? "all" : _ref4$trigger, showErrorMessage2 = _ref4.showErrorMessage;
                list = children.value.filter(function (child) {
                  return isFunction(child.validate) && needValidate(String(child.name), fields);
                }).map(function (child) {
                  return child.validate(trigger, showErrorMessage2);
                });
                _context.next = 1;
                return Promise.all(list);
              case 1:
                arr = _context.sent;
                result = formatValidateResult(arr);
                firstError = getFirstError(result);
                (_props2$onValidate = props2.onValidate) === null || _props2$onValidate === void 0 || _props2$onValidate.call(props2, {
                  validateResult: result,
                  firstError: firstError
                });
                return _context.abrupt("return", result);
              case 2:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function validate(_x) {
          return _ref3.apply(this, arguments);
        };
      }();
      var validateOnly = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
          var _ref6, fields, _ref6$trigger, trigger, list, arr;
          return _regeneratorRuntime.wrap(function (_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _ref6 = params || {}, fields = _ref6.fields, _ref6$trigger = _ref6.trigger, trigger = _ref6$trigger === void 0 ? "all" : _ref6$trigger;
                list = children.value.filter(function (child) {
                  return isFunction(child.validateOnly) && needValidate(String(child.name), fields);
                }).map(function (child) {
                  return child.validateOnly(trigger);
                });
                _context2.next = 1;
                return Promise.all(list);
              case 1:
                arr = _context2.sent;
                return _context2.abrupt("return", formatValidateResult(arr));
              case 2:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function validateOnly(_x2) {
          return _ref5.apply(this, arguments);
        };
      }();
      var submitParams = Vue.ref();
      var _onSubmit = function onSubmit(e) {
        if (props2.preventSubmitDefault && e) {
          e.preventDefault();
          e.stopPropagation();
        }
        validate(submitParams.value).then(function (r) {
          var _props2$onSubmit;
          (_props2$onSubmit = props2.onSubmit) === null || _props2$onSubmit === void 0 || _props2$onSubmit.call(props2, {
            validateResult: r,
            firstError: getFirstError(r),
            e: e
          });
        });
        submitParams.value = void 0;
      };
      var submit = /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {
          return _regeneratorRuntime.wrap(function (_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                submitParams.value = params;
                requestSubmit(formRef.value);
              case 1:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return function submit(_x3) {
          return _ref7.apply(this, arguments);
        };
      }();
      var resetParams = Vue.ref();
      var _onReset = function onReset(e) {
        var _props2$onReset;
        if (props2.preventSubmitDefault && e) {
          e.preventDefault();
          e.stopPropagation();
        }
        children.value.filter(function (child) {
          var _resetParams$value;
          return isFunction(child.resetField) && needValidate(String(child.name), (_resetParams$value = resetParams.value) === null || _resetParams$value === void 0 ? void 0 : _resetParams$value.fields);
        }).forEach(function (child) {
          var _resetParams$value2;
          return child.resetField((_resetParams$value2 = resetParams.value) === null || _resetParams$value2 === void 0 ? void 0 : _resetParams$value2.type);
        });
        resetParams.value = void 0;
        (_props2$onReset = props2.onReset) === null || _props2$onReset === void 0 || _props2$onReset.call(props2, {
          e: e
        });
      };
      var reset = function reset(params) {
        resetParams.value = params;
        formRef.value.reset();
      };
      var clearValidate = function clearValidate(fields) {
        children.value.forEach(function (child) {
          if (isFunction(child.resetHandler) && needValidate(String(child.name), fields)) {
            child.resetHandler();
          }
        });
      };
      var setValidateMessage = function setValidateMessage(validateMessage) {
        var keys = Object.keys(validateMessage);
        if (!keys.length) return;
        var list = children.value.filter(function (child) {
          return isFunction(child.setValidateMessage) && keys.includes("".concat(child.name));
        }).map(function (child) {
          return child.setValidateMessage(validateMessage[child.name]);
        });
        Promise.all(list);
      };
      expose({
        validate: validate,
        submit: submit,
        reset: reset,
        clearValidate: clearValidate,
        setValidateMessage: setValidateMessage,
        validateOnly: validateOnly
      });
      return function () {
        return Vue.createVNode("form", {
          "id": props2.id,
          "ref": formRef,
          "class": formClass.value,
          "onSubmit": function onSubmit(e) {
            return _onSubmit(e);
          },
          "onReset": function onReset(e) {
            return _onReset(e);
          }
        }, [renderContent("default")]);
      };
    }
  });

  var props$J = {
    "for": {
      type: String,
      "default": ""
    },
    help: {
      type: [String, Function]
    },
    label: {
      type: [String, Function],
      "default": ""
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number]
    },
    name: {
      type: String,
      "default": ""
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    rules: {
      type: Array
    },
    showErrorMessage: {
      type: Boolean,
      "default": void 0
    },
    status: {
      type: String,
      "default": ""
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    successBorder: Boolean,
    tips: {
      type: [String, Function]
    }
  };

  function template(str, vars) {
    return str.replace(/\${(.*?)}/g, function (_, prop) {
      var _vars$prop$trim;
      return (_vars$prop$trim = vars[prop.trim()]) !== null && _vars$prop$trim !== void 0 ? _vars$prop$trim : "";
    });
  }

  function ownKeys$1k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1k(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _FormItem = Vue.defineComponent({
    name: "TFormItem",
    props: props$J,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderContent = useTNodeJSX();
      var CLASS_NAMES = useCLASSNAMES();
      var _useConfig = useConfig("form"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          CloseCircleFilledIcon: TdCloseCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var form = Vue.inject(FormInjectionKey, void 0);
      var classPrefix = usePrefixClass();
      var formItemClassPrefix = usePrefixClass("form-item");
      var needRequiredMark = Vue.computed(function () {
        var _ref2, _props2$requiredMark;
        var requiredMark = (_ref2 = (_props2$requiredMark = props2.requiredMark) !== null && _props2$requiredMark !== void 0 ? _props2$requiredMark : form === null || form === void 0 ? void 0 : form.requiredMark) !== null && _ref2 !== void 0 ? _ref2 : globalConfig.value.requiredMark;
        var isRequired = innerRules.value.filter(function (rule) {
          return rule.required;
        }).length > 0;
        return requiredMark !== null && requiredMark !== void 0 ? requiredMark : isRequired;
      });
      var requiredMarkPosition = Vue.computed(function () {
        var _form$requiredMarkPos;
        return (_form$requiredMarkPos = form === null || form === void 0 ? void 0 : form.requiredMarkPosition) !== null && _form$requiredMarkPos !== void 0 ? _form$requiredMarkPos : globalConfig.value.requiredMarkPosition;
      });
      var hasLabel = Vue.computed(function () {
        return slots.label || props2.label;
      });
      var hasColon = Vue.computed(function () {
        return !!(form !== null && form !== void 0 && form.colon && hasLabel.value);
      });
      var FROM_LABEL = usePrefixClass("form__label");
      var labelAlign = Vue.computed(function () {
        return isNil(props2.labelAlign) ? form === null || form === void 0 ? void 0 : form.labelAlign : props2.labelAlign;
      });
      var labelWidth = Vue.computed(function () {
        return isNil(props2.labelWidth) ? form === null || form === void 0 ? void 0 : form.labelWidth : props2.labelWidth;
      });
      var labelClasses = Vue.computed(function () {
        return [CLASS_NAMES.value.label, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(FROM_LABEL.value, "--required"), needRequiredMark.value), "".concat(FROM_LABEL.value, "--required-right"), needRequiredMark.value && requiredMarkPosition.value === "right"), "".concat(FROM_LABEL.value, "--top"), hasLabel.value && (labelAlign.value === "top" || !labelWidth.value)), "".concat(FROM_LABEL.value, "--left"), labelAlign.value === "left" && labelWidth.value), "".concat(FROM_LABEL.value, "--right"), labelAlign.value === "right" && labelWidth.value)];
      });
      var statusClass = Vue.computed(function () {
        return "".concat(classPrefix.value, "-is-").concat(props2.status || "default", " ").concat(props2.status === "success" ? CLASS_NAMES.value.successBorder : "");
      });
      var renderLabel = function renderLabel() {
        if (Number(labelWidth.value) === 0) return;
        var labelStyle = {};
        if (labelWidth.value && labelAlign.value !== "top") {
          if (isNumber(labelWidth.value)) {
            labelStyle = {
              width: "".concat(labelWidth.value, "px")
            };
          } else {
            labelStyle = {
              width: labelWidth.value
            };
          }
        }
        return Vue.createVNode("div", {
          "class": labelClasses.value,
          "style": labelStyle
        }, [Vue.createVNode("label", {
          "for": props2["for"] || null
        }, [renderContent("label")]), hasColon.value && globalConfig.value.colonText]);
      };
      var getDefaultIcon = function getDefaultIcon() {
        var resultIcon = function resultIcon(Icon) {
          return Vue.createVNode("span", {
            "class": CLASS_NAMES.value.status
          }, [Vue.createVNode(Icon, null, null)]);
        };
        var list = errorList.value;
        if (verifyStatus.value === ValidateStatus.SUCCESS) {
          return resultIcon(CheckCircleFilledIcon);
        }
        if (list !== null && list !== void 0 && list[0]) {
          var type = list[0].type || "error";
          var icon = {
            error: CloseCircleFilledIcon,
            warning: ErrorCircleFilledIcon,
            success: CheckCircleFilledIcon
          }[type];
          return resultIcon(icon);
        }
        return null;
      };
      var renderSuffixIcon = function renderSuffixIcon() {
        var statusIcon = props2.statusIcon;
        if (statusIcon === false) return;
        var resultIcon = renderContent("statusIcon", {
          defaultNode: getDefaultIcon()
        });
        if (resultIcon) return Vue.createVNode("span", {
          "class": CLASS_NAMES.value.status
        }, [resultIcon]);
        if (resultIcon === false) return;
        resultIcon = form === null || form === void 0 ? void 0 : form.renderContent("statusIcon", {
          defaultNode: getDefaultIcon(),
          params: props2
        });
        if (resultIcon) return resultIcon;
      };
      var errorClasses = Vue.computed(function () {
        if (!showErrorMessage.value) return "";
        if (verifyStatus.value === ValidateStatus.SUCCESS) {
          return props2.successBorder ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(" ") : CLASS_NAMES.value.success;
        }
        if (!errorList.value.length) return;
        var type = errorList.value[0].type || "error";
        if (props2.status) return statusClass.value;
        return type === "error" ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;
      });
      var contentClasses = Vue.computed(function () {
        return [CLASS_NAMES.value.controls, errorClasses.value];
      });
      var contentStyle = Vue.computed(function () {
        var contentStyle2 = {};
        if (labelWidth.value && labelAlign.value !== "top") {
          if (isNumber(labelWidth.value)) {
            contentStyle2 = {
              marginLeft: "".concat(labelWidth.value, "px")
            };
          } else {
            contentStyle2 = {
              marginLeft: labelWidth.value
            };
          }
        }
        return contentStyle2;
      });
      var errorList = Vue.ref([]);
      var successList = Vue.ref([]);
      var verifyStatus = Vue.ref(ValidateStatus.TO_BE_VALIDATED);
      var resetValidating = Vue.ref(false);
      var needResetField = Vue.ref(false);
      var resetHandler = function resetHandler() {
        needResetField.value = false;
        errorList.value = [];
        successList.value = [];
        verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;
      };
      var getEmptyValue = function getEmptyValue() {
        var type = Object.prototype.toString.call(get(form === null || form === void 0 ? void 0 : form.data, props2.name));
        var emptyValue;
        if (type === "[object String]") {
          emptyValue = "";
        }
        if (type === "[object Array]") {
          emptyValue = [];
        }
        if (type === "[object Object]") {
          emptyValue = {};
        }
        return emptyValue;
      };
      var resetField = /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var resetType,
            _args = arguments;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                resetType = _args.length > 0 && _args[0] !== undefined ? _args[0] : form === null || form === void 0 ? void 0 : form.resetType;
                if (props2.name) {
                  _context.next = 1;
                  break;
                }
                return _context.abrupt("return");
              case 1:
                if (resetType === "empty") set(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());else if (resetType === "initial") set(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                _context.next = 2;
                return Vue.nextTick();
              case 2:
                if (resetValidating.value) {
                  needResetField.value = true;
                } else {
                  resetHandler();
                }
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function resetField() {
          return _ref4.apply(this, arguments);
        };
      }();
      var errorMessages = Vue.computed(function () {
        var _form$errorMessage;
        return (_form$errorMessage = form === null || form === void 0 ? void 0 : form.errorMessage) !== null && _form$errorMessage !== void 0 ? _form$errorMessage : globalConfig.value.errorMessage;
      });
      var innerRules = Vue.computed(function () {
        var _props2$rules;
        if ((_props2$rules = props2.rules) !== null && _props2$rules !== void 0 && _props2$rules.length) return props2.rules;
        if (!props2.name) return [];
        var index = "".concat(props2.name).lastIndexOf(".") || -1;
        var pRuleName = "".concat(props2.name).slice(index + 1);
        return get(form === null || form === void 0 ? void 0 : form.rules, props2.name) || get(form === null || form === void 0 ? void 0 : form.rules, pRuleName) || [];
      });
      var analysisValidateResult = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(trigger) {
          var _result$rules;
          var result;
          return _regeneratorRuntime.wrap(function (_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                result = {
                  successList: [],
                  errorList: [],
                  rules: [],
                  resultList: [],
                  allowSetValue: false
                };
                result.rules = trigger === "all" ? innerRules.value : innerRules.value.filter(function (item) {
                  return (item.trigger || "change") === trigger;
                });
                if (!(innerRules.value.length && !((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length))) {
                  _context2.next = 1;
                  break;
                }
                return _context2.abrupt("return", result);
              case 1:
                result.allowSetValue = true;
                _context2.next = 2;
                return validate(value.value, result.rules);
              case 2:
                result.resultList = _context2.sent;
                result.errorList = result.resultList.filter(function (item) {
                  return item.result !== true;
                }).map(function (item) {
                  Object.keys(item).forEach(function (key) {
                    if (!item.message && errorMessages.value[key]) {
                      var name2 = isString(props2.label) ? props2.label : props2.name;
                      item.message = template(errorMessages.value[key], {
                        name: name2,
                        validate: item[key]
                      });
                    }
                  });
                  return item;
                });
                result.successList = result.resultList.filter(function (item) {
                  return item.result === true && item.message && item.type === "success";
                });
                return _context2.abrupt("return", result);
              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function analysisValidateResult(_x) {
          return _ref5.apply(this, arguments);
        };
      }();
      var validateHandler = /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(trigger, showErrorMessage2) {
          var _yield$analysisValida, innerSuccessList, innerErrorList, rules, resultList, allowSetValue;
          return _regeneratorRuntime.wrap(function (_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                resetValidating.value = true;
                freeShowErrorMessage.value = showErrorMessage2;
                _context3.next = 1;
                return analysisValidateResult(trigger);
              case 1:
                _yield$analysisValida = _context3.sent;
                innerSuccessList = _yield$analysisValida.successList;
                innerErrorList = _yield$analysisValida.errorList;
                rules = _yield$analysisValida.rules;
                resultList = _yield$analysisValida.resultList;
                allowSetValue = _yield$analysisValida.allowSetValue;
                if (allowSetValue) {
                  successList.value = innerSuccessList;
                  errorList.value = innerErrorList;
                }
                if (rules.length) {
                  verifyStatus.value = innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;
                }
                if (needResetField.value) {
                  resetHandler();
                }
                resetValidating.value = false;
                return _context3.abrupt("return", _defineProperty$2({}, props2.name, innerErrorList.length === 0 ? true : resultList));
              case 2:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return function validateHandler(_x2, _x3) {
          return _ref6.apply(this, arguments);
        };
      }();
      var validateOnly = /*#__PURE__*/function () {
        var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(trigger) {
          var _yield$analysisValida2, innerErrorList, resultList;
          return _regeneratorRuntime.wrap(function (_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 1;
                return analysisValidateResult(trigger);
              case 1:
                _yield$analysisValida2 = _context4.sent;
                innerErrorList = _yield$analysisValida2.errorList;
                resultList = _yield$analysisValida2.resultList;
                return _context4.abrupt("return", _defineProperty$2({}, props2.name, innerErrorList.length === 0 ? true : resultList));
              case 2:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        return function validateOnly(_x4) {
          return _ref8.apply(this, arguments);
        };
      }();
      var setValidateMessage = function setValidateMessage(validateMessage) {
        if (!validateMessage && !isArray$1(validateMessage)) return;
        if (validateMessage.length === 0) {
          errorList.value = [];
          verifyStatus.value = ValidateStatus.SUCCESS;
        }
        errorList.value = validateMessage.map(function (item) {
          return _objectSpread$1j(_objectSpread$1j({}, item), {}, {
            result: false
          });
        });
        verifyStatus.value = ValidateStatus.FAIL;
      };
      var value = Vue.computed(function () {
        return (form === null || form === void 0 ? void 0 : form.data) && get(form === null || form === void 0 ? void 0 : form.data, props2.name);
      });
      var initialValue = Vue.ref(void 0);
      var _toRefs = Vue.toRefs(props2),
        name = _toRefs.name;
      var context = Vue.reactive({
        name: name,
        resetHandler: resetHandler,
        resetField: resetField,
        validate: validateHandler,
        validateOnly: validateOnly,
        setValidateMessage: setValidateMessage
      });
      Vue.onMounted(function () {
        initialValue.value = cloneDeep(value.value);
        form === null || form === void 0 || form.children.push(context);
      });
      Vue.onBeforeUnmount(function () {
        if (form) form.children = form === null || form === void 0 ? void 0 : form.children.filter(function (ctx) {
          return ctx !== context;
        });
      });
      Vue.watch(value, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function (_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 1;
              return validateHandler("change");
            case 1:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      })), {
        deep: true
      });
      Vue.watch(function () {
        return [props2.name, JSON.stringify(props2.rules)].join(",");
      }, function () {
        validateHandler("change");
      });
      var freeShowErrorMessage = Vue.ref(void 0);
      var showErrorMessage = Vue.computed(function () {
        if (isBoolean(freeShowErrorMessage.value)) return freeShowErrorMessage.value;
        if (isBoolean(props2.showErrorMessage)) return props2.showErrorMessage;
        return form === null || form === void 0 ? void 0 : form.showErrorMessage;
      });
      var classes = Vue.computed(function () {
        return [CLASS_NAMES.value.formItem, getFormItemClassName(formItemClassPrefix.value, props2.name), _defineProperty$2(_defineProperty$2({}, CLASS_NAMES.value.formItemWithHelp, helpNode.value), CLASS_NAMES.value.formItemWithExtra, extraNode.value)];
      });
      var helpNode = Vue.computed(function () {
        var help = renderContent("help");
        if (help) return Vue.createVNode("div", {
          "class": CLASS_NAMES.value.help
        }, [help]);
        return null;
      });
      var extraNode = Vue.computed(function () {
        var _list$;
        var getExtraNode = function getExtraNode(content) {
          return Vue.createVNode("div", {
            "class": CLASS_NAMES.value.extra,
            "title": content
          }, [content]);
        };
        var list = errorList.value;
        if (showErrorMessage.value && list !== null && list !== void 0 && (_list$ = list[0]) !== null && _list$ !== void 0 && _list$.message) {
          return getExtraNode(list[0].message);
        }
        if (successList.value.length) {
          return getExtraNode(successList.value[0].message);
        }
        return null;
      });
      var tipsNode = Vue.computed(function () {
        var tmpTips = renderContent("tips");
        if (!tmpTips) return null;
        var tmpClasses = ["".concat(formItemClassPrefix.value, "-tips"), "".concat(classPrefix.value, "-tips"), statusClass.value];
        return Vue.createVNode("div", {
          "class": tmpClasses
        }, [tmpTips]);
      });
      var handleBlur = /*#__PURE__*/function () {
        var _ref10 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
          return _regeneratorRuntime.wrap(function (_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 1;
                return validateHandler("blur");
              case 1:
              case "end":
                return _context6.stop();
            }
          }, _callee6);
        }));
        return function handleBlur() {
          return _ref10.apply(this, arguments);
        };
      }();
      Vue.provide(FormItemInjectionKey, {
        handleBlur: handleBlur
      });
      return function () {
        return Vue.createVNode("div", {
          "class": classes.value
        }, [renderLabel(), Vue.createVNode("div", {
          "class": contentClasses.value,
          "style": contentStyle.value
        }, [Vue.createVNode("div", {
          "class": CLASS_NAMES.value.controlsContent
        }, [renderContent("default"), renderSuffixIcon()]), helpNode.value, tipsNode.value, extraNode.value])]);
      };
    }
  });

  var Form = withInstall$1(_Form);
  var FormItem = withInstall$1(_FormItem);

  var props$I = {
    allowUncheck: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    onChange: Function,
    onClick: Function
  };

  var RadioGroupInjectionKey = Symbol("RadioGroupProvide");
  var RadioButtonInjectionKey = Symbol("RadioButtonProvide");

  var _Radio = Vue.defineComponent({
    name: "TRadio",
    inheritAttrs: false,
    props: props$I,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var inputRef = Vue.ref();
      var _toRefs = Vue.toRefs(props2),
        checked = _toRefs.checked,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];
      var radioChecked = Vue.computed(function () {
        return radioGroup ? props2.value === radioGroup.value : innerChecked.value;
      });
      var radioGroup = Vue.inject(RadioGroupInjectionKey, void 0);
      var allowUncheck = Vue.computed(function () {
        return Boolean(props2.allowUncheck || (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.allowUncheck));
      });
      var handleClick = function handleClick(e) {
        e.stopPropagation();
      };
      var onLabelClick = function onLabelClick(e) {
        var _props2$onClick;
        if (isDisabled.value || isReadonly.value) return;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
          e: e
        });
        if (radioChecked.value && !allowUncheck.value) return;
        if (radioGroup) {
          var value = radioChecked.value && allowUncheck.value ? void 0 : props2.value;
          radioGroup.setValue(value, {
            e: e,
            name: radioGroup.name
          });
        } else {
          var _value = allowUncheck.value ? !radioChecked.value : true;
          setInnerChecked(_value, {
            e: e
          });
        }
      };
      var inputEvents = Vue.computed(function () {
        return getValidAttrs({
          focus: attrs.onFocus,
          blur: attrs.onBlur,
          keydown: attrs.onKeydown,
          keyup: attrs.onKeyup,
          keypresss: attrs.onKeypresss
        });
      });
      var wrapperAttrs = Vue.computed(function () {
        var events = [].concat(_toConsumableArray(Object.keys(inputEvents.value)), ["input", "change"]).map(function (str) {
          return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
        });
        return omit$1(attrs, events);
      });
      var groupDisabled = Vue.computed(function () {
        return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled;
      });
      var groupReadonly = Vue.computed(function () {
        return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.readonly;
      });
      var isDisabled = useDisabled({
        afterDisabled: groupDisabled
      });
      var isReadonly = useReadonly({
        afterReadonly: groupReadonly
      });
      var inputProps = Vue.computed(function () {
        return {
          name: radioGroup ? radioGroup.name : props2.name,
          checked: radioChecked.value,
          disabled: isDisabled.value,
          readonly: isReadonly.value,
          value: props2.value
        };
      });
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var radioButton = Vue.inject(RadioButtonInjectionKey, void 0);
      var radioBtnName = usePrefixClass("radio-button");
      var COMPONENT_NAME = usePrefixClass("radio");
      var prefixCls = Vue.computed(function () {
        return radioButton ? radioBtnName.value : COMPONENT_NAME.value;
      });
      var inputClass = Vue.computed(function () {
        return ["".concat(prefixCls.value), _defineProperty$2(_defineProperty$2({}, STATUS.value.checked, inputProps.value.checked), STATUS.value.disabled, inputProps.value.disabled)];
      });
      var renderContent = useContent();
      return function () {
        return Vue.createVNode("label", Vue.mergeProps({
          "ref": inputRef,
          "class": inputClass.value
        }, wrapperAttrs.value, {
          "tabindex": isDisabled.value ? void 0 : "0",
          "onClick": onLabelClick
        }), [Vue.createVNode("input", Vue.mergeProps({
          "type": "radio",
          "class": "".concat(prefixCls.value, "__former")
        }, inputEvents.value, inputProps.value, {
          "onClick": handleClick,
          "tabindex": "-1",
          "data-value": isString(props2.value) ? "'".concat(props2.value, "'") : props2.value,
          "data-allow-uncheck": allowUncheck.value || void 0
        }), null), Vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__input")
        }, null), Vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__label")
        }, [renderContent("default", "label")])]);
      };
    }
  });

  var props$H = {
    allowUncheck: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "radio",
      validator: function validator(val) {
        if (!val) return true;
        return ["radio", "button"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean]
    },
    variant: {
      type: String,
      "default": "outline",
      validator: function validator(val) {
        if (!val) return true;
        return ["outline", "primary-filled", "default-filled"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$1j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1j(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$p(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _RadioButton = Vue.defineComponent({
    name: "TRadioButton",
    inheritAttrs: false,
    props: props$I,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      Vue.provide(RadioButtonInjectionKey, Vue.reactive({}));
      var radioProps = Vue.computed(function () {
        var res = _objectSpread$1i(_objectSpread$1i({}, props2), omit$1(attrs, Object.keys(attrs).filter(function (key) {
          return key.startsWith("on");
        })));
        return res;
      });
      var renderContent = useContent();
      return function () {
        var _slot;
        return Vue.createVNode(_Radio, radioProps.value, _isSlot$p(_slot = renderContent("default", "label")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  function useKeyboard(radioGroupRef, setInnerValue) {
    var checkRadioInGroup = function checkRadioInGroup(e) {
      var inputNode = e.target.querySelector("input");
      if (!inputNode) return;
      var isCheckedCode = CHECKED_CODE_REG.test(e.key) || CHECKED_CODE_REG.test(e.code);
      if (isCheckedCode) {
        e.preventDefault();
        var data = inputNode.dataset;
        if (inputNode.checked && data.allowUncheck) {
          setInnerValue(void 0, {
            e: e
          });
        } else {
          var value = !isNaN(Number(data.value)) ? Number(data.value) : data.value;
          value = isString(value) && {
            "true": true,
            "false": false
          }[value] || value;
          value = isString(value) && value[0] === "'" ? value.replace(/'/g, "") : value;
          setInnerValue(value, {
            e: e
          });
        }
      }
    };
    Vue.onMounted(function () {
      on$1(radioGroupRef.value, "keydown", checkRadioInGroup);
    });
    Vue.onBeforeMount(function () {
      off$1(radioGroupRef.value, "keydown", checkRadioInGroup);
    });
  }

  var _excluded$3 = ["window"];
  var defaultWindow = typeof window !== "undefined" ? window : void 0;
  function unrefElement(elRef) {
    var _plain$$el;
    var plain = Vue.unref(elRef);
    return (_plain$$el = plain === null || plain === void 0 ? void 0 : plain.$el) !== null && _plain$$el !== void 0 ? _plain$$el : plain;
  }
  function tryOnScopeDispose(fn) {
    if (Vue.getCurrentScope()) {
      Vue.onScopeDispose(fn);
      return true;
    }
    return false;
  }
  function useMutationObserver(target, callback) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _options$window = options.window,
      window2 = _options$window === void 0 ? defaultWindow : _options$window,
      mutationOptions = _objectWithoutProperties$1(options, _excluded$3);
    var observer;
    var isSupported = window2 && "MutationObserver" in window2;
    var cleanup = function cleanup() {
      if (observer) {
        observer.disconnect();
        observer = void 0;
      }
    };
    var stopWatch = Vue.watch(function () {
      return unrefElement(target);
    }, function (el) {
      cleanup();
      if (isSupported && window2 && el) {
        observer = new MutationObserver(callback);
        observer.observe(el, mutationOptions);
      }
    }, {
      immediate: true
    });
    var stop = function stop() {
      cleanup();
      stopWatch();
    };
    tryOnScopeDispose(stop);
    return {
      isSupported: isSupported,
      stop: stop
    };
  }

  function ownKeys$1i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1i(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Group = Vue.defineComponent({
    name: "TRadioGroup",
    props: props$H,
    setup: function setup(props2) {
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var radioGroupRef = Vue.ref();
      var radioBtnName = usePrefixClass("radio-button");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var updateInnerValue = function updateInnerValue(value2, context) {
        if (isEqual(value2, innerValue.value)) return;
        setInnerValue(value2, context);
      };
      useKeyboard(radioGroupRef, updateInnerValue);
      var checkedClassName = Vue.computed(function () {
        return ".".concat(radioBtnName.value, ".").concat(STATUS.value.checked);
      });
      var barStyle = Vue.ref({
        width: "0px",
        height: "0px",
        left: "0px",
        top: "0px",
        "transition-property": "none"
      });
      var calcDefaultBarStyle = function calcDefaultBarStyle() {
        var div = document.createElement("div");
        div.setAttribute("style", "position: absolute; visibility: hidden;");
        div.appendChild(radioGroupRef.value.cloneNode(true));
        document.body.appendChild(div);
        var defaultCheckedRadio = div.querySelector(checkedClassName.value);
        var offsetWidth = defaultCheckedRadio.offsetWidth,
          offsetHeight = defaultCheckedRadio.offsetHeight,
          offsetLeft = defaultCheckedRadio.offsetLeft,
          offsetTop = defaultCheckedRadio.offsetTop;
        barStyle.value = _objectSpread$1h(_objectSpread$1h({}, barStyle.value), {}, {
          width: "".concat(offsetWidth, "px"),
          height: "".concat(offsetHeight, "px"),
          left: "".concat(offsetLeft, "px"),
          top: "".concat(offsetTop, "px")
        });
        document.body.removeChild(div);
      };
      var calcBarStyle = function calcBarStyle() {
        var disableAnimation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (props2.variant === "outline") return;
        var checkedRadio = radioGroupRef.value.querySelector(checkedClassName.value);
        var transitionProperty = disableAnimation ? "none" : "all";
        if (!checkedRadio) {
          barStyle.value = {
            "transition-property": transitionProperty,
            width: "0px",
            height: "9px",
            left: "0px",
            top: "0px"
          };
          return;
        }
        var offsetWidth = checkedRadio.offsetWidth,
          offsetHeight = checkedRadio.offsetHeight,
          offsetLeft = checkedRadio.offsetLeft,
          offsetTop = checkedRadio.offsetTop;
        if (!offsetWidth) {
          calcDefaultBarStyle();
        } else {
          barStyle.value = {
            "transition-property": transitionProperty,
            width: "".concat(offsetWidth, "px"),
            height: "".concat(offsetHeight, "px"),
            left: "".concat(offsetLeft, "px"),
            top: "".concat(offsetTop, "px")
          };
        }
      };
      var observerReturn;
      Vue.watch(innerValue, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 1;
              return Vue.nextTick();
            case 1:
              calcBarStyle();
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      Vue.onMounted(function () {
        calcBarStyle(true);
        useResizeObserver(radioGroupRef, throttle$1(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          return _regeneratorRuntime.wrap(function (_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 1;
                return Vue.nextTick();
              case 1:
                calcBarStyle();
              case 2:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        })), 300));
        var checkedRadioLabel = radioGroupRef.value.querySelector("".concat(checkedClassName.value, " .").concat(radioBtnName.value, "__label"));
        if (checkedRadioLabel) {
          observerReturn = useMutationObserver(checkedRadioLabel, function (mutations) {
            mutations.forEach(function (mutation) {
              if (mutation.type === "characterData") {
                calcBarStyle();
              }
            });
          }, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }
      });
      Vue.onUnmounted(function () {
        var _observerReturn;
        (_observerReturn = observerReturn) === null || _observerReturn === void 0 || _observerReturn.stop();
      });
      var _toRefs2 = Vue.toRefs(props2),
        name = _toRefs2.name,
        disabled = _toRefs2.disabled,
        readonly = _toRefs2.readonly;
      Vue.provide(RadioGroupInjectionKey, Vue.reactive({
        name: name,
        disabled: disabled,
        readonly: readonly,
        value: innerValue,
        allowUncheck: props2.allowUncheck,
        setValue: updateInnerValue
      }));
      var radioGroupName = usePrefixClass("radio-group");
      var renderSlot = useTNodeDefault();
      var renderBlock = function renderBlock() {
        if (props2.variant.includes("filled") && !isNil(innerValue.value)) return Vue.createVNode("div", {
          "style": barStyle.value,
          "class": "".concat(radioGroupName.value, "__bg-block")
        }, null);
      };
      var renderOptions = function renderOptions() {
        var _props2$options;
        return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function (option) {
          var opt = option;
          if (isNumber(option) || isString(option)) {
            opt = {
              value: option,
              label: option.toString()
            };
          }
          var RadioComponent = props2.theme === "button" ? _RadioButton : _Radio;
          return Vue.createVNode(RadioComponent, {
            "key": "radio-group-options-".concat(opt.value, "-").concat(Math.random()),
            "name": props2.name,
            "checked": innerValue.value === opt.value,
            "disabled": "disabled" in opt ? opt.disabled : props2.disabled,
            "value": opt.value
          }, {
            "default": function _default() {
              return [isFunction(opt.label) ? opt.label(Vue.h) : opt.label];
            }
          });
        });
      };
      var groupClass = Vue.computed(function () {
        return ["".concat(radioGroupName.value), SIZE.value[props2.size], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(radioGroupName.value, "__outline"), props2.variant === "outline"), "".concat(radioGroupName.value, "--filled"), props2.variant.includes("filled")), "".concat(radioGroupName.value, "--primary-filled"), props2.variant === "primary-filled")];
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": radioGroupRef,
          "class": groupClass.value
        }, [renderSlot("default") || renderOptions(), renderBlock()]);
      };
    }
  });

  var Radio = withInstall$1(_Radio);
  var RadioGroup = withInstall$1(_Group);
  var RadioButton = withInstall$1(_RadioButton);

  var props$G = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    inputNumberProps: {
      type: [Boolean, Object],
      "default": false
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "horizontal"].includes(val);
      }
    },
    marks: {
      type: [Object, Array]
    },
    max: {
      type: Number,
      "default": 100
    },
    min: {
      type: Number,
      "default": 0
    },
    range: Boolean,
    showStep: Boolean,
    step: {
      type: Number,
      "default": 1
    },
    tooltipProps: {
      type: Object
    },
    value: {
      type: [Number, Array],
      "default": void 0
    },
    modelValue: {
      type: [Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [Number, Array],
      "default": 0
    },
    onChange: Function,
    onChangeEnd: Function
  };

  var getStopStyle = function getStopStyle(position, isVertical) {
    return isVertical ? {
      top: "calc(".concat(100 - position, "% - 1px)")
    } : {
      left: "".concat(position, "%")
    };
  };
  var formatSliderValue = function formatSliderValue(val, type) {
    if (type === "first") {
      if (val instanceof Array) {
        return val[0];
      }
      return val;
    }
    if (val instanceof Array) {
      return val[1];
    }
    return 0;
  };
  var formatLabel = function formatLabel(label, val) {
    if (Boolean(label) === false) {
      return String(val);
    }
    if (isString(label)) {
      var text = String(val);
      try {
        var rule = /\${value}%/g;
        var enableToReplace = rule.test(label);
        if (enableToReplace) {
          text = label.replace(rule, String(val));
        } else {
          text = label;
          throw new Error();
        }
      } catch (e) {
        console.warn("fail to parse label prop, please pass string such as '${value}%'");
      }
      return text;
    }
    return label;
  };

  function ownKeys$1h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1h(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var initialProps = {
    visible: false,
    trigger: "hover",
    showArrow: true,
    overlayInnerStyle: void 0,
    overlayClassName: void 0,
    attach: "body",
    theme: "default"
  };
  var useSliderTooltip = function useSliderTooltip(tooltipConfig) {
    var tooltipRef = Vue.ref();
    var showTooltip = Vue.computed({
      get: function get() {
        return !tooltipConfig.value.tooltipProps === false;
      },
      set: function set(val) {
        return val;
      }
    });
    var normalizeProps = Vue.ref(_objectSpread$1g({}, initialProps));
    var toggleTooltip = function toggleTooltip(toState) {
      if (!showTooltip.value) return;
      normalizeProps.value.visible = toState;
    };
    var renderTNodeJSX = useTNodeJSX();
    var validProps = Vue.computed(function () {
      var _tooltipConfig$value = tooltipConfig.value,
        vertical = _tooltipConfig$value.vertical,
        tooltipProps = _tooltipConfig$value.tooltipProps,
        label = _tooltipConfig$value.label,
        value = _tooltipConfig$value.value,
        position = _tooltipConfig$value.position,
        range = _tooltipConfig$value.range;
      var placement = vertical ? "right" : "top";
      var content = function () {
        if (label === true) {
          return String(value);
        }
        if (typeof label === "string") {
          return formatLabel(label, value);
        }
        return renderTNodeJSX("label", {
          params: range ? {
            value: value,
            position: position
          } : {
            value: value
          }
        });
      }();
      if (tooltipProps instanceof Object) {
        if (!(tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.placement)) {
          normalizeProps.value.placement = placement;
        }
        if (tooltipProps.content) {
          content = tooltipProps.content;
        }
        return _objectSpread$1g(_objectSpread$1g(_objectSpread$1g({}, normalizeProps.value), tooltipProps), {}, {
          content: content
        });
      }
      return _objectSpread$1g(_objectSpread$1g({}, normalizeProps.value), {}, {
        placement: placement,
        content: content
      });
    });
    return {
      tooltipRef: tooltipRef,
      tooltipProps: validProps,
      toggleTooltip: toggleTooltip,
      showTooltip: showTooltip
    };
  };

  var sliderPropsInjectKey = Symbol("sliderProps");

  var _SliderButton = Vue.defineComponent({
    name: "TSliderButton",
    props: {
      value: {
        type: [Number],
        "default": 0
      },
      vertical: {
        type: Boolean,
        "default": false
      },
      tooltipProps: {
        type: [Boolean, Object],
        "default": true
      },
      label: {
        type: [String, Boolean, Function]
      },
      range: {
        type: Boolean,
        "default": false
      },
      position: {
        type: String
      }
    },
    emits: ["input", "mouseup"],
    setup: function setup(props, ctx) {
      var COMPONENT_NAME = usePrefixClass("slider__button");
      var tooltipConfig = Vue.computed(function () {
        return props;
      });
      var _useSliderTooltip = useSliderTooltip(tooltipConfig),
        tooltipRef = _useSliderTooltip.tooltipRef,
        tooltipProps = _useSliderTooltip.tooltipProps,
        toggleTooltip = _useSliderTooltip.toggleTooltip,
        showTooltip = _useSliderTooltip.showTooltip;
      var parentProps = Vue.inject(sliderPropsInjectKey);
      var buttonRef = Vue.ref();
      var dragged = Vue.ref(false);
      var slideButtonProps = Vue.reactive({
        dragging: false,
        isClick: false,
        startX: 0,
        startY: 0,
        startPos: 0,
        newPos: null
      });
      var rangeDiff = Vue.computed(function () {
        return Number(parentProps.max) - Number(parentProps.min);
      });
      var currentPos = Vue.computed(function () {
        return "".concat((props.value - parentProps.min) / rangeDiff.value * 100, "%");
      });
      var step = Vue.computed(function () {
        return parentProps.step;
      });
      var wrapperStyle = Vue.computed(function () {
        return props.vertical ? {
          bottom: currentPos.value
        } : {
          left: currentPos.value
        };
      });
      Vue.watchEffect(function () {
        parentProps.toggleDragging(slideButtonProps.dragging);
      });
      var setPosition = function setPosition(pos) {
        var newPos = pos;
        if (newPos === null || Number.isNaN(newPos)) {
          return;
        }
        if (newPos > 100) {
          newPos = 100;
        } else if (newPos < 0) {
          newPos = 0;
        }
        var perStepLen = 100 * step.value / rangeDiff.value;
        var steps = Math.round(newPos / perStepLen);
        var value = steps * perStepLen * rangeDiff.value * 0.01;
        value += parentProps.min;
        value = Number(parseFloat("".concat(value)).toFixed(parentProps.precision));
        ctx.emit("input", value);
        Vue.nextTick(function () {
          var _tooltipRef$value$upd, _tooltipRef$value;
          tooltipRef.value && ((_tooltipRef$value$upd = (_tooltipRef$value = tooltipRef.value).updatePopper) === null || _tooltipRef$value$upd === void 0 ? void 0 : _tooltipRef$value$upd.call(_tooltipRef$value));
        });
      };
      var handleMouseEnter = function handleMouseEnter() {
        buttonRef.value.focus();
        toggleTooltip(true);
      };
      var handleMouseLeave = function handleMouseLeave() {
        if (!slideButtonProps.dragging) {
          toggleTooltip(false);
        }
      };
      var onDragStart = function onDragStart(event) {
        slideButtonProps.dragging = true;
        slideButtonProps.isClick = true;
        var type = event.type;
        var clientY = event.clientY,
          clientX = event.clientX;
        if (type === "touchstart") {
          var touch = event.touches;
          var _ref = [touch[0].clientY, touch[0].clientX];
          clientY = _ref[0];
          clientX = _ref[1];
        }
        if (props.vertical) {
          slideButtonProps.startY = clientY;
        } else {
          slideButtonProps.startX = clientX;
        }
        slideButtonProps.startPos = parseFloat(currentPos.value);
        slideButtonProps.newPos = slideButtonProps.startPos;
      };
      var onDragging = function onDragging(e) {
        var event = e;
        if (!slideButtonProps.dragging) {
          return;
        }
        dragged.value = true;
        slideButtonProps.isClick = false;
        if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && isFunction(parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize)) {
          parentProps.resetSize();
        }
        var diff = 0;
        var parentSliderSize = parentProps.sliderSize;
        var type = event.type;
        var clientY = event.clientY,
          clientX = event.clientX;
        if (type === "touchmove") {
          var touch = event.touches;
          var _ref2 = [touch[0].clientY, touch[0].clientX];
          clientY = _ref2[0];
          clientX = _ref2[1];
        }
        if (props.vertical) {
          diff = slideButtonProps.startY - clientY;
        } else {
          diff = clientX - slideButtonProps.startX;
        }
        diff = diff / parentSliderSize * 100;
        slideButtonProps.newPos = slideButtonProps.startPos + diff;
        setPosition(slideButtonProps.newPos);
      };
      var _onDragEnd = function onDragEnd() {
        if (slideButtonProps.dragging) {
          setTimeout(function () {
            slideButtonProps.dragging = false;
            toggleTooltip(false);
            if (!slideButtonProps.isClick) {
              setPosition(slideButtonProps.newPos);
            }
            dragged.value && ctx.emit("mouseup");
            dragged.value = false;
          }, 0);
          window.removeEventListener("mousemove", onDragging);
          window.removeEventListener("touchmove", onDragging);
          window.removeEventListener("mouseup", _onDragEnd);
          window.removeEventListener("touchend", _onDragEnd);
          window.removeEventListener("contextmenu", _onDragEnd);
        }
      };
      function onButtonDown(event) {
        if (parentProps.disabled) {
          return;
        }
        event.preventDefault();
        onDragStart(event);
        window.addEventListener("mousemove", onDragging);
        window.addEventListener("mouseup", _onDragEnd);
        window.addEventListener("touchmove", onDragging);
        window.addEventListener("touchend", _onDragEnd);
        window.addEventListener("contextmenu", _onDragEnd);
      }
      var onKeyDown = function onKeyDown(state) {
        if (parentProps.disabled) {
          return;
        }
        var stepLength = step.value / rangeDiff.value * 100;
        if (state === "sub") {
          stepLength = -stepLength;
        }
        slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
        setPosition(slideButtonProps.newPos);
      };
      var onNativeKeyDown = function onNativeKeyDown(e) {
        var code = e.code;
        e.preventDefault();
        if (code === "ArrowDown" || code === "ArrowLeft") {
          onKeyDown("sub");
        }
        if (code === "ArrowUp" || code === "ArrowRight") {
          onKeyDown("add");
        }
      };
      ctx.expose({
        setPosition: setPosition
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": buttonRef,
          "class": "".concat(COMPONENT_NAME.value, "-wrapper"),
          "style": wrapperStyle.value,
          "tabindex": "0",
          "show-tooltip": showTooltip.value,
          "onMouseenter": handleMouseEnter,
          "onMouseleave": handleMouseLeave,
          "onMousedown": onButtonDown,
          "onTouchstart": onButtonDown,
          "onFocus": handleMouseEnter,
          "onBlur": handleMouseLeave,
          "onKeydown": onNativeKeyDown
        }, [Vue.createVNode(Tooltip, Vue.mergeProps({
          "ref": tooltipRef,
          "hideEmptyPopup": true,
          "disabled": !showTooltip.value
        }, tooltipProps.value), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": [COMPONENT_NAME.value, _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--dragging"), slideButtonProps.dragging)]
            }, null)];
          }
        })]);
      };
    }
  });

  var TSliderMark = Vue.defineComponent({
    name: "TSliderMark",
    props: {
      mark: {
        type: [Object, Array, String, Number]
      },
      point: {
        type: Number
      },
      onClickMarkPoint: {
        type: Function,
        "default": function _default() {}
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("slider__mark");
      var changeValue = function changeValue(e) {
        var _props$onClickMarkPoi;
        e.stopPropagation();
        props === null || props === void 0 || (_props$onClickMarkPoi = props.onClickMarkPoint) === null || _props$onClickMarkPoi === void 0 || _props$onClickMarkPoi.call(props, props.point);
      };
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-text"),
          "onClick": changeValue
        }, [props.mark]);
      };
    }
  });

  var useSliderMark = function useSliderMark(config) {
    var name = config.value.prefixName;
    var markList = Vue.computed(function () {
      var markProps = config.value;
      if (!markProps.marks) {
        return [];
      }
      var legalMarks = [];
      if (isArray$1(markProps.marks)) {
        var marksList = cloneDeep(markProps.marks).sort(function (a, b) {
          return a - b;
        });
        var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([markProps.max]));
        var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([markProps.min]));
        if (minLimit < markProps.min) {
          log.errorOnce("TSlider", "marks min value should >= props min");
        }
        if (maxLimit > markProps.max) {
          log.errorOnce("TSlider", "marks max value should <= props max");
        }
        marksList.forEach(function (item) {
          legalMarks.push({
            point: item,
            position: (item - minLimit) / (maxLimit - minLimit) * 100,
            mark: item
          });
        });
      } else {
        Object.keys(markProps.marks).map(parseFloat).sort(function (a, b) {
          return a - b;
        }).filter(function (point) {
          return point <= markProps.max && point >= markProps.min;
        }).forEach(function (point) {
          var item = {
            point: point,
            position: (point - markProps.min) * 100 / (markProps.max - markProps.min),
            mark: markProps.marks[point]
          };
          legalMarks.push(item);
        });
      }
      return legalMarks;
    });
    var renderMask = function renderMask(onChangeFn) {
      if (!markList.value.length) return null;
      return Vue.createVNode("div", null, [Vue.createVNode("div", {
        "class": "".concat(name, "__stops")
      }, [markList.value.map(function (item, index) {
        if (item.position === 0 || item.position === 100) return null;
        return Vue.createVNode("div", {
          "class": "".concat(name, "__stop ").concat(name, "__mark-stop"),
          "style": getStopStyle(item.position, config.value.vertical),
          "key": index
        }, null);
      })]), Vue.createVNode("div", {
        "class": "".concat(name, "__mark")
      }, [markList.value.map(function (item, key) {
        return Vue.createVNode(TSliderMark, {
          "mark": item.mark,
          "point": item.point,
          "key": key,
          "style": getStopStyle(item.position, config.value.vertical),
          "onClickMarkPoint": onChangeFn
        }, null);
      })])]);
    };
    return renderMask;
  };

  function ownKeys$1g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1g(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useSliderInput = function useSliderInput(config) {
    var name = config.value.prefixName;
    var sliderInputState = Vue.computed(function () {
      var _config$value$step$to;
      var initialState = {
        format: void 0,
        placeholder: "",
        theme: "column",
        decimalPlaces: ((_config$value$step$to = config.value.step.toString().split(".")[1]) === null || _config$value$step$to === void 0 ? void 0 : _config$value$step$to.length) || 0
      };
      var inputProps = config.value;
      if (!isBoolean(inputProps.inputNumberProps)) {
        var _inputProps$inputNumb;
        var inputTheme = (_inputProps$inputNumb = inputProps.inputNumberProps) === null || _inputProps$inputNumb === void 0 ? void 0 : _inputProps$inputNumb.theme;
        initialState = _objectSpread$1f(_objectSpread$1f({}, initialState), omit$1(inputProps.inputNumberProps, "onChange"));
        if (["column", "row", "normal"].includes(inputTheme)) {
          initialState.theme = inputTheme;
        }
      }
      return initialState;
    });
    var sliderNumberClass = Vue.computed(function () {
      return ["".concat(name, "__input"), {
        "is-vertical": config.value.vertical
      }];
    });
    var renderInputNumber = function renderInputNumber(val, changeFn) {
      var normalizeChangeFn = function normalizeChangeFn(num, context) {
        var _config$value, _config$value$onChang;
        if (num !== void 0 && !isNaN(num)) {
          changeFn(num);
        }
        (_config$value = config.value) === null || _config$value === void 0 || (_config$value = _config$value.inputNumberProps) === null || _config$value === void 0 || (_config$value$onChang = _config$value.onChange) === null || _config$value$onChang === void 0 || _config$value$onChang.call(_config$value, num, context);
      };
      return Vue.createVNode(InputNumber, Vue.mergeProps(sliderInputState.value, {
        "class": sliderNumberClass.value,
        "value": val,
        "step": config.value.step,
        "onChange": normalizeChangeFn,
        "disabled": config.value.disabled,
        "min": config.value.min,
        "max": config.value.max
      }), null);
    };
    return renderInputNumber;
  };

  var _Slider = Vue.defineComponent({
    name: "TSlider",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$G,
    setup: function setup(props2) {
      var disabled = useDisabled();
      var COMPONENT_NAME = usePrefixClass("slider");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        sliderValue = _useVModel2[0],
        setSliderValue = _useVModel2[1];
      var sliderContainerRef = Vue.ref();
      var sliderRef = Vue.ref();
      var firstButtonRef = Vue.ref();
      var secondButtonRef = Vue.ref();
      var firstValue = Vue.ref(formatSliderValue(sliderValue.value, "first"));
      var secondValue = Vue.ref(formatSliderValue(sliderValue.value, "second"));
      var dragging = Vue.ref(false);
      var sliderSize = Vue.ref(1);
      var vertical = Vue.computed(function () {
        return props2.layout === "vertical";
      });
      var containerClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__container"), {
          "is-vertical": vertical.value
        }];
      });
      var sliderClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), _defineProperty$2(_defineProperty$2(_defineProperty$2({
          "is-vertical": vertical.value
        }, "".concat(COMPONENT_NAME.value, "--with-input"), props2.inputNumberProps), "".concat(COMPONENT_NAME.value, "--vertical"), vertical.value), STATUS.value.disabled, disabled.value)];
      });
      var sliderRailClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__rail"), {
          "show-input": props2.inputNumberProps,
          disabled: disabled.value
        }];
      });
      var runwayStyle = Vue.computed(function () {
        return vertical.value ? {
          height: "100%"
        } : {};
      });
      var barStyle = Vue.computed(function () {
        var barStart = props2.range ? "".concat(100 * (minValue.value - props2.min) / rangeDiff.value, "%") : "0%";
        var currentDiff = props2.range ? maxValue.value - minValue.value : firstValue.value - props2.min;
        var barSize = "".concat(100 * currentDiff / rangeDiff.value, "%");
        return vertical.value ? {
          height: barSize,
          bottom: barStart
        } : {
          width: barSize,
          left: barStart
        };
      });
      var rangeDiff = Vue.computed(function () {
        return props2.max - props2.min;
      });
      var minValue = Vue.computed(function () {
        return Math.min(firstValue.value, secondValue.value);
      });
      var maxValue = Vue.computed(function () {
        return Math.max(firstValue.value, secondValue.value);
      });
      var steps = Vue.computed(function () {
        if (!props2.showStep || props2.min > props2.max) return [];
        if (props2.step === 0) {
          console.warn("[Element Warn][Slider]step should not be 0.");
          return [];
        }
        var stepCount = rangeDiff.value / props2.step;
        var stepWidth = 100 * props2.step / rangeDiff.value;
        var result = [];
        for (var i = 1; i < stepCount; i++) {
          result.push(i * stepWidth);
        }
        if (props2.range) {
          var r = result.filter(function (step2) {
            return step2 < 100 * (minValue.value - props2.min) / rangeDiff.value || props2.step > 100 * (maxValue.value - props2.max) / rangeDiff.value;
          });
          return r;
        }
        return result.filter(function (step2) {
          return step2 > 100 * (firstValue.value - props2.min) / rangeDiff.value;
        });
      });
      var precision = Vue.computed(function () {
        var precisions = [props2.min, props2.max, props2.step].map(function (item) {
          var decimalArr = "".concat(item).split(".");
          return decimalArr[1] ? decimalArr[1].length : 0;
        });
        return Math.max.apply(null, precisions);
      });
      var setValues = function setValues(value2) {
        var _ref2 = [props2.min, props2.max],
          min2 = _ref2[0],
          max2 = _ref2[1];
        if (min2 > max2) {
          console.warn("[Slider] max should be greater than min.");
          return;
        }
        if (props2.range && isArray$1(value2)) {
          var _ref3 = [Math.min.apply(Math, _toConsumableArray(value2)), Math.max.apply(Math, _toConsumableArray(value2))],
            maxLimit = _ref3[0],
            minLimit = _ref3[1];
          if (maxLimit > max2) {
            maxLimit = firstValue.value;
          }
          if (maxLimit < min2) {
            maxLimit = min2;
          }
          if (minLimit < min2) {
            minLimit = secondValue.value;
          }
          if (minLimit > max2) {
            minLimit = max2;
          }
          var _ref4 = [maxLimit, minLimit];
          firstValue.value = _ref4[0];
          secondValue.value = _ref4[1];
          return [maxLimit, minLimit];
        }
        var preValue = value2;
        if (preValue < min2) {
          preValue = min2;
        }
        if (preValue > max2) {
          preValue = max2;
        }
        return preValue;
      };
      var emitChange = function emitChange(value2) {
        var changeValue2 = value2;
        if (changeValue2 === void 0) {
          if (props2.range) {
            changeValue2 = [firstValue.value, secondValue.value];
          } else {
            changeValue2 = firstValue.value;
          }
        }
        var fixValue = setValues(changeValue2);
        setSliderValue(fixValue);
      };
      var resetSize = function resetSize() {
        if (sliderRef.value) {
          sliderSize.value = sliderRef.value["client".concat(vertical.value ? "Height" : "Width")];
        }
      };
      var isAlreadyMount = Vue.ref(false);
      var init = function init() {
        var valuetext;
        if (props2.range) {
          if (isArray$1(sliderValue.value)) {
            firstValue.value = Math.max(props2.min || 0, sliderValue.value[0]);
            secondValue.value = Math.min(props2.max || 100, sliderValue.value[1]);
          } else {
            firstValue.value = props2.min || 0;
            secondValue.value = props2.max || 100;
          }
          valuetext = "".concat(firstValue.value, "-").concat(secondValue.value);
        } else {
          if (!isNumber(sliderValue.value)) {
            firstValue.value = props2.min;
          } else {
            firstValue.value = Math.min(props2.max, Math.max(props2.min, sliderValue.value));
          }
          valuetext = String(firstValue.value);
        }
        if (sliderContainerRef.value) {
          sliderContainerRef.value.setAttribute("aria-valuetext", valuetext);
        }
        resetSize();
        window.addEventListener("resize", resetSize);
      };
      var setPosition = function setPosition(percent) {
        var targetValue = percent * rangeDiff.value / 100;
        targetValue = props2.min + targetValue;
        if (!props2.range && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
          return;
        }
        var button;
        if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
          button = firstValue.value < secondValue.value ? "button1" : "button2";
        } else {
          button = firstValue.value > secondValue.value ? "button1" : "button2";
        }
        if (button === "button1" && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
        }
        if (button === "button2" && secondButtonRef.value) {
          secondButtonRef.value.setPosition(percent);
        }
      };
      var getFixValue = function getFixValue() {
        var changeValue2 = props2.range ? [firstValue.value, secondValue.value] : firstValue.value;
        return setValues(changeValue2);
      };
      var onSliderClick = function onSliderClick(event) {
        var _props2$onChangeEnd;
        if (disabled.value || dragging.value) {
          return;
        }
        if (!sliderRef.value) return;
        resetSize();
        var value2 = 0;
        if (vertical.value) {
          var sliderOffsetBottom = sliderRef.value.getBoundingClientRect().bottom;
          value2 = (sliderOffsetBottom - event.clientY) / sliderSize.value * 100;
          setPosition(value2);
        } else {
          var sliderOffsetLeft = sliderRef.value.getBoundingClientRect().left;
          value2 = (event.clientX - sliderOffsetLeft) / sliderSize.value * 100;
          setPosition(value2);
        }
        var fixValue = getFixValue();
        (_props2$onChangeEnd = props2.onChangeEnd) === null || _props2$onChangeEnd === void 0 || _props2$onChangeEnd.call(props2, fixValue);
      };
      var changeValue = function changeValue(point) {
        var _props2$onChangeEnd2;
        if (disabled.value || dragging.value) {
          return;
        }
        resetSize();
        var value2 = Number(point / rangeDiff.value * 100);
        setPosition(value2);
        emitChange(point);
        var fixValue = getFixValue();
        (_props2$onChangeEnd2 = props2.onChangeEnd) === null || _props2$onChangeEnd2 === void 0 || _props2$onChangeEnd2.call(props2, fixValue);
      };
      Vue.watch(function () {
        return sliderValue.value;
      }, function (newVal) {
        if (dragging.value === true) return;
        if (isArray$1(newVal) && props2.range) {
          var _newVal = _slicedToArray(newVal, 2);
          firstValue.value = _newVal[0];
          secondValue.value = _newVal[1];
        } else {
          firstValue.value = newVal;
        }
      });
      Vue.watch([firstValue, secondValue, dragging], function (newStates, prevStates) {
        if (newStates[0] !== prevStates[0]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          } else {
            emitChange(firstValue.value);
          }
        }
        if (newStates[1] !== prevStates[1]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          }
        }
        if (newStates[2] !== prevStates[2] && newStates[2] === false) {
          init();
        }
      });
      Vue.onMounted(function () {
        init();
        isAlreadyMount.value = true;
      });
      Vue.onBeforeUnmount(function () {
        window.removeEventListener("resize", resetSize);
      });
      var markConfig = Vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          marks: props2.marks,
          vertical: vertical.value,
          prefixName: COMPONENT_NAME.value
        };
      });
      var renderMask = useSliderMark(markConfig);
      var inputConfig = Vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          inputNumberProps: props2.inputNumberProps,
          step: props2.step,
          prefixName: COMPONENT_NAME.value,
          vertical: vertical.value,
          disabled: disabled.value
        };
      });
      var renderInputNumber = useSliderInput(inputConfig);
      var renderInputButton = function renderInputButton() {
        var firstInputVal = setValues(firstValue.value);
        var firstInputOnChange = function firstInputOnChange(v) {
          firstValue.value = setValues(v);
        };
        var secondInputVal = setValues(secondValue.value);
        var secondInputOnChange = function secondInputOnChange(v) {
          secondValue.value = setValues(v);
        };
        return Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__input-container"), {
            "is-vertical": vertical.value
          }]
        }, [renderInputNumber(firstInputVal, firstInputOnChange), props2.range && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__center-line")
        }, null), props2.range && renderInputNumber(secondInputVal, secondInputOnChange)]);
      };
      var toggleDragging = function toggleDragging(toState) {
        dragging.value = toState;
      };
      var _toRefs2 = Vue.toRefs(props2),
        min = _toRefs2.min,
        max = _toRefs2.max,
        step = _toRefs2.step;
      Vue.provide(sliderPropsInjectKey, Vue.reactive({
        min: min,
        max: max,
        step: step,
        dragging: dragging,
        toggleDragging: toggleDragging,
        precision: precision,
        disabled: disabled,
        resetSize: resetSize,
        sliderSize: sliderSize
      }));
      return function () {
        return Vue.createVNode("div", {
          "class": containerClass.value,
          "ref": sliderContainerRef
        }, [Vue.createVNode("div", {
          "class": sliderClass.value,
          "role": "slider",
          "aria-valuemin": props2.min,
          "aria-valuemax": props2.max,
          "aria-orientation": props2.layout,
          "aria-disabled": disabled.value,
          "tooltip-props": props2.tooltipProps
        }, [Vue.createVNode("div", {
          "class": sliderRailClass.value,
          "style": runwayStyle.value,
          "onClick": onSliderClick,
          "ref": sliderRef
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__track"),
          "style": barStyle.value
        }, null), Vue.createVNode(_SliderButton, {
          "vertical": vertical.value,
          "value": firstValue.value,
          "ref": firstButtonRef,
          "disabled": disabled.value,
          "range": props2.range,
          "position": "start",
          "tooltip-props": props2.tooltipProps,
          "label": props2.label,
          "onInput": function onInput(v) {
            firstValue.value = v;
          },
          "onMouseup": function onMouseup() {
            var _props2$onChangeEnd3;
            var fixValue = getFixValue();
            (_props2$onChangeEnd3 = props2.onChangeEnd) === null || _props2$onChangeEnd3 === void 0 || _props2$onChangeEnd3.call(props2, fixValue);
          }
        }, null), props2.range && Vue.createVNode(_SliderButton, {
          "vertical": vertical.value,
          "value": secondValue.value,
          "ref": secondButtonRef,
          "disabled": disabled.value,
          "label": props2.label,
          "range": props2.range,
          "position": "end",
          "tooltip-props": props2.tooltipProps,
          "onInput": function onInput(v) {
            secondValue.value = v;
          },
          "onMouseup": function onMouseup() {
            var _props2$onChangeEnd4;
            var fixValue = getFixValue();
            (_props2$onChangeEnd4 = props2.onChangeEnd) === null || _props2$onChangeEnd4 === void 0 || _props2$onChangeEnd4.call(props2, fixValue);
          }
        }, null), props2.showStep && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__stops")
        }, [steps.value.map(function (item, key) {
          if (item.position === 0 || item.position === 100) return null;
          return Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__stop"),
            "key": key,
            "style": getStopStyle(item, vertical.value)
          }, null);
        })]), renderMask(changeValue)])]), isAlreadyMount.value && props2.inputNumberProps && renderInputButton()]);
      };
    }
  });

  var Slider = withInstall$1(_Slider);
  var SliderButton = withInstall$1(_SliderButton);

  var props$F = {
    beforeChange: {
      type: Function
    },
    customValue: {
      type: Array
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    loading: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean]
    },
    onChange: Function
  };

  var _Switch = Vue.defineComponent({
    name: "TSwitch",
    props: props$F,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useDisabled();
      var COMPONENT_NAME = usePrefixClass("switch");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setSwitchVal = _useVModel2[1];
      var activeValue = Vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 0) {
          return props2.customValue[0];
        }
        return true;
      });
      var inactiveValue = Vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 1) {
          return props2.customValue[1];
        }
        return false;
      });
      function handleToggle(e) {
        var checked = innerValue.value === activeValue.value ? inactiveValue.value : activeValue.value;
        setSwitchVal(checked, {
          e: e
        });
      }
      function toggle(e) {
        if (disabled.value || props2.loading) {
          return;
        }
        if (!props2.beforeChange) {
          handleToggle(e);
          return;
        }
        Promise.resolve(props2.beforeChange()).then(function (v) {
          if (v) {
            handleToggle(e);
          }
        })["catch"](function (e2) {
          throw new Error("Switch: some error occurred: ".concat(e2));
        });
      }
      var classes = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, disabled.value), STATUS.value.loading, props2.loading), STATUS.value.checked, innerValue.value === activeValue.value || props2.modelValue === activeValue.value)];
      });
      var nodeClasses = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__handle"), _defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, disabled.value), STATUS.value.loading, props2.loading)];
      });
      var contentClasses = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__content"), SIZE.value[props2.size], _defineProperty$2({}, STATUS.value.disabled, disabled.value)];
      });
      Vue.watch(innerValue, function (val) {
        if (props2.customValue && props2.customValue.length && !props2.customValue.includes(val)) {
          throw new Error("value is ".concat(val, " not in ").concat(JSON.stringify(props2.customValue)));
        }
      }, {
        immediate: true
      });
      var content = Vue.computed(function () {
        if (isFunction(props2.label)) {
          return props2.label(Vue.h, {
            value: innerValue.value
          });
        }
        if (isString(props2.label)) {
          return props2.label;
        }
        if (isArray$1(props2.label) && props2.label.length) {
          var label = innerValue.value === activeValue.value ? props2.label[0] : props2.label[1];
          if (!label) return;
          if (isString(label)) {
            return label;
          }
          if (isFunction(label)) {
            return label(Vue.h);
          }
        }
        if (slots.label) {
          return slots.label({
            value: innerValue.value
          });
        }
        return null;
      });
      return function () {
        var switchContent;
        var loadingContent;
        if (props2.loading) {
          loadingContent = Vue.createVNode(Loading, {
            "size": "small"
          }, null);
        } else if (content.value) {
          switchContent = content.value;
        }
        return Vue.createVNode("div", {
          "class": classes.value,
          "onClick": toggle
        }, [Vue.createVNode("span", {
          "class": nodeClasses.value
        }, [loadingContent]), Vue.createVNode("div", {
          "class": contentClasses.value
        }, [switchContent])]);
      };
    }
  });

  var Switch = withInstall$1(_Switch);

  var props$E = {
    allowInputOverMax: Boolean,
    autofocus: Boolean,
    autosize: {
      type: [Boolean, Object],
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: [String, Number]
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onValidate: Function
  };

  var TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var hiddenTextarea;
  function calcTextareaHeight(targetElement) {
    var _hiddenTextarea;
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }
    var _calculateNodeSize = calculateNodeSize(targetElement),
      paddingSize = _calculateNodeSize.paddingSize,
      borderSize = _calculateNodeSize.borderSize,
      boxSizing = _calculateNodeSize.boxSizing,
      sizingStyle = _calculateNodeSize.sizingStyle;
    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};
    var isBorderbox = boxSizing === "border-box";
    var isContentbox = boxSizing === "content-box";
    if (isBorderbox) {
      height += borderSize;
    } else if (isContentbox) {
      height -= paddingSize;
    }
    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    (_hiddenTextarea = hiddenTextarea) === null || _hiddenTextarea === void 0 || (_hiddenTextarea = _hiddenTextarea.parentNode) === null || _hiddenTextarea === void 0 || _hiddenTextarea.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    var calcHeight = function calcHeight(rows) {
      var rowsHeight = singleRowHeight * rows;
      if (isBorderbox) {
        rowsHeight = rowsHeight + paddingSize + borderSize;
      }
      return rowsHeight;
    };
    if (!isNull(minRows)) {
      var minHeight = calcHeight(minRows);
      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }
    if (!isNull(maxRows)) {
      height = Math.min(calcHeight(maxRows), height);
    }
    result.height = "".concat(height, "px");
    return result;
  }

  var _Textarea = Vue.defineComponent({
    name: "TTextarea",
    inheritAttrs: false,
    props: props$E,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs,
        expose = _ref.expose;
      var prefix = usePrefixClass();
      var name = usePrefixClass("textarea");
      var TEXTAREA_TIPS_CLASS = Vue.computed(function () {
        return "".concat(name.value, "__tips");
      });
      var TEXTAREA_LIMIT = Vue.computed(function () {
        return "".concat(name.value, "__limit");
      });
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var disabled = useDisabled();
      var isReadonly = useReadonly();
      var textareaStyle = Vue.ref({});
      var refTextareaElem = Vue.ref();
      var focused = Vue.ref(false);
      var isComposing = Vue.ref(false);
      var focus = function focus() {
        var _refTextareaElem$valu;
        return (_refTextareaElem$valu = refTextareaElem.value) === null || _refTextareaElem$valu === void 0 ? void 0 : _refTextareaElem$valu.focus();
      };
      var blur = function blur() {
        var _refTextareaElem$valu2;
        return (_refTextareaElem$valu2 = refTextareaElem.value) === null || _refTextareaElem$valu2 === void 0 ? void 0 : _refTextareaElem$valu2.blur();
      };
      var adjustTextareaHeight = function adjustTextareaHeight() {
        var _refTextareaElem$valu3;
        if (props2.autosize === true) {
          Vue.nextTick(function () {
            textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
          });
        } else if (props2.autosize && _typeof$3(props2.autosize) === "object") {
          var _props2$autosize = props2.autosize,
            minRows = _props2$autosize.minRows,
            maxRows = _props2$autosize.maxRows;
          Vue.nextTick(function () {
            textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
          });
        } else if (attrs.rows) {
          textareaStyle.value = {
            height: "auto",
            minHeight: "auto"
          };
        } else if (attrs.style && (_refTextareaElem$valu3 = refTextareaElem.value) !== null && _refTextareaElem$valu3 !== void 0 && (_refTextareaElem$valu3 = _refTextareaElem$valu3.style) !== null && _refTextareaElem$valu3 !== void 0 && _refTextareaElem$valu3.height) {
          textareaStyle.value = {
            height: refTextareaElem.value.style.height
          };
        }
      };
      var setInputValue = function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var textareaElem = refTextareaElem.value;
        var sV = String(v);
        if (!textareaElem) {
          return;
        }
        if (textareaElem.value !== sV) {
          textareaElem.value = sV;
          innerValue.value = sV;
        }
      };
      var inputValueChangeHandle = function inputValueChangeHandle(e) {
        var target = e.target;
        var val = target.value;
        if (props2.maxcharacter && props2.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, props2.maxcharacter);
          val = _typeof$3(stringInfo) === "object" && stringInfo.characters;
        }
        !isComposing.value && setInnerValue(val, {
          e: e
        });
        Vue.nextTick(function () {
          return setInputValue(val);
        });
        adjustTextareaHeight();
      };
      var handleInput = function handleInput(e) {
        inputValueChangeHandle(e);
      };
      var onCompositionstart = function onCompositionstart() {
        isComposing.value = true;
      };
      var onCompositionend = function onCompositionend(e) {
        isComposing.value = false;
        inputValueChangeHandle(e);
      };
      var eventDeal = function eventDeal(name2, e) {
        var _props2$eventName;
        if (disabled.value) return;
        var eventName = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));
        (_props2$eventName = props2[eventName]) === null || _props2$eventName === void 0 || _props2$eventName.call(props2, innerValue.value, {
          e: e
        });
      };
      var emitKeyDown = function emitKeyDown(e) {
        eventDeal("keydown", e);
      };
      var emitKeyUp = function emitKeyUp(e) {
        eventDeal("keyup", e);
      };
      var emitKeypress = function emitKeypress(e) {
        eventDeal("keypress", e);
      };
      var emitFocus = function emitFocus(e) {
        var _props2$onFocus;
        adjustTextareaHeight();
        if (disabled.value) return;
        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, innerValue.value, {
          e: e
        });
      };
      var formItem = Vue.inject(FormItemInjectionKey, void 0);
      var emitBlur = function emitBlur(e) {
        var _props2$onBlur;
        if (!e.target) return;
        adjustTextareaHeight();
        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, innerValue.value, {
          e: e
        });
        formItem === null || formItem === void 0 || formItem.handleBlur();
      };
      var textareaClasses = Vue.computed(function () {
        return [name.value, _defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-is-disabled"), disabled.value), "".concat(prefix.value, "-is-readonly"), isReadonly.value)];
      });
      var inputAttrs = Vue.computed(function () {
        return getValidAttrs({
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: isReadonly.value,
          placeholder: props2.placeholder,
          maxlength: !props2.allowInputOverMax && props2.maxlength || void 0,
          name: props2.name || void 0
        });
      });
      var characterNumber = Vue.computed(function () {
        var characterInfo = getCharacterLength(String(innerValue.value || ""));
        if (_typeof$3(characterInfo) === "object") {
          return characterInfo.length;
        }
        return characterInfo;
      });
      var limitParams = Vue.computed(function () {
        return {
          value: [void 0, null].includes(innerValue.value) ? void 0 : String(innerValue.value),
          status: props2.status,
          maxlength: Number(props2.maxlength),
          maxcharacter: props2.maxcharacter,
          allowInputOverMax: props2.allowInputOverMax,
          onValidate: props2.onValidate
        };
      });
      var _useLengthLimit = useLengthLimit(limitParams),
        tStatus = _useLengthLimit.tStatus;
      Vue.watch(function () {
        return innerValue.value;
      }, function () {
        return adjustTextareaHeight();
      });
      Vue.watch(refTextareaElem, function (el) {
        if (!el) return;
        adjustTextareaHeight();
        if (props2.autofocus) {
          el.focus();
        }
      });
      Vue.watch(textareaStyle, function (val) {
        var style = attrs.style;
        if (isObject(style)) {
          setStyle(refTextareaElem.value, merge$2(style, val));
        } else {
          setStyle(refTextareaElem.value, val);
        }
      });
      Vue.watch(innerValue, function () {
        Vue.nextTick(function () {
          return adjustTextareaHeight();
        });
      });
      Vue.watch(function () {
        return props2.autosize;
      }, adjustTextareaHeight, {
        deep: true
      });
      expose({
        focus: focus,
        blur: blur
      });
      Vue.onMounted(function () {
        adjustTextareaHeight();
      });
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var _String;
        var inputEvents = getValidAttrs({
          onFocus: emitFocus,
          onBlur: emitBlur,
          onKeydown: emitKeyDown,
          onKeyup: emitKeyUp,
          onKeypress: emitKeypress
        });
        var _useCommonClassName = useCommonClassName$1(),
          STATUS = _useCommonClassName.STATUS;
        var classes = Vue.computed(function () {
          return ["".concat(name.value, "__inner"), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-is-").concat(tStatus.value), tStatus.value), STATUS.value.disabled, disabled.value), STATUS.value.focused, focused.value), "".concat(prefix.value, "-resize-none"), _typeof$3(props2.autosize) === "object")];
        });
        var tips = renderTNodeJSX("tips");
        var textTips = tips && Vue.createVNode("div", {
          "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
        }, [tips]);
        var limitText = props2.maxcharacter && Vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]) || !props2.maxcharacter && props2.maxlength && Vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]);
        return Vue.createVNode("div", Vue.mergeProps({
          "class": textareaClasses.value
        }, omit$1(attrs, ["style"])), [Vue.createVNode("textarea", Vue.mergeProps({
          "onInput": handleInput,
          "onCompositionstart": onCompositionstart,
          "onCompositionend": onCompositionend,
          "ref": refTextareaElem,
          "value": innerValue.value,
          "class": classes.value
        }, inputEvents, inputAttrs.value), null), textTips || limitText ? Vue.createVNode("div", {
          "class": ["".concat(name.value, "__info_wrapper"), _defineProperty$2({}, "".concat(name.value, "__info_wrapper_align"), !textTips)]
        }, [textTips, limitText]) : null]);
      };
    }
  });

  var Textarea = withInstall$1(_Textarea);

  function ownKeys$1f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1f(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TRANSFER_NAME = "TTransfer";
  var SOURCE = "source";
  var TARGET = "target";
  function getTransferListOption(prop) {
    if (isArray$1(prop)) {
      return {
        source: prop[0],
        target: prop[1]
      };
    }
    return {
      source: prop,
      target: prop
    };
  }
  function getDataValues(data, filterValues) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$isTreeMode = _ref.isTreeMode,
      isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,
      _ref$include = _ref.include,
      include = _ref$include === void 0 ? true : _ref$include,
      _ref$remainValue = _ref.remainValue,
      remainValue = _ref$remainValue === void 0 ? [] : _ref$remainValue;
    if (isTreeMode) {
      var result = [];
      if (data) {
        for (var i = 0; i < data.length; i++) {
          var item = data[i];
          var isInclude = filterValues.includes(item.value) && !item.disabled;
          if (!include && isInclude) {
            continue;
          }
          if (item.children && item.children.length > 0) {
            var childResult = getDataValues(item.children, filterValues, {
              isTreeMode: isTreeMode,
              include: include
            });
            result = result.concat(childResult);
          } else if (include && isInclude || !include && !isInclude) {
            result.push(item.value);
          }
        }
      }
      return result;
    }
    return data.filter(function (item) {
      if (!item) return false;
      var isInclude = filterValues.includes(item.value);
      return (include && isInclude || !include && !isInclude) && (!item.disabled || remainValue.includes(item.value));
    }).map(function (item) {
      return item.value;
    });
  }
  function getTransferData(data, keys) {
    var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var list = data.map(function (transferDataItem, index) {
      var _transferDataItem$dis;
      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";
      var disabledKey = (keys === null || keys === void 0 ? void 0 : keys.disabled) || "disabled";
      if (isUndefined(transferDataItem[labelKey])) {
        throw new Error("".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }
      if (isUndefined(transferDataItem[valueKey])) {
        throw new Error("".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }
      var result = {
        label: transferDataItem[labelKey],
        value: transferDataItem[valueKey],
        key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index),
        disabled: (_transferDataItem$dis = transferDataItem[disabledKey]) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
        data: transferDataItem
      };
      if (isTreeMode && transferDataItem.children) {
        result.children = getTransferData(transferDataItem.children, keys, true);
      }
      return result;
    });
    return list;
  }
  function isAllNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }
    return false;
  }
  function isTreeNodeValid(data, filterValues, needMatch) {
    var _data$children;
    if (!data) return !needMatch;
    if (filterValues.includes(data.value)) {
      return needMatch;
    }
    if ((_data$children = data.children) !== null && _data$children !== void 0 && _data$children.length) {
      return data.children.some(function (item) {
        return isTreeNodeValid(item, filterValues, needMatch);
      });
    }
    return !needMatch;
  }
  function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
    sourceTree.forEach(function (item) {
      var newNode;
      if (isAllNodeValid(item, filterValues, needMatch)) {
        newNode = cloneDeep(item);
        targetTree.push(newNode);
      } else if (isTreeNodeValid(item, filterValues, needMatch)) {
        newNode = _objectSpread$1e({}, item);
        delete newNode.children;
        targetTree.push(newNode);
        if (item.children) {
          newNode.children = [];
          cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);
          if (newNode.children.length === 0) {
            delete newNode.children;
          }
        }
      }
    });
  }
  function filterTransferData(data, filterValues) {
    var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (!isTreeMode) {
      if (needMatch) {
        return filterValues === null || filterValues === void 0 ? void 0 : filterValues.map(function (value) {
          return data.find(function (item) {
            return item.value === value;
          });
        }).filter(function (item) {
          return !!item;
        });
      }
      return data.filter(function (item) {
        var isMatch = filterValues.includes(item.value);
        return !isMatch;
      });
    }
    var result = [];
    cloneTreeWithFilter(data, result, filterValues, needMatch);
    return result;
  }
  function getLefCount(nodes) {
    var total = 0;
    nodes.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        total += getLefCount(child.children);
      } else {
        total += 1;
      }
    });
    return total;
  }

  var Search = Vue.defineComponent({
    name: "TTransferSearch",
    props: {
      value: {
        type: String,
        "default": ""
      },
      search: {
        type: [Boolean, Object],
        "default": false
      },
      placeholder: {
        type: String,
        "default": ""
      },
      onChange: Function
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          SearchIcon: TdSearchIcon
        }),
        SearchIcon = _useGlobalIcon.SearchIcon;
      var handleChange = function handleChange(value, changeCtx) {
        var _props$onChange;
        var e = changeCtx.e,
          trigger = changeCtx.trigger;
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
          value: value,
          e: e,
          trigger: trigger
        });
      };
      var inputProps = _typeof$3(props.search) === "object" ? props.search : {
        clearable: true
      };
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__search-wrapper")
        }, [Vue.createVNode(Input, Vue.mergeProps(inputProps, {
          "defaultValue": props.value,
          "onChange": handleChange,
          "placeholder": props.placeholder
        }), {
          "default": function _default() {
            return [Vue.createVNode(SearchIcon, {
              "slot": "suffix-icon"
            }, null)];
          }
        })]);
      };
    }
  });

  function useDragSort$1(currentValue, curPageData, handleDataChange) {
    var draggingIndex = Vue.ref(null);
    var dragoverIndex = Vue.ref(null);
    var dragoverPos = Vue.ref(null);
    var onDragStart = function onDragStart(e) {
      var index = Number(e.target.dataset.index);
      draggingIndex.value = index;
    };
    var onDragOver = function onDragOver(e) {
      e.preventDefault();
      if (e.currentTarget) {
        var currentElement = e.currentTarget;
        var index = Number(currentElement.dataset.index);
        var elemHeight = currentElement.offsetHeight;
        var dragY = e.clientY - currentElement.getBoundingClientRect().top;
        var insertAreaPercent = 0.3;
        var insertAreaHeight = elemHeight * insertAreaPercent;
        dragoverIndex.value = index;
        if (dragoverIndex.value === draggingIndex.value) {
          dragoverPos.value = "";
          return;
        }
        if (dragY < insertAreaHeight) {
          dragoverPos.value = "top";
        } else if (dragY > elemHeight - insertAreaHeight) {
          dragoverPos.value = "bottom";
        } else {
          dragoverPos.value = "center";
        }
      }
    };
    var onDragLeave = function onDragLeave() {
      dragoverPos.value = "";
      dragoverIndex.value = null;
    };
    var onDragEnd = function onDragEnd() {
      draggingIndex.value = null;
      dragoverIndex.value = null;
      dragoverPos.value = "";
    };
    var onDrop = function onDrop(e) {
      e.preventDefault();
      var currentDraggingIndex = draggingIndex.value;
      var currentDragoverIndex = dragoverIndex.value;
      draggingIndex.value = null;
      dragoverIndex.value = null;
      dragoverPos.value = "";
      if (currentDraggingIndex === currentDragoverIndex) {
        return;
      }
      var newData = _toConsumableArray(currentValue.value);
      var sourceItem = curPageData.value[currentDraggingIndex].value;
      var targetItem = curPageData.value[currentDragoverIndex].value;
      var sourceIndex = newData.indexOf(sourceItem);
      var targetIndex = newData.indexOf(targetItem);
      newData.splice(sourceIndex, 1);
      if (dragoverPos.value === "bottom") {
        targetIndex += 1;
      }
      newData.splice(targetIndex, 0, sourceItem);
      handleDataChange === null || handleDataChange === void 0 || handleDataChange(newData, [sourceItem, targetItem]);
    };
    return {
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onDrop: onDrop,
      onDragOver: onDragOver,
      onDragLeave: onDragLeave
    };
  }

  function ownKeys$1e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$o(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var props$D = {
    checkboxProps: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    dataSource: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    listType: {
      type: String,
      "default": "target"
    },
    title: {
      type: [String, Function]
    },
    checkedValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    search: {
      type: [Boolean, Object],
      "default": false
    },
    transferItem: Function,
    empty: {
      type: [Function, String]
    },
    pagination: [Boolean, Object],
    footer: [Function, String],
    checkAll: Boolean,
    isTreeMode: {
      type: Boolean,
      "default": false
    },
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function,
    onDataChange: Function,
    draggable: Boolean,
    currentValue: {
      type: Array
    }
  };
  var TransferList = Vue.defineComponent({
    name: "TTransferList",
    props: props$D,
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();
      var _toRefs = Vue.toRefs(props2),
        currentValue = _toRefs.currentValue;
      var _useConfig = useConfig("transfer"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var filterValue = Vue.ref("");
      var defaultCurrent = Vue.ref(1);
      var defaultPageSize = Vue.ref(0);
      var currentPage = Vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.current) || defaultCurrent.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent);
      });
      var pageSize = Vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || defaultPageSize.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize);
      });
      var filteredData = Vue.computed(function () {
        var isTreeData = props2.dataSource.some(function (item) {
          return item.children && item.children.length;
        });
        if (!isTreeData) {
          return props2.dataSource.filter(function (item) {
            var label = item && item.label.toString();
            return label.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;
          });
        } else {
          return _filteredTreeData(props2.dataSource, filterValue.value);
        }
      });
      var pageTotal = Vue.computed(function () {
        return filteredData.value && filteredData.value.length || 0;
      });
      var curPageData = Vue.computed(function () {
        var pageData = filteredData.value;
        if (!props2.pagination) return pageData;
        if (pageSize.value === 0) return pageData;
        var startIndex = (currentPage.value - 1) * pageSize.value;
        var endIndex = currentPage.value * pageSize.value;
        pageData = pageData.slice(startIndex, endIndex);
        return pageData;
      });
      var paginationProps = Vue.computed(function () {
        var defaultPaginationProps = {
          totalContent: false,
          pageSizeOptions: []
        };
        return _typeof$3(props2.pagination) === "object" ? _objectSpread$1d(_objectSpread$1d(_objectSpread$1d({}, defaultPaginationProps), props2.pagination), {}, {
          size: "small",
          theme: "simple",
          current: currentPage.value,
          total: pageTotal.value,
          pageSize: pageSize.value
        }) : {};
      });
      var _useDragSort = useDragSort$1(currentValue, curPageData, props2.onDataChange),
        onDragStart = _useDragSort.onDragStart,
        onDragEnd = _useDragSort.onDragEnd,
        onDrop = _useDragSort.onDrop,
        onDragOver = _useDragSort.onDragOver,
        onDragLeave = _useDragSort.onDragLeave;
      var isAllChecked = Vue.computed(function () {
        var allValue = getDataValues(props2.dataSource, [], {
          isTreeMode: props2.isTreeMode,
          include: false
        });
        return props2.checkedValue.length > 0 && (props2.isTreeMode ? allValue.every(function (item) {
          return props2.checkedValue.includes(item);
        }) : (props2.search ? filteredData.value : props2.dataSource).every(function (item) {
          return item.disabled || props2.checkedValue.includes(item.value);
        }));
      });
      var indeterminate = Vue.computed(function () {
        return !isAllChecked.value && props2.checkedValue.length > 0;
      });
      var totalCount = Vue.computed(function () {
        return getLefCount(props2.dataSource);
      });
      Vue.watch(totalCount, function (val) {
        if (val <= (currentPage.value - 1) * pageSize.value) {
          var lastPage = Math.ceil(val / pageSize.value);
          defaultCurrent.value = lastPage;
        }
      });
      var _filteredTreeData = function filteredTreeData(list, keyword) {
        var res = filter$1(cloneDeep(list), function (node) {
          if (node.label.toLowerCase().includes(keyword.toLowerCase())) {
            return true;
          }
          if (node.children && node.children.length > 0) {
            node.children = _filteredTreeData(node.children, keyword);
            if (node.children.length > 0) {
              return true;
            }
          }
          return false;
        });
        return res;
      };
      var handlePaginationChange = function handlePaginationChange(pageInfo) {
        var _props2$onPageChange;
        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 || _props2$onPageChange.call(props2, pageInfo);
        defaultCurrent.value = pageInfo.current;
        defaultPageSize.value = pageInfo.pageSize;
      };
      var handleCheckedChange = function handleCheckedChange(val) {
        var _props2$onCheckedChan;
        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 || _props2$onCheckedChan.call(props2, val);
      };
      var handleCheckedAllChange = function handleCheckedAllChange(checked) {
        if (checked) {
          var allValue = getDataValues(props2.search ? filteredData.value : props2.dataSource, [], {
            isTreeMode: props2.isTreeMode,
            include: false
          });
          handleCheckedChange(allValue);
        } else {
          handleCheckedChange([]);
        }
      };
      var handleScroll = function handleScroll(e) {
        var _props2$onScroll;
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 || _props2$onScroll.call(props2, e);
      };
      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;
        var event = {
          query: e.value,
          type: props2.listType,
          e: e.e,
          trigger: e.trigger
        };
        filterValue.value = e.value;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 || _props2$onSearch.call(props2, event);
      };
      var renderTNodeJSX = useTNodeDefault();
      var renderTitle = function renderTitle() {
        var defaultNode = props2.title && isString(props2.title) ? Vue.createVNode("template", null, [props2.title]) : null;
        var titleNode = renderTNodeJSX("title", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
        return Vue.createVNode("span", null, [titleNode]);
      };
      var renderContent = function renderContent() {
        var isDraggable = props2.draggable && props2.listType === TARGET;
        var defaultNode = null;
        if (!isDraggable) {
          var _slot2;
          defaultNode = Vue.createVNode(CheckboxGroup, {
            "value": props2.checkedValue,
            "onChange": handleCheckedChange
          }, _isSlot$o(_slot2 = curPageData.value.map(function (item, index) {
            var _slot;
            return Vue.createVNode(Checkbox, Vue.mergeProps({
              "disabled": props2.disabled || item.disabled,
              "value": item.value,
              "needRipple": true,
              "class": ["".concat(classPrefix.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix.value, "-is-checked") : ""],
              "key": item.key
            }, props2.checkboxProps), _isSlot$o(_slot = renderTNodeJSX("transferItem", {
              defaultNode: Vue.createVNode("span", null, [item.label]),
              params: {
                data: item.data,
                index: index,
                type: props2.listType
              }
            })) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            });
          })) ? _slot2 : {
            "default": function _default() {
              return [_slot2];
            }
          });
        } else {
          var _slot4;
          defaultNode = Vue.createVNode(CheckboxGroup, {
            "value": props2.checkedValue,
            "onChange": handleCheckedChange
          }, _isSlot$o(_slot4 = curPageData.value.map(function (item, index) {
            var _slot3;
            return Vue.createVNode("div", {
              "draggable": isDraggable,
              "onDragend": onDragEnd,
              "onDragstart": onDragStart,
              "onDragover": onDragOver,
              "onDragleave": onDragLeave,
              "onDrop": onDrop,
              "data-index": index
            }, [Vue.createVNode(Checkbox, Vue.mergeProps({
              "disabled": props2.disabled || item.disabled,
              "value": item.value,
              "needRipple": true,
              "class": ["".concat(classPrefix.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix.value, "-is-checked") : ""],
              "key": item.key
            }, props2.checkboxProps), _isSlot$o(_slot3 = renderTNodeJSX("transferItem", {
              defaultNode: Vue.createVNode("span", null, [item.label]),
              params: {
                data: item.data,
                index: index,
                type: props2.listType
              }
            })) ? _slot3 : {
              "default": function _default() {
                return [_slot3];
              }
            })]);
          })) ? _slot4 : {
            "default": function _default() {
              return [_slot4];
            }
          });
        }
        return Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer__list-content"), "narrow-scrollbar"],
          "onScroll": handleScroll
        }, [renderTNodeJSX("tree", {
          defaultNode: defaultNode,
          params: {
            data: curPageData.value,
            value: props2.checkedValue,
            onChange: handleCheckedChange
          }
        })]);
      };
      var renderEmpty = function renderEmpty() {
        var empty = props2.empty || t(globalConfig.value.empty);
        var defaultNode = isString(empty) ? Vue.createVNode("span", null, [empty]) : null;
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__empty")
        }, [renderTNodeJSX("empty", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        })]);
      };
      var renderFooter = function renderFooter() {
        var defaultNode = isString(props2.footer) ? Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__footer")
        }, [props2.footer]) : null;
        return renderTNodeJSX("footer", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
      };
      return function () {
        return Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer__list"), "".concat(classPrefix.value, "-transfer__list-").concat(props2.listType)]
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-header")
        }, [Vue.createVNode("div", null, [props2.checkAll && Vue.createVNode(Checkbox, {
          "disabled": props2.disabled || !props2.dataSource.length,
          "checked": isAllChecked.value,
          "indeterminate": indeterminate.value,
          "onChange": handleCheckedAllChange
        }, null), Vue.createVNode("span", null, [t(globalConfig.value.title, {
          checked: props2.checkedValue.length,
          total: totalCount.value
        })])]), renderTitle()]), Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer__list-body"), props2.search ? "".concat(classPrefix.value, "-transfer__list--with-search") : ""]
        }, [props2.search && Vue.createVNode(Search, {
          "searchValue": filterValue.value,
          "placeholder": t(globalConfig.value.placeholder),
          "onChange": handleSearch,
          "disabled": props2.disabled,
          "search": props2.search
        }, null), curPageData.value.length > 0 ? renderContent() : renderEmpty()]), props2.pagination && pageSize.value > 0 && pageTotal.value > 0 && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-pagination")
        }, [Vue.createVNode(Pagination, Vue.mergeProps(paginationProps.value, {
          "onChange": handlePaginationChange
        }), null)]), renderFooter()]);
      };
    }
  });

  var props$C = {
    checkboxProps: {
      type: Object
    },
    checked: {
      type: Array,
      "default": void 0
    },
    defaultChecked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": "both",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "both"].includes(val);
      }
    },
    disabled: {
      type: [Boolean, Array],
      "default": void 0
    },
    empty: {
      type: [String, Array, Function],
      "default": ""
    },
    footer: {
      type: [Array, Function]
    },
    keys: {
      type: Object
    },
    operation: {
      type: [Array, Function]
    },
    pagination: {
      type: [Object, Array]
    },
    search: {
      type: [Boolean, Object, Array],
      "default": false
    },
    showCheckAll: {
      type: [Boolean, Array],
      "default": true
    },
    targetDraggable: Boolean,
    targetSort: {
      type: String,
      "default": "original",
      validator: function validator(val) {
        if (!val) return true;
        return ["original", "push", "unshift"].includes(val);
      }
    },
    title: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    transferItem: {
      type: Function
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function,
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };

  var TransferOperations = Vue.defineComponent({
    name: "TTransferOperations",
    props: {
      leftDisabled: {
        type: Boolean,
        required: true
      },
      rightDisabled: {
        type: Boolean,
        required: true
      },
      operation: props$C.operation
    },
    emits: ["moveToRight", "moveToLeft"],
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        emit = _ref.emit;
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          ChevronRightIcon: TdChevronRightIcon,
          ChevronLeftIcon: TdChevronLeftIcon
        }),
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon;
      var moveToRight = function moveToRight() {
        emit("moveToRight");
      };
      var moveToLeft = function moveToLeft() {
        emit("moveToLeft");
      };
      var getIconRight = function getIconRight() {
        return Vue.createVNode(ChevronRightIcon, null, null);
      };
      var getIconLeft = function getIconLeft() {
        return Vue.createVNode(ChevronLeftIcon, null, null);
      };
      var getIcon = function getIcon(direction) {
        if (isFunction(props2.operation)) {
          return null;
        }
        if (direction === "right" && props2.operation && isFunction(props2.operation[0])) {
          return null;
        }
        if (direction === "left" && props2.operation && isFunction(props2.operation[1])) {
          return null;
        }
        if (slots.operation) {
          return null;
        }
        return direction === "left" ? getIconLeft : getIconRight;
      };
      var renderButton = function renderButton(h2, direction) {
        if (isFunction(slots.operation)) {
          return slots.operation({
            direction: direction
          });
        }
        if (isFunction(props2.operation)) {
          var renderContent2 = props2.operation;
          return renderContent2(h2, {
            direction: direction
          });
        }
        var renderContent;
        if (isArray$1(props2.operation)) {
          var _props2$operation = _slicedToArray(props2.operation, 2),
            left = _props2$operation[0],
            right = _props2$operation[1];
          renderContent = direction === "right" ? right : left;
        } else {
          renderContent = "";
        }
        return renderContent;
      };
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__operations")
        }, [Vue.createVNode(Button, {
          "variant": "outline",
          "size": "small",
          "shape": isArray$1(props2.operation) && isString(props2.operation[1]) ? "rectangle" : "square",
          "key": props2.rightDisabled ? "right-outline" : "right-base",
          "disabled": props2.rightDisabled,
          "onClick": moveToRight,
          "icon": getIcon("right")
        }, {
          "default": function _default() {
            return [slots.operation || isArray$1(props2.operation) && props2.operation[1] ? renderButton(Vue.h, "right") : null];
          }
        }), Vue.createVNode(Button, {
          "variant": "outline",
          "size": "small",
          "shape": isArray$1(props2.operation) && isString(props2.operation[0]) ? "rectangle" : "square",
          "key": props2.rightDisabled ? "left-outline" : "left-base",
          "disabled": props2.leftDisabled,
          "onClick": moveToLeft,
          "icon": getIcon("left")
        }, {
          "default": function _default() {
            return [slots.operation || isArray$1(props2.operation) && props2.operation[0] ? renderButton(Vue.h, "left") : null];
          }
        })]);
      };
    }
  });

  function _isSlot$n(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Transfer = Vue.defineComponent({
    name: TRANSFER_NAME,
    props: props$C,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useDisabled();
      var classPrefix = usePrefixClass();
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        checked = _toRefs.checked;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(checked, props2.defaultChecked, props2.onCheckedChange, "checked"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 1),
        innerChecked = _useDefaultValue2[0];
      var valueList = Vue.computed(function () {
        return innerValue.value;
      });
      var isTreeMode = Vue.computed(function () {
        var treeSlot = slots.tree;
        return isFunction(treeSlot);
      });
      var leftButtonDisabled = Vue.computed(function () {
        return props2.direction === "right";
      });
      var rightButtonDisabled = Vue.computed(function () {
        return props2.direction === "left";
      });
      var transferData = Vue.computed(function () {
        return getTransferData(props2.data, props2.keys, isTreeMode.value);
      });
      var sourceList = Vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, false, isTreeMode.value);
      });
      var targetList = Vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, true, isTreeMode.value);
      });
      var checkedValue = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2({}, SOURCE, getDataValues(sourceList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        })), TARGET, getDataValues(targetList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        }));
      });
      var hasFooter = Vue.computed(function () {
        return !!slots.footer || !!props2.footer;
      });
      var showPagination = Vue.computed(function () {
        return !!props2.pagination && !slots.content;
      });
      var showSearch = Vue.computed(function () {
        return !!props2.search;
      });
      var footerOption = Vue.computed(function () {
        var footer = props2.footer || "";
        return getTransferListOption(footer);
      });
      var emptyOption = Vue.computed(function () {
        return getTransferListOption(props2.empty);
      });
      var searchOption = Vue.computed(function () {
        return getTransferListOption(props2.search);
      });
      var checkAllOption = Vue.computed(function () {
        return getTransferListOption(props2.showCheckAll);
      });
      var disabledOption = Vue.computed(function () {
        return getTransferListOption(disabled.value);
      });
      var titleOption = Vue.computed(function () {
        return getTransferListOption(props2.title);
      });
      var paginationOption = Vue.computed(function () {
        return getTransferListOption(props2.pagination);
      });
      var handleCheckedChange = function handleCheckedChange(val, listType) {
        var _props2$onCheckedChan;
        var sourceChecked = listType === SOURCE ? val : checkedValue.value[SOURCE];
        var targetChecked = listType === TARGET ? val : checkedValue.value[TARGET];
        var checked2 = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
        var event = {
          checked: checked2,
          sourceChecked: sourceChecked,
          targetChecked: targetChecked,
          type: listType
        };
        innerChecked.value = checked2;
        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 || _props2$onCheckedChan.call(props2, event);
      };
      var transferTo = function transferTo(toDirection) {
        var oldTargetValue = JSON.parse(JSON.stringify(valueList.value));
        var newTargetValue;
        var selfCheckedValue = toDirection === TARGET ? checkedValue.value[SOURCE] : checkedValue.value[TARGET];
        if (toDirection === SOURCE) {
          newTargetValue = oldTargetValue.filter(function (v) {
            return !selfCheckedValue.includes(v);
          });
        } else if (props2.targetSort === "original") {
          var remainValue = transferData.value.reduce(function (acc, data) {
            if (oldTargetValue.includes(data.value) && data.disabled) {
              return acc.concat(data.value);
            }
            return acc;
          }, []);
          newTargetValue = getDataValues(transferData.value, oldTargetValue.concat(selfCheckedValue), {
            isTreeMode: isTreeMode.value,
            remainValue: remainValue
          });
        } else if (props2.targetSort === "unshift") {
          newTargetValue = selfCheckedValue.concat(oldTargetValue);
        } else {
          newTargetValue = oldTargetValue.concat(selfCheckedValue);
        }
        handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
        var params = {
          type: toDirection,
          movedValue: selfCheckedValue
        };
        setInnerValue(newTargetValue, params);
      };
      var transferToRight = function transferToRight() {
        transferTo(TARGET);
      };
      var transferToLeft = function transferToLeft() {
        transferTo(SOURCE);
      };
      var handleScroll = function handleScroll(e, listType) {
        var _props2$onScroll;
        var target = e.target;
        var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
        var event = {
          e: e,
          bottomDistance: bottomDistance,
          type: listType
        };
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 || _props2$onScroll.call(props2, event);
      };
      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 || _props2$onSearch.call(props2, e);
      };
      var handlePageChange = function handlePageChange(pageInfo, listType) {
        var _props2$onPageChange;
        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 || _props2$onPageChange.call(props2, pageInfo, {
          type: listType
        });
      };
      var handleDataChange = function handleDataChange(data, movedValue) {
        setInnerValue(data, {
          type: TARGET,
          movedValue: movedValue
        });
      };
      var renderTransferList = function renderTransferList(listType) {
        var scopedSlots = pick$1(slots, ["title", "empty", "footer", "operation", "transferItem", "default", "tree"]);
        return Vue.createVNode(TransferList, {
          "checkboxProps": props2.checkboxProps,
          "transferItem": props2.transferItem,
          "list-type": listType,
          "title": titleOption.value[listType],
          "data-source": listType === SOURCE ? sourceList.value : targetList.value,
          "checked-value": checkedValue.value[listType],
          "disabled": disabledOption.value[listType],
          "search": searchOption.value[listType],
          "pagination": paginationOption.value[listType],
          "check-all": checkAllOption.value[listType],
          "footer": footerOption.value[listType],
          "empty": emptyOption.value[listType],
          "onCheckedChange": function onCheckedChange($event) {
            return handleCheckedChange($event, listType);
          },
          "onScroll": function onScroll($event) {
            return handleScroll($event, listType);
          },
          "onSearch": handleSearch,
          "onPageChange": function onPageChange($event) {
            return handlePageChange($event, listType);
          },
          "isTreeMode": isTreeMode.value,
          "onDataChange": handleDataChange,
          "currentValue": valueList.value,
          "draggable": props2.targetDraggable && listType === TARGET
        }, _isSlot$n(scopedSlots) ? scopedSlots : {
          "default": function _default() {
            return [scopedSlots];
          }
        });
      };
      return function () {
        return Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer"), showSearch.value ? "".concat(classPrefix.value, "-transfer__search") : "", hasFooter.value ? "".concat(classPrefix.value, "-transfer__footer") : "", showPagination.value ? "".concat(classPrefix.value, "-transfer__pagination") : "", isTreeMode.value ? "".concat(classPrefix.value, "-transfer--with-tree") : ""]
        }, [renderTransferList(SOURCE), Vue.createVNode(TransferOperations, {
          "leftDisabled": disabledOption.value[TARGET] || leftButtonDisabled.value || checkedValue.value[TARGET].length === 0,
          "rightDisabled": disabledOption.value[SOURCE] || rightButtonDisabled.value || checkedValue.value[SOURCE].length === 0,
          "operation": props2.operation,
          "onMoveToRight": transferToRight,
          "onMoveToLeft": transferToLeft
        }, {
          operation: slots.operation
        }), renderTransferList(TARGET)]);
      };
    }
  });

  var Transfer = withInstall$1(_Transfer);

  function ownKeys$1d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(customParseFormat);
  var _TimePicker = Vue.defineComponent({
    name: "TTimePicker",
    props: props$N,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("time-picker");
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _useGlobalIcon = useGlobalIcon({
          TimeIcon: TdTimeIcon
        }),
        TimeIcon = _useGlobalIcon.TimeIcon;
      var currentValue = Vue.ref("");
      var isShowPanel = Vue.ref(false);
      var isReadonly = useReadonly();
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var disabled = useDisabled();
      var _toRefs2 = Vue.toRefs(props2),
        allowInput = _toRefs2.allowInput,
        format = _toRefs2.format;
      var inputClasses = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__group"), _defineProperty$2({}, STATUS.value.focused, isShowPanel.value)];
      });
      var handleShowPopup = function handleShowPopup(visible, context) {
        var _props2$onOpen, _props2$onClose;
        isShowPanel.value = visible;
        visible ? (_props2$onOpen = props2.onOpen) === null || _props2$onOpen === void 0 ? void 0 : _props2$onOpen.call(props2, context) : (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, context);
      };
      var handleClear = function handleClear(context) {
        var _props2$onClear;
        var e = context.e;
        e.stopPropagation();
        currentValue.value = null;
        setInnerValue(null);
        props2 === null || props2 === void 0 || (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, context);
      };
      var handleInputChange = function handleInputChange(value2) {
        currentValue.value = value2;
      };
      var handleInputBlur = function handleInputBlur(value2, context) {
        var _props2$onBlur;
        if (allowInput.value) {
          var isValidTime = validateInputValue(currentValue.value, format.value);
          if (isValidTime) {
            setInnerValue(formatInputValue(currentValue.value, format.value));
          }
        }
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
          value: value2,
          inputValue: context.inputValue,
          e: context.e
        });
      };
      var handleClickConfirm = function handleClickConfirm(e) {
        var _props2$onConfirm;
        props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
          e: e
        });
        var isValidTime = validateInputValue(currentValue.value, format.value);
        if (isValidTime) setInnerValue(currentValue.value);
        isShowPanel.value = false;
      };
      var handlePanelChange = function handlePanelChange(v, e) {
        var _props2$onPick;
        currentValue.value = v;
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, v, {
          e: e
        });
      };
      var valueDisplayParams = Vue.computed(function () {
        var _innerValue$value;
        return {
          value: isShowPanel.value ? currentValue.value : (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : void 0
        };
      });
      Vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value2;
        currentValue.value = isShowPanel.value ? (_innerValue$value2 = innerValue.value) !== null && _innerValue$value2 !== void 0 ? _innerValue$value2 : "" : "";
      });
      return function () {
        var _innerValue$value3, _innerValue$value4;
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode(SelectInput, Vue.mergeProps({
          "onFocus": props2.onFocus,
          "onClear": handleClear,
          "borderless": props2.borderless,
          "disabled": disabled.value,
          "clearable": props2.clearable,
          "allowInput": allowInput.value,
          "class": inputClasses.value,
          "label": props2.label,
          "suffixIcon": function suffixIcon() {
            return Vue.createVNode(TimeIcon, null, null);
          },
          "popupVisible": !isReadonly.value && isShowPanel.value,
          "onInputChange": handleInputChange,
          "onBlur": handleInputBlur,
          "onPopupVisibleChange": handleShowPopup,
          "placeholder": !innerValue.value ? props2.placeholder || globalConfig.value.placeholder : void 0,
          "value": isShowPanel.value ? currentValue.value : (_innerValue$value3 = innerValue.value) !== null && _innerValue$value3 !== void 0 ? _innerValue$value3 : void 0,
          "inputValue": isShowPanel.value ? currentValue.value : (_innerValue$value4 = innerValue.value) !== null && _innerValue$value4 !== void 0 ? _innerValue$value4 : void 0,
          "inputProps": _objectSpread$1c(_objectSpread$1c({}, props2.inputProps), {}, {
            size: props2.size
          }),
          "popupProps": _objectSpread$1c({
            overlayInnerStyle: {
              width: "auto",
              padding: 0
            }
          }, props2.popupProps),
          "status": props2.status,
          "tips": props2.tips,
          "valueDisplay": function valueDisplay() {
            return renderTNodeJSX("valueDisplay", {
              params: valueDisplayParams.value
            });
          }
        }, props2.selectInputProps, {
          "panel": function panel() {
            return Vue.createVNode(_TimePickerPanel, {
              "steps": props2.steps,
              "format": format.value,
              "value": currentValue.value,
              "isFooterDisplay": true,
              "isShowPanel": isShowPanel.value,
              "disableTime": props2.disableTime,
              "onChange": handlePanelChange,
              "hideDisabledTime": props2.hideDisabledTime,
              "handleConfirmClick": handleClickConfirm,
              "presets": props2.presets
            }, null);
          }
        }), null)]);
      };
    }
  });

  var props$B = {
    allowInput: Boolean,
    autoSwap: {
      type: Boolean,
      "default": true
    },
    borderless: Boolean,
    clearable: Boolean,
    disableTime: {
      type: Function
    },
    disabled: {
      type: [Boolean, Array],
      "default": void 0
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    label: {
      type: [String, Function]
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    presets: {
      type: Object
    },
    rangeInputProps: {
      type: Object
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function
  };

  function ownKeys$1c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  dayjs.extend(customParseFormat);
  var _TimeRangePicker = Vue.defineComponent({
    name: "TTimeRangePicker",
    props: _objectSpread$1b(_objectSpread$1b({}, props$B), {}, {
      rangeInputProps: Object,
      popupProps: Object
    }),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("time-range-picker");
      var _useConfig = useConfig("timePicker"),
        globalConfig = _useConfig.globalConfig;
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _useGlobalIcon = useGlobalIcon({
          TimeIcon: TdTimeIcon
        }),
        TimeIcon = _useGlobalIcon.TimeIcon;
      var disabled = useDisabled();
      var currentPanelIdx = Vue.ref(void 0);
      var currentValue = Vue.ref(TIME_PICKER_EMPTY);
      var isShowPanel = Vue.ref(false);
      var isReadOnly = useReadonly();
      var inputClasses = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__group"), _defineProperty$2({}, STATUS.value.focused, isShowPanel.value)];
      });
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        allowInput = _toRefs.allowInput,
        format = _toRefs.format;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var handleShowPopup = function handleShowPopup(visible, context) {
        if (isReadOnly.value) return;
        if (context.trigger === "trigger-element-click") {
          isShowPanel.value = true;
          return;
        }
        isShowPanel.value = visible;
      };
      var handleClear = function handleClear(context) {
        var e = context.e;
        e.stopPropagation();
        currentValue.value = TIME_PICKER_EMPTY;
        setInnerValue(null);
      };
      var handleClick = function handleClick(_ref2) {
        var position = _ref2.position;
        currentPanelIdx.value = position === "first" ? 0 : 1;
      };
      var handleTimeChange = function handleTimeChange(newValue, e) {
        if (isArray$1(newValue)) {
          currentValue.value = newValue;
        } else if (currentPanelIdx.value === 0) {
          var _currentValue$value$;
          currentValue.value = [newValue, (_currentValue$value$ = currentValue.value[1]) !== null && _currentValue$value$ !== void 0 ? _currentValue$value$ : newValue];
        } else {
          var _currentValue$value$2;
          currentValue.value = [(_currentValue$value$2 = currentValue.value[0]) !== null && _currentValue$value$2 !== void 0 ? _currentValue$value$2 : newValue, newValue];
        }
        handleOnPick(newValue, e);
      };
      var handleInputBlur = function handleInputBlur(value2, _ref3) {
        var _props2$onBlur;
        var e = _ref3.e;
        if (allowInput.value) {
          var isValidTime = validateInputValue(currentValue.value[currentPanelIdx.value], format.value);
          if (isValidTime) {
            var _currentValue$value$3, _currentValue$value$4;
            var formattedVal = formatInputValue(currentValue.value[currentPanelIdx.value], format.value);
            currentPanelIdx.value === 0 ? currentValue.value = [formattedVal, (_currentValue$value$3 = currentValue.value[1]) !== null && _currentValue$value$3 !== void 0 ? _currentValue$value$3 : formattedVal] : currentValue.value = [(_currentValue$value$4 = currentValue.value[0]) !== null && _currentValue$value$4 !== void 0 ? _currentValue$value$4 : formattedVal, formattedVal];
          } else {
            var _innerValue$value, _previousValue$, _previousValue$2;
            var previousValue = (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : TIME_PICKER_EMPTY;
            currentPanelIdx.value === 0 ? currentValue.value = [(_previousValue$ = previousValue[0]) !== null && _previousValue$ !== void 0 ? _previousValue$ : TIME_PICKER_EMPTY[0], currentValue.value[1]] : currentValue.value = [currentValue.value[0], (_previousValue$2 = previousValue[1]) !== null && _previousValue$2 !== void 0 ? _previousValue$2 : TIME_PICKER_EMPTY[1]];
          }
        }
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
          value: value2,
          e: e
        });
      };
      var handleInputChange = function handleInputChange(inputVal, _ref4) {
        var _props2$onInput;
        var e = _ref4.e,
          position = _ref4.position;
        currentValue.value = inputVal;
        (_props2$onInput = props2.onInput) === null || _props2$onInput === void 0 || _props2$onInput.call(props2, {
          value: innerValue.value,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };
      var handleClickConfirm = function handleClickConfirm() {
        var isValidTime = !currentValue.value.find(function (v) {
          return !validateInputValue(v, format.value);
        });
        if (isValidTime) setInnerValue(currentValue.value);
        if (props2.autoSwap) autoSwapTime();
        isShowPanel.value = false;
      };
      var handleFocus = function handleFocus(value2, _ref5) {
        var _props2$onFocus;
        var e = _ref5.e,
          position = _ref5.position;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
          value: value2,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };
      var autoSwapTime = function autoSwapTime() {
        var _currentValue$value = _slicedToArray(currentValue.value, 2),
          startTime = _currentValue$value[0],
          endTime = _currentValue$value[1];
        var startDayjs = dayjs(startTime, props2.format);
        var endDayjs = dayjs(endTime, props2.format);
        if (startDayjs.isAfter(endDayjs, "second")) {
          setInnerValue([currentValue.value[1], currentValue.value[0]]);
        } else {
          setInnerValue([currentValue.value[0], currentValue.value[1]]);
        }
      };
      var handleOnPick = function handleOnPick(pickValue, e) {
        var _props2$onPick;
        var pickedRangeValue = [];
        var context;
        if (isArray$1(pickValue)) {
          pickedRangeValue = pickValue;
          context = {
            e: e
          };
        } else if (currentPanelIdx.value === 0) {
          var _currentValue$value$5;
          pickedRangeValue = [pickValue, (_currentValue$value$5 = currentValue.value[1]) !== null && _currentValue$value$5 !== void 0 ? _currentValue$value$5 : pickValue];
          context = {
            e: e,
            position: "start"
          };
        } else {
          var _currentValue$value$6;
          pickedRangeValue = [(_currentValue$value$6 = currentValue.value[0]) !== null && _currentValue$value$6 !== void 0 ? _currentValue$value$6 : pickValue, pickValue];
          context = {
            e: e,
            position: "end"
          };
        }
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, pickedRangeValue, context);
      };
      Vue.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value2;
        currentValue.value = isShowPanel.value ? (_innerValue$value2 = innerValue.value) !== null && _innerValue$value2 !== void 0 ? _innerValue$value2 : TIME_PICKER_EMPTY : TIME_PICKER_EMPTY;
        if (!isShowPanel.value) currentPanelIdx.value = void 0;
      });
      return function () {
        var _innerValue$value3, _innerValue$value4;
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode(RangeInputPopup, {
          "disabled": disabled.value,
          "popupVisible": isShowPanel.value,
          "popupProps": _objectSpread$1b({
            overlayInnerStyle: {
              width: "auto",
              padding: 0
            },
            onVisibleChange: handleShowPopup
          }, props2.popupProps),
          "onInputChange": handleInputChange,
          "inputValue": isShowPanel.value ? currentValue.value : (_innerValue$value3 = innerValue.value) !== null && _innerValue$value3 !== void 0 ? _innerValue$value3 : TIME_PICKER_EMPTY,
          "rangeInputProps": _objectSpread$1b({
            size: props2.size,
            clearable: props2.clearable,
            "class": inputClasses.value,
            value: isShowPanel.value ? currentValue.value : (_innerValue$value4 = innerValue.value) !== null && _innerValue$value4 !== void 0 ? _innerValue$value4 : void 0,
            placeholder: props2.placeholder || [globalConfig.value.placeholder, globalConfig.value.placeholder],
            borderless: props2.borderless,
            suffixIcon: function suffixIcon() {
              return Vue.createVNode(TimeIcon, null, null);
            },
            onClear: handleClear,
            onClick: handleClick,
            onFocus: handleFocus,
            onBlur: handleInputBlur,
            readonly: isReadOnly.value || !allowInput.value,
            activeIndex: currentPanelIdx.value
          }, props2.rangeInputProps),
          "label": props2.label,
          "status": props2.status,
          "tips": props2.tips,
          "panel": function panel() {
            return Vue.createVNode(_TimePickerPanel, {
              "steps": props2.steps,
              "format": format.value,
              "isShowPanel": isShowPanel.value,
              "disableTime": props2.disableTime,
              "hideDisabledTime": props2.hideDisabledTime,
              "isFooterDisplay": true,
              "value": currentValue.value[currentPanelIdx.value || 0],
              "onChange": handleTimeChange,
              "onPick": handleOnPick,
              "handleConfirmClick": handleClickConfirm,
              "position": currentPanelIdx.value === 0 ? "start" : "end",
              "activeIndex": currentPanelIdx.value,
              "presets": props2.presets
            }, null);
          }
        }, null)]);
      };
    }
  });

  var TimePicker = withInstall$1(_TimePicker);
  var TimeRangePicker = withInstall$1(_TimeRangePicker);
  var TimePickerPanel = withInstall$1(_TimePickerPanel);

  function findParentValues(options, targetValue, realValue, realChildren) {
    var currentTargetValue = targetValue;
    if (currentTargetValue != null && _typeof$3(currentTargetValue) === "object") {
      var _currentTargetValue;
      currentTargetValue = (_currentTargetValue = currentTargetValue) === null || _currentTargetValue === void 0 ? void 0 : _currentTargetValue[realValue];
    }
    if (currentTargetValue == null) return [];
    function findPath(nodes, parentPath) {
      var result = null;
      nodes.some(function (node) {
        var newPath = [].concat(_toConsumableArray(parentPath), [node[realValue]]);
        if (node[realValue] === currentTargetValue) {
          result = parentPath;
          return true;
        }
        if (Array.isArray(node[realChildren]) && node[realChildren].length) {
          result = findPath(node[realChildren], newPath);
          if (result !== null) {
            return true;
          }
        }
        return false;
      });
      return result;
    }
    return findPath(options, []) || [];
  }

  var onDrag = {
    "default": void 0
  };
  var TreeItemDefinition = {
    name: "TTreeNode",
    inject: {
      onDrag: onDrag
    }
  };
  function withInstall(construct) {
    return withInstall$1(construct);
  }
  function getCreateElement(h) {
    return Vue__namespace.h;
  }
  function getScopedSlots(instance) {
    return instance.$slots;
  }
  function useVModel(props, refsProps) {
    var propName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "value";
    var defaultPropName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "defaultValue";
    var eventPropName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "onChange";
    var modelValue = refsProps.modelValue;
    var vm;
    if (propName === "value") {
      vm = useVModel$1(refsProps[propName], modelValue, props[defaultPropName], props[eventPropName], propName);
    } else {
      vm = useDefaultValue(refsProps[propName], props[defaultPropName], props[eventPropName], propName);
    }
    return vm;
  }

  var DragPosition = /* @__PURE__ */function (DragPosition2) {
    DragPosition2[DragPosition2["Before"] = -1] = "Before";
    DragPosition2[DragPosition2["Inside"] = 0] = "Inside";
    DragPosition2[DragPosition2["After"] = 1] = "After";
    return DragPosition2;
  }(DragPosition || {});
  function useDraggable(state) {
    var treeItemRef = state.treeItemRef;
    var dragStates = Vue.reactive({
      isDragOver: false,
      isDragging: false,
      dropPosition: 0 /* Inside */
    });
    var updateDropPosition = function updateDropPosition(dragEvent) {
      var _rootNode$getBounding;
      var rootNode = treeItemRef.value;
      if (!rootNode) return;
      var rect = rootNode === null || rootNode === void 0 || (_rootNode$getBounding = rootNode.getBoundingClientRect) === null || _rootNode$getBounding === void 0 ? void 0 : _rootNode$getBounding.call(rootNode);
      var offsetY = window.scrollY + rect.top;
      var pageY = dragEvent.pageY;
      var gapHeight = rect.height / 4;
      var diff = pageY - offsetY;
      if (diff < gapHeight) {
        dragStates.dropPosition = -1 /* Before */;
      } else if (diff < rect.height - gapHeight) {
        dragStates.dropPosition = 0 /* Inside */;
      } else {
        dragStates.dropPosition = 1 /* After */;
      }
    };
    var setDragStatus = function setDragStatus(status, dragEvent) {
      var _drag$handleDragStart, _drag$handleDragEnd, _drag$handleDragOver, _drag$handleDragLeave, _drag$handleDrop;
      var node = state.node,
        treeScope = state.treeScope;
      var drag = treeScope.drag;
      if (!drag) return;
      switch (status) {
        case "dragStart":
          dragStates.isDragging = true;
          dragStates.dropPosition = 0 /* Inside */;
          (_drag$handleDragStart = drag.handleDragStart) === null || _drag$handleDragStart === void 0 || _drag$handleDragStart.call(drag, {
            node: node,
            dragEvent: dragEvent
          });
          break;
        case "dragEnd":
          dragStates.isDragging = false;
          dragStates.isDragOver = false;
          dragStates.dropPosition = 0 /* Inside */;
          throttleUpdateDropPosition.cancel();
          (_drag$handleDragEnd = drag.handleDragEnd) === null || _drag$handleDragEnd === void 0 || _drag$handleDragEnd.call(drag, {
            node: node,
            dragEvent: dragEvent
          });
          break;
        case "dragOver":
          dragStates.isDragOver = true;
          throttleUpdateDropPosition(dragEvent);
          (_drag$handleDragOver = drag.handleDragOver) === null || _drag$handleDragOver === void 0 || _drag$handleDragOver.call(drag, {
            node: node,
            dragEvent: dragEvent
          });
          break;
        case "dragLeave":
          dragStates.isDragOver = false;
          dragStates.dropPosition = 0 /* Inside */;
          throttleUpdateDropPosition.cancel();
          (_drag$handleDragLeave = drag.handleDragLeave) === null || _drag$handleDragLeave === void 0 || _drag$handleDragLeave.call(drag, {
            node: node,
            dragEvent: dragEvent
          });
          break;
        case "drop":
          (_drag$handleDrop = drag.handleDrop) === null || _drag$handleDrop === void 0 || _drag$handleDrop.call(drag, {
            node: node,
            dropPosition: dragStates.dropPosition,
            dragEvent: dragEvent
          });
          dragStates.isDragOver = false;
          throttleUpdateDropPosition.cancel();
          break;
      }
    };
    var handleDragStart = function handleDragStart(evt) {
      var node = state.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragStart", evt);
      try {
        var _evt$dataTransfer;
        (_evt$dataTransfer = evt.dataTransfer) === null || _evt$dataTransfer === void 0 || _evt$dataTransfer.setData("text/plain", "");
      } catch (e) {}
    };
    var handleDragEnd = function handleDragEnd(evt) {
      var node = state.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragEnd", evt);
    };
    var handleDragOver = function handleDragOver(evt) {
      var node = state.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("dragOver", evt);
    };
    var handleDragLeave = function handleDragLeave(evt) {
      var node = state.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      setDragStatus("dragLeave", evt);
    };
    var handleDrop = function handleDrop(evt) {
      var node = state.node;
      if (!node.isDraggable()) return;
      evt.stopPropagation();
      evt.preventDefault();
      setDragStatus("drop", evt);
    };
    var throttleUpdateDropPosition = throttle$1(function (dragEvent) {
      updateDropPosition(dragEvent);
    });
    return {
      dragStates: dragStates,
      handleDragStart: handleDragStart,
      handleDragEnd: handleDragEnd,
      handleDragOver: handleDragOver,
      handleDragLeave: handleDragLeave,
      handleDrop: handleDrop
    };
  }

  function ownKeys$1b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function emitEvent(props, context, evtName) {
    var apiName = camelCase$1("on-".concat(evtName));
    evtName.replace(/^on/, "").toLowerCase();
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }
    if (typeof props[apiName] === "function") {
      props[apiName].apply(props, args);
    }
  }
  function getParentsToRoot(element, root) {
    var list = [];
    var el = element;
    while (el && el.parentNode) {
      list.push(el);
      if (el === root) {
        break;
      }
      el = el.parentNode;
    }
    return list;
  }
  function getParentMarks(name, element, root) {
    var list = getParentsToRoot(element, root);
    return list.map(function (el) {
      var mark = {
        name: name,
        value: (el === null || el === void 0 ? void 0 : el.getAttribute(name)) || "",
        el: el
      };
      return mark;
    }).filter(function (mark) {
      return mark.value;
    });
  }
  function getMark(name, element, root) {
    var list = getParentMarks(name, element, root);
    var info = list.pop() || null;
    return info;
  }
  function pathMatchClass(name, element, root) {
    var list = getParentsToRoot(element, root);
    var rs = list.some(function (el) {
      return el.classList.contains(name);
    });
    return rs;
  }
  function getTNode(prop, options) {
    var tnode = null;
    var item = null;
    var conf = _objectSpread$1a({}, options);
    if (typeof prop === "function") {
      var _conf$node;
      item = prop(conf.createElement, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
    } else if (typeof prop === "string") {
      item = prop;
    }
    if (typeof item === "string") {
      tnode = item;
    } else if (item) {
      tnode = item;
    }
    return tnode;
  }
  function isTreeNodeValue(item) {
    return typeof item === "string" || typeof item === "number";
  }
  function getNode(store, item) {
    var node = null;
    var val = null;
    if (typeof item === "string" || typeof item === "number") {
      val = item;
    } else if (item && isTreeNodeValue(item.value)) {
      val = item.value;
    }
    node = store.getNode(val);
    return node;
  }

  function useDragHandle(state) {
    var props = state.props,
      context = state.context,
      scope = state.scope,
      store = state.store;
    var dragNode = null;
    var handleDragStart = function handleDragStart(state2) {
      var dragEvent = state2.dragEvent,
        node = state2.node;
      dragNode = node;
      var ctx = {
        node: node.getModel(),
        e: dragEvent
      };
      emitEvent(props, context, "drag-start", ctx);
    };
    var handleDragEnd = function handleDragEnd(state2) {
      var dragEvent = state2.dragEvent,
        node = state2.node;
      dragNode = node;
      var ctx = {
        node: node.getModel(),
        e: dragEvent
      };
      emitEvent(props, context, "drag-end", ctx);
    };
    var handleDragOver = function handleDragOver(state2) {
      var dragEvent = state2.dragEvent,
        node = state2.node;
      var ctx = {
        node: node.getModel(),
        e: dragEvent
      };
      emitEvent(props, context, "drag-over", ctx);
    };
    var handleDragLeave = function handleDragLeave(state2) {
      var dragEvent = state2.dragEvent,
        node = state2.node;
      var ctx = {
        node: node.getModel(),
        e: dragEvent
      };
      emitEvent(props, context, "drag-leave", ctx);
    };
    var handleDrop = function handleDrop(state2) {
      var _props$allowDrop;
      var dragEvent = state2.dragEvent,
        node = state2.node,
        dropPosition = state2.dropPosition;
      if (node.value === dragNode.value || node.getParents().some(function (_node) {
        return _node.value === dragNode.value;
      })) return;
      var ctx = {
        dropNode: node.getModel(),
        dragNode: dragNode.getModel(),
        dropPosition: dropPosition,
        e: dragEvent
      };
      if (((_props$allowDrop = props.allowDrop) === null || _props$allowDrop === void 0 ? void 0 : _props$allowDrop.call(props, ctx)) === false) return;
      var nodes = store.getNodes();
      nodes.some(function (_node) {
        if (_node.value === node.value) {
          if (dropPosition === DragPosition.Inside) {
            dragNode.appendTo(store, _node);
          } else if (dropPosition === DragPosition.Before) {
            node.insertBefore(dragNode);
          } else {
            node.insertAfter(dragNode);
          }
          return true;
        }
        return false;
      });
      emitEvent(props, context, "drop", ctx);
    };
    var drag = {
      handleDragStart: handleDragStart,
      handleDragEnd: handleDragEnd,
      handleDragOver: handleDragOver,
      handleDragLeave: handleDragLeave,
      handleDrop: handleDrop
    };
    scope.drag = drag;
    return {
      drag: drag
    };
  }

  function useTreeAction(state) {
    var treeState = state;
    var store = treeState.store;
    var componentName = usePrefixClass("tree").value;
    var _state$vmValue = _slicedToArray(state.vmValue, 2),
      tValue = _state$vmValue[0],
      setTValue = _state$vmValue[1];
    var _state$vmActived = _slicedToArray(state.vmActived, 2),
      tActived = _state$vmActived[0],
      setTActived = _state$vmActived[1];
    var _state$vmExpanded = _slicedToArray(state.vmExpanded, 2),
      tExpanded = _state$vmExpanded[0],
      setTExpanded = _state$vmExpanded[1];
    var setExpanded = function setExpanded(item, isExpanded) {
      var node = getNode(store, item);
      var mouseEvent = treeState.mouseEvent;
      var evtCtx = {
        node: node.getModel(),
        e: mouseEvent,
        trigger: "setItem"
      };
      if (mouseEvent) {
        evtCtx.trigger = "node-click";
        var target = mouseEvent.target;
        var currentTarget = mouseEvent.currentTarget;
        if (pathMatchClass("".concat(componentName, "__icon"), target, currentTarget)) {
          evtCtx.trigger = "icon-click";
        }
      }
      var expanded = node.setExpanded(isExpanded, {
        directly: true
      });
      setTExpanded(expanded, evtCtx);
      if (evtCtx.trigger !== "setItem") {
        store.replaceExpanded(tExpanded.value || []);
      }
      return expanded;
    };
    var toggleExpanded = function toggleExpanded(item) {
      var node = getNode(store, item);
      if (!node.children) return;
      return setExpanded(node, !node.isExpanded());
    };
    var setActived = function setActived(item, isActived) {
      var node = getNode(store, item);
      var mouseEvent = treeState.mouseEvent;
      var evtCtx = {
        node: node.getModel(),
        e: mouseEvent,
        trigger: "setItem"
      };
      if (mouseEvent) {
        evtCtx.trigger = "node-click";
      }
      var actived = node.setActived(isActived, {
        isAction: evtCtx.trigger === "node-click",
        directly: true
      });
      setTActived(actived, evtCtx);
      if (evtCtx.trigger !== "setItem") {
        store.replaceActived(tActived.value || []);
      }
      return actived;
    };
    var toggleActived = function toggleActived(item) {
      var node = getNode(store, item);
      return setActived(node, !node.isActived());
    };
    var setChecked = function setChecked(item, isChecked, ctx) {
      var node = getNode(store, item);
      var mouseEvent = ctx === null || ctx === void 0 ? void 0 : ctx.e;
      var evtCtx = {
        node: node.getModel(),
        e: mouseEvent,
        trigger: "setItem"
      };
      if (mouseEvent) {
        evtCtx.trigger = "node-click";
      }
      var checked = node.setChecked(isChecked, {
        isAction: evtCtx.trigger === "node-click",
        directly: true
      });
      setTValue(checked, evtCtx);
      if (evtCtx.trigger !== "setItem") {
        store.replaceChecked(tValue.value || []);
      }
      return checked;
    };
    var toggleChecked = function toggleChecked(item, ctx) {
      var node = getNode(store, item);
      if (node.isIndeterminate()) {
        var expectState = node.hasEnableUnCheckedChild();
        return setChecked(node, expectState, ctx);
      }
      return setChecked(node, !node.isChecked(), ctx);
    };
    return {
      setExpanded: setExpanded,
      toggleExpanded: toggleExpanded,
      setActived: setActived,
      toggleActived: toggleActived,
      setChecked: setChecked,
      toggleChecked: toggleChecked
    };
  }

  function useItemState(props, context) {
    var refProps = Vue.toRefs(props);
    var treeItemRef = Vue.ref(null);
    var treeScope = props.treeScope;
    var store = treeScope.store;
    var node = store.privateMap.get(props.itemKey);
    var state = {
      stateId: props.stateId,
      props: props,
      context: context,
      treeScope: treeScope,
      refProps: refProps,
      node: node,
      treeItemRef: treeItemRef
    };
    return {
      state: state
    };
  }

  function useItemEvents(state) {
    var context = state.context;
    var classPrefix = usePrefixClass().value;
    var handleChange = function handleChange(_, ctx) {
      var node = state.node;
      var event = new Event("change");
      var evtContext = {
        event: event,
        node: node
      };
      context.emit("change", evtContext, ctx);
    };
    var clicked = false;
    var handleClick = function handleClick(evt) {
      var _srcTarget$className, _srcTarget$className$;
      var node = state.node,
        treeScope = state.treeScope;
      var _treeScope$treeProps = treeScope.treeProps,
        treeProps = _treeScope$treeProps === void 0 ? {} : _treeScope$treeProps;
      var expandOnClickNode = treeProps.expandOnClickNode;
      var srcTarget = evt.target;
      var isBranchTrigger = node.children && expandOnClickNode && (srcTarget.className === "".concat(classPrefix, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
      if (clicked || isBranchTrigger) return;
      clicked = true;
      setTimeout(function () {
        clicked = false;
      });
      if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 || (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix, "-tree__label"))) !== -1) evt.preventDefault();
      var evtContext = {
        mouseEvent: evt,
        event: evt,
        node: node,
        path: node.getPath()
      };
      context.emit("click", evtContext);
    };
    return {
      handleChange: handleChange,
      handleClick: handleClick
    };
  }

  function useRenderIcon(state) {
    var classPrefix = usePrefixClass().value;
    var componentName = usePrefixClass("tree").value;
    var getFolderIcon = function getFolderIcon(h) {
      var _useGlobalIcon = useGlobalIcon({
          CaretRightSmallIcon: TdCaretRightSmallIcon
        }),
        CaretRightSmallIcon = _useGlobalIcon.CaretRightSmallIcon;
      return Vue.createVNode(CaretRightSmallIcon, null, null);
    };
    var handleMousedown = function handleMousedown(evt) {
      evt.preventDefault();
    };
    var renderIcon = function renderIcon(h) {
      var node = state.node,
        treeScope = state.treeScope;
      var scopedSlots = treeScope.scopedSlots;
      var treeProps = (treeScope === null || treeScope === void 0 ? void 0 : treeScope.treeProps) || {};
      var icon = treeProps.icon;
      var isDefaultIcon = false;
      var iconNode = null;
      if (icon === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
          iconNode = scopedSlots.icon({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (!node.vmIsLeaf) {
          isDefaultIcon = true;
          iconNode = getFolderIcon();
          if (node.loading && node.expanded) {
            iconNode = Vue.createVNode(Loading, null, null);
          }
        } else {
          iconNode = "";
        }
      } else if (icon) {
        iconNode = getTNode(icon, {
          createElement: h,
          node: node
        });
      }
      var wrapIconNode = Vue.createVNode("span", {
        "class": ["".concat(componentName, "__icon"), "".concat(classPrefix, "-folder-icon"), isDefaultIcon ? "".concat(componentName, "__icon--default") : ""],
        "trigger": "expand",
        "ignore": "active",
        "onmousedown": handleMousedown
      }, [iconNode]);
      return wrapIconNode;
    };
    return {
      renderIcon: renderIcon
    };
  }

  function ownKeys$1a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$19(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$m(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  function useRenderLabel(state) {
    var classPrefix = usePrefixClass().value;
    var componentName = usePrefixClass("tree").value;
    var _useItemEvents = useItemEvents(state),
      handleChange = _useItemEvents.handleChange;
    var renderLabel = function renderLabel(h) {
      var node = state.node,
        treeScope = state.treeScope;
      var scopedSlots = treeScope.scopedSlots,
        _treeScope$treeProps = treeScope.treeProps,
        treeProps = _treeScope$treeProps === void 0 ? {} : _treeScope$treeProps;
      var label = treeProps.label,
        expandOnClickNode = treeProps.expandOnClickNode;
      var checkProps = (treeProps === null || treeProps === void 0 ? void 0 : treeProps.checkProps) || {};
      var labelNode = null;
      if (label === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.label) {
          labelNode = scopedSlots.label({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else {
          labelNode = node.label || "";
        }
      } else {
        labelNode = getTNode(label, {
          createElement: h,
          node: node
        });
      }
      var labelClasses = ["".concat(componentName, "__label"), _defineProperty$2({}, "".concat(classPrefix, "-is-active"), node.isActivable() ? node.actived : false)];
      var shouldStopLabelTrigger = Vue.computed(function () {
        var _node$children;
        var isNormalBranchNode = Array.isArray(node.children) && ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0;
        var isLazyLoadChildBranchNode = isBoolean(node.children) && node.children;
        var isBranchNode = isNormalBranchNode || isLazyLoadChildBranchNode;
        return expandOnClickNode && isBranchNode;
      });
      if (node.vmCheckable) {
        var checkboxDisabled = false;
        if (node.vmIsLocked && !node.vmIsRest) {
          checkboxDisabled = true;
        }
        if (node.isDisabled()) {
          checkboxDisabled = true;
        }
        var itemCheckProps = _objectSpread$19(_objectSpread$19({}, checkProps), {}, {
          disabled: checkboxDisabled
        });
        var _labelNode = function () {
          return labelNode;
        }();
        labelNode = Vue.createVNode(Checkbox, {
          "class": labelClasses,
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": checkboxDisabled,
          "name": String(node.value),
          "onChange": handleChange,
          "stopLabelTrigger": shouldStopLabelTrigger.value,
          "ignore": treeProps.expandOnClickNode ? "active" : "expand,active",
          "props": itemCheckProps,
          "title": node.label
        }, _isSlot$m(labelNode) ? labelNode : {
          "default": function _default() {
            return [_labelNode];
          }
        });
      } else {
        var inner = Vue.createVNode("span", {
          "style": "position: relative"
        }, [labelNode]);
        labelNode = node.isActivable() ? Vue.createVNode("span", {
          "key": "1",
          "ref": "label",
          "class": labelClasses,
          "title": node.label
        }, [inner]) : Vue.createVNode("span", {
          "key": "2",
          "class": labelClasses,
          "title": node.label
        }, [inner]);
      }
      return labelNode;
    };
    return {
      renderLabel: renderLabel
    };
  }

  function useRenderLine(state) {
    var componentName = usePrefixClass("tree").value;
    var renderLine = function renderLine(h) {
      var node = state.node,
        treeScope = state.treeScope;
      var scopedSlots = treeScope.scopedSlots;
      var treeProps = (treeScope === null || treeScope === void 0 ? void 0 : treeScope.treeProps) || {};
      var line = treeProps.line;
      var iconVisible = !!treeProps.icon;
      var lineNode = null;
      if (line === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
          lineNode = scopedSlots.line({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (node.parent && node.tree) {
          var vmIsLeaf = node.vmIsLeaf,
            vmIsFirst = node.vmIsFirst,
            level = node.level;
          var lineClasses = [];
          lineClasses.push("".concat(componentName, "__line"));
          if (vmIsLeaf || !iconVisible) {
            lineClasses.push("".concat(componentName, "__line--leaf"));
          }
          if (vmIsFirst && iconVisible) {
            lineClasses.push("".concat(componentName, "__line--first"));
          }
          var shadowStyles = [];
          var parents = node.getParents();
          parents.pop();
          parents.forEach(function (pnode, index) {
            if (!pnode.vmIsLast) {
              shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
            }
          });
          var styles = {
            "--level": level ? String(level) : void 0,
            "box-shadow": shadowStyles.join(",")
          };
          lineNode = Vue.createVNode("span", {
            "class": lineClasses,
            "style": styles
          }, null);
        }
      } else {
        lineNode = getTNode(line, {
          createElement: h,
          node: node
        });
      }
      return lineNode;
    };
    return {
      renderLine: renderLine
    };
  }

  function useRenderOperations(state) {
    var componentName = usePrefixClass("tree").value;
    var renderOperations = function renderOperations(h) {
      var node = state.node,
        treeScope = state.treeScope;
      var scopedSlots = treeScope.scopedSlots;
      var treeProps = (treeScope === null || treeScope === void 0 ? void 0 : treeScope.treeProps) || {};
      var operations = treeProps.operations;
      var opNode = null;
      if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
        opNode = scopedSlots.operations({
          node: node === null || node === void 0 ? void 0 : node.getModel()
        });
      } else {
        opNode = getTNode(operations, {
          createElement: h,
          node: node
        });
      }
      if (opNode) {
        opNode = Vue.createVNode("span", {
          "class": "".concat(componentName, "__operations"),
          "ignore": "active,expand"
        }, [opNode]);
      }
      return opNode;
    };
    return {
      renderOperations: renderOperations
    };
  }

  function ownKeys$19(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$18(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$19(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$19(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeItem(state) {
    var treeScope = state.treeScope,
      treeItemRef = state.treeItemRef;
    var virtualConfig = treeScope.virtualConfig,
      treeContentRef = treeScope.treeContentRef,
      scrollProps = treeScope.scrollProps;
    var classPrefix = usePrefixClass().value;
    var componentName = usePrefixClass("tree").value;
    var _useItemEvents = useItemEvents(state),
      handleClick = _useItemEvents.handleClick;
    var _useRenderIcon = useRenderIcon(state),
      renderIcon = _useRenderIcon.renderIcon;
    var _useRenderLabel = useRenderLabel(state),
      renderLabel = _useRenderLabel.renderLabel;
    var _useRenderLine = useRenderLine(state),
      renderLine = _useRenderLine.renderLine;
    var _useRenderOperations = useRenderOperations(state),
      renderOperations = _useRenderOperations.renderOperations;
    var _useDraggable = useDraggable(state),
      dragStates = _useDraggable.dragStates,
      handleDragStart = _useDraggable.handleDragStart,
      handleDragEnd = _useDraggable.handleDragEnd,
      handleDragOver = _useDraggable.handleDragOver,
      handleDragLeave = _useDraggable.handleDragLeave,
      handleDrop = _useDraggable.handleDrop;
    var _useLazyLoad = useLazyLoad$1(treeContentRef, treeItemRef, Vue.reactive(_objectSpread$18({}, scrollProps === null || scrollProps === void 0 ? void 0 : scrollProps.value))),
      hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
      tRowHeight = _useLazyLoad.tRowHeight;
    function tryNotifyVirtualScrollRowUpdate() {
      var node = state.node;
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      if (isVirtual) {
        var timer = setTimeout(function () {
          virtualConfig.handleRowMounted({
            ref: treeItemRef,
            data: node
          });
          clearTimeout(timer);
        }, 100);
      }
    }
    Vue.onMounted(function () {
      tryNotifyVirtualScrollRowUpdate();
    });
    Vue.onUpdated(function () {
      tryNotifyVirtualScrollRowUpdate();
    });
    var getItemStyles = function getItemStyles() {
      var node = state.node;
      var level = node.level;
      var levelStyle = "--level: ".concat(level, ";");
      var strStyle = "".concat(levelStyle);
      return strStyle;
    };
    var getItemClassList = function getItemClassList() {
      var node = state.node;
      var isDragOver = dragStates.isDragOver,
        isDragging = dragStates.isDragging,
        dropPosition = dragStates.dropPosition;
      var list = [];
      list.push("".concat(componentName, "__item"));
      list.push(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(componentName, "__item--open"), node.expanded), "".concat(classPrefix, "-is-active"), node.isActivable() ? node.actived : false), "".concat(classPrefix, "-is-disabled"), node.isDisabled()));
      list.push(_defineProperty$2({}, "".concat(componentName, "__item--draggable"), node.isDraggable()));
      if (node.visible) {
        list.push("".concat(componentName, "__item--visible"));
      } else {
        list.push("".concat(componentName, "__item--hidden"));
      }
      if (node.vmIsLocked) {
        list.push("".concat(componentName, "__item--locked"));
      }
      if (node.vmIsRest) {
        list.push("".concat(componentName, "__item--matched"));
      }
      list.push(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(componentName, "__item--dragging"), isDragging), "".concat(componentName, "__item--tip-top"), isDragOver && dropPosition < 0), "".concat(componentName, "__item--tip-bottom"), isDragOver && dropPosition > 0), "".concat(componentName, "__item--tip-highlight"), !isDragging && isDragOver && dropPosition === 0));
      return list;
    };
    var renderItem = function renderItem(h) {
      var itemNodes = [];
      var iconNode = renderIcon(h);
      var lineNode = renderLine(h);
      if (lineNode) {
        itemNodes.push(lineNode);
      }
      if (iconNode) {
        itemNodes.push(iconNode);
      }
      var labelNode = renderLabel(h);
      if (labelNode) {
        itemNodes.push(labelNode);
      }
      var opNode = renderOperations(h);
      if (opNode) {
        itemNodes.push(opNode);
      }
      return itemNodes;
    };
    var renderItemNode = function renderItemNode(h) {
      var node = state.node,
        props = state.props;
      if (!node) return null;
      var level = node.level,
        value = node.value;
      var styles = getItemStyles();
      var classList = getItemClassList();
      var treeState = state;
      treeState.stateId = props.stateId;
      var itemNode = Vue.createVNode("div", {
        "ref": "treeItemRef",
        "class": classList,
        "data-value": value,
        "data-level": level,
        "style": styles,
        "onClick": function onClick(evt) {
          return handleClick(evt);
        },
        "draggable": node.isDraggable(),
        "onDragstart": function onDragstart(evt) {
          return handleDragStart(evt);
        },
        "onDragend": function onDragend(evt) {
          return handleDragEnd(evt);
        },
        "onDragover": function onDragover(evt) {
          return handleDragOver(evt);
        },
        "onDragleave": function onDragleave(evt) {
          return handleDragLeave(evt);
        },
        "onDrop": function onDrop(evt) {
          return handleDrop(evt);
        }
      }, [hasLazyLoadHolder.value ? [Vue.createVNode("div", null, null)] : renderItem(h)]);
      return itemNode;
    };
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight,
      renderItemNode: renderItemNode
    };
  }

  function ownKeys$18(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$17(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$18(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$18(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var treeItemProps = {
    stateId: {
      type: String
    },
    itemKey: {
      type: String
    },
    rowIndex: {
      type: Number
    },
    treeScope: {
      type: Object
    }
  };
  var TreeItem = Vue.defineComponent(_objectSpread$17(_objectSpread$17({
    props: treeItemProps
  }, TreeItemDefinition), {}, {
    setup: function setup(props, context) {
      var _useItemState = useItemState(props, context),
        state = _useItemState.state;
      var treeItemRef = state.treeItemRef;
      Vue.ref();
      var _useTreeItem = useTreeItem(state),
        renderItemNode = _useTreeItem.renderItemNode;
      return {
        treeItemRef: treeItemRef,
        renderItemNode: renderItemNode
      };
    },
    render: function render(h) {
      var createElement = getCreateElement();
      if (typeof this.renderItemNode === "function") {
        return this.renderItemNode(createElement);
      }
      return null;
    }
  }));

  function useTreeEvents(state) {
    var treeState = state;
    var props = treeState.props,
      context = treeState.context;
    var _useTreeAction = useTreeAction(state),
      toggleExpanded = _useTreeAction.toggleExpanded,
      toggleActived = _useTreeAction.toggleActived,
      toggleChecked = _useTreeAction.toggleChecked;
    var handleClick = function handleClick(evtState) {
      var mouseEvent = evtState.mouseEvent,
        event = evtState.event,
        node = evtState.node;
      if (!node || !mouseEvent) return;
      treeState.mouseEvent = mouseEvent;
      var shouldExpand = props.expandOnClickNode;
      var shouldActive = !props.disabled && !node.disabled && node.isActivable();
      var isRightClick = false;
      ["trigger", "ignore"].forEach(function (markName) {
        var mark = getMark(markName, event.target, event.currentTarget);
        var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
        if (markValue.indexOf("expand") >= 0) {
          if (markName === "trigger") {
            shouldExpand = true;
            isRightClick = true;
          } else if (markName === "ignore") {
            shouldExpand = false;
          }
        }
        if (markValue.indexOf("active") >= 0) {
          if (markName === "ignore") {
            shouldActive = false;
          }
        }
      });
      if (shouldExpand) {
        toggleExpanded(node);
        if (isRightClick) return;
      }
      if (shouldActive) {
        toggleActived(node);
      }
      var evtCtx = {
        node: node.getModel(),
        e: mouseEvent
      };
      emitEvent(props, context, "click", evtCtx);
      treeState.mouseEvent = null;
    };
    var handleChange = function handleChange(evtState, ctx) {
      var disabled = props.disabled;
      var node = evtState.node;
      if (!node || disabled || node.disabled || !node.isCheckable()) {
        return;
      }
      toggleChecked(node, ctx);
    };
    return {
      handleChange: handleChange,
      handleClick: handleClick
    };
  }

  function useTreeNodes(state) {
    var store = state.store,
      scope = state.scope,
      allNodes = state.allNodes,
      nodes = state.nodes,
      virtualConfig = state.virtualConfig;
    var _useTreeEvents = useTreeEvents(state),
      handleClick = _useTreeEvents.handleClick,
      handleChange = _useTreeEvents.handleChange;
    var nodesEmpty = Vue.ref(false);
    var cacheMap = /* @__PURE__ */new Map();
    var refresh = function refresh() {
      allNodes.value = store.getNodes();
    };
    var refreshVisibleNodes = function refreshVisibleNodes() {
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      if (isVirtual) return;
      var list = [];
      var hasVisibleNode = false;
      allNodes.value.forEach(function (node) {
        if (node.visible) {
          hasVisibleNode = true;
          cacheMap.set(node.value, node.value);
        }
        if (cacheMap.has(node.value)) {
          list.push(node);
        }
      });
      cacheMap.forEach(function (value) {
        if (!store.getNode(value)) {
          cacheMap["delete"](value);
        }
      });
      nodes.value = list;
      nodesEmpty.value = !hasVisibleNode;
    };
    var refreshVirtualNodes = function refreshVirtualNodes() {
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      if (!isVirtual) return;
      var list = virtualConfig.visibleData.value;
      nodes.value = list;
      nodesEmpty.value = list.length <= 0;
    };
    var renderItem = function renderItem(h, node, index, stateId) {
      var rowIndex = node.VIRTUAL_SCROLL_INDEX || index;
      var nodeUniqueId = node[privateKey];
      var treeItem = Vue.createVNode(TreeItem, {
        "key": nodeUniqueId,
        "rowIndex": rowIndex,
        "stateId": stateId,
        "itemKey": nodeUniqueId,
        "treeScope": scope,
        "onClick": handleClick,
        "onChange": handleChange
      }, null);
      return treeItem;
    };
    var renderTreeNodes = function renderTreeNodes(h) {
      var stateId = "render-".concat(new Date().getTime());
      var treeNodeViews = nodes.value.map(function (node, index) {
        return renderItem(h, node, index, stateId);
      });
      return treeNodeViews;
    };
    Vue.watch(allNodes, refreshVisibleNodes);
    Vue.watch(virtualConfig.visibleData, refreshVirtualNodes);
    refresh();
    refreshVisibleNodes();
    refreshVirtualNodes();
    store.emitter.on("update", refresh);
    return {
      nodesEmpty: nodesEmpty,
      renderTreeNodes: renderTreeNodes
    };
  }

  function ownKeys$17(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$16(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$17(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$17(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeScroll(state) {
    var treeState = state;
    var props = treeState.props,
      context = treeState.context,
      allNodes = treeState.allNodes,
      nodes = treeState.nodes,
      scope = treeState.scope,
      treeContentRef = treeState.treeContentRef,
      isScrolling = treeState.isScrolling;
    var scrollProps = Vue.computed(function () {
      return _objectSpread$16({
        rowHeight: 34
      }, props.scroll);
    });
    scope.scrollProps = scrollProps;
    var virtualScrollParams = Vue.computed(function () {
      var list = allNodes.value.filter(function (node) {
        return node.visible;
      });
      return {
        data: list,
        scroll: scrollProps.value,
        preventResizeRefresh: true
      };
    });
    var virtualConfig = useVirtualScrollNew(treeContentRef, virtualScrollParams);
    scope.virtualConfig = virtualConfig;
    treeState.virtualConfig = virtualConfig;
    Vue.onMounted(function () {
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      if (isVirtual) {
        virtualConfig.handleScroll();
      }
    });
    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScroll;
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, {
        e: e
      });
      context.emit("scroll", {
        e: e
      });
    };
    var scrollStopTimer = null;
    var setScrolling = function setScrolling() {
      isScrolling.value = true;
      if (scrollStopTimer) {
        clearTimeout(scrollStopTimer);
        scrollStopTimer = null;
      }
      scrollStopTimer = setTimeout(function () {
        scrollStopTimer = null;
        isScrolling.value = false;
      }, 100);
    };
    var lastScrollY = 0;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      setScrolling();
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      var target = e.target || e.srcElement;
      var top = target.scrollTop;
      if (lastScrollY !== top) {
        if (isVirtual) {
          virtualConfig.handleScroll();
          nodes.value = virtualConfig.visibleData.value;
        }
      } else {
        lastScrollY = 0;
      }
      lastScrollY = top;
      emitScrollEvent(e);
    };
    var handleScrollTo = function handleScrollTo(params) {
      var index = params.index;
      if (!index && index !== 0) {
        var _allNodes$value;
        if (!params.key) {
          log.error("Tree", "scrollToElement: one of `index` or `key` must exist.");
          return;
        }
        index = (_allNodes$value = allNodes.value) === null || _allNodes$value === void 0 ? void 0 : _allNodes$value.findIndex(function (item) {
          var _props$keys;
          return [get(item.data, "key"), get(item.data, ((_props$keys = props.keys) === null || _props$keys === void 0 ? void 0 : _props$keys["value"]) || "value")].includes(params.key);
        });
        if (index < 0) {
          log.error("Tree", "".concat(params.key, " does not exist in data, check `key` or `data` please."));
          return;
        }
      }
      virtualConfig.scrollToElement(_objectSpread$16(_objectSpread$16({}, params), {}, {
        index: index - 1
      }));
    };
    return {
      treeContentRef: treeContentRef,
      onInnerVirtualScroll: onInnerVirtualScroll,
      virtualConfig: virtualConfig,
      scrollToElement: handleScrollTo
    };
  }

  function useTreeState(props, context) {
    var treeContentRef = Vue.ref();
    var nodes = Vue.ref([]);
    var allNodes = Vue.ref([]);
    var isScrolling = Vue.ref(false);
    var refProps = Vue.toRefs(props);
    var vmValue = useVModel(props, refProps, "value", "defaultValue", "onChange", "change");
    var vmActived = useVModel(props, refProps, "actived", "defaultActived", "onActive", "active");
    var vmExpanded = useVModel(props, refProps, "expanded", "defaultExpanded", "onExpand", "expand");
    function setStore(store) {
      state.store = store;
      state.scope.store = store;
      allNodes.value = store.getNodes();
    }
    var state = {
      props: props,
      context: context,
      store: null,
      treeContentRef: treeContentRef,
      nodes: nodes,
      allNodes: allNodes,
      isScrolling: isScrolling,
      mouseEvent: null,
      virtualConfig: null,
      scope: {
        store: null,
        treeContentRef: treeContentRef,
        treeProps: props,
        scopedSlots: {},
        virtualConfig: null
      },
      setStore: setStore,
      refProps: refProps,
      vmValue: vmValue,
      vmActived: vmActived,
      vmExpanded: vmExpanded
    };
    return {
      state: state
    };
  }

  function useTreeStore(state) {
    var props = state.props,
      context = state.context,
      refProps = state.refProps;
    var valueMode = props.valueMode,
      filter = props.filter,
      keys = props.keys;
    var store = new TreeStore({
      valueMode: valueMode,
      filter: filter
    });
    var tValue = state.vmValue[0];
    var tActived = state.vmActived[0];
    var tExpanded = state.vmExpanded[0];
    var updateStoreConfig = function updateStoreConfig() {
      var storeProps = pick$1(props, ["expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "disableCheck", "checkable", "draggable", "checkStrictly", "load", "lazy", "valueMode", "filter", "allowFoldNodeOnFilter"]);
      store.setConfig(storeProps);
    };
    var updateExpanded = function updateExpanded() {
      var expandParent = props.expandParent;
      if (!Array.isArray(tExpanded.value)) return;
      var expandedMap = /* @__PURE__ */new Map();
      tExpanded.value.forEach(function (val) {
        expandedMap.set(val, true);
        if (expandParent) {
          var node = store.getNode(val);
          if (node) {
            node.getModel().getParents().forEach(function (tn) {
              expandedMap.set(tn.value, true);
            });
          }
        }
      });
      var expandedArr = Array.from(expandedMap.keys());
      store.setExpanded(expandedArr);
    };
    var filterChanged = false;
    var prevExpanded = null;
    var expandFilterPath = function expandFilterPath() {
      if (!props.allowFoldNodeOnFilter) return;
      if (!filterChanged) return;
      filterChanged = false;
      if (props.filter) {
        if (!prevExpanded) {
          prevExpanded = store.getExpanded();
        }
        var pathValues = [];
        var allNodes = store.getNodes();
        allNodes.forEach(function (node) {
          if (node.vmIsLocked) {
            pathValues.push(node.value);
          }
        });
        store.setExpanded(pathValues);
      } else if (prevExpanded) {
        store.replaceExpanded(prevExpanded);
        prevExpanded = null;
      }
    };
    var checkFilterExpand = function checkFilterExpand(newFilter, previousFilter) {
      if (!props.allowFoldNodeOnFilter) return;
      filterChanged = newFilter !== previousFilter;
    };
    var handleLoad = function handleLoad(info) {
      var node = info.node;
      var evtCtx = {
        node: node.getModel()
      };
      if (Array.isArray(tValue.value) && tValue.value.length > 0) {
        store.replaceChecked(tValue.value);
      }
      if (Array.isArray(tExpanded.value) && tExpanded.value.length > 0) {
        store.replaceExpanded(tExpanded.value);
      }
      if (Array.isArray(tActived.value) && tActived.value.length > 0) {
        store.replaceActived(tActived.value);
      }
      if (props !== null && props !== void 0 && props.onLoad) {
        props === null || props === void 0 || props.onLoad(evtCtx);
      }
      context.emit("load", evtCtx);
    };
    var rebuild = function rebuild(list) {
      store.reload(list || []);
      store.refreshNodes();
      if (Array.isArray(tValue.value)) {
        store.setChecked(tValue.value);
      }
      updateExpanded();
      if (Array.isArray(tActived.value)) {
        store.setActived(tActived.value);
      }
      store.refreshState();
    };
    function initStore() {
      store.setConfig({
        keys: keys
      });
      updateStoreConfig();
      store.append(props.data || []);
      store.refreshNodes();
      if (Array.isArray(tValue.value)) {
        store.setChecked(tValue.value);
      }
      updateExpanded();
      if (Array.isArray(tActived.value)) {
        store.setActived(tActived.value);
      }
      store.emitter.on("load", handleLoad);
      store.emitter.on("update", expandFilterPath);
    }
    initStore();
    state.setStore(store);
    Vue.watch(function () {
      return _toConsumableArray(tValue.value || []);
    }, function (nVal) {
      store.replaceChecked(nVal);
    });
    Vue.watch(function () {
      return _toConsumableArray(tExpanded.value || []);
    }, function (nVal) {
      store.replaceExpanded(nVal);
    });
    Vue.watch(function () {
      return _toConsumableArray(tActived.value || []);
    }, function (nVal) {
      store.replaceActived(nVal);
    });
    Vue.watch(refProps.filter, function (nVal, previousVal) {
      checkFilterExpand(nVal, previousVal);
    });
    Vue.watch(refProps.keys, function (keys2) {
      store.setConfig({
        keys: keys2
      });
    });
    Vue.watch(refProps.expandAll, function (nVal) {
      if (nVal) {
        var valueList = store.getNodes().filter(function (node) {
          return Array.isArray(node.children) && node.children.length;
        }).map(function (node) {
          return node.value;
        });
        store.setExpanded(valueList);
      } else {
        store.replaceExpanded(prevExpanded);
        prevExpanded = null;
      }
    });
    return {
      store: store,
      rebuild: rebuild,
      checkFilterExpand: checkFilterExpand,
      updateStoreConfig: updateStoreConfig,
      updateExpanded: updateExpanded,
      expandFilterPath: expandFilterPath
    };
  }

  function formatCSSUnit$1(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useTreeStyles(state) {
    var props = state.props;
    var componentName = usePrefixClass("tree").value;
    var classPrefix = usePrefixClass().value;
    var virtualConfig = state.virtualConfig,
      isScrolling = state.isScrolling,
      refProps = state.refProps;
    var height = refProps.height,
      maxHeight = refProps.maxHeight;
    var treeClasses = Vue.computed(function () {
      var list = [componentName];
      var disabled = props.disabled,
        hover = props.hover,
        transition = props.transition,
        checkable = props.checkable,
        draggable = props.draggable,
        expandOnClickNode = props.expandOnClickNode,
        scroll = props.scroll;
      if (disabled) {
        list.push("".concat(classPrefix, "-is-disabled"));
      }
      if (hover) {
        list.push("".concat(componentName, "--hoverable"));
      }
      if (checkable) {
        list.push("".concat(componentName, "--checkable"));
      }
      if (draggable) {
        list.push("".concat(componentName, "--draggable"));
      }
      if (transition) {
        list.push("".concat(componentName, "--transition"));
      }
      if (expandOnClickNode) {
        list.push("".concat(componentName, "--block-node"));
      }
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      if (isVirtual) {
        list.push("".concat(componentName, "__vscroll"));
        if (isScrolling.value) {
          list.push("".concat(componentName, "--scrolling"));
        }
      } else if (scroll && scroll.type === "lazy") {
        list.push("".concat(componentName, "__lazyload"));
      }
      return list;
    });
    var treeContentStyles = Vue.computed(function () {
      return {
        height: formatCSSUnit$1(height.value),
        maxHeight: formatCSSUnit$1(maxHeight.value),
        overflowY: formatCSSUnit$1(height.value) || formatCSSUnit$1(maxHeight.value) ? "auto" : void 0
      };
    });
    var scrollStyles = Vue.computed(function () {
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      var translateY = isVirtual ? virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.translateY.value : 0;
      var transform = "translateY(".concat(translateY, "px)");
      var posStyle = {
        transform: transform,
        "-ms-transform": transform,
        "-moz-transform": transform,
        "-webkit-transform": transform
      };
      return posStyle;
    });
    var cursorStyles = Vue.computed(function () {
      var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
      var translateY = isVirtual ? virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.translateY.value : 0;
      var translate = "translate(0, ".concat(translateY, "px)");
      return {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };
    });
    return {
      treeClasses: treeClasses,
      treeContentStyles: treeContentStyles,
      scrollStyles: scrollStyles,
      cursorStyles: cursorStyles
    };
  }

  var props$A = {
    activable: Boolean,
    activeMultiple: Boolean,
    actived: {
      type: Array,
      "default": void 0
    },
    defaultActived: {
      type: Array
    },
    allowDrop: {
      type: Function
    },
    allowFoldNodeOnFilter: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    checkable: Boolean,
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableCheck: {
      type: [Boolean, Function],
      "default": false
    },
    disabled: Boolean,
    draggable: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    expandAll: Boolean,
    expandLevel: {
      type: Number,
      "default": 0
    },
    expandMutex: Boolean,
    expandOnClickNode: Boolean,
    expandParent: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    filter: {
      type: Function
    },
    height: {
      type: [String, Number]
    },
    hover: Boolean,
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    line: {
      type: [Boolean, Function],
      "default": false
    },
    load: {
      type: Function
    },
    maxHeight: {
      type: [String, Number]
    },
    operations: {
      type: Function
    },
    scroll: {
      type: Object
    },
    transition: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    onActive: Function,
    onChange: Function,
    onClick: Function,
    onDragEnd: Function,
    onDragLeave: Function,
    onDragOver: Function,
    onDragStart: Function,
    onDrop: Function,
    onExpand: Function,
    onLoad: Function,
    onScroll: Function
  };

  function ownKeys$16(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$15(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$16(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$16(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$l(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _TdTree = Vue.defineComponent({
    name: "TTree",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$A,
    setup: function setup(props2, context) {
      var _useConfig = useConfig("tree"),
        t = _useConfig.t,
        global = _useConfig.global;
      var classPrefix = usePrefixClass();
      var componentName = usePrefixClass("tree");
      var renderTNodeJSX = useTNodeJSX();
      var _useTreeState = useTreeState(props2, context),
        state = _useTreeState.state;
      var treeContentRef = state.treeContentRef,
        isScrolling = state.isScrolling;
      var _useTreeStore = useTreeStore(state),
        store = _useTreeStore.store,
        updateStoreConfig = _useTreeStore.updateStoreConfig,
        rebuild = _useTreeStore.rebuild;
      useDragHandle(state);
      var _useTreeAction = useTreeAction(state),
        setActived = _useTreeAction.setActived,
        setExpanded = _useTreeAction.setExpanded,
        setChecked = _useTreeAction.setChecked;
      var _useTreeScroll = useTreeScroll(state),
        onInnerVirtualScroll = _useTreeScroll.onInnerVirtualScroll,
        virtualConfig = _useTreeScroll.virtualConfig,
        scrollToElement = _useTreeScroll.scrollToElement;
      var _useTreeNodes = useTreeNodes(state),
        renderTreeNodes = _useTreeNodes.renderTreeNodes,
        nodesEmpty = _useTreeNodes.nodesEmpty;
      var _useTreeStyles = useTreeStyles(state),
        treeClasses = _useTreeStyles.treeClasses,
        treeContentStyles = _useTreeStyles.treeContentStyles,
        scrollStyles = _useTreeStyles.scrollStyles,
        cursorStyles = _useTreeStyles.cursorStyles;
      return {
        t: t,
        global: global,
        classPrefix: classPrefix,
        componentName: componentName,
        state: state,
        store: store,
        treeClasses: treeClasses,
        treeContentRef: treeContentRef,
        renderTNodeJSX: renderTNodeJSX,
        rebuild: rebuild,
        updateStoreConfig: updateStoreConfig,
        setActived: setActived,
        setExpanded: setExpanded,
        setChecked: setChecked,
        renderTreeNodes: renderTreeNodes,
        nodesEmpty: nodesEmpty,
        isScrolling: isScrolling,
        onInnerVirtualScroll: onInnerVirtualScroll,
        treeContentStyles: treeContentStyles,
        scrollStyles: scrollStyles,
        cursorStyles: cursorStyles,
        virtualConfig: virtualConfig,
        scrollToElement: scrollToElement,
        scrollTo: scrollToElement
      };
    },
    watch: {
      data: function data(list) {
        this.rebuild(list);
      }
    },
    methods: {
      refresh: function refresh() {
        this.store.refreshState();
      },
      setItem: function setItem(value, options) {
        var _this = this;
        var node = this.store.getNode(value);
        var spec = options;
        var keys = Object.keys(spec);
        if (node && spec) {
          ["expanded", "actived", "checked"].forEach(function (name) {
            if (keys.includes(name)) {
              var val = spec[name];
              delete spec[name];
              var methodName = "set".concat(upperFirst$1(name));
              var setupMethod = _this[methodName];
              if (isFunction(setupMethod)) {
                setupMethod.call(_this, node, val);
              }
            }
          });
          node.set(spec);
        }
      },
      getItem: function getItem(value) {
        var node = this.store.getNode(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value) {
        var nodes = this.store.getNodes(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      appendTo: function appendTo(para, item) {
        var store = this.store;
        var list = [];
        if (Array.isArray(item)) {
          list = item;
        } else {
          list = [item];
        }
        list.forEach(function (item2) {
          var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
          var node = getNode(store, val);
          if (node) {
            store.appendNodes(para, node);
          } else {
            store.appendNodes(para, item2);
          }
        });
      },
      insertBefore: function insertBefore(value, item) {
        var store = this.store;
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(store, val);
        if (node) {
          store.insertBefore(value, node);
        } else {
          store.insertBefore(value, item);
        }
      },
      insertAfter: function insertAfter(value, item) {
        var store = this.store;
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(store, val);
        if (node) {
          store.insertAfter(value, node);
        } else {
          store.insertAfter(value, item);
        }
      },
      remove: function remove(value) {
        return this.store.remove(value);
      },
      getIndex: function getIndex(value) {
        return this.store.getNodeIndex(value);
      },
      getParent: function getParent(value) {
        var node = this.store.getParent(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value) {
        var nodes = this.store.getParents(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value) {
        var node = this.store.getNode(value);
        var pathNodes = [];
        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }
        return pathNodes;
      },
      getTreeData: function getTreeData(value) {
        var list = [];
        if (value) {
          var node = this.store.getNode(value);
          if (!node) return [];
          list = this.store.getNodes(value);
        } else {
          list = this.store.getNodes();
        }
        var nodeMap = {};
        var treeNodes = [];
        list.forEach(function (item) {
          var value2 = item.value;
          var itemData = _objectSpread$15(_objectSpread$15({}, item.data), {}, {
            value: value2
          });
          if (itemData.children !== true) {
            delete itemData.children;
          }
          nodeMap[value2] = itemData;
          var parent = item.getParent();
          if (!parent) {
            treeNodes.push(itemData);
          } else {
            var parentData = nodeMap[parent.value];
            if (!parentData) {
              treeNodes.push(itemData);
            } else {
              if (!Array.isArray(parentData.children)) {
                parentData.children = [];
              }
              parentData.children.push(itemData);
            }
          }
        });
        return treeNodes;
      }
    },
    render: function render(h) {
      var _allNodes$value$filte, _allNodes$value, _refProps$scroll$valu, _refProps$scroll$valu2;
      var state = this.state,
        treeClasses = this.treeClasses,
        updateStoreConfig = this.updateStoreConfig,
        renderTreeNodes = this.renderTreeNodes,
        nodesEmpty = this.nodesEmpty,
        isScrolling = this.isScrolling,
        virtualConfig = this.virtualConfig,
        treeContentStyles = this.treeContentStyles,
        scrollStyles = this.scrollStyles,
        cursorStyles = this.cursorStyles;
      var createElement = getCreateElement();
      var scope = state.scope,
        allNodes = state.allNodes,
        refProps = state.refProps;
      scope.scopedSlots = getScopedSlots(this);
      updateStoreConfig();
      var treeNodeViews = renderTreeNodes(createElement);
      var cname = this.componentName;
      var isVirtual = virtualConfig.isVirtualScroll.value;
      var emptyNode = null;
      if (nodesEmpty) {
        var useLocale = !this.empty && !this.$slots.empty;
        var emptyContent = useLocale ? this.t(this.global.empty) : this.renderTNodeJSX("empty");
        emptyNode = Vue.createVNode("div", {
          "class": "".concat(cname, "__empty")
        }, [emptyContent]);
      } else if (treeNodeViews.length <= 0) {
        emptyNode = Vue.createVNode("div", null, null);
      }
      var $props = this.$props;
      var transition = $props.transition;
      var treeNodeList = null;
      if (!transition || isVirtual && isScrolling) {
        treeNodeList = Vue.createVNode("div", {
          "class": "".concat(cname, "__list"),
          "style": scrollStyles
        }, [treeNodeViews]);
      } else {
        treeNodeList = Vue.createVNode(Vue.TransitionGroup, {
          "tag": "div",
          "class": "".concat(cname, "__list"),
          "enter-active-class": "".concat(cname, "__item--enter-active"),
          "leave-active-class": "".concat(cname, "__item--leave-active"),
          "style": scrollStyles
        }, _isSlot$l(treeNodeViews) ? treeNodeViews : {
          "default": function _default() {
            return [treeNodeViews];
          }
        });
      }
      var topValue = ((_allNodes$value$filte = (_allNodes$value = allNodes.value) === null || _allNodes$value === void 0 ? void 0 : _allNodes$value.filter(function (node) {
        return node.visible;
      }).length) !== null && _allNodes$value$filte !== void 0 ? _allNodes$value$filte : 0) * ((_refProps$scroll$valu = (_refProps$scroll$valu2 = refProps.scroll.value) === null || _refProps$scroll$valu2 === void 0 ? void 0 : _refProps$scroll$valu2.rowHeight) !== null && _refProps$scroll$valu !== void 0 ? _refProps$scroll$valu : 34);
      var placeholderStyles = {
        width: "1px",
        height: "1px",
        opacity: 0,
        pointerEvents: "none",
        position: "absolute",
        left: 0,
        top: "".concat(topValue, "px")
      };
      var placeholderEl = Vue.createVNode("div", {
        "style": placeholderStyles
      }, null);
      var treeNode = Vue.createVNode("div", {
        "class": treeClasses,
        "ref": "treeContentRef",
        "onScroll": this.onInnerVirtualScroll,
        "style": treeContentStyles
      }, [isVirtual && Vue.createVNode("div", {
        "class": "".concat(cname, "__vscroll-cursor"),
        "style": cursorStyles
      }, null), emptyNode || treeNodeList, isVirtual && placeholderEl]);
      return treeNode;
    }
  });

  var Tree = withInstall(_TdTree);

  var props$z = {
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: {
      type: Boolean,
      "default": void 0
    },
    selectInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tagProps: {
      type: Object
    },
    treeProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function
  };

  function ownKeys$15(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$14(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$15(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$15(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _TreeSelect = Vue.defineComponent({
    name: "TTreeSelect",
    props: props$z,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var renderTNodeJSX = useTNodeJSX();
      var renderDefaultTNode = useTNodeDefault();
      var classPrefix = usePrefixClass();
      var _useConfig = useConfig("treeSelect"),
        globalConfig = _useConfig.globalConfig;
      var formDisabled = useDisabled();
      var isReadonly = useReadonly();
      var treeRef = Vue.ref(null);
      var actived = Vue.ref([]);
      var expanded = Vue.ref([]);
      var nodeInfo = Vue.ref(null);
      var treeKey = Vue.ref(0);
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        popupVisible = _toRefs.popupVisible,
        inputValue = _toRefs.inputValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        treeSelectValue = _useVModel2[0],
        setTreeSelectValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(popupVisible, false, props2.onPopupVisibleChange, "popupVisible"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerVisible = _useDefaultValue2[0],
        setInnerVisible = _useDefaultValue2[1];
      var _useDefaultValue3 = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        innerInputValue = _useDefaultValue4[0],
        setInnerInputValue = _useDefaultValue4[1];
      var setTreeParentsExpanded = function setTreeParentsExpanded() {
        var getParents = function getParents(value2) {
          return findParentValues(props2.data, value2, realValue.value, realChildren.value);
        };
        var treeParents = [];
        if (treeSelectValue.value) {
          if (Array.isArray(treeSelectValue.value) && props2.multiple) {
            treeParents = treeSelectValue.value.flatMap(getParents);
          } else if (!Array.isArray(treeSelectValue.value) && !props2.multiple) {
            treeParents = getParents(treeSelectValue.value);
          }
        }
        expanded.value = Array.from(/* @__PURE__ */new Set([].concat(_toConsumableArray(expanded.value), _toConsumableArray(treeParents))));
      };
      Vue.watch(treeSelectValue, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function (_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 1;
              return changeNodeInfo();
            case 1:
              if (!props2.multiple) {
                actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];
              }
              setTreeParentsExpanded();
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      Vue.watch(function () {
        return props2.data;
      }, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 1;
              return changeNodeInfo();
            case 1:
              treeRerender();
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      })), {
        deep: true
      });
      var filterByText = Vue.computed(function () {
        var value2 = innerInputValue.value || "";
        if (value2 === "") {
          return null;
        }
        return function (node) {
          if (isFunction(props2.filter)) {
            var filter = props2.filter(String(value2), node);
            if (isBoolean(filter)) {
              return filter;
            }
          }
          return node.data[realLabel.value].indexOf(value2) >= 0;
        };
      });
      var tDisabled = Vue.computed(function () {
        return formDisabled.value || props2.disabled;
      });
      var inputPlaceholder = Vue.computed(function () {
        var _nodeInfo$value;
        return innerVisible.value && ((_nodeInfo$value = nodeInfo.value) === null || _nodeInfo$value === void 0 ? void 0 : _nodeInfo$value.label) || props2.placeholder || globalConfig.value.placeholder;
      });
      var popupClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-select__dropdown"), "narrow-scrollbar"];
      });
      var dropdownInnerSize = Vue.computed(function () {
        return {
          small: "s",
          medium: "m",
          large: "l"
        }[props2.size];
      });
      var isObjectValue = Vue.computed(function () {
        return props2.valueType === "object";
      });
      var checked = Vue.computed(function () {
        if (props2.multiple) {
          if (isObjectValue.value) {
            return isArray$1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
              return item.value;
            }) : [];
          }
          return isArray$1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
            return item;
          }) : [];
        }
        return [];
      });
      var multiLimitDisabled = Vue.computed(function () {
        return props2.multiple && !!props2.max && isArray$1(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
      });
      var realLabel = Vue.computed(function () {
        var _props2$keys;
        if (!isEmpty(props2.treeProps) && !isEmpty(props2.treeProps.keys)) {
          return props2.treeProps.keys.label || "label";
        }
        return ((_props2$keys = props2.keys) === null || _props2$keys === void 0 ? void 0 : _props2$keys.label) || "label";
      });
      var realValue = Vue.computed(function () {
        var _props2$keys2;
        if (!isEmpty(props2.treeProps) && !isEmpty(props2.treeProps.keys)) {
          return props2.treeProps.keys.value || "value";
        }
        return ((_props2$keys2 = props2.keys) === null || _props2$keys2 === void 0 ? void 0 : _props2$keys2.value) || "value";
      });
      var realChildren = Vue.computed(function () {
        var _props2$keys3;
        if (!isEmpty(props2.treeProps) && !isEmpty(props2.treeProps.keys)) {
          return props2.treeProps.keys.children || "children";
        }
        return ((_props2$keys3 = props2.keys) === null || _props2$keys3 === void 0 ? void 0 : _props2$keys3.children) || "children";
      });
      Vue.onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var _treeSelectValue$valu;
        return _regeneratorRuntime.wrap(function (_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              setTreeParentsExpanded();
              if (!treeSelectValue.value && props2.defaultValue) {
                change(props2.defaultValue, null, "uncheck");
              }
              if (isObjectValue.value) {
                actived.value = isArray$1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
                  return item === null || item === void 0 ? void 0 : item.value;
                }) : [(_treeSelectValue$valu = treeSelectValue.value) === null || _treeSelectValue$valu === void 0 ? void 0 : _treeSelectValue$valu.value];
              } else {
                actived.value = isArray$1(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
              }
              changeNodeInfo();
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      })));
      var change = function change(valueParam, node, trigger) {
        setTreeSelectValue(valueParam, {
          node: node,
          trigger: trigger
        });
        changeNodeInfo();
      };
      var clear = function clear(content) {
        var _props2$onClear;
        var defaultValue = props2.multiple ? [] : "";
        actived.value = [];
        change(defaultValue, null, "clear");
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, {
          e: content.e
        });
      };
      var treeNodeChange = function treeNodeChange(valueParam, context) {
        var current = valueParam;
        if (isObjectValue.value) {
          current = valueParam.map(getNodeItem);
        }
        change(current, context.node, "check");
      };
      var treeNodeActive = function treeNodeActive(valueParam, context) {
        if (!props2.multiple) {
          setInnerVisible(false, context);
        }
        if (props2.multiple || !context.node.actived) {
          return;
        }
        if (treeSelectValue.value === context.node.data[realValue.value]) {
          return;
        }
        var current = valueParam;
        if (isObjectValue.value) {
          var nodeValue = isEmpty(valueParam) ? "" : valueParam[0];
          current = getNodeItem(nodeValue);
        } else {
          current = isEmpty(valueParam) ? "" : valueParam[0];
        }
        change(current, context.node, "check");
        actived.value = valueParam;
      };
      var treeNodeExpand = function treeNodeExpand(valueParam) {
        expanded.value = valueParam;
      };
      var treeNodeLoad = function treeNodeLoad() {
        changeNodeInfo();
      };
      var inputChange = function inputChange(value2) {
        var _props2$onSearch2;
        if (!innerVisible.value) {
          var _props2$onSearch;
          (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 || _props2$onSearch.call(props2, String(value2));
          return;
        }
        setInnerInputValue(value2);
        (_props2$onSearch2 = props2.onSearch) === null || _props2$onSearch2 === void 0 || _props2$onSearch2.call(props2, String(value2));
      };
      var tagChange = function tagChange(value2, context) {
        var _props2$onRemove;
        var trigger = context.trigger,
          index = context.index;
        if (["tag-remove", "backspace"].includes(trigger)) {
          isArray$1(treeSelectValue.value) && treeSelectValue.value.splice(index, 1);
        }
        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 || _props2$onRemove.call(props2, {
          value: value2,
          data: null,
          e: context && context.e
        });
        change(treeSelectValue.value, null, trigger);
      };
      var handlePopupVisibleChange = function handlePopupVisibleChange(visible, context) {
        setInnerVisible(visible, context);
        if (visible && context.trigger === "trigger-element-click") setInnerInputValue("");
      };
      var changeNodeInfo = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
          return _regeneratorRuntime.wrap(function (_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                if (!props2.multiple) {
                  if (treeSelectValue.value || treeSelectValue.value === 0) {
                    nodeInfo.value = getSingleNodeInfo();
                  } else {
                    nodeInfo.value = "";
                  }
                } else if (props2.multiple) {
                  if (isArray$1(treeSelectValue.value)) {
                    nodeInfo.value = getMultipleNodeInfo();
                  } else {
                    nodeInfo.value = [];
                  }
                } else {
                  nodeInfo.value = null;
                }
              case 1:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        return function changeNodeInfo() {
          return _ref5.apply(this, arguments);
        };
      }();
      var getSingleNodeInfo = function getSingleNodeInfo() {
        var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;
        return getNodeItem(nodeValue);
      };
      var getMultipleNodeInfo = function getMultipleNodeInfo() {
        return treeSelectValue.value.map(function (value2) {
          var nodeValue = isObjectValue.value ? value2.value : value2;
          return getNodeItem(nodeValue);
        });
      };
      var getNodeItem = function getNodeItem(targetValue) {
        if (treeRef.value) {
          var node2 = treeRef.value.getItem(targetValue);
          if (node2) {
            return _objectSpread$14(_objectSpread$14({}, node2.data), {}, {
              label: node2.data[realLabel.value],
              value: node2.data[realValue.value]
            });
          }
        }
        var node = _getTreeNode(props2.data, targetValue);
        if (node) {
          return node;
        }
        return {
          label: targetValue,
          value: targetValue
        };
      };
      var _getTreeNode = function getTreeNode(data, targetValue) {
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          if (item[realValue.value] === targetValue) {
            return _objectSpread$14(_objectSpread$14({}, item), {}, {
              label: item[realLabel.value],
              value: item[realValue.value]
            });
          }
          if (item !== null && item !== void 0 && item[realChildren.value]) {
            var result = _getTreeNode(item === null || item === void 0 ? void 0 : item[realChildren.value], targetValue);
            if (!isNil(result)) {
              return result;
            }
          }
        }
        return null;
      };
      var treeRerender = function treeRerender() {
        treeKey.value += 1;
      };
      var renderTree = function renderTree() {
        return Vue.withDirectives(Vue.createVNode(Tree, Vue.mergeProps({
          "ref": treeRef,
          "key": treeKey.value,
          "value": _toConsumableArray(checked.value),
          "hover": true,
          "keys": props2.keys,
          "data": props2.data,
          "activable": !props2.multiple,
          "checkable": props2.multiple,
          "disabled": tDisabled.value || multiLimitDisabled.value,
          "size": props2.size,
          "filter": filterByText.value,
          "icon": !filterByText.value,
          "actived": actived.value,
          "expanded": expanded.value,
          "activeMultiple": props2.multiple,
          "onChange": treeNodeChange,
          "onActive": treeNodeActive,
          "onExpand": treeNodeExpand,
          "onLoad": treeNodeLoad,
          "expandOnClickNode": false
        }, props2.treeProps), {
          empty: function empty() {
            return renderDefaultTNode("empty", {
              defaultNode: Vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-select__empty")
              }, [globalConfig.value.empty])
            });
          }
        }), [[Vue.vShow, !props2.loading]]);
      };
      var renderSuffixIcon = function renderSuffixIcon() {
        return Vue.createVNode(FakeArrow, {
          "isActive": innerVisible.value,
          "disabled": props2.disabled,
          "overlayClassName": _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-fake-arrow--highlight"), innerVisible.value), "".concat(classPrefix.value, "-fake-arrow--disable"), props2.disabled)
        }, null);
      };
      expose({
        treeRef: treeRef
      });
      return function () {
        return Vue.createVNode(SelectInput, Vue.mergeProps({
          "class": "".concat(classPrefix.value, "-tree-select"),
          "value": nodeInfo.value,
          "inputValue": innerVisible.value ? innerInputValue.value : "",
          "popupVisible": innerVisible.value,
          "disabled": tDisabled.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "clearable": props2.clearable,
          "autoWidth": props2.autoWidth,
          "borderless": props2.borderless,
          "readonly": isReadonly.value,
          "placeholder": inputPlaceholder.value,
          "allowInput": props2.filterable || isFunction(props2.filter),
          "minCollapsedNum": props2.minCollapsedNum,
          "collapsed-items": props2.collapsedItems,
          "popupProps": _objectSpread$14({
            overlayClassName: popupClass.value
          }, props2.popupProps),
          "inputProps": _objectSpread$14({
            size: props2.size
          }, props2.inputProps),
          "tagInputProps": {
            size: props2.size
          },
          "tagProps": _objectSpread$14({
            maxWidth: 300
          }, props2.tagProps),
          "label": function label() {
            return renderTNodeJSX("prefixIcon");
          },
          "suffix": props2.suffix,
          "suffixIcon": function suffixIcon() {
            if (props2.suffixIcon || slots.suffixIcon) {
              return renderTNodeJSX("suffixIcon");
            }
            return renderSuffixIcon();
          },
          "onClear": clear,
          "onBlur": function onBlur(_, context) {
            var _props2$onBlur;
            (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
              value: treeSelectValue.value,
              e: context.e
            });
          },
          "onFocus": function onFocus(_, context) {
            var _props2$onFocus;
            (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
              value: treeSelectValue.value,
              e: context.e
            });
          },
          "valueDisplay": function valueDisplay() {
            return renderTNodeJSX("valueDisplay", {
              params: props2.multiple ? {
                value: nodeInfo.value,
                onClose: function onClose(index) {
                  var value2 = nodeInfo.value.map(function (node) {
                    return node.value;
                  });
                  tagChange(value2, {
                    trigger: "tag-remove",
                    index: index,
                    item: value2[index]
                  });
                }
              } : {
                value: nodeInfo.value || _defineProperty$2(_defineProperty$2({}, realLabel.value, ""), realValue.value, void 0)
              }
            });
          },
          "onInputChange": inputChange,
          "onTagChange": tagChange,
          "onPopupVisibleChange": handlePopupVisibleChange
        }, props2.selectInputProps), {
          suffix: slots.suffix,
          panel: function panel() {
            return Vue.createVNode("div", {
              "class": ["".concat(classPrefix.value, "-select__dropdown-inner"), "".concat(classPrefix.value, "-select__dropdown-inner--size-").concat(dropdownInnerSize.value)]
            }, [renderTNodeJSX("panelTopContent"), Vue.withDirectives(Vue.createVNode("p", {
              "class": ["".concat(classPrefix.value, "-select-loading-tips"), "".concat(classPrefix.value, "-select__right-icon-polyfill")]
            }, [renderDefaultTNode("loadingText", {
              defaultNode: Vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-select__empty")
              }, [globalConfig.value.loadingText])
            })]), [[Vue.vShow, props2.loading && !tDisabled.value]]), renderTree(), renderTNodeJSX("panelBottomContent")]);
          },
          collapsedItems: slots.collapsedItems
        });
      };
    }
  });

  var TreeSelect = withInstall$1(_TreeSelect);

  var props$y = {
    colorModes: {
      type: Array,
      "default": function _default() {
        return ["monochrome", "linear-gradient"];
      }
    },
    disabled: Boolean,
    enableAlpha: Boolean,
    enableMultipleGradient: {
      type: Boolean,
      "default": true
    },
    format: {
      type: String,
      "default": "RGB",
      validator: function validator(val) {
        if (!val) return true;
        return ["HEX", "HEX8", "RGB", "RGBA", "HSL", "HSLA", "HSV", "HSVA", "CMYK", "CSS"].includes(val);
      }
    },
    recentColors: {
      type: Array,
      "default": void 0
    },
    defaultRecentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showPrimaryColorPreview: {
      type: Boolean,
      "default": true
    },
    swatchColors: {
      type: Array
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onChange: Function,
    onPaletteBarChange: Function,
    onRecentColorsChange: Function
  };

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);
    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }
    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;
  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };
  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);
      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
        r = _cmyk2rgb.r,
        g = _cmyk2rgb.g,
        b = _cmyk2rgb.b;
      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }
    return input;
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "singleColor",
    "linear-gradient": "gradientColor"
  };
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];
  var ALPHA_FORMAT_MAP = {
    HEX: "HEX8",
    RGB: "RGBA",
    HSL: "HSLA",
    HSV: "HSVA"
  };
  var COLOR_FORMAT_INPUTS = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };
  var SATURATION_PANEL_DEFAULT_WIDTH = 230;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 168;
  var SLIDER_DEFAULT_WIDTH = 186;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 176;

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";
    for (var i = 0; i < regexpList.length; i++) {
      if (isString(regexpList[i])) {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }
    return new RegExp(source, flags);
  };
  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };
  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);
    if (!isNull(matchGradient)) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };
      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }
      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }
      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }
      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      while (!isNull(matchColorStop)) {
        stopResult = {
          color: matchColorStop[1]
        };
        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }
        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }
    return result;
  };
  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 315,
    "left top": 315,
    "top right": 45,
    "right top": 45,
    "bottom left": 225,
    "left bottom": 225,
    "bottom right": 135,
    "right bottom": 135
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);
    if (!match) return false;
    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);
    if (result.original.trim() !== match[1].trim()) return false;
    var points = result.colorStopList.map(function (_ref, index, array) {
      var color = _ref.color,
        position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinycolor(color).toRgbString();
      var left = parseFloat(position);
      if (Number.isNaN(left)) {
        left = index / (array.length - 1) * 100;
      }
      point.left = left;
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);
    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 180;
    }
    gradientColors.degree = degree;
    return gradientColors;
  };

  var _Color;
  function ownKeys$14(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$13(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$14(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$14(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var mathRound = Math.round;
  var hsv2rgba = function hsv2rgba(states) {
    return tinycolor(states).toRgb();
  };
  var hsv2hsva = function hsv2hsva(states) {
    return tinycolor(states).toHsv();
  };
  var hsv2hsla = function hsv2hsla(states) {
    return tinycolor(states).toHsl();
  };
  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
      degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color, id) {
    return {
      id: id || genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);
      _defineProperty$2(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });
      _defineProperty$2(this, "originColor", void 0);
      _defineProperty$2(this, "isGradient", void 0);
      _defineProperty$2(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });
      this.update(input);
    }
    return _createClass(Color, [{
      key: "update",
      value: function update(input) {
        var _this = this;
        if (input === this.originColor) return;
        var gradientColors = parseGradientString(input);
        if (this.isGradient && !gradientColors) {
          var colorHsv = tinycolor(input).toHsv();
          this.states = colorHsv;
          this.updateCurrentGradientColor();
          return;
        }
        this.originColor = input;
        this.isGradient = false;
        var colorInput = input;
        if (gradientColors) {
          var _points$, _this$gradientSelecte;
          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c, index) {
            var _this$gradientStates$;
            return genGradientPoint(c.left, c.color, (_this$gradientStates$ = _this.gradientStates.colors[index]) === null || _this$gradientStates$ === void 0 ? void 0 : _this$gradientStates$.id);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: this.gradientStates.selectedId || ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }
        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
          r = _hsv2rgba.r,
          g = _hsv2rgba.g,
          b = _hsv2rgba.b;
        return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
          r = _hsv2rgba2.r,
          g = _hsv2rgba2.g,
          b = _hsv2rgba2.b,
          a = _hsv2rgba2.a;
        return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
          h = _this$getHsva.h,
          s = _this$getHsva.s,
          v = _this$getHsva.v;
        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
          h = _this$getHsva2.h,
          s = _this$getHsva2.s,
          v = _this$getHsva2.v,
          a = _this$getHsva2.a;
        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
          h = _this$getHsla.h,
          s = _this$getHsla.s,
          l = _this$getHsla.l;
        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
          h = _this$getHsla2.h,
          s = _this$getHsla2.s,
          l = _this$getHsla2.l,
          a = _this$getHsla2.a;
        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinycolor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinycolor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
          c = _this$getCmyk.c,
          m = _this$getCmyk.m,
          y = _this$getCmyk.y,
          k = _this$getCmyk.k;
        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }
        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;
        if (id === this.gradientSelectedId) {
          return;
        }
        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css,
          HEX8: this.hex8
        };
      }
    }, {
      key: "getFormattedColor",
      value: function getFormattedColor(format, enableAlpha) {
        if (this.isGradient) return this.linearGradient;
        var finalFormat = enableAlpha && format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format] : format;
        return this.getFormatsColorMap()[finalFormat];
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
          gradientColors = this.gradientColors,
          gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;
        if (!isGradient || length === 0 || !current) {
          return false;
        }
        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });
        var newColor = _objectSpread$13(_objectSpread$13({}, current), {}, {
          color: this.rgba
        });
        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors.slice();
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinycolor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
          r = _hsv2rgba3.r,
          g = _hsv2rgba3.g,
          b = _hsv2rgba3.b,
          a = _hsv2rgba3.a;
        return {
          r: mathRound(r),
          g: mathRound(g),
          b: mathRound(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
          r = _this$getRgba.r,
          g = _this$getRgba.g,
          b = _this$getRgba.b;
        var _rgb2cmyk = rgb2cmyk(r, g, b),
          _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),
          c = _rgb2cmyk2[0],
          m = _rgb2cmyk2[1],
          y = _rgb2cmyk2[2],
          k = _rgb2cmyk2[3];
        return {
          c: mathRound(c * 100),
          m: mathRound(m * 100),
          y: mathRound(y * 100),
          k: mathRound(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
          h = _hsv2hsva.h,
          s = _hsv2hsva.s,
          v = _hsv2hsva.v,
          a = _hsv2hsva.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        v = mathRound(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
          h = _hsv2hsla.h,
          s = _hsv2hsla.s,
          l = _hsv2hsla.l,
          a = _hsv2hsla.a;
        h = mathRound(h);
        s = mathRound(s * 100);
        l = mathRound(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinycolor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }
        return tinycolor(color).isValid();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
            m = object.m,
            y = object.y,
            k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }
        if (format === "RGB" || format === "RGBA") {
          return tinycolor(object).toRgbString();
        }
        if (format === "HSL" || format === "HSLA") {
          return tinycolor(object).toHslString();
        }
        if (format === "HSV" || format === "HSVA") {
          return tinycolor(object).toHsvString();
        }
        return tinycolor(object).toHexString();
      }
    }]);
  }();
  _Color = Color;
  _defineProperty$2(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });
  _defineProperty$2(Color, "compare", function (color1, color2) {
    var isGradientColor1 = _Color.isGradientColor(color1);
    var isGradientColor2 = _Color.isGradientColor(color2);
    if (isGradientColor1 && isGradientColor2) {
      var gradientStr1 = parseGradientString(color1);
      var gradientStr2 = parseGradientString(color2);
      if (!gradientStr1 || !gradientStr2) return false;
      var gradientColor1 = gradientColors2string(gradientStr1);
      var gradientColor2 = gradientColors2string(gradientStr2);
      return gradientColor1 === gradientColor2;
    }
    if (!isGradientColor1 && !isGradientColor2) {
      return tinycolor.equals(color1, color2);
    }
    return false;
  });
  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }
    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      colorObject[key] = color[key];
    });
    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }
    return colorObject;
  };

  function ownKeys$13(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$12(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$13(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$13(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
  function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
  function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
  var defaultsOptions = {
    start: function start(coordinate, event) {},
    drag: function drag(coordinate, event) {},
    end: function end(coordinate, event) {}
  };
  var _Draggable_brand = /*#__PURE__*/new WeakSet();
  var Draggable = /*#__PURE__*/function () {
    function Draggable(el, options) {
      _classCallCheck(this, Draggable);
      _classPrivateMethodInitSpec(this, _Draggable_brand);
      _defineProperty$2(this, "dragging", false);
      _defineProperty$2(this, "$el", void 0);
      _defineProperty$2(this, "props", void 0);
      _defineProperty$2(this, "handles", void 0);
      this.$el = el;
      this.props = _objectSpread$12(_objectSpread$12({}, defaultsOptions), options);
      this.handles = {
        start: _assertClassBrand(_Draggable_brand, this, _dragStart).bind(this),
        drag: _assertClassBrand(_Draggable_brand, this, _drag).bind(this),
        end: _assertClassBrand(_Draggable_brand, this, _dragEnd).bind(this)
      };
      this.$el.addEventListener("mousedown", this.handles.start, false);
    }
    return _createClass(Draggable, [{
      key: "destroy",
      value: function destroy() {
        this.$el.removeEventListener("mousedown", this.handles.start, false);
        window.removeEventListener("mousemove", this.handles.drag, false);
        window.removeEventListener("mouseup", this.handles.end, false);
        window.removeEventListener("contextmenu", this.handles.end, false);
      }
    }]);
  }();
  function _dragStart(event) {
    if (this.dragging) {
      return;
    }
    window.addEventListener("mousemove", this.handles.drag, false);
    window.addEventListener("mouseup", this.handles.end, false);
    window.addEventListener("contextmenu", this.handles.end, false);
    this.dragging = true;
    this.props.start(_assertClassBrand(_Draggable_brand, this, _getCoordinate).call(this, event), event);
  }
  function _drag(event) {
    if (!this.dragging) {
      return;
    }
    this.props.drag(_assertClassBrand(_Draggable_brand, this, _getCoordinate).call(this, event), event);
  }
  function _dragEnd(event) {
    var _this = this;
    setTimeout(function () {
      _this.dragging = false;
      _this.props.end(_assertClassBrand(_Draggable_brand, _this, _getCoordinate).call(_this, event), event);
    }, 0);
    window.removeEventListener("mousemove", this.handles.drag, false);
    window.removeEventListener("mouseup", this.handles.end, false);
    window.removeEventListener("contextmenu", this.handles.end, false);
  }
  function _getCoordinate(event) {
    var rect = this.$el.getBoundingClientRect();
    var mouseEvent = event;
    var left = mouseEvent.clientX - rect.left;
    var top = mouseEvent.clientY - rect.top;
    return {
      y: Math.min(Math.max(0, top), rect.height),
      x: Math.min(Math.max(0, left), rect.width)
    };
  }

  var initColorFormat = function initColorFormat(format, enableAlpha) {
    if (enableAlpha && format in ALPHA_FORMAT_MAP) {
      return format in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[format] : format;
    }
    return format;
  };
  var getColorFormatMap = function getColorFormatMap(color, type) {
    if (type === "encode") {
      return {
        HSV: color.getHsva(),
        HSVA: color.getHsva(),
        HSL: color.getHsla(),
        HSLA: color.getHsla(),
        RGB: color.getRgba(),
        RGBA: color.getRgba(),
        CMYK: color.getCmyk(),
        CSS: {
          css: color.css
        },
        HEX: {
          hex: color.hex
        },
        HEX8: {
          hex: color.hex8
        }
      };
    }
    return color.getFormatsColorMap();
  };
  var getColorFormatOptions = function getColorFormatOptions(enableAlpha) {
    return enableAlpha ? FORMATS.map(function (item) {
      return item in ALPHA_FORMAT_MAP ? ALPHA_FORMAT_MAP[item] : item;
    }) : FORMATS;
  };
  var getColorFormatInputs = function getColorFormatInputs() {
    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "RGB";
    var enableAlpha = arguments.length > 1 ? arguments[1] : undefined;
    var finalFormat;
    if (enableAlpha) {
      finalFormat = Object.keys(ALPHA_FORMAT_MAP).find(function (key) {
        return key in ALPHA_FORMAT_MAP && ALPHA_FORMAT_MAP[key] === format;
      }) || format;
    } else {
      finalFormat = format;
    }
    if (!COLOR_FORMAT_INPUTS[finalFormat]) return [];
    var configs = _toConsumableArray(COLOR_FORMAT_INPUTS[finalFormat]);
    if (enableAlpha && format !== "CMYK") {
      configs.push({
        type: "inputNumber",
        key: "a",
        min: 0,
        max: 100,
        format: function format(value) {
          return "".concat(value, "%");
        },
        flex: 1.15
      });
    }
    return configs;
  };

  var BASE_COMPONENT_NAME = "color-picker";
  var useBaseClassName = function useBaseClassName(className) {
    var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
    return Vue.computed(function () {
      return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
    });
  };

  function ownKeys$12(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$11(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$12(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$12(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$k(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var PanelHeader = Vue.defineComponent({
    name: "PanelHeader",
    props: _objectSpread$11(_objectSpread$11({}, props$y), {}, {
      mode: {
        type: String,
        "default": "color"
      },
      togglePopup: {
        type: Function
      },
      onModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var _useConfig = useConfig("colorPicker"),
        globalConfig = _useConfig.globalConfig;
      var baseClassName = useBaseClassName();
      var modeValue = Vue.ref(props2.mode);
      var handleModeChange = function handleModeChange(v) {
        return props2.onModeChange(v);
      };
      Vue.watch(function () {
        return props2.mode;
      }, function (v) {
        return modeValue.value = v;
      });
      return function () {
        var _slot2;
        var _props2$colorModes;
        if (((_props2$colorModes = props2.colorModes) === null || _props2$colorModes === void 0 ? void 0 : _props2$colorModes.length) === 1) {
          return null;
        }
        return Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__head")
        }, [Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__mode")
        }, [Vue.createVNode(RadioGroup, {
          "variant": "default-filled",
          "size": "small",
          "modelValue": modeValue.value,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return modeValue.value = $event;
          },
          "onChange": handleModeChange
        }, _isSlot$k(_slot2 = Object.keys(COLOR_MODES).map(function (key) {
          var _slot;
          return Vue.createVNode(RadioButton, {
            "key": key,
            "value": key
          }, _isSlot$k(_slot = Reflect.get(globalConfig.value, COLOR_MODES[key])) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        })) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        })])]);
      };
    }
  });

  var baseProps = {
    disabled: Boolean,
    color: {
      type: Object
    },
    onChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  };

  function ownKeys$11(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$10(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$11(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$11(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DELETE_KEYS = ["delete", "backspace"];
  var LinearGradient = Vue.defineComponent({
    name: "LinearGradient",
    inheritAttrs: false,
    props: _objectSpread$10(_objectSpread$10({}, baseProps), {}, {
      enableMultipleGradient: {
        type: Boolean,
        "default": true
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var statusClassNames = STATUS.value;
      var refSlider = Vue.ref(null);
      var sliderRect = Vue.reactive({
        left: 0,
        width: GRADIENT_SLIDER_DEFAULT_WIDTH
      });
      var isDragging = Vue.ref(false);
      var isMoved = Vue.ref(false);
      var degree = Vue.ref(props.color.gradientDegree);
      var selectedId = Vue.ref(props.color.gradientSelectedId);
      var colors = Vue.ref(cloneDeep(props.color.gradientColors));
      Vue.watch(function () {
        return props.color.gradientDegree;
      }, function (value) {
        return degree.value = value;
      });
      Vue.watch(function () {
        return props.color.gradientSelectedId;
      }, function (value) {
        return selectedId.value = value;
      });
      Vue.watch(function () {
        return props.color.gradientColors;
      }, function (value) {
        colors.value = cloneDeep(value);
      }, {
        deep: true
      });
      var handleChange = function handleChange(key, payload, addUsedColor) {
        if (props.disabled) {
          return;
        }
        props.onChange({
          key: key,
          payload: payload,
          addUsedColor: addUsedColor
        });
      };
      var handleDegreeChange = function handleDegreeChange(value) {
        if (props.disabled || value === props.color.gradientDegree) {
          return;
        }
        degree.value = value;
        handleChange("degree", value, true);
      };
      var handleSelectedIdChange = function handleSelectedIdChange(value) {
        if (props.disabled) {
          return;
        }
        selectedId.value = value;
        handleChange("selectedId", value);
      };
      var handleColorsChange = function handleColorsChange(value, isEnded) {
        if (props.disabled) {
          return;
        }
        colors.value = value;
        handleChange("colors", value, isEnded);
      };
      var updateActiveThumbLeft = function updateActiveThumbLeft(left) {
        var index = colors.value.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        if (index === -1) {
          return;
        }
        var point = colors.value[index];
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        colors.value.splice(index, 1, {
          color: point.color,
          left: percentLeft,
          id: point.id
        });
        handleColorsChange(colors.value);
      };
      var handleStart = function handleStart(id) {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
        if (isDragging.value || props.disabled) {
          return;
        }
        isMoved.value = false;
        isDragging.value = true;
        handleSelectedIdChange(id);
        refSlider.value.focus();
        window.addEventListener("mousemove", handleMove, false);
        window.addEventListener("mouseup", _handleEnd, false);
        window.addEventListener("contextmenu", _handleEnd, false);
      };
      var handleMove = function handleMove(e) {
        if (!isDragging.value || props.disabled) {
          return;
        }
        var left = e.clientX - sliderRect.left;
        isMoved.value = true;
        updateActiveThumbLeft(left);
      };
      var _handleEnd = function handleEnd() {
        if (!isDragging.value) {
          return;
        }
        setTimeout(function () {
          isDragging.value = false;
        }, 0);
        if (isMoved.value) {
          handleColorsChange(colors.value, true);
          isMoved.value = false;
        }
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", _handleEnd, false);
        window.removeEventListener("contextmenu", _handleEnd, false);
      };
      var handleKeyup = function handleKeyup(e) {
        if (props.disabled) {
          return;
        }
        var points = colors.value;
        var pos = points.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        var length = points.length;
        if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
          points.splice(pos, 1);
          if (!points[pos]) {
            pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
          }
          var current = points[pos];
          handleColorsChange(points, true);
          handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
        }
      };
      var handleThumbBarClick = function handleThumbBarClick(e) {
        if (props.disabled || !props.enableMultipleGradient) {
          return;
        }
        var left = e.offsetX;
        var percentLeft = left / sliderRect.width * 100;
        var newPoint = genGradientPoint(percentLeft, props.color.rgba);
        colors.value.push(newPoint);
        handleColorsChange(colors.value, true);
        handleSelectedIdChange(newPoint.id);
      };
      Vue.onMounted(function () {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
      });
      Vue.onBeforeUnmount(function () {
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", _handleEnd, false);
        window.removeEventListener("contextmenu", _handleEnd, false);
      });
      return function () {
        var _props$color = props.color,
          linearGradient = _props$color.linearGradient,
          gradientColors = _props$color.gradientColors;
        var thumbBackground = gradientColors2string({
          points: gradientColors,
          degree: 90
        });
        return Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__gradient")
        }, [Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__gradient-slider")
        }, [Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__slider"), "".concat(baseClassName.value, "--bg-alpha")],
          "onKeyup": handleKeyup,
          "tabindex": 0,
          "ref": refSlider
        }, [Vue.createVNode("ul", {
          "class": "gradient-thumbs",
          "onClick": handleThumbBarClick,
          "style": {
            background: thumbBackground
          }
        }, [colors.value.map(function (t) {
          var left = "".concat(Math.round(t.left * 100) / 100, "%");
          return Vue.createVNode("li", {
            "class": ["".concat(baseClassName.value, "__thumb"), "gradient-thumbs__item", selectedId.value === t.id ? statusClassNames.active : ""],
            "key": t.id,
            "title": "".concat(t.color, " ").concat(left),
            "style": {
              color: t.color,
              left: left
            },
            "onClick": function onClick(e) {
              return e.stopPropagation();
            },
            "onMousedown": function onMousedown() {
              return handleStart(t.id);
            }
          }, [Vue.createVNode("span", {
            "class": ["gradient-thumbs__item-inner", "".concat(baseClassName.value, "--bg-alpha")]
          }, null)]);
        })])])]), Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__gradient-degree"),
          "title": "".concat(degree.value, "deg")
        }, [Vue.createVNode(InputNumber, {
          "size": "small",
          "theme": "normal",
          "min": 0,
          "max": 360,
          "step": 1,
          "format": function format(value) {
            return "".concat(value, "\xB0");
          },
          "modelValue": degree.value,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return degree.value = $event;
          },
          "onBlur": handleDegreeChange,
          "onEnter": handleDegreeChange,
          "disabled": props.disabled
        }, null)]), Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__gradient-preview"), "".concat(baseClassName.value, "--bg-alpha")]
        }, [Vue.createVNode("span", {
          "class": "preview-inner",
          "style": {
            background: linearGradient
          }
        }, null)])]);
      };
    }
  });

  var SaturationPanel = Vue.defineComponent({
    name: "SaturationPanel",
    props: baseProps,
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = Vue.ref(null);
      var refThumb = Vue.ref(null);
      var dragInstance = Vue.ref(null);
      var panelRect = Vue.reactive({
        width: SATURATION_PANEL_DEFAULT_WIDTH,
        height: SATURATION_PANEL_DEFAULT_HEIGHT
      });
      var styles = Vue.computed(function () {
        var _props$color = props.color,
          saturation = _props$color.saturation,
          value = _props$color.value;
        var width = panelRect.width,
          height = panelRect.height;
        var top = Math.round((1 - value) * height);
        var left = Math.round(saturation * width);
        return {
          color: props.color.rgb,
          left: "".concat(left, "px"),
          top: "".concat(top, "px")
        };
      });
      var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
        var width = panelRect.width,
          height = panelRect.height;
        var x = coordinate.x,
          y = coordinate.y;
        var saturation = Math.round(x / width * 100);
        var value = Math.round((1 - y / height) * 100);
        return {
          saturation: saturation,
          value: value
        };
      };
      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }
        var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
          saturation = _getSaturationAndValu.saturation,
          value = _getSaturationAndValu.value;
        props.onChange({
          saturation: saturation / 100,
          value: value / 100,
          addUsedColor: isEnded
        });
      };
      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }
        Vue.nextTick(function () {
          handleDrag(coordinate, true);
        });
      };
      var panelBackground = Vue.computed(function () {
        return "hsl(".concat(props.color.hue, ", 100%, 50%)");
      });
      Vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
        panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
            panelRect.height = refPanel.value.offsetHeight;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      Vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return function () {
        return Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__saturation")],
          "ref": refPanel,
          "style": {
            background: panelBackground.value
          }
        }, [Vue.createVNode("span", {
          "class": ["".concat(baseClassName.value, "__thumb")],
          "role": "slider",
          "tabindex": 0,
          "ref": refThumb,
          "style": styles.value
        }, null)]);
      };
    }
  });

  function ownKeys$10(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$$(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$10(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$10(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColorSlider = Vue.defineComponent({
    name: "ColorSlider",
    props: _objectSpread$$(_objectSpread$$({}, baseProps), {}, {
      className: {
        type: String,
        "default": ""
      },
      value: {
        type: Number,
        "default": 0
      },
      maxValue: {
        type: Number,
        "default": 360
      },
      railStyle: {
        type: Object
      },
      type: {
        type: String,
        "default": "hue"
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = Vue.ref(null);
      var refThumb = Vue.ref(null);
      var dragInstance = Vue.ref(null);
      var panelRect = Vue.reactive({
        width: SLIDER_DEFAULT_WIDTH
      });
      var styles = Vue.computed(function () {
        var width = panelRect.width;
        if (!width) {
          return;
        }
        var left = Math.round(props.value / props.maxValue * 100);
        var color = props.type === "hue" ? "hsl(".concat(props.color.hue, ", 100%, 50%)") : props.color.rgba;
        return {
          left: "".concat(left, "%"),
          color: color
        };
      });
      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }
        var width = panelRect.width;
        var x = coordinate.x;
        var value = Math.round(x / width * props.maxValue * 100) / 100;
        props.onChange(value, isEnded);
      };
      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }
        handleDrag(coordinate, true);
      };
      Vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      Vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return function () {
        var paddingStyle = {
          background: "linear-gradient(90deg, rgba(0,0,0,.0) 0%, rgba(0,0,0,.0) 93%, ".concat(props.color.rgb, " 93%, ").concat(props.color.rgb, " 100%)")
        };
        return Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__slider-wrapper"), "".concat(baseClassName.value, "__slider-wrapper--").concat(props.type, "-type")]
        }, [props.type === "alpha" && Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__slider-padding"),
          "style": paddingStyle
        }, null), Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__slider"), props.className],
          "ref": refPanel
        }, [Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__rail"),
          "style": props.railStyle
        }, null), Vue.createVNode("span", {
          "class": ["".concat(baseClassName.value, "__thumb")],
          "role": "slider",
          "tabindex": 0,
          "ref": refThumb,
          "style": styles.value
        }, null)])]);
      };
    }
  });

  var HueSlider = Vue.defineComponent({
    name: "HueSlider",
    inheritAttrs: false,
    props: baseProps,
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      return function () {
        return Vue.createVNode(ColorSlider, {
          "class": "".concat(baseClassName.value, "__hue"),
          "color": props.color,
          "value": props.color.hue,
          "onChange": props.onChange,
          "disabled": props.disabled,
          "type": "hue"
        }, null);
      };
    }
  });

  var AlphaSlider = Vue.defineComponent({
    name: "AlphaSlider",
    inheritAttrs: false,
    props: {
      color: {
        type: Object
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      onChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var handleChange = function handleChange(v, isDragEnd) {
        props.onChange(v / 100, isDragEnd);
      };
      var railStyle = Vue.computed(function () {
        return {
          background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
        };
      });
      return function () {
        return Vue.createVNode(ColorSlider, {
          "class": ["".concat(baseClassName.value, "__alpha"), "".concat(baseClassName.value, "--bg-alpha")],
          "color": props.color,
          "value": props.color.alpha * 100,
          "onChange": handleChange,
          "rail-style": railStyle.value,
          "max-value": 100,
          "disabled": props.disabled,
          "type": "alpha"
        }, null);
      };
    }
  });

  var props$x = {
    borderless: Boolean,
    clearable: Boolean,
    colorModes: {
      type: Array,
      "default": function _default() {
        return ["monochrome", "linear-gradient"];
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    enableAlpha: Boolean,
    enableMultipleGradient: {
      type: Boolean,
      "default": true
    },
    format: {
      type: String,
      "default": "RGB",
      validator: function validator(val) {
        if (!val) return true;
        return ["HEX", "HEX8", "RGB", "RGBA", "HSL", "HSLA", "HSV", "HSVA", "CMYK", "CSS"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    popupProps: {
      type: Object
    },
    recentColors: {
      type: Array,
      "default": void 0
    },
    defaultRecentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    selectInputProps: {
      type: Object
    },
    showPrimaryColorPreview: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    swatchColors: {
      type: Array,
      "default": void 0
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onChange: Function,
    onClear: Function,
    onPaletteBarChange: Function,
    onRecentColorsChange: Function
  };

  function ownKeys$$(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$_(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$$(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$$(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var FormatInputs = Vue.defineComponent({
    name: "FormatInputs",
    inheritAttrs: false,
    props: _objectSpread$_(_objectSpread$_({}, props$x), {}, {
      color: {
        type: Object
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var modelValue = Vue.reactive({});
      var lastModelValue = Vue.reactive({});
      var updateModelValue = function updateModelValue() {
        var format = props2.format,
          color = props2.color;
        if (!color) return;
        var values = getColorFormatMap(color, "encode")[format];
        values.a = Math.round(color.alpha * 100);
        Object.keys(values).forEach(function (key) {
          modelValue[key] = values[key];
          lastModelValue[key] = values[key];
        });
      };
      updateModelValue();
      var throttleUpdate = throttle$1(updateModelValue, 100);
      Vue.watch(function () {
        var _props2$color = props2.color,
          saturation = _props2$color.saturation,
          hue = _props2$color.hue,
          value = _props2$color.value,
          alpha = _props2$color.alpha;
        return [saturation, hue, value, alpha, props2.format];
      }, throttleUpdate);
      var handleChange = function handleChange(key, v) {
        if (v === lastModelValue[key]) return;
        if (key === "a") {
          props2.color.alpha = v / 100;
        } else if (key === "hex" || key === "css") {
          props2.color.update(v);
        } else {
          props2.color.update(Color.object2color(modelValue, props2.format));
        }
        var value = getColorFormatMap(props2.color, "decode")[props2.format];
        props2.onInputChange(value, props2.color.alpha, key, v);
      };
      return function () {
        var inputProps = _objectSpread$_({}, props2.inputProps || {});
        return Vue.createVNode("div", {
          "class": "input-group"
        }, [getColorFormatInputs(props2.format, props2.enableAlpha).map(function (config) {
          return Vue.createVNode("div", {
            "class": "input-group__item",
            "key": config.key,
            "style": {
              flex: config.flex || 1
            }
          }, [config.type === "input" ? Vue.createVNode(Input, Vue.mergeProps(inputProps, {
            "align": "center",
            "size": "small",
            "disabled": props2.disabled,
            "modelValue": modelValue[config.key],
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return modelValue[config.key] = $event;
            },
            "maxlength": props2.format === "HEX" ? 9 : void 0,
            "title": modelValue[config.key],
            "onBlur": function onBlur(v) {
              return handleChange(config.key, v);
            },
            "onEnter": function onEnter(v) {
              return handleChange(config.key, v);
            }
          }), null) : Vue.createVNode(InputNumber, Vue.mergeProps(inputProps, {
            "align": "center",
            "size": "small",
            "disabled": props2.disabled,
            "modelValue": modelValue[config.key],
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return modelValue[config.key] = $event;
            },
            "title": modelValue[config.key],
            "min": config.min,
            "max": config.max,
            "step": 1,
            "format": config.format,
            "theme": "normal",
            "onBlur": function onBlur(v) {
              return handleChange(config.key, v);
            },
            "onEnter": function onEnter(v) {
              return handleChange(config.key, v);
            }
          }), null)]);
        })]);
      };
    }
  });

  function ownKeys$_(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$_(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$_(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$j(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var FormatPanel = Vue.defineComponent({
    name: "FormatPanel",
    inheritAttrs: false,
    props: _objectSpread$Z(_objectSpread$Z({}, props$x), {}, {
      color: {
        type: Object
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var formatModel = Vue.ref(props2.format);
      Vue.watch(function () {
        return [props2.format];
      }, function () {
        return formatModel.value = props2.format;
      });
      var handleModeChange = function handleModeChange(v) {
        formatModel.value = v;
      };
      return function () {
        var _slot;
        var newProps = _objectSpread$Z(_objectSpread$Z({}, props2), {}, {
          format: formatModel.value
        });
        var selectInputProps = _objectSpread$Z({}, props2.selectInputProps || {});
        return Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__format")
        }, [Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__format--item")
        }, [Vue.createVNode(Select, {
          "size": "small",
          "class": "".concat(baseClassName.value, "__format-mode-select"),
          "selectInputProps": _objectSpread$Z({}, selectInputProps),
          "popupProps": _objectSpread$Z({
            overlayClassName: "".concat(baseClassName.value, "__select-options")
          }, selectInputProps.popupProps),
          "modelValue": formatModel.value,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return formatModel.value = $event;
          },
          "onChange": handleModeChange
        }, _isSlot$j(_slot = getColorFormatOptions(props2.enableAlpha).map(function (item) {
          return Vue.createVNode(Option, {
            "key": item,
            "value": item,
            "label": item,
            "style": {
              fontSize: "12px"
            }
          }, null);
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]), Vue.createVNode("div", {
          "class": "".concat(baseClassName.value, "__format--item")
        }, [Vue.createVNode(FormatInputs, newProps, null)])]);
      };
    }
  });

  function ownKeys$Z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var SwatchesPanel = Vue.defineComponent({
    name: "SwatchesPanel",
    props: _objectSpread$Y(_objectSpread$Y({}, baseProps), {}, {
      colors: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      title: {
        type: String,
        "default": "\u7CFB\u7EDF\u8272\u5F69"
      },
      editable: {
        type: Boolean,
        "default": false
      },
      onSetColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      handleAddColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var _useGlobalIcon = useGlobalIcon({
          DeleteIcon: TdDeleteIcon,
          AddIcon: TdAddIcon
        }),
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        AddIcon = _useGlobalIcon.AddIcon;
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var statusClassNames = STATUS.value;
      var visiblePopConfirm = Vue.ref(false);
      var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
        visiblePopConfirm.value = visible;
      };
      var handleClick = function handleClick(color) {
        return props.onSetColor(color);
      };
      var isEqualCurrentColor = function isEqualCurrentColor(color) {
        return Color.compare(color, props.color.css);
      };
      var selectedColorIndex = Vue.computed(function () {
        return props.colors.findIndex(function (color) {
          return isEqualCurrentColor(color);
        });
      });
      var handleRemoveColor = function handleRemoveColor() {
        var colors = props.colors;
        var selectedIndex = selectedColorIndex.value;
        if (selectedIndex === -1) return;
        colors.splice(selectedIndex, 1);
        props.onChange(colors);
        setVisiblePopConfirm(false);
      };
      return function () {
        var swatchesClass = "".concat(baseClassName.value, "__swatches");
        var renderActions = function renderActions() {
          if (!props.editable) {
            return null;
          }
          return Vue.createVNode("div", {
            "class": "".concat(swatchesClass, "--actions")
          }, [Vue.createVNode("span", {
            "role": "button",
            "class": "".concat(baseClassName.value, "__icon"),
            "onClick": function onClick() {
              return props.handleAddColor();
            }
          }, [Vue.createVNode(AddIcon, null, null)]), props.colors.length > 0 ? Vue.createVNode("span", {
            "role": "button",
            "class": "".concat(baseClassName.value, "__icon"),
            "onClick": function onClick() {
              return handleRemoveColor();
            }
          }, [Vue.createVNode(DeleteIcon, null, null)]) : null]);
        };
        return Vue.createVNode("div", {
          "class": swatchesClass
        }, [Vue.createVNode("h3", {
          "class": "".concat(swatchesClass, "--title")
        }, [Vue.createVNode("span", null, [props.title]), renderActions()]), Vue.createVNode("ul", {
          "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
        }, [props.colors.map(function (color) {
          return Vue.createVNode("li", {
            "class": ["".concat(swatchesClass, "--item"), isEqualCurrentColor(color) && props.editable ? statusClassNames.active : ""],
            "title": color,
            "key": color,
            "onClick": function onClick() {
              if (props.disabled) {
                return;
              }
              handleClick(color);
            }
          }, [Vue.createVNode("div", {
            "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName.value, "--bg-alpha")]
          }, [Vue.createVNode("span", {
            "class": "".concat(swatchesClass, "--inner"),
            "style": {
              background: color
            }
          }, null)])]);
        })])]);
      };
    }
  });

  function ownKeys$Y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$X(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColorPanel = Vue.defineComponent({
    name: "ColorPanel",
    props: _objectSpread$X(_objectSpread$X({}, props$y), {}, {
      togglePopup: {
        type: Function
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var _useConfig = useConfig("colorPicker"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var statusClassNames = STATUS.value;
      var _toRefs = Vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue,
        recentColors = _toRefs.recentColors;
      var _useVModel = useVModel$1(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerRecentColors = _useDefaultValue2[0],
        setInnerRecentColors = _useDefaultValue2[1];
      var getModeByColor = function getModeByColor(input) {
        if (props2.colorModes.length === 1) return props2.colorModes[0];
        return props2.colorModes.includes("linear-gradient") && Color.isGradientColor(input) ? "linear-gradient" : "monochrome";
      };
      var mode = Vue.ref(getModeByColor(innerValue.value));
      var isGradient = Vue.computed(function () {
        return mode.value === "linear-gradient";
      });
      var defaultEmptyColor = Vue.computed(function () {
        return isGradient.value ? DEFAULT_LINEAR_GRADIENT : DEFAULT_COLOR;
      });
      var color = Vue.ref(new Color(innerValue.value || defaultEmptyColor.value));
      var formatModel = Vue.ref(initColorFormat(props2.format, props2.enableAlpha));
      var addRecentlyUsedColor = function addRecentlyUsedColor() {
        if (innerRecentColors.value === null || innerRecentColors.value === false) {
          return;
        }
        var colors = cloneDeep(innerRecentColors.value) || [];
        var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
        var index = colors.indexOf(currentColor);
        if (index > -1) {
          colors.splice(index, 1);
        }
        colors.unshift(currentColor);
        if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
          colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
        }
        handleRecentlyUsedColorsChange(colors);
      };
      var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
        setInnerRecentColors(colors);
      };
      var emitColorChange = function emitColorChange(trigger) {
        var value = color.value.getFormattedColor(props2.format, props2.enableAlpha);
        setInnerValue(value, {
          color: getColorObject(color.value),
          trigger: trigger || "palette-saturation-brightness"
        });
      };
      Vue.watch(function () {
        return innerValue.value;
      }, function (newColor) {
        var newMode = getModeByColor(newColor);
        mode.value = newMode;
        color.value.isGradient = newMode === "linear-gradient";
        var currentColor = color.value.getFormattedColor(props2.format, props2.enableAlpha);
        if (currentColor !== newColor) {
          color.value.update(newColor);
        }
      });
      var handleModeChange = function handleModeChange(newMode) {
        mode.value = newMode;
        var isGradientMode = newMode === "linear-gradient";
        color.value.isGradient = isGradientMode;
        if (isGradientMode) {
          color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
        } else {
          color.value.update(color.value.rgba);
        }
        emitColorChange();
      };
      var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
        var saturation = _ref.saturation,
          value = _ref.value;
        var _color$value = color.value,
          sat = _color$value.saturation,
          val = _color$value.value;
        var changeTrigger = "palette-saturation-brightness";
        if (value !== val && saturation !== sat) {
          color.value.saturation = saturation;
          color.value.value = value;
          changeTrigger = "palette-saturation-brightness";
        } else if (saturation !== sat) {
          color.value.saturation = saturation;
          changeTrigger = "palette-saturation";
        } else if (value !== val) {
          color.value.value = value;
          changeTrigger = "palette-brightness";
        } else {
          return;
        }
        emitColorChange(changeTrigger);
      };
      var handleHueChange = function handleHueChange(hue) {
        var _props2$onPaletteBarC;
        color.value.hue = hue;
        emitColorChange("palette-hue-bar");
        (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 || _props2$onPaletteBarC.call(props2, {
          color: getColorObject(color.value)
        });
      };
      var handleAlphaChange = function handleAlphaChange(alpha) {
        color.value.alpha = alpha;
        emitColorChange("palette-alpha-bar");
      };
      var handleInputChange = function handleInputChange(input, alpha) {
        color.value.update(input);
        color.value.alpha = alpha;
        emitColorChange("input");
      };
      var handleGradientChange = function handleGradientChange(_ref2) {
        var key = _ref2.key,
          payload = _ref2.payload;
        var trigger = "palette-saturation-brightness";
        switch (key) {
          case "degree":
            color.value.gradientDegree = payload;
            trigger = "input";
            break;
          case "selectedId":
            color.value.gradientSelectedId = payload;
            break;
          case "colors":
            color.value.gradientColors = payload;
            break;
        }
        emitColorChange(trigger);
      };
      var handleSetColor = function handleSetColor(value, trigger) {
        var newMode = getModeByColor(value);
        mode.value = newMode;
        color.value.isGradient = newMode === "linear-gradient";
        color.value.update(value);
        emitColorChange(trigger);
      };
      return function () {
        var baseProps = {
          color: color.value,
          disabled: props2.disabled
        };
        var onlySupportGradient = props2.colorModes.length === 1 && props2.colorModes.includes("linear-gradient");
        var recentColors2 = innerRecentColors.value;
        if (onlySupportGradient && Array.isArray(recentColors2)) {
          recentColors2 = recentColors2.filter(function (color2) {
            return Color.isGradientColor(color2);
          });
        }
        var showUsedColors = !!Array.isArray(recentColors2);
        var systemColors = props2.swatchColors;
        if (isUndefined(systemColors)) {
          systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
        }
        if (isNull(systemColors)) {
          systemColors = [];
        }
        if (onlySupportGradient) {
          systemColors = systemColors.filter(function (color2) {
            return Color.isGradientColor(color2);
          });
        }
        var showSystemColors = Array.isArray(systemColors) && systemColors.length;
        var renderSwatches = function renderSwatches() {
          if (!showSystemColors && !showUsedColors) return null;
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
            "class": "".concat(baseClassName.value, "__swatches-wrap")
          }, [showUsedColors ? Vue.createVNode(SwatchesPanel, Vue.mergeProps(baseProps, {
            "title": t(globalConfig.value.recentColorTitle),
            "editable": true,
            "colors": recentColors2,
            "handleAddColor": addRecentlyUsedColor,
            "onSetColor": function onSetColor(color2) {
              return handleSetColor(color2, "recent");
            },
            "onChange": handleRecentlyUsedColorsChange
          }), null) : null, showSystemColors ? Vue.createVNode(SwatchesPanel, Vue.mergeProps(baseProps, {
            "title": t(globalConfig.value.swatchColorTitle),
            "colors": systemColors,
            "onSetColor": function onSetColor(color2) {
              return handleSetColor(color2, "preset");
            }
          }), null) : null])]);
        };
        return Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__panel"), props2.disabled ? statusClassNames.disabled : false]
        }, [Vue.createVNode(PanelHeader, Vue.mergeProps(props2, {
          "mode": mode.value,
          "onModeChange": handleModeChange
        }), null), Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__body")]
        }, [isGradient.value ? Vue.createVNode(LinearGradient, Vue.mergeProps(baseProps, {
          "onChange": handleGradientChange,
          "enableMultipleGradient": props2.enableMultipleGradient
        }), null) : null, Vue.createVNode(SaturationPanel, Vue.mergeProps(baseProps, {
          "onChange": handleSatAndValueChange
        }), null), Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__sliders-wrapper")]
        }, [Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__sliders")]
        }, [Vue.createVNode(HueSlider, Vue.mergeProps(baseProps, {
          "onChange": handleHueChange
        }), null), props2.enableAlpha ? Vue.createVNode(AlphaSlider, Vue.mergeProps(baseProps, {
          "onChange": handleAlphaChange
        }), null) : null]), props2.showPrimaryColorPreview ? Vue.createVNode("div", {
          "class": ["".concat(baseClassName.value, "__sliders-preview"), "".concat(baseClassName.value, "--bg-alpha")]
        }, [Vue.createVNode("span", {
          "class": "".concat(baseClassName.value, "__sliders-preview-inner"),
          "style": {
            background: isGradient.value ? color.value.linearGradient : color.value.rgba
          }
        }, null)]) : null]), Vue.createVNode(FormatPanel, Vue.mergeProps(props2, {
          "color": color.value,
          "format": formatModel.value,
          "onInputChange": handleInputChange
        }), null), renderSwatches()])]);
      };
    }
  });

  function ownKeys$X(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$W(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$X(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$X(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _ColorPickerPanel = Vue.defineComponent({
    name: "TColorPickerPanel",
    inheritAttrs: false,
    props: props$y,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var newProps = Vue.computed(function () {
        return pickBy(_objectSpread$W(_objectSpread$W({}, props2), attrs), function (v) {
          return v !== void 0;
        });
      });
      var prefix = usePrefixClass();
      return function () {
        return Vue.createVNode(ColorPanel, Vue.mergeProps(newProps.value, {
          "popupProps": null,
          "class": "".concat(prefix.value, "-is-inline")
        }), null);
      };
    }
  });

  var DefaultTrigger = Vue.defineComponent({
    name: "DefaultTrigger",
    inheritAttrs: false,
    props: {
      color: {
        type: String,
        "default": ""
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      borderless: {
        type: Boolean,
        "default": false
      },
      clearable: {
        type: Boolean,
        "default": false
      },
      inputProps: {
        type: Object,
        "default": function _default() {
          return {
            autoWidth: true
          };
        }
      },
      onTriggerChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      onTriggerClear: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      size: {
        type: String,
        "default": "medium"
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var value = Vue.ref(props.color);
      var _useCommonClassName = useCommonClassName$1(),
        sizeClassNames = _useCommonClassName.SIZE;
      Vue.watch(function () {
        return [props.color];
      }, function () {
        return value.value = props.color;
      });
      var handleChange = function handleChange(input) {
        if (input !== props.color) {
          props.onTriggerChange(value.value, {
            color: getColorObject(new Color(input)),
            trigger: "input"
          });
        }
      };
      var handleClear = function handleClear(context) {
        var _props$onTriggerClear;
        return (_props$onTriggerClear = props.onTriggerClear) === null || _props$onTriggerClear === void 0 ? void 0 : _props$onTriggerClear.call(props, context);
      };
      return function () {
        var inputSlots = {
          label: function label() {
            return Vue.createVNode("div", {
              "class": ["".concat(baseClassName.value, "__trigger--default__color"), "".concat(baseClassName.value, "--bg-alpha")]
            }, [Vue.createVNode("span", {
              "class": ["color-inner", _defineProperty$2({}, sizeClassNames.value[props.size], props.size !== "medium")],
              "style": {
                background: value.value
              }
            }, null)]);
          }
        };
        return Vue.createVNode(Input, Vue.mergeProps({
          "borderless": props.borderless,
          "clearable": props.clearable,
          "size": props.size,
          "modelValue": value.value,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return value.value = $event;
          },
          "disabled": props.disabled,
          "onBlur": handleChange,
          "onChange": handleChange,
          "onClear": handleClear
        }, props.inputProps), inputSlots);
      };
    }
  });

  function ownKeys$W(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$V(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$W(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$W(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _ColorPicker = Vue.defineComponent({
    name: "TColorPicker",
    props: props$x,
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var renderTNodeJSXDefault = useTNodeDefault();
      var visible = Vue.ref(false);
      var setVisible = function setVisible(value) {
        return visible.value = value;
      };
      var _toRefs = Vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue,
        recentColors = _toRefs.recentColors;
      var _useVModel = useVModel$1(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];
      var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerRecentColors = _useDefaultValue2[0],
        setInnerRecentColors = _useDefaultValue2[1];
      var refTrigger = Vue.ref();
      var handleClear = function handleClear(context) {
        var _props2$onClear;
        return (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
      };
      var renderPopupContent = function renderPopupContent() {
        if (props2.disabled) {
          return null;
        }
        return Vue.createVNode(ColorPanel, Vue.mergeProps(_objectSpread$V(_objectSpread$V({}, props2), {}, {
          onChange: setInnerValue,
          onRecentColorsChange: setInnerRecentColors
        }), {
          "value": innerValue.value,
          "recentColors": innerRecentColors.value
        }), null);
      };
      return function () {
        var popProps = _objectSpread$V(_objectSpread$V({
          placement: "bottom-left"
        }, props2.popupProps || {}), {}, {
          trigger: "click",
          attach: "body",
          overlayClassName: [baseClassName.value],
          visible: visible.value,
          overlayInnerStyle: {
            padding: 0
          },
          onVisibleChange: function onVisibleChange(visible2, context) {
            if (context.trigger === "document") {
              setVisible(false);
            }
          }
        });
        return Vue.createVNode(Popup, Vue.mergeProps(popProps, {
          "content": renderPopupContent
        }), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(baseClassName.value, "__trigger"),
              "onClick": function onClick() {
                return setVisible(!visible.value);
              },
              "ref": refTrigger
            }, [renderTNodeJSXDefault("default", Vue.createVNode(DefaultTrigger, {
              "borderless": props2.borderless,
              "color": innerValue.value,
              "disabled": props2.disabled,
              "clearable": props2.clearable,
              "input-props": props2.inputProps,
              "onTriggerChange": setInnerValue,
              "onTriggerClear": handleClear,
              "size": props2.size
            }, null))])];
          }
        });
      };
    }
  });

  var ColorPickerPanel = withInstall$1(_ColorPickerPanel);
  var ColorPicker = withInstall$1(_ColorPicker);

  var props$w = {
    alt: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    hideOnLoadFailed: Boolean,
    icon: {
      type: Function
    },
    image: {
      type: String,
      "default": ""
    },
    imageProps: {
      type: Object
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        if (!val) return true;
        return ["circle", "round"].includes(val);
      }
    },
    size: {
      type: String,
      "default": ""
    },
    onError: Function
  };

  var props$v = {
    alt: {
      type: String,
      "default": ""
    },
    error: {
      type: [String, Function]
    },
    fallback: {
      type: String,
      "default": ""
    },
    fit: {
      type: String,
      "default": "fill",
      validator: function validator(val) {
        if (!val) return true;
        return ["contain", "cover", "fill", "none", "scale-down"].includes(val);
      }
    },
    gallery: Boolean,
    lazy: Boolean,
    loading: {
      type: [String, Function]
    },
    overlayContent: {
      type: [String, Function]
    },
    overlayTrigger: {
      type: String,
      "default": "always",
      validator: function validator(val) {
        if (!val) return true;
        return ["always", "hover"].includes(val);
      }
    },
    placeholder: {
      type: [String, Function]
    },
    position: {
      type: String,
      "default": "center"
    },
    referrerpolicy: {
      type: String,
      "default": "strict-origin-when-cross-origin",
      validator: function validator(val) {
        if (!val) return true;
        return ["no-referrer", "no-referrer-when-downgrade", "origin", "origin-when-cross-origin", "same-origin", "strict-origin", "strict-origin-when-cross-origin", "unsafe-url"].includes(val);
      }
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        if (!val) return true;
        return ["circle", "round", "square"].includes(val);
      }
    },
    src: {
      type: [String, Object]
    },
    srcset: {
      type: Object
    },
    onError: Function,
    onLoad: Function
  };

  var _Image = Vue.defineComponent({
    name: "TImage",
    props: props$v,
    setup: function setup(props2) {
      var divRef = Vue.ref(null);
      var imgRef = Vue.ref(null);
      var io = null;
      var _toRefs = Vue.toRefs(props2),
        src = _toRefs.src;
      var renderTNodeJSX = useTNodeJSX();
      Vue.onMounted(function () {
        var _imgRef$value;
        if ((_imgRef$value = imgRef.value) !== null && _imgRef$value !== void 0 && _imgRef$value.complete && !props2.lazy) {
          triggerHandleLoad();
        }
        if (!props2.lazy || !divRef.value) return;
        var ioObserver = observe(divRef.value, null, handleLoadImage, 0);
        io = ioObserver;
      });
      Vue.onUnmounted(function () {
        divRef.value && io && io.unobserve(divRef.value);
      });
      var _useConfig = useConfig("image"),
        classPrefix = _useConfig.classPrefix,
        globalConfig = _useConfig.globalConfig;
      var imageStrSrc = Vue.ref(src.value);
      Vue.watch([src, globalConfig], function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          src2 = _ref2[0],
          globalConfig2 = _ref2[1];
        var _ref3 = globalConfig2 || {},
          replaceImageSrc = _ref3.replaceImageSrc;
        var tmpUrl = isFunction(replaceImageSrc) ? replaceImageSrc(props2) : src2;
        if (tmpUrl === imageStrSrc.value && imageStrSrc.value) return;
        imageStrSrc.value = tmpUrl;
      }, {
        immediate: true
      });
      var _useImagePreviewUrl = useImagePreviewUrl(imageStrSrc),
        previewUrl = _useImagePreviewUrl.previewUrl;
      Vue.watch([previewUrl], function () {
        hasError.value = false;
        isLoaded.value = false;
      });
      var shouldLoad = Vue.ref(!props2.lazy);
      var handleLoadImage = function handleLoadImage() {
        shouldLoad.value = true;
      };
      var isLoaded = Vue.ref(false);
      var handleLoad = function handleLoad(e) {
        var _props2$onLoad;
        isLoaded.value = true;
        (_props2$onLoad = props2.onLoad) === null || _props2$onLoad === void 0 || _props2$onLoad.call(props2, {
          e: e
        });
      };
      var triggerHandleLoad = function triggerHandleLoad() {
        var loadEvent = new Event("load");
        Object.defineProperty(loadEvent, "target", {
          value: imgRef.value,
          enumerable: true
        });
        handleLoad(loadEvent);
      };
      var hasError = Vue.ref(false);
      var handleError = function handleError(e) {
        var _props2$onError;
        hasError.value = true;
        (_props2$onError = props2.onError) === null || _props2$onError === void 0 || _props2$onError.call(props2, {
          e: e
        });
        if (props2.fallback) {
          imageStrSrc.value = props2.fallback;
          hasError.value = false;
        }
      };
      var hasMouseEvent = Vue.computed(function () {
        return props2.overlayTrigger === "hover";
      });
      var imageClasses = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-image"), "".concat(classPrefix.value, "-image--fit-").concat(props2.fit), "".concat(classPrefix.value, "-image--position-").concat(props2.position)];
      });
      var shouldShowOverlay = Vue.ref(!hasMouseEvent.value);
      var handleToggleOverlay = function handleToggleOverlay() {
        if (hasMouseEvent.value) {
          shouldShowOverlay.value = !shouldShowOverlay.value;
        }
      };
      var renderPlaceholder = function renderPlaceholder() {
        var placeholder = renderTNodeJSX("placeholder");
        if (!placeholder) return null;
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__placeholder")
        }, [placeholder]);
      };
      var renderGalleryShadow = function renderGalleryShadow() {
        if (!props2.gallery) return null;
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__gallery-shadow")
        }, null);
      };
      var renderOverlay = function renderOverlay() {
        var overlayContent = renderTNodDefault("overlayContent");
        if (!overlayContent) return null;
        return Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-image__overlay-content"), !shouldShowOverlay.value && "".concat(classPrefix.value, "-image__overlay-content--hidden")]
        }, [overlayContent]);
      };
      function renderImageSrcset() {
        return Vue.createVNode("picture", null, [Object.entries(props2.srcset).map(function (_ref4) {
          var _ref5 = _slicedToArray(_ref4, 2),
            type = _ref5[0],
            url = _ref5[1];
          return Vue.createVNode("source", {
            "type": type,
            "srcset": url
          }, null);
        }), renderImage()]);
      }
      function renderImage() {
        var url = isString(imageStrSrc.value) ? imageStrSrc.value : previewUrl.value;
        return Vue.createVNode("img", {
          "ref": imgRef,
          "src": url,
          "onError": handleError,
          "onLoad": handleLoad,
          "class": imageClasses.value,
          "alt": props2.alt,
          "referrerpolicy": props2.referrerpolicy
        }, null);
      }
      var renderTNodDefault = useTNodeDefault();
      return function () {
        return Vue.createVNode("div", Vue.mergeProps({
          "ref": divRef,
          "class": ["".concat(classPrefix.value, "-image__wrapper"), "".concat(classPrefix.value, "-image__wrapper--shape-").concat(props2.shape), props2.gallery && "".concat(classPrefix.value, "-image__wrapper--gallery"), hasMouseEvent.value && "".concat(classPrefix.value, "-image__wrapper--need-hover")],
          "onMouseenter": handleToggleOverlay,
          "onMouseleave": handleToggleOverlay
        }, omit$1(props2, ["src", "alt", "fit", "position", "shape", "placeholder", "loading", "error", "overlayTrigger", "overlayContent", "lazy", "gallery", "onLoad", "onError"])), [renderPlaceholder(), renderGalleryShadow(), (hasError.value || !shouldLoad.value) && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image")
        }, null), !(hasError.value || !shouldLoad.value) && (props2.srcset && Object.keys(props2.srcset).length ? renderImageSrcset() : renderImage()), !(hasError.value || !shouldLoad.value) && !isLoaded.value && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__loading")
        }, [renderTNodeJSX("loading") || Vue.createVNode(Space, {
          "direction": "vertical",
          "size": 8,
          "align": "center"
        }, {
          "default": function _default() {
            return [Vue.createVNode(ImageIcon, {
              "size": "24px"
            }, null), isString(props2.loading) ? props2.loading : globalConfig.value.loadingText];
          }
        })]), hasError.value && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image__error")
        }, [renderTNodDefault("error", {
          defaultNode: Vue.createVNode(Space, {
            "direction": "vertical",
            "size": 8,
            "align": "center"
          }, {
            "default": function _default() {
              return [Vue.createVNode(ImageErrorIcon, {
                "size": "24px"
              }, null), isString(props2.error) ? props2.error : globalConfig.value.errorText];
            }
          })
        })]), renderOverlay()]);
      };
    }
  });

  var Image$1 = withInstall$1(_Image);

  function ownKeys$V(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$U(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$V(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$V(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Avatar = Vue.defineComponent({
    name: "TAvatar",
    props: props$w,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("avatar");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var avatarGroup = Vue.inject("avatarGroup", void 0);
      var avatar = Vue.ref(null);
      var avatarChild = Vue.ref(null);
      var isImgExist = Vue.ref(true);
      var gap = Vue.ref(4);
      var scale = Vue.ref("");
      var sizeValue = Vue.computed(function () {
        return props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
      });
      var isCustomSize = Vue.computed(function () {
        return sizeValue.value && !SIZE.value[sizeValue.value];
      });
      var customAvatarSize = Vue.computed(function () {
        return isCustomSize.value ? {
          width: sizeValue.value,
          height: sizeValue.value,
          "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
        } : {};
      });
      var customImageSize = Vue.computed(function () {
        return isCustomSize.value ? {
          height: sizeValue.value,
          width: sizeValue.value
        } : {};
      });
      var customCharacterSize = Vue.computed(function () {
        return {
          transform: scale.value
        };
      });
      var handleImgLoadError = function handleImgLoadError(_ref) {
        var _props2$onError;
        var e = _ref.e;
        var hideOnLoadFailed = props2.hideOnLoadFailed;
        isImgExist.value = !hideOnLoadFailed;
        (_props2$onError = props2.onError) === null || _props2$onError === void 0 || _props2$onError.call(props2, {
          e: e
        });
      };
      var setScaleParams = function setScaleParams() {
        var $avatar = avatar.value;
        var $avatarChild = avatarChild.value;
        var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
        var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;
        if (gap.value * 2 < avatarWidth) {
          scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
        }
      };
      Vue.onMounted(function () {
        Vue.nextTick(function () {
          setScaleParams();
        });
      });
      Vue.onUpdated(function () {
        Vue.nextTick(function () {
          setScaleParams();
        });
      });
      Vue.watch(function () {
        return props2.image;
      }, function (val) {
        if (val) {
          isImgExist.value = true;
        }
      });
      return function () {
        var content = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        var isIconOnly = icon && !content;
        var shape = props2.shape,
          image = props2.image,
          alt = props2.alt;
        var avatarClass = ["".concat(COMPONENT_NAME.value), SIZE.value[sizeValue.value], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--circle"), shape === "circle"), "".concat(COMPONENT_NAME.value, "--round"), shape === "round"), "".concat(COMPONENT_NAME.value, "__icon"), !!isIconOnly)];
        content = Vue.createVNode("span", {
          "ref": avatarChild,
          "style": _objectSpread$U({}, customCharacterSize.value)
        }, [content]);
        if (icon) {
          content = [icon, !isIconOnly ? content : ""];
        }
        if (image && isImgExist.value) {
          content = Vue.createVNode(Image$1, Vue.mergeProps({
            "style": _objectSpread$U({}, customImageSize.value),
            "src": image,
            "alt": alt,
            "onError": handleImgLoadError
          }, props2.imageProps), null);
        }
        return Vue.createVNode("div", {
          "ref": avatar,
          "class": avatarClass,
          "style": _objectSpread$U({}, customAvatarSize.value)
        }, [content]);
      };
    }
  });

  var props$u = {
    cascading: {
      type: String,
      "default": "right-up",
      validator: function validator(val) {
        if (!val) return true;
        return ["left-up", "right-up"].includes(val);
      }
    },
    collapseAvatar: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": ""
    }
  };

  function _isSlot$i(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _AvatarGroup = Vue.defineComponent({
    name: "TAvatarGroup",
    props: props$u,
    setup: function setup(props2) {
      Vue.provide("avatarGroup", props2);
      var renderTNodeJSX = useTNodeJSX();
      var AVATAR_NAME = usePrefixClass("avatar");
      var COMPONENT_NAME = usePrefixClass("avatar-group");
      var renderEllipsisAvatar = function renderEllipsisAvatar(children) {
        if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
          var content = getEllipsisContent(children);
          var outAvatar = children.slice(0, props2.max);
          outAvatar.push(Vue.createVNode(_Avatar, {
            "class": "".concat(AVATAR_NAME.value, "__collapse"),
            "size": props2.size
          }, _isSlot$i(content) ? content : {
            "default": function _default() {
              return [content];
            }
          }));
          return outAvatar;
        }
        return children;
      };
      var getEllipsisContent = function getEllipsisContent(children) {
        return renderTNodeJSX("collapseAvatar") || "+".concat(children.length - props2.max);
      };
      return function () {
        var children = renderTNodeJSX("default");
        var cascading = props2.cascading,
          max = props2.max;
        var groupClass = ["".concat(COMPONENT_NAME.value), _defineProperty$2(_defineProperty$2({}, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up")];
        var content = max && max >= 0 ? [renderEllipsisAvatar(getChildren(children))] : [children];
        return Vue.createVNode("div", {
          "class": groupClass
        }, [content]);
      };
    }
  });

  var Avatar = withInstall$1(_Avatar);
  var AvatarGroup = withInstall$1(_AvatarGroup);

  var props$t = {
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    count: {
      type: [String, Number, Function],
      "default": 0
    },
    "default": {
      type: [String, Function]
    },
    dot: Boolean,
    maxCount: {
      type: Number,
      "default": 99
    },
    offset: {
      type: Array
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    showZero: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    }
  };

  var _Badge = Vue.defineComponent({
    name: "TBadge",
    inheritAttrs: false,
    props: props$t,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var displayCount = Vue.computed(function () {
        var count = renderTNodeJSX("count");
        if (Number.isNaN(Number(count))) {
          return count;
        }
        count = Number(props2.count);
        return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
      });
      var getOffset = function getOffset() {
        if (!props2.offset) return {};
        var _props2$offset = _slicedToArray(props2.offset, 2),
          xOffset = _props2$offset[0],
          yOffset = _props2$offset[1];
        xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
        yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
        return {
          xOffset: xOffset,
          yOffset: yOffset
        };
      };
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("badge");
      var isHidden = Vue.computed(function () {
        return !props2.showZero && (displayCount.value === 0 || displayCount.value === "0");
      });
      var badgeClassNames = Vue.computed(function () {
        return [_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--dot"), !!props2.dot), "".concat(COMPONENT_NAME.value, "--circle"), !props2.dot && props2.shape === "circle"), "".concat(COMPONENT_NAME.value, "--round"), !props2.dot && props2.shape === "round"), "".concat(classPrefix.value, "-size-s"), props2.size === "small")];
      });
      var inlineStyle = Vue.computed(function () {
        var _getOffset = getOffset(),
          xOffset = _getOffset.xOffset,
          yOffset = _getOffset.yOffset;
        return {
          background: props2.color,
          right: xOffset,
          top: yOffset
        };
      });
      return function () {
        return Vue.createVNode("div", Vue.mergeProps({
          "class": COMPONENT_NAME.value
        }, attrs), [renderContent("default", "content"), isHidden.value ? null : Vue.createVNode("sup", {
          "class": badgeClassNames.value,
          "style": inlineStyle.value
        }, [props2.dot ? null : displayCount.value])]);
      };
    }
  });

  var Badge = withInstall$1(_Badge);

  var props$s = {
    cell: {
      type: [String, Function]
    },
    cellAppend: {
      type: [String, Function]
    },
    controllerConfig: {
      type: [Boolean, Object],
      "default": void 0
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": "YYYY-MM-DD"
    },
    head: {
      type: [String, Function]
    },
    isShowWeekendDefault: {
      type: Boolean,
      "default": true
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        if (!val) return true;
        return ["month", "year"].includes(val);
      }
    },
    month: {
      type: [String, Number]
    },
    multiple: Boolean,
    preventCellContextmenu: Boolean,
    range: {
      type: Array
    },
    theme: {
      type: String,
      "default": "full",
      validator: function validator(val) {
        if (!val) return true;
        return ["full", "card"].includes(val);
      }
    },
    value: {
      type: [String, Array, Date]
    },
    week: {
      type: [Array, Function]
    },
    year: {
      type: [String, Number]
    },
    onCellClick: Function,
    onCellDoubleClick: Function,
    onCellRightClick: Function,
    onControllerChange: Function,
    onMonthChange: Function
  };

  var COMPONENT_NAME = "calendar";
  var MIN_YEAR = 1970;
  var FIRST_MONTH_OF_YEAR = 1;
  var LAST_MONTH_OF_YEAR = 12;
  var DEFAULT_YEAR_CELL_NUMINROW = 4;
  var DAY_CN_MAP = {
    1: "\u4E00",
    2: "\u4E8C",
    3: "\u4E09",
    4: "\u56DB",
    5: "\u4E94",
    6: "\u516D",
    7: "\u65E5"
  };

  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();
    if (day === 0) {
      day = 7;
    }
    return day;
  };
  var getDayCn = function getDayCn(num) {
    var re = "";
    var numStr = num.toString();
    if (numStr in DAY_CN_MAP) {
      re = DAY_CN_MAP[numStr];
    }
    return re;
  };
  var getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {
    var re = 0;
    var day = getDay(dt);
    if (day >= firstDayOfWeek) {
      re = day - firstDayOfWeek;
    } else {
      re = 7 - firstDayOfWeek + day;
    }
    return re;
  };
  var addDate = function addDate(dt, days) {
    var d = new Date(dt);
    d.setDate(d.getDate() + days);
    return d;
  };
  var createYearCellsData = function createYearCellsData(props, state) {
    var year = state.curSelectedYear,
      curDate = state.curDate,
      curDateList = state.curDateList;
    var format = props.format,
      multiple = props.multiple;
    var monthsArr = [];
    var _loop = function _loop(num) {
      var date = new Date(year, num - 1);
      var isCurrent = multiple ? !!curDateList.find(function (item) {
        return item.year() === year && parseInt(item.format("M"), 10) === num;
      }) : curDate.year() === year && parseInt(curDate.format("M"), 10) === num;
      monthsArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
    };
    for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
      _loop(num);
    }
    return monthsArr;
  };
  var createMonthCellsData = function createMonthCellsData(props, state) {
    var year = state.curSelectedYear,
      month = state.curSelectedMonth,
      firstDayOfWeek = state.realFirstDayOfWeek,
      curDate = state.curDate,
      curDateList = state.curDateList;
    var format = props.format,
      multiple = props.multiple;
    var daysArr = [];
    var begin = dayjs("".concat(year, "-").concat(month)).startOf("month").toDate();
    var end = dayjs(dayjs("".concat(year, "-").concat(month)).endOf("month").format("YYYY-MM-DD")).toDate();
    var days = end.getDate();
    var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
    var arr = [];
    var num = 1;
    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };
    var judgeIsCurrent = function judgeIsCurrent(date) {
      var isCurrent = multiple ? !!curDateList.find(function (item) {
        return item.isSame(dayjs(date));
      }) : curDate.isSame(dayjs(date));
      return isCurrent;
    };
    for (var i = 0; i < beginDateColIndex; i++) {
      var date = addDate(begin, i - beginDateColIndex);
      arr.push(createCellData(-1, false, date, num));
      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }
    for (var _i = 0; _i < days; _i++) {
      var _date = addDate(begin, _i);
      var isCurrent = judgeIsCurrent(_date);
      arr.push(createCellData(0, isCurrent, _date, num));
      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }
    if (arr.length) {
      var nextMonthCellNum = 7 - arr.length;
      for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
        var _date2 = addDate(end, _i2 + 1);
        arr.push(createCellData(1, false, _date2, num));
      }
      daysArr.push(arr);
    }
    return daysArr;
  };
  var createDefaultCurDate = function createDefaultCurDate() {
    return dayjs(dayjs().format("YYYY-MM-DD"));
  };

  function useState(props) {
    var _useConfig = useConfig(COMPONENT_NAME),
      globalConfig = _useConfig.globalConfig;
    var state = Vue.reactive({
      realFirstDayOfWeek: 1,
      curDate: null,
      curDateList: [],
      curSelectedYear: null,
      curSelectedMonth: null,
      curSelectedMode: null,
      isShowWeekend: true,
      controlSize: "medium"
    });
    function toToday() {
      var curDate = createDefaultCurDate();
      state.curDate = curDate;
      state.curSelectedYear = curDate.year();
      state.curSelectedMonth = parseInt(curDate.format("M"), 10);
    }
    function setCurSelectedYear(year) {
      var curSelectedYear = year ? parseInt("".concat(year), 10) : createDefaultCurDate().year();
      if (!isNaN(curSelectedYear) && curSelectedYear > 0) {
        state.curSelectedYear = curSelectedYear;
      }
    }
    function setCurSelectedMonth(month) {
      var curSelectedMonth = month ? parseInt("".concat(month), 10) : parseInt(createDefaultCurDate().format("M"), 10);
      if (!isNaN(curSelectedMonth) && curSelectedMonth > 0 && curSelectedMonth <= 12) {
        state.curSelectedMonth = curSelectedMonth;
      }
    }
    function setCurrentDate(value) {
      if (isArray$1(value)) {
        state.curDate = value && value.length ? dayjs(value[0]) : createDefaultCurDate();
      } else {
        state.curDate = value ? dayjs(value) : createDefaultCurDate();
      }
    }
    function setCurrentDateList(value) {
      if (isArray$1(value)) {
        state.curDateList = value && value.length ? value.map(function (item) {
          return dayjs(item);
        }) : [createDefaultCurDate()];
      } else {
        state.curDateList = value ? [dayjs(value)] : [createDefaultCurDate()];
      }
    }
    function checkDayVisible(day) {
      var re = true;
      if (!state.isShowWeekend) {
        re = day !== 6 && day !== 7;
      }
      return re;
    }
    Vue.watch(function () {
      return props.firstDayOfWeek;
    }, function () {
      var _ref, _props$firstDayOfWeek;
      state.realFirstDayOfWeek = (_ref = (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : globalConfig.value.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.value;
    }, function (v) {
      if (props.multiple) {
        setCurrentDateList(v);
      } else {
        setCurrentDate(v);
      }
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.year;
    }, function (v) {
      setCurSelectedYear(v);
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.month;
    }, function (v) {
      setCurSelectedMonth(v);
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.isShowWeekendDefault;
    }, function (v) {
      state.isShowWeekend = v;
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.mode;
    }, function (v) {
      state.curSelectedMode = v;
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.theme;
    }, function (v) {
      if (v === "card") state.controlSize = "small";
      if (v === "full") state.controlSize = "medium";
    }, {
      immediate: true
    });
    return {
      state: state,
      toToday: toToday,
      checkDayVisible: checkDayVisible
    };
  }

  function useCalendarClass(props, state) {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var body = Vue.computed(function () {
      return ["".concat(prefixClass.value), "".concat(prefixClass.value, "--").concat(props.theme)];
    });
    var panel = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__panel"), "".concat(prefixClass.value, "__panel--").concat(state.curSelectedMode)];
    });
    var control = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__control")];
    });
    var title = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__title")];
    });
    var controlSection = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section")];
    });
    var controlSectionCell = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section-cell")];
    });
    var controlTag = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-tag")];
    });
    var table = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table")];
    });
    var tableHead = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head")];
    });
    var tableHeadRow = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-row")];
    });
    var tableHeadCell = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-cell")];
    });
    var tableBody = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body")];
    });
    var tableBodyRow = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-row")];
    });
    return {
      body: body,
      panel: panel,
      control: control,
      title: title,
      controlSection: controlSection,
      controlSectionCell: controlSectionCell,
      controlTag: controlTag,
      table: table,
      tableHead: tableHead,
      tableHeadRow: tableHeadRow,
      tableHeadCell: tableHeadCell,
      tableBody: tableBody,
      tableBodyRow: tableBodyRow
    };
  }
  function useCalendarCellClass() {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var tableBodyCell = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell")];
    });
    var tableBodyCell4Now = Vue.computed(function () {
      return "".concat(prefixClass.value, "__table-body-cell--now");
    });
    var tableBodyCellDisplay = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-display")];
    });
    var tableBodyCellCsontent = Vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-content")];
    });
    return {
      tableBodyCell: tableBodyCell,
      tableBodyCell4Now: tableBodyCell4Now,
      tableBodyCellDisplay: tableBodyCellDisplay,
      tableBodyCellCsontent: tableBodyCellCsontent
    };
  }

  function ownKeys$U(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$T(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$U(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$U(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {}
      },
      month: {
        visible: true,
        selectProps: {}
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };
  function userController(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
      globalConfig = _useConfig.globalConfig;
    var options = Vue.computed(function () {
      var dayJsFilterDate = dayjs("".concat(state.curSelectedYear, "-").concat(state.curSelectedMonth));
      var re = {
        isShowWeekend: state.isShowWeekend,
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(props.format),
        mode: state.curSelectedMode
      };
      return re;
    });
    var configData = Vue.computed(function () {
      var _ref, _props$controllerConf;
      var controllerConfig = (_ref = (_props$controllerConf = props.controllerConfig) !== null && _props$controllerConf !== void 0 ? _props$controllerConf : globalConfig.value.controllerConfig) !== null && _ref !== void 0 ? _ref : true;
      if (isBoolean(controllerConfig)) {
        return getDefaultControllerConfigData(controllerConfig);
      }
      return _objectSpread$T(_objectSpread$T({}, getDefaultControllerConfigData()), controllerConfig);
    });
    var visible = Vue.computed(function () {
      return !!configData.value && configData.value.visible;
    });
    function checkControllerVisible(name) {
      var re = true;
      var conf = configData.value;
      if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
        re = false;
      }
      return re;
    }
    function checkControllerDisabled(name, propsName) {
      var re = false;
      var conf = configData.value;
      if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
        re = true;
      }
      return re;
    }
    function emitControllerChange() {
      Vue.nextTick(function () {
        isFunction(props.onControllerChange) && props.onControllerChange(_objectSpread$T({}, options.value));
      });
    }
    return {
      options: options,
      configData: configData,
      visible: visible,
      checkControllerVisible: checkControllerVisible,
      checkControllerDisabled: checkControllerDisabled,
      emitControllerChange: emitControllerChange
    };
  }

  function useColHeaders(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var weekDisplayText = Vue.computed(function () {
      return props.week || t(globalConfig.value.week).split(",");
    });
    function getWeekDisplay(weekNum) {
      var weekText = weekDisplayText.value;
      return isObject(weekText) && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
    }
    var cellColHeaders = Vue.computed(function () {
      var re = [];
      var min = 1;
      var max = 7;
      for (var i = state.realFirstDayOfWeek; i <= max; i++) {
        re.push({
          num: i,
          display: getWeekDisplay(i)
        });
      }
      if (state.realFirstDayOfWeek > min) {
        for (var _i = min; _i < state.realFirstDayOfWeek; _i++) {
          re.push({
            num: _i,
            display: getWeekDisplay(_i)
          });
        }
      }
      return re;
    });
    return {
      cellColHeaders: cellColHeaders
    };
  }

  function ownKeys$T(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$S(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$T(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$T(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var clickTypeEmitEventMap = {
    click: "click",
    dblclick: "dblclick",
    contextmenu: "rightclick"
  };
  var CalendarCellItem = Vue.defineComponent({
    name: "TCalendarCell",
    inheritAttrs: false,
    props: {
      item: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      fillWithZero: {
        type: Boolean,
        "default": void 0
      },
      theme: {
        type: String,
        "default": function _default() {
          return null;
        }
      },
      t: Function,
      global: Object,
      cell: [String, Function],
      cellAppend: [String, Function]
    },
    emits: _toConsumableArray(Object.values(clickTypeEmitEventMap)),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var renderContent = useContent();
      var cls = useCalendarCellClass();
      var _useCommonClassName = useCommonClassName$1(),
        STATUS = _useCommonClassName.STATUS;
      var valueDisplay = Vue.computed(function () {
        if (props.item.mode === "month") {
          var _ref2, _props$fillWithZero;
          var dateNum = props.item.date.getDate();
          var fillZero = dateNum < 10 && ((_ref2 = (_props$fillWithZero = props.fillWithZero) !== null && _props$fillWithZero !== void 0 ? _props$fillWithZero : props.global.fillWithZero) !== null && _ref2 !== void 0 ? _ref2 : true);
          return fillZero ? "0".concat(dateNum) : dateNum;
        }
        var map = props.t(props.global.cellMonth).split(",");
        return map[props.item.date.getMonth().toString()];
      });
      var allowSlot = Vue.computed(function () {
        return props.theme === "full";
      });
      var disabled = Vue.computed(function () {
        return props.item.mode === "month" && props.item.belongTo !== 0;
      });
      var cellCls = Vue.computed(function () {
        var _props$item = props.item,
          mode = _props$item.mode,
          date = _props$item.date,
          formattedDate = _props$item.formattedDate,
          isCurrent = _props$item.isCurrent;
        var now = new Date();
        var isNow = mode === "year" ? now.getMonth() === date.getMonth() && now.getFullYear() === date.getFullYear() : formattedDate === dayjs().format("YYYY-MM-DD");
        return [cls.tableBodyCell.value, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, STATUS.value.disabled, disabled.value), STATUS.value.checked, isCurrent), cls.tableBodyCell4Now.value, isNow)];
      });
      var clickCell = function clickCell(e) {
        if (disabled.value) return;
        var emitName = clickTypeEmitEventMap[e.type];
        emit(emitName, e);
      };
      var renderDefaultNode = function renderDefaultNode() {
        return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
          "class": cls.tableBodyCellDisplay.value
        }, [valueDisplay.value]), Vue.createVNode("div", {
          "class": cls.tableBodyCellCsontent.value
        }, [allowSlot.value && renderContent("cellAppend", void 0, {
          params: _objectSpread$S({}, props.item)
        })])]);
      };
      return function () {
        return props.item && Vue.createVNode("td", {
          "class": cellCls.value,
          "onClick": clickCell,
          "onDblclick": clickCell,
          "onContextmenu": clickCell
        }, [renderContent("cell", void 0, {
          defaultNode: renderDefaultNode(),
          params: _objectSpread$S({}, props.item)
        })]);
      };
    }
  });

  function ownKeys$S(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$R(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$S(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$S(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$h(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Calendar = Vue.defineComponent({
    name: "TCalendar",
    props: props$s,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderContent = useContent();
      var _useConfig = useConfig(COMPONENT_NAME),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useState = useState(props2),
        state = _useState.state,
        toToday = _useState.toToday,
        checkDayVisible = _useState.checkDayVisible;
      var cls = useCalendarClass(props2, state);
      var _useColHeaders = useColHeaders(props2, state),
        cellColHeaders = _useColHeaders.cellColHeaders;
      var controller = userController(props2, state);
      var rangeFromTo = Vue.computed(function () {
        if (!props2.range || props2.range.length < 2) {
          return null;
        }
        var _props2$range = _slicedToArray(props2.range, 2),
          v1 = _props2$range[0],
          v2 = _props2$range[1];
        if (dayjs(v1).isBefore(dayjs(v2))) {
          return {
            from: v1,
            to: v2
          };
        }
        return {
          from: v2,
          to: v1
        };
      });
      function checkMonthAndYearSelectedDisabled(year, month) {
        var disabled = false;
        if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
          var beginYear = dayjs(rangeFromTo.value.from).year();
          var endYear = dayjs(rangeFromTo.value.to).year();
          if (year === beginYear) {
            var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
            disabled = month < beginMon;
          } else if (year === endYear) {
            var endMon = parseInt(dayjs(rangeFromTo.value.to).format("M"), 10);
            disabled = month > endMon;
          }
        }
        return disabled;
      }
      function adjustMonth() {
        var _rangeFromTo$value, _rangeFromTo$value2;
        if ((_rangeFromTo$value = rangeFromTo.value) !== null && _rangeFromTo$value !== void 0 && _rangeFromTo$value.from && (_rangeFromTo$value2 = rangeFromTo.value) !== null && _rangeFromTo$value2 !== void 0 && _rangeFromTo$value2.to) {
          var beginYear = dayjs(rangeFromTo.value.from).year();
          var endYear = dayjs(rangeFromTo.value.to).year();
          var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
          if (checkMonthAndYearSelectedDisabled(state.curSelectedYear, state.curSelectedMonth)) {
            state.curSelectedMonth = state.curSelectedYear === beginYear ? beginMon : state.curSelectedYear === endYear ? 1 : state.curSelectedMonth;
          }
        }
      }
      Vue.watch(function () {
        return {
          year: "".concat(state.curSelectedYear),
          month: "".concat(state.curSelectedMonth)
        };
      }, function (v) {
        isFunction(props2.onMonthChange) && props2.onMonthChange(_objectSpread$R({}, v));
        controller.emitControllerChange();
      });
      var dateSelect = {
        yearSelectOptionList: Vue.computed(function () {
          var re = [];
          var begin = state.curSelectedYear - 10;
          var end = state.curSelectedYear + 10;
          if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
            begin = dayjs(rangeFromTo.value.from).year();
            end = dayjs(rangeFromTo.value.to).year();
          }
          if (begin < MIN_YEAR) {
            begin = MIN_YEAR;
          }
          if (end < MIN_YEAR) {
            end = MIN_YEAR;
          }
          for (var i = begin; i <= end; i++) {
            re.push({
              value: i,
              label: t(globalConfig.value.yearSelection, {
                year: i
              }),
              disabled: false
            });
          }
          return re;
        }),
        isYearSelectVisible: Vue.computed(function () {
          return controller.checkControllerVisible("year");
        }),
        isYearSelectDisabled: Vue.computed(function () {
          return controller.checkControllerDisabled("year", "selectProps");
        }),
        monthSelectOptionList: Vue.computed(function () {
          adjustMonth();
          var re = [];
          for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
            var disabled = checkMonthAndYearSelectedDisabled(state.curSelectedYear, i);
            re.push({
              value: i,
              label: t(globalConfig.value.monthSelection, {
                month: i
              }),
              disabled: disabled
            });
          }
          return re;
        }),
        isMonthSelectVisible: Vue.computed(function () {
          return state.curSelectedMode === "month" && controller.checkControllerVisible("month");
        }),
        isMonthSelectDisabled: Vue.computed(function () {
          return controller.checkControllerDisabled("month", "selectProps");
        })
      };
      var modeSelect = {
        optionList: Vue.computed(function () {
          return [{
            value: "month",
            label: t(globalConfig.value.monthRadio)
          }, {
            value: "year",
            label: t(globalConfig.value.yearRadio)
          }];
        }),
        isVisible: Vue.computed(function () {
          return controller.checkControllerVisible("mode");
        }),
        isDisabled: Vue.computed(function () {
          return controller.checkControllerDisabled("mode", "radioGroupProps");
        })
      };
      var weekendBtn = {
        text: Vue.computed(function () {
          return state.isShowWeekend ? t(globalConfig.value.hideWeekend) : t(globalConfig.value.showWeekend);
        }),
        vBind: Vue.computed(function () {
          var c = controller.configData.value.weekend;
          return state.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
        }),
        isVisible: Vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current") && controller.checkControllerVisible("weekend");
        }),
        isDisabled: Vue.computed(function () {
          var p = state.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
          return controller.checkControllerDisabled("weekend", p);
        })
      };
      var currentBtn = {
        text: Vue.computed(function () {
          return state.curSelectedMode === "month" ? t(globalConfig.value.today) : t(globalConfig.value.thisMonth);
        }),
        vBind: Vue.computed(function () {
          var c = controller.configData.value.current;
          return state.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
        }),
        isVisible: Vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current");
        }),
        isDisabled: Vue.computed(function () {
          var p = state.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
          return controller.checkControllerDisabled("current", p);
        })
      };
      var renderControl = function renderControl() {
        var _slot;
        return Vue.createVNode("div", {
          "class": cls.control.value
        }, [Vue.createVNode("div", {
          "class": cls.title.value
        }, [renderContent("head", void 0, {
          params: _objectSpread$R({}, controller.options.value)
        })]), Vue.createVNode("div", {
          "class": cls.controlSection.value
        }, [dateSelect.isYearSelectVisible.value && Vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [Vue.createVNode(Select, Vue.mergeProps({
          "modelValue": state.curSelectedYear,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedYear = $event;
          },
          "size": state.controlSize,
          "autoWidth": true
        }, controller.configData.value.year.selectProps, {
          "disabled": dateSelect.isYearSelectDisabled.value,
          "options": dateSelect.yearSelectOptionList.value
        }), null)]), dateSelect.isMonthSelectVisible.value && Vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [Vue.createVNode(Select, Vue.mergeProps({
          "autoWidth": true,
          "modelValue": state.curSelectedMonth,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMonth = $event;
          },
          "size": state.controlSize
        }, controller.configData.value.month.selectProps, {
          "disabled": dateSelect.isMonthSelectDisabled.value,
          "options": dateSelect.monthSelectOptionList.value
        }), null)]), modeSelect.isVisible.value && Vue.createVNode("div", {
          "class": cls.controlSectionCell.value,
          "style": "height: auto"
        }, [Vue.createVNode(RadioGroup, Vue.mergeProps({
          "modelValue": state.curSelectedMode,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMode = $event;
          },
          "variant": "default-filled",
          "size": state.controlSize
        }, controller.configData.value.mode.radioGroupProps, {
          "disabled": modeSelect.isDisabled.value,
          "onChange": controller.emitControllerChange
        }), _isSlot$h(_slot = modeSelect.optionList.value.map(function (item) {
          return Vue.createVNode(RadioButton, {
            "key": item.value,
            "value": item.value
          }, {
            "default": function _default() {
              return [item.label];
            }
          });
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]), weekendBtn.isVisible.value && Vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [Vue.createVNode(CheckTag, Vue.mergeProps({
          "class": cls.controlTag.value,
          "theme": state.isShowWeekend ? "default" : "primary",
          "size": "large"
        }, weekendBtn.vBind.value, {
          "disabled": weekendBtn.isDisabled.value,
          "onClick": function onClick() {
            state.isShowWeekend = !state.isShowWeekend;
            controller.emitControllerChange();
          }
        }), {
          "default": function _default() {
            return [weekendBtn.text.value];
          }
        })]), currentBtn.isVisible.value && Vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [Vue.createVNode(Button, Vue.mergeProps({
          "size": state.controlSize
        }, currentBtn.vBind.value, {
          "disabled": currentBtn.isDisabled.value,
          "onClick": function onClick() {
            toToday();
          }
        }), {
          "default": function _default() {
            return [currentBtn.text.value];
          }
        })])])]);
      };
      var cellClickEmit = function cellClickEmit(eventPropsName, e, cellData) {
        if (isFunction(props2[eventPropsName])) {
          var options = {
            cell: _objectSpread$R(_objectSpread$R({}, cellData), controller.options.value),
            e: e
          };
          props2[eventPropsName](options);
        }
      };
      var clickCell = function clickCell(e, cellData) {
        var d = dayjs(cellData.date);
        if (props2.multiple) {
          if (state.curDateList.find(function (item) {
            return item.isSame(d);
          })) {
            state.curDateList = remove$1(state.curDateList, function (item) {
              return !item.isSame(d);
            });
          } else {
            state.curDateList.push(d);
          }
        } else {
          state.curDate = d;
        }
        cellClickEmit("onCellClick", e, cellData);
      };
      var doubleClickCell = function doubleClickCell(e, cellData) {
        cellClickEmit("onCellDoubleClick", e, cellData);
      };
      var rightClickCell = function rightClickCell(e, cellData) {
        if (props2.preventCellContextmenu) {
          e.preventDefault();
        }
        cellClickEmit("onCellRightClick", e, cellData);
      };
      var monthCellsData = Vue.computed(function () {
        var daysArr = createMonthCellsData(props2, state);
        return daysArr;
      });
      var renderMonthBody = function renderMonthBody() {
        return Vue.createVNode("table", {
          "class": cls.table.value
        }, [Vue.createVNode("thead", {
          "class": cls.tableHead.value
        }, [Vue.createVNode("tr", {
          "class": cls.tableHeadRow.value
        }, [cellColHeaders.value.map(function (item, index) {
          return checkDayVisible(item.num) && Vue.createVNode("th", {
            "class": cls.tableHeadCell.value
          }, [isArray$1(props2.week) ? props2.week[index] : renderContent("week", void 0, {
            defaultNode: Vue.createVNode("span", null, [item.display]),
            params: {
              day: item.num
            }
          })]);
        })])]), Vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [monthCellsData.value.map(function (week, weekIndex) {
          return Vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [week.map(function (item, itemIndex) {
            return (state.isShowWeekend || item.day < 6) && Vue.createVNode(CalendarCellItem, {
              "key": "d-".concat(weekIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": globalConfig.value,
              "cell": props2.cell,
              "cellAppend": props2.cellAppend,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$R({}, slots));
          })]);
        })])]);
      };
      var yearCellsData = Vue.computed(function () {
        var re = [];
        var monthsArr = createYearCellsData(props2, state);
        var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
        var index = 0;
        for (var i = 1; i <= rowCount; i++) {
          var row = [];
          for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
            row.push(monthsArr[index]);
            index += 1;
          }
          re.push(row);
        }
        return re;
      });
      var renderYearBody = function renderYearBody() {
        return Vue.createVNode("table", {
          "class": cls.table.value
        }, [Vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [yearCellsData.value.map(function (cell, cellIndex) {
          return Vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [cell.map(function (item, itemIndex) {
            return Vue.createVNode(CalendarCellItem, {
              "key": "m-".concat(cellIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": globalConfig.value,
              "cell": props2.cell,
              "cellAppend": props2.cellAppend,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$R({}, slots));
          })]);
        })])]);
      };
      return function () {
        return Vue.createVNode("div", {
          "class": cls.body.value
        }, [controller.visible.value && renderControl(), Vue.createVNode("div", {
          "class": cls.panel.value
        }, [state.curSelectedMode === "month" ? renderMonthBody() : renderYearBody()])]);
      };
    }
  });

  var Calendar = withInstall$1(_Calendar);

  var props$r = {
    actions: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Function]
    },
    bordered: {
      type: Boolean,
      "default": true
    },
    content: {
      type: [String, Function]
    },
    cover: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    headerBordered: Boolean,
    hoverShadow: Boolean,
    loading: {
      type: [Boolean, Function],
      "default": false
    },
    loadingProps: {
      type: Object
    },
    shadow: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      "default": ""
    },
    subtitle: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "poster1", "poster2"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    }
  };

  function _isSlot$g(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Card = Vue.defineComponent({
    name: "TCard",
    props: props$r,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("card");
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var baseCls = Vue.computed(function () {
        var defaultClass = [COMPONENT_NAME.value];
        if (props2.size === "small") defaultClass.push("".concat(SIZE.value[props2.size]));
        if (props2.bordered) defaultClass.push("".concat(COMPONENT_NAME.value, "--bordered"));
        if (props2.shadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow"));
        if (props2.hoverShadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow-hover"));
        return defaultClass;
      });
      var headerCls = Vue.computed(function () {
        var defaultClass = ["".concat(COMPONENT_NAME.value, "__header")];
        return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME.value, "__title--bordered")) : ["".concat(COMPONENT_NAME.value, "__header")];
      });
      var headerWrapperCls = usePrefixClass("card__header-wrapper");
      var headerAvatarCls = usePrefixClass("card__avatar");
      var headerTitleCls = usePrefixClass("card__title");
      var headerSubTitleCls = usePrefixClass("card__subtitle");
      var headerDescriptionCls = usePrefixClass("card__description");
      var actionsCls = usePrefixClass("card__actions");
      var bodyCls = usePrefixClass("card__body");
      var coverCls = usePrefixClass("card__cover");
      var footerCls = usePrefixClass("card__footer");
      var footerWrapperCls = usePrefixClass("card__footer-wrapper");
      var isPoster2 = Vue.computed(function () {
        return props2.theme === "poster2";
      });
      var showTitle = Vue.computed(function () {
        return props2.title || slots.title;
      });
      var showHeader = Vue.computed(function () {
        return props2.header || slots.header;
      });
      var showSubtitle = Vue.computed(function () {
        return props2.subtitle || slots.subtitle;
      });
      var showAvatar = Vue.computed(function () {
        return props2.avatar || slots.avatar;
      });
      var showDescription = Vue.computed(function () {
        return props2.description || slots.description;
      });
      var showStatus = Vue.computed(function () {
        return props2.status || slots.status;
      });
      var showActions = Vue.computed(function () {
        return props2.actions || slots.actions;
      });
      var showFooter = Vue.computed(function () {
        return props2.footer || slots.footer;
      });
      var showCover = Vue.computed(function () {
        return props2.cover || slots.cover;
      });
      var showLoading = Vue.computed(function () {
        return props2.loading || slots.loading;
      });
      var showContent = Vue.computed(function () {
        return props2.content || slots.content || props2["default"] || slots["default"];
      });
      var isHeaderRender = Vue.computed(function () {
        return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
      });
      var isFooterRender = Vue.computed(function () {
        return showFooter.value || showActions.value && isPoster2.value;
      });
      var renderHeader = function renderHeader() {
        if (showHeader.value) return Vue.createVNode("div", {
          "class": headerCls.value
        }, [renderTNodeJSX("header")]);
        return Vue.createVNode("div", {
          "class": headerCls.value
        }, [Vue.createVNode("div", {
          "class": headerWrapperCls.value
        }, [showAvatar.value && Vue.createVNode("div", {
          "class": headerAvatarCls.value
        }, [renderTNodeJSX("avatar")]), Vue.createVNode("div", null, [showTitle.value && Vue.createVNode("div", {
          "class": headerTitleCls.value
        }, [renderTNodeJSX("title")]), showSubtitle.value && Vue.createVNode("div", {
          "class": headerSubTitleCls.value
        }, [renderTNodeJSX("subtitle")]), showDescription.value && Vue.createVNode("p", {
          "class": headerDescriptionCls.value
        }, [renderTNodeJSX("description")])])]), showActions.value && !isPoster2.value && Vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")]), showStatus.value && Vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("status")])]);
      };
      var renderCover = function renderCover() {
        var textCover = isString(props2.cover);
        return Vue.createVNode("div", {
          "class": coverCls.value
        }, [textCover ? Vue.createVNode("img", {
          "src": props2.cover
        }, null) : renderTNodeJSX("cover")]);
      };
      return function () {
        var content = Vue.createVNode("div", {
          "class": baseCls.value
        }, [isHeaderRender.value ? renderHeader() : null, showCover.value ? renderCover() : null, showContent.value && Vue.createVNode("div", {
          "class": bodyCls.value
        }, [renderTNodeJSX("default") || renderTNodeJSX("content")]), isFooterRender.value && Vue.createVNode("div", {
          "class": footerCls.value
        }, [Vue.createVNode("div", {
          "class": footerWrapperCls.value
        }, [renderTNodeJSX("footer")]), showActions.value && isPoster2.value && Vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")])])]);
        if (showLoading.value) {
          return renderTNodeJSX("loading") || Vue.createVNode(Loading, props2.loadingProps, _isSlot$g(content) ? content : {
            "default": function _default() {
              return [content];
            }
          });
        }
        return content;
      };
    }
  });

  var Card = withInstall$1(_Card);

  var props$q = {
    actions: {
      type: Array
    },
    author: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Object, Function]
    },
    content: {
      type: [String, Function]
    },
    datetime: {
      type: [String, Function]
    },
    quote: {
      type: [String, Function]
    },
    reply: {
      type: [String, Function]
    }
  };

  function _isSlot$f(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Comment = Vue.defineComponent({
    name: "TComment",
    props: props$q,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("comment");
      var renderTNodeJSX = useTNodeJSX();
      var getFlatChildren = useFlatChildrenSlots();
      return function () {
        var reply = renderTNodeJSX("reply");
        var author = renderTNodeJSX("author");
        var datetime = renderTNodeJSX("datetime");
        var quote = renderTNodeJSX("quote");
        var actions = renderTNodeJSX("actions");
        var content = renderTNodeJSX("content");
        var avatar = renderTNodeJSX("avatar");
        var showAuthorDatetime = Vue.computed(function () {
          return author || datetime;
        });
        var replyDom = reply ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__reply")
        }, [reply]) : null;
        var quoteDom = quote ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__quote")
        }, [quote]) : null;
        var avatarDom = avatar ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__avatar")
        }, [isString(avatar) ? Vue.createVNode("img", {
          "src": avatar,
          "alt": "",
          "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
        }, null) : avatar]) : null;
        var authorDatetimeDom = showAuthorDatetime.value && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__author")
        }, [author && Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__name")
        }, [author]), datetime && Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__time")
        }, [datetime])]);
        var renderActions = function renderActions() {
          if (!actions || !actions.length) return null;
          var flatChildren = getFlatChildren(actions);
          return Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__actions")
          }, [flatChildren.map(function (action, index) {
            return Vue.createVNode(Button, {
              "key": "action-".concat(index),
              "size": "small",
              "variant": "text"
            }, _isSlot$f(action) ? action : {
              "default": function _default() {
                return [action];
              }
            });
          })]);
        };
        var contentDom = Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [authorDatetimeDom, Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__detail")
        }, [content]), quoteDom, renderActions()]);
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [avatarDom, contentDom]), replyDom]);
      };
    }
  });

  var Comment = withInstall$1(_Comment);

  var props$p = {
    action: {
      type: Function
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    imageStyle: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "success", "fail", "network-error", "maintenance"].includes(val);
      }
    }
  };

  var MaintenanceSvg = Vue.defineComponent({
    name: "MaintenanceSvg",
    setup: function setup() {
      return function () {
        return Vue.createVNode("svg", {
          "width": "1em",
          "height": "1em",
          "viewBox": "0 0 48 48",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("g", {
          "id": "\xE8\xB7\xAF\xE5\x86\xB5\xE4\xBA\x8B\xE4\xBB\xB6-traffic-events"
        }, [Vue.createVNode("g", {
          "id": "Subtract"
        }, [Vue.createVNode("path", {
          "d": "M29.5237 17L24 3.82812L18.4763 17H29.5237Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M31.2011 21H16.7989L13.6699 28.4615H34.3301L31.2011 21Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M36.0076 32.4615H11.9924L9.66997 37.9997H6V41.9997H42V37.9997H38.33L36.0076 32.4615Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null)])])]);
      };
    }
  });

  var NetworkErrorSvg = Vue.defineComponent({
    name: "NetworkErrorSvg",
    setup: function setup() {
      return function () {
        return Vue.createVNode("svg", {
          "width": "1em",
          "height": "1em",
          "viewBox": "0 0 48 48",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("g", {
          "id": "\xE6\x97\xA0\xE7\xBD\x91\xE7\xBB\x9C-no-network"
        }, [Vue.createVNode("g", {
          "id": "Union"
        }, [Vue.createVNode("path", {
          "d": "M26 17V2H22V17H26Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M26.0078 20H22V24.0078H26.0078V20Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M2.75751 13.45C7.29713 9.80916 12.553 7.50276 18 6.53088V28H30V6.53052C35.4475 7.50216 40.7038 9.80854 45.2438 13.4497L46.8021 14.6995L24.0006 43.2016L1.19922 14.6998L2.75751 13.45Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null)])])]);
      };
    }
  });

  var EmptySvg = Vue.defineComponent({
    name: "EmptySvg",
    setup: function setup() {
      return function () {
        return Vue.createVNode("svg", {
          "width": "1em",
          "height": "1em",
          "viewBox": "0 0 48 48",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("g", {
          "id": "\xE6\x97\xA0\xE7\xBB\x93\xE6\x9E\x9C-no-result"
        }, [Vue.createVNode("g", {
          "id": "Union"
        }, [Vue.createVNode("path", {
          "d": "M22 0H26V8H22V0Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M10.002 1.17157L7.17353 4L13.002 9.82843L15.8304 7L10.002 1.17157Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "fill-rule": "evenodd",
          "clip-rule": "evenodd",
          "d": "M2 27.4689L10.8394 12H37.1606L46 27.4689V44H2V27.4689ZM13.1606 16L7.44636 26H17.8025L18.1889 27.5015C18.8551 30.0898 21.207 32 24 32C26.793 32 29.1449 30.0898 29.8111 27.5015L30.1975 26H40.5536L34.8394 16H13.1606Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null), Vue.createVNode("path", {
          "d": "M37.998 1.17157L32.1696 7L34.998 9.82843L40.8265 4L37.998 1.17157Z",
          "fill": "var(--td-text-color-placeholder)"
        }, null)])])]);
      };
    }
  });

  var FailSvg = Vue.defineComponent({
    name: "FailSvg",
    setup: function setup() {
      return function () {
        return Vue.createVNode("svg", {
          "width": "1em",
          "height": "1em",
          "viewBox": "0 0 48 48",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("path", {
          "fill-rule": "evenodd",
          "clip-rule": "evenodd",
          "d": "M24 6C14.0589 6 6 14.0589 6 24C6 33.9411 14.0589 42 24 42C33.9411 42 42 33.9411 42 24C42 14.0589 33.9411 6 24 6ZM2 24C2 11.8497 11.8497 2 24 2C36.1503 2 46 11.8497 46 24C46 36.1503 36.1503 46 24 46C11.8497 46 2 36.1503 2 24ZM26 13V28H22V13H26ZM22 31H26.0078V35.0078H22V31Z",
          "fill": "#D54941"
        }, null)]);
      };
    }
  });

  var SuccessSvg = Vue.defineComponent({
    name: "SuccessSvg",
    setup: function setup() {
      return function () {
        return Vue.createVNode("svg", {
          "width": "1em",
          "height": "1em",
          "viewBox": "0 0 48 48",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        }, [Vue.createVNode("path", {
          "fill-rule": "evenodd",
          "clip-rule": "evenodd",
          "d": "M24 42C33.9411 42 42 33.9411 42 24C42 14.0589 33.9411 6 24 6C14.0589 6 6 14.0589 6 24C6 33.9411 14.0589 42 24 42ZM46 24C46 36.1503 36.1503 46 24 46C11.8497 46 2 36.1503 2 24C2 11.8497 11.8497 2 24 2C36.1503 2 46 11.8497 46 24ZM21 32.8284L12.1716 24L15 21.1716L21 27.1716L33 15.1716L35.8284 18L21 32.8284Z",
          "fill": "#2BA471"
        }, null)]);
      };
    }
  });

  var _Empty = Vue.defineComponent({
    name: "TEmpty",
    components: {
      TImage: Image$1
    },
    props: props$p,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props2),
        size = _toRefs.size,
        propsImage = _toRefs.image,
        propsDescription = _toRefs.description,
        propsTitle = _toRefs.title,
        type = _toRefs.type;
      var _useConfig = useConfig("empty"),
        globalConfig = _useConfig.globalConfig;
      var classPrefix = usePrefixClass("empty");
      var showAction = Vue.computed(function () {
        return props2.action || slots.action;
      });
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var defaultMaps = {
        maintenance: {
          image: globalConfig.value.image.maintenance || MaintenanceSvg,
          title: globalConfig.value.titleText.maintenance
        },
        success: {
          image: globalConfig.value.image.success || SuccessSvg,
          title: globalConfig.value.titleText.success
        },
        fail: {
          image: globalConfig.value.image.fail || FailSvg,
          title: globalConfig.value.titleText.fail
        },
        "network-error": {
          image: globalConfig.value.image.networkError || NetworkErrorSvg,
          title: globalConfig.value.titleText.networkError
        },
        empty: {
          image: globalConfig.value.image.empty || EmptySvg,
          title: globalConfig.value.titleText.empty
        }
      };
      var emptyClasses = Vue.computed(function () {
        return [classPrefix.value, SIZE.value[size.value]];
      });
      var titleClasses = ["".concat(classPrefix.value, "__title")];
      var imageClasses = ["".concat(classPrefix.value, "__image")];
      var descriptionClasses = ["".concat(classPrefix.value, "__description")];
      var actionClass = ["".concat(classPrefix.value, "__action")];
      var typeImageProps = Vue.computed(function () {
        var _defaultMaps$type$val;
        return (_defaultMaps$type$val = defaultMaps[type.value]) !== null && _defaultMaps$type$val !== void 0 ? _defaultMaps$type$val : null;
      });
      var showImage = Vue.computed(function () {
        var _slots$image, _typeImageProps$value;
        return propsImage.value || (slots === null || slots === void 0 || (_slots$image = slots.image) === null || _slots$image === void 0 ? void 0 : _slots$image.call(slots)) || ((_typeImageProps$value = typeImageProps.value) === null || _typeImageProps$value === void 0 ? void 0 : _typeImageProps$value.image);
      });
      var showTitle = Vue.computed(function () {
        var _slots$title, _typeImageProps$value2;
        return propsTitle.value || (slots === null || slots === void 0 || (_slots$title = slots.title) === null || _slots$title === void 0 ? void 0 : _slots$title.call(slots)) || ((_typeImageProps$value2 = typeImageProps.value) === null || _typeImageProps$value2 === void 0 ? void 0 : _typeImageProps$value2.title);
      });
      var showDescription = Vue.computed(function () {
        var _slots$description;
        return propsDescription.value || (slots === null || slots === void 0 || (_slots$description = slots.description) === null || _slots$description === void 0 ? void 0 : _slots$description.call(slots));
      });
      var renderTitle = function renderTitle() {
        if (!showTitle.value) {
          return null;
        }
        return Vue.createVNode("div", {
          "class": titleClasses
        }, [showTitle.value]);
      };
      var renderDescription = function renderDescription() {
        if (!showDescription.value) {
          return null;
        }
        return Vue.createVNode("div", {
          "class": descriptionClasses
        }, [showDescription.value]);
      };
      var getImageIns = function getImageIns() {
        var data = showImage.value;
        var result = null;
        if (isString(data)) {
          result = Vue.createVNode(Image$1, {
            "src": data
          }, null);
        } else if (data && Reflect.has(data, "setup")) {
          result = Vue.h(data);
        } else if (isPlainObject(data)) {
          result = Vue.createVNode(Image$1, data, null);
        }
        return data ? result : null;
      };
      return function () {
        return Vue.createVNode("div", {
          "class": emptyClasses.value
        }, [showImage.value ? Vue.createVNode("div", {
          "class": imageClasses,
          "style": props2.imageStyle
        }, [slots !== null && slots !== void 0 && slots.image ? renderTNodeJSX("image") : getImageIns()]) : null, renderTitle(), renderDescription(), showAction.value ? Vue.createVNode("div", {
          "class": actionClass
        }, [renderTNodeJSX("action")]) : null]);
      };
    }
  });

  var Empty = withInstall$1(_Empty);

  function ownKeys$R(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$Q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$R(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$R(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useDrag$2(initTransform) {
    var transform = Vue.ref(initTransform);
    var mouseDownHandler = function mouseDownHandler(e) {
      var startX = e.pageX,
        startY = e.pageY;
      var _transform$value = transform.value,
        translateX = _transform$value.translateX,
        translateY = _transform$value.translateY;
      var mouseMoveHandler = function mouseMoveHandler(e2) {
        var pageX = e2.pageX,
          pageY = e2.pageY;
        transform.value = {
          translateX: translateX + pageX - startX,
          translateY: translateY + pageY - startY
        };
      };
      var _mouseUpHandler = function mouseUpHandler() {
        document.removeEventListener("mousemove", mouseMoveHandler);
        document.removeEventListener("mouseup", _mouseUpHandler);
      };
      document.addEventListener("mousemove", mouseMoveHandler);
      document.addEventListener("mouseup", _mouseUpHandler);
    };
    var resetTransform = function resetTransform() {
      transform.value = _objectSpread$Q({}, initTransform);
    };
    return {
      transform: transform,
      mouseDownHandler: mouseDownHandler,
      resetTransform: resetTransform
    };
  }
  function useMirror() {
    var mirror = Vue.ref(1);
    var onMirror = function onMirror() {
      mirror.value *= -1;
    };
    var resetMirror = function resetMirror() {
      mirror.value = 1;
    };
    return {
      mirror: mirror,
      onMirror: onMirror,
      resetMirror: resetMirror
    };
  }
  function useScale() {
    var imageScale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      max: 2,
      min: 0.5,
      step: 0.2
    };
    var max = imageScale.max,
      min = imageScale.min,
      step = imageScale.step,
      defaultScale = imageScale.defaultScale;
    var scale = Vue.ref(defaultScale !== null && defaultScale !== void 0 ? defaultScale : 1);
    var onZoomIn = throttle$1(function () {
      var result = positiveAdd(scale.value, step);
      setScale(result);
    }, 50);
    var onZoomOut = throttle$1(function () {
      var result = positiveSubtract(scale.value, step);
      setScale(result);
    }, 50);
    var resetScale = function resetScale() {
      scale.value = defaultScale !== null && defaultScale !== void 0 ? defaultScale : 1;
    };
    var setScale = function setScale(newScale) {
      var value = newScale;
      if (newScale < min) {
        value = min;
      }
      if (newScale > max) {
        value = max;
      }
      scale.value = value;
    };
    Vue.watch(function () {
      return imageScale;
    }, function () {
      return resetScale();
    });
    return {
      scale: scale,
      onZoomIn: onZoomIn,
      onZoomOut: onZoomOut,
      resetScale: resetScale
    };
  }
  function useRotate() {
    var rotate = Vue.ref(0);
    var ROTATE_DEG = 90;
    var onRotate = function onRotate() {
      rotate.value += ROTATE_DEG;
    };
    var resetRotate = function resetRotate() {
      rotate.value = 0;
    };
    return {
      rotate: rotate,
      onRotate: onRotate,
      resetRotate: resetRotate
    };
  }

  var TImageItem = Vue.defineComponent({
    name: "TImageItem",
    props: {
      rotate: Number,
      scale: Number,
      mirror: Number,
      src: [String, Object],
      placementSrc: [String, Object],
      isSvg: Boolean,
      imageReferrerpolicy: String
    },
    setup: function setup(props) {
      var _toRefs = Vue.toRefs(props),
        src = _toRefs.src,
        placementSrc = _toRefs.placementSrc,
        isSvg = _toRefs.isSvg;
      var classPrefix = usePrefixClass();
      var error = Vue.ref(false);
      var loaded = Vue.ref(false);
      var _useDrag = useDrag$2({
          translateX: 0,
          translateY: 0
        }),
        transform = _useDrag.transform,
        mouseDownHandler = _useDrag.mouseDownHandler;
      var _useConfig = useConfig("imageViewer"),
        globalConfig = _useConfig.globalConfig;
      var errorText = globalConfig.value.errorText;
      var svgElRef = Vue.ref();
      var imgStyle = Vue.computed(function () {
        return {
          transform: "rotate(".concat(props.rotate, "deg) scale(").concat(props.scale, ")"),
          display: !props.placementSrc || loaded.value ? "block" : "none"
        };
      });
      var placementImgStyle = Vue.computed(function () {
        return {
          transform: "rotate(".concat(props.rotate, "deg) scale(").concat(props.scale, ")"),
          display: !loaded.value ? "block" : "none"
        };
      });
      var boxStyle = Vue.computed(function () {
        var _transform$value = transform.value,
          translateX = _transform$value.translateX,
          translateY = _transform$value.translateY;
        return {
          transform: "translate(".concat(translateX, "px, ").concat(translateY, "px) scale(").concat(props.mirror, ", 1)")
        };
      });
      var resetStatus = function resetStatus() {
        error.value = false;
        loaded.value = false;
        if (isSvg.value) {
          createSvgShadow(mainImagePreviewUrl.value);
        }
      };
      var createSvgShadow = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
          var _element$classList;
          var response, svgText, element, shadowRoot, container, svgElement, svgViewBox, viewBoxValues, svgViewBoxWidth, bbox, calculatedViewBox;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 1;
                return fetch(url);
              case 1:
                response = _context.sent;
                if (response.ok) {
                  _context.next = 2;
                  break;
                }
                error.value = true;
                throw new Error("Failed to fetch SVG: ".concat(response.statusText));
              case 2:
                _context.next = 3;
                return response.text();
              case 3:
                svgText = _context.sent;
                element = svgElRef.value;
                element.innerHTML = "";
                (_element$classList = element.classList) === null || _element$classList === void 0 || _element$classList.add("".concat(classPrefix.value, "-image-viewer__modal-image-svg"));
                shadowRoot = element.attachShadow({
                  mode: "closed"
                });
                container = document.createElement("div");
                container.style.background = "var(--td-bg-color-container)";
                container.style.padding = "4px";
                container.style.borderRadius = "4px";
                container.style.maxHeight = "100%";
                container.style.maxWidth = "100%";
                container.style.boxSizing = "border-box";
                container.style.height = "auto";
                container.innerHTML = svgText;
                shadowRoot.appendChild(container);
                svgElement = container.querySelector("svg");
                if (svgElement) {
                  svgViewBox = svgElement.getAttribute("viewBox");
                  if (svgViewBox) {
                    viewBoxValues = svgViewBox.split(/[\s\,]/).filter(function (v) {
                      return v;
                    }).map(parseFloat);
                    svgViewBoxWidth = viewBoxValues[2];
                    container.style.width = "".concat(svgViewBoxWidth, "px");
                  } else {
                    bbox = svgElement.getBBox();
                    calculatedViewBox = "".concat(bbox.x, " ").concat(bbox.y, " ").concat(bbox.width, " ").concat(bbox.height);
                    svgElement.setAttribute("viewBox", calculatedViewBox);
                    container.style.width = "".concat(bbox.width, "px");
                  }
                  svgElement.style.maxHeight = "100%";
                  svgElement.style.maxWidth = "100%";
                  svgElement.style.height = "auto";
                  svgElement.style.display = "block";
                  svgElement.style.lineHeight = "normal";
                }
                loaded.value = true;
              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function createSvgShadow(_x) {
          return _ref.apply(this, arguments);
        };
      }();
      var _useImagePreviewUrl = useImagePreviewUrl(src),
        mainImagePreviewUrl = _useImagePreviewUrl.previewUrl;
      var _useImagePreviewUrl2 = useImagePreviewUrl(placementSrc),
        placementImagePreviewUrl = _useImagePreviewUrl2.previewUrl;
      Vue.watch([mainImagePreviewUrl, placementImagePreviewUrl], function () {
        resetStatus();
      });
      Vue.onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function (_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!isSvg.value) {
                _context2.next = 1;
                break;
              }
              _context2.next = 1;
              return createSvgShadow(mainImagePreviewUrl.value);
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      })));
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-pic")
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-box"),
          "style": boxStyle.value
        }, [error.value && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error")
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error-content")
        }, [Vue.createVNode(ImageErrorIcon, {
          "size": "4em"
        }, null), Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__img-error-text")
        }, [errorText])])]), !error.value && !!props.placementSrc && placementImagePreviewUrl.value && Vue.createVNode("img", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-image"),
          "onMousedown": function onMousedown(event) {
            event.stopPropagation();
            mouseDownHandler(event);
          },
          "src": placementImagePreviewUrl.value,
          "style": placementImgStyle.value,
          "referrerpolicy": props.imageReferrerpolicy,
          "alt": "image",
          "draggable": "false"
        }, null), !error.value && mainImagePreviewUrl.value && !isSvg.value && Vue.createVNode("img", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-image"),
          "onMousedown": function onMousedown(event) {
            event.stopPropagation();
            mouseDownHandler(event);
          },
          "src": mainImagePreviewUrl.value,
          "onLoad": function onLoad() {
            return loaded.value = true;
          },
          "onError": function onError() {
            return error.value = true;
          },
          "style": imgStyle.value,
          "referrerpolicy": props.imageReferrerpolicy,
          "alt": "image",
          "draggable": "false"
        }, null), !error.value && mainImagePreviewUrl.value && isSvg.value && Vue.createVNode("div", {
          "ref": svgElRef,
          "class": "".concat(classPrefix.value, "-image-viewer__modal-image"),
          "onMousedown": function onMousedown(event) {
            event.stopPropagation();
            mouseDownHandler(event);
          },
          "data-alt": "svg",
          "style": imgStyle.value,
          "draggable": "false"
        }, null)])]);
      };
    }
  });

  var TImageViewerIcon = Vue.defineComponent({
    name: "TImageModalIcon",
    props: {
      disabled: Boolean,
      onClick: Function,
      label: String,
      icon: Function
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var wrapClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-image-viewer__modal-icon"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-disabled"), props.disabled)];
      });
      return function () {
        return Vue.createVNode("div", {
          "class": wrapClass.value,
          "onClick": props.onClick
        }, [renderTNodeJSX("icon"), props.label && Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-image-viewer__modal-icon-label")
        }, [props.label])]);
      };
    }
  });

  var props$o = {
    attach: {
      type: [String, Function]
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function, null]
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function, null]
    },
    confirmLoading: {
      type: Boolean,
      "default": void 0
    },
    confirmOnEnter: Boolean,
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    dialogClassName: {
      type: String,
      "default": ""
    },
    dialogStyle: {
      type: Object
    },
    draggable: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: Boolean,
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless", "normal", "full-screen"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "center"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    top: {
      type: [String, Number]
    },
    visible: Boolean,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    onBeforeClose: Function,
    onBeforeOpen: Function,
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onClosed: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOpened: Function,
    onOverlayClick: Function
  };

  function ownKeys$Q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$P(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$Q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$Q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useAction(action) {
    var instance = Vue.getCurrentInstance();
    var renderTNodeJSX = useTNodeJSX();
    var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps(options) {
      var globalConfirm = options.globalConfirm,
        theme = options.theme,
        globalConfirmBtnTheme = options.globalConfirmBtnTheme;
      var defaultTheme = getPropertyValFromObj(omit$1(globalConfirmBtnTheme, ["info"]), theme) || "primary";
      var props = {
        theme: defaultTheme,
        size: options.size,
        onClick: function onClick(e) {
          action.confirmBtnAction(e);
        }
      };
      if (isString(globalConfirm)) {
        props.content = globalConfirm;
      } else if (isObject(globalConfirm)) {
        props = _objectSpread$P(_objectSpread$P({}, props), globalConfirm);
      }
      return props;
    };
    var getDefaultCancelBtnProps = function getDefaultCancelBtnProps(options) {
      var globalCancel = options.globalCancel;
      var props = {
        theme: "default",
        size: options.size,
        onClick: function onClick(e) {
          action.cancelBtnAction(e);
        }
      };
      if (isString(globalCancel)) {
        props.content = globalCancel;
      } else if (isObject(globalCancel)) {
        props = _objectSpread$P(_objectSpread$P({}, props), globalCancel);
      }
      return props;
    };
    var getButtonByProps = function getButtonByProps(button, params) {
      var defaultButtonProps = params.defaultButtonProps,
        className = params.className,
        confirmLoading = params.confirmLoading;
      var newOptions = defaultButtonProps;
      if (isString(button)) {
        newOptions.content = button;
      } else if (isObject(button)) {
        newOptions = _objectSpread$P(_objectSpread$P({}, newOptions), button);
      }
      if (confirmLoading !== void 0) {
        newOptions.loading = confirmLoading;
      }
      return Vue.createVNode(Button, Vue.mergeProps({
        "class": className
      }, newOptions), null);
    };
    var getConfirmBtn = function getConfirmBtn(options) {
      var confirmBtn = options.confirmBtn,
        className = options.className,
        confirmLoading = options.confirmLoading;
      if (confirmBtn === null) return null;
      if (confirmBtn && instance.slots.confirmBtn) {
        console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
      }
      var defaultButtonProps = getDefaultConfirmBtnProps(options);
      if (!confirmBtn && !instance.slots.confirmBtn) {
        return Vue.createVNode(Button, Vue.mergeProps({
          "class": className,
          "loading": confirmLoading
        }, defaultButtonProps), null);
      }
      if (confirmBtn && ["string", "object"].includes(_typeof$3(confirmBtn))) {
        return getButtonByProps(confirmBtn, {
          defaultButtonProps: defaultButtonProps,
          className: className,
          confirmLoading: confirmLoading
        });
      }
      return renderTNodeJSX("confirmBtn");
    };
    var getCancelBtn = function getCancelBtn(options) {
      var cancelBtn = options.cancelBtn,
        className = options.className;
      if (cancelBtn === null) return null;
      if (cancelBtn && instance.slots.cancelBtn) {
        console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
      }
      var defaultButtonProps = getDefaultCancelBtnProps(options);
      if (!cancelBtn && !instance.slots.cancelBtn) {
        return Vue.createVNode(Button, Vue.mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }
      if (cancelBtn && ["string", "object"].includes(_typeof$3(cancelBtn))) {
        return getButtonByProps(cancelBtn, {
          defaultButtonProps: defaultButtonProps,
          className: className
        });
      }
      return renderTNodeJSX("cancelBtn");
    };
    return {
      getConfirmBtn: getConfirmBtn,
      getCancelBtn: getCancelBtn
    };
  }

  function useSameTarget(handleClick) {
    var MOUSEDOWN_TARGET = false;
    var MOUSEUP_TARGET = false;
    var onClick = function onClick(e) {
      if (MOUSEDOWN_TARGET && MOUSEUP_TARGET) {
        handleClick === null || handleClick === void 0 || handleClick(e);
      }
      MOUSEDOWN_TARGET = false;
      MOUSEUP_TARGET = false;
    };
    var onMousedown = function onMousedown(e) {
      MOUSEDOWN_TARGET = e.target === e.currentTarget;
    };
    var onMouseup = function onMouseup(e) {
      MOUSEUP_TARGET = e.target === e.currentTarget;
    };
    return {
      onClick: onClick,
      onMousedown: onMousedown,
      onMouseup: onMouseup
    };
  }

  function getScrollbarWidthWithCSS() {
    var defaultScrollbarWidth = 6;
    if (typeof navigator === "undefined" || !navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    if (/Firefox/.test(navigator.userAgent)) {
      scrollbarWidth -= 4;
    }
    if (getIEVersion() <= 11) {
      scrollbarWidth = 12;
    }
    return scrollbarWidth;
  }
  function getScrollbarWidth() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
    if (container === document.body) {
      return window.innerWidth - document.documentElement.clientWidth;
    }
    return container.offsetWidth - container.clientWidth;
  }

  function getCSSValue(v) {
    return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }
  function initDragEvent(dragBox) {
    var target = dragBox;
    var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;
    var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
    target.addEventListener("mousedown", function (targetEvent) {
      var disX = targetEvent.clientX - target.offsetLeft;
      var disY = targetEvent.clientY - target.offsetTop;
      var dialogW = target.offsetWidth;
      var dialogH = target.offsetHeight;
      if (dialogW > windowInnerWidth || dialogH > windowInnerHeight) return;
      function mouseMoverHandler(documentEvent) {
        var left = documentEvent.clientX - disX;
        var top = documentEvent.clientY - disY;
        if (left < 0) left = 0;
        if (top < 0) top = 0;
        if (windowInnerWidth - target.offsetWidth - left < 0) left = windowInnerWidth - target.offsetWidth;
        if (windowInnerHeight - target.offsetHeight - top < 0) top = windowInnerHeight - target.offsetHeight;
        target.style.position = "absolute";
        target.style.left = "".concat(left, "px");
        target.style.top = "".concat(top, "px");
      }
      function mouseUpHandler() {
        document.removeEventListener("mousemove", mouseMoverHandler);
        document.removeEventListener("mouseup", mouseUpHandler);
      }
      document.addEventListener("mousemove", mouseMoverHandler);
      document.addEventListener("mouseup", mouseUpHandler);
      document.addEventListener("dragend", mouseUpHandler);
    });
  }

  var dialogCardProps = {
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function]
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    confirmBtn: {
      type: [String, Object, Function]
    },
    confirmLoading: {
      type: Boolean,
      "default": void 0
    },
    footer: {
      type: [Boolean, Function]
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    onCancel: Function,
    onCloseBtnClick: Function,
    onConfirm: Function
  };

  function ownKeys$P(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$O(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$P(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$P(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _DialogCard = Vue.defineComponent({
    name: "TDialogCard",
    directives: {
      draggable: function draggable(el, binding) {
        if (el && binding && binding.value) {
          initDragEvent(el);
        }
      }
    },
    props: _objectSpread$O(_objectSpread$O({}, props$o), dialogCardProps),
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var rootRef = Vue.ref(null);
      var COMPONENT_NAME = usePrefixClass("dialog");
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var _useConfig = useConfig("dialog"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: TdCloseIcon,
          InfoCircleFilledIcon: TdInfoCircleFilledIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon
        }),
        CloseIcon = _useGlobalIcon.CloseIcon,
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var _toRefs = Vue.toRefs(props),
        cancelBtn = _toRefs.cancelBtn,
        confirmBtn = _toRefs.confirmBtn,
        confirmLoading = _toRefs.confirmLoading;
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props$onConfirm;
        return (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
          e: e
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props$onCancel;
        return (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 ? void 0 : _props$onCancel.call(props, {
          e: e
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      var isModeLess = Vue.computed(function () {
        return props.mode === "modeless";
      });
      var isFullScreen = Vue.computed(function () {
        return props.mode === "full-screen";
      });
      var closeBtnAction = function closeBtnAction(e) {
        var _props$onCloseBtnClic;
        return props === null || props === void 0 || (_props$onCloseBtnClic = props.onCloseBtnClick) === null || _props$onCloseBtnClic === void 0 ? void 0 : _props$onCloseBtnClic.call(props, {
          e: e
        });
      };
      var onStopDown = function onStopDown(e) {
        if (isModeLess.value && props !== null && props !== void 0 && props.draggable) e.stopPropagation();
      };
      var resetPosition = function resetPosition() {
        if (!rootRef.value && isModeLess.value && props.draggable) return;
        rootRef.value.style.position = "relative";
        rootRef.value.style.left = "unset";
        rootRef.value.style.top = "unset";
      };
      expose({
        $el: rootRef,
        resetPosition: resetPosition
      });
      var dialogClass = Vue.computed(function () {
        var dialogClass2 = ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "__modal-").concat(props.theme), isModeLess.value && props.draggable && "".concat(COMPONENT_NAME.value, "--draggable"), props.dialogClassName];
        if (isFullScreen.value) {
          dialogClass2.push("".concat(COMPONENT_NAME.value, "__fullscreen"));
        } else {
          dialogClass2.push.apply(dialogClass2, ["".concat(COMPONENT_NAME.value, "--default"), "".concat(COMPONENT_NAME.value, "--").concat(props.placement)]);
        }
        return dialogClass2;
      });
      var dialogStyle = Vue.computed(function () {
        return !isFullScreen.value ? _objectSpread$O({
          width: getCSSValue(props.width)
        }, props.dialogStyle) : _objectSpread$O({}, props.dialogStyle);
      });
      var renderCard = function renderCard() {
        var confirmBtnLoading = Vue.computed(function () {
          var _confirmBtn$value;
          return ((_confirmBtn$value = confirmBtn.value) === null || _confirmBtn$value === void 0 ? void 0 : _confirmBtn$value.loading) || confirmLoading.value;
        });
        var defaultFooter = Vue.createVNode("div", null, [getCancelBtn({
          cancelBtn: cancelBtn.value,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        }), getConfirmBtn({
          theme: props === null || props === void 0 ? void 0 : props.theme,
          confirmBtn: confirmBtn.value,
          globalConfirm: globalConfig.value.confirm,
          globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm"),
          confirmLoading: confirmBtnLoading.value
        })]);
        var footerContent = renderTNodeJSX("footer", defaultFooter);
        var renderHeader = function renderHeader() {
          var _renderTNodeJSX;
          var header = (_renderTNodeJSX = renderTNodeJSX("header", Vue.createVNode("h5", {
            "class": "title"
          }, null))) !== null && _renderTNodeJSX !== void 0 ? _renderTNodeJSX : false;
          var headerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__header"), "".concat(COMPONENT_NAME.value, "__header--fullscreen")] : "".concat(COMPONENT_NAME.value, "__header");
          var closeClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__close"), "".concat(COMPONENT_NAME.value, "__close--fullscreen")] : "".concat(COMPONENT_NAME.value, "__close");
          var getIcon = function getIcon() {
            var icon = {
              info: Vue.createVNode(InfoCircleFilledIcon, {
                "class": "".concat(classPrefix.value, "-is-info")
              }, null),
              warning: Vue.createVNode(ErrorCircleFilledIcon, {
                "class": "".concat(classPrefix.value, "-is-warning")
              }, null),
              danger: Vue.createVNode(ErrorCircleFilledIcon, {
                "class": "".concat(classPrefix.value, "-is-error")
              }, null),
              success: Vue.createVNode(CheckCircleFilledIcon, {
                "class": "".concat(classPrefix.value, "-is-success")
              }, null)
            };
            return icon[props === null || props === void 0 ? void 0 : props.theme];
          };
          return (header || (props === null || props === void 0 ? void 0 : props.closeBtn)) && Vue.createVNode("div", {
            "class": headerClassName,
            "onMousedown": onStopDown
          }, [Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__header-content")
          }, [getIcon(), header]), props !== null && props !== void 0 && props.closeBtn ? Vue.createVNode("span", {
            "class": closeClassName,
            "onClick": closeBtnAction
          }, [renderTNodeJSX("closeBtn", Vue.createVNode(CloseIcon, null, null))]) : null]);
        };
        var renderBody = function renderBody() {
          var body = renderContent("default", "body");
          var bodyClassName = (props === null || props === void 0 ? void 0 : props.theme) === "default" ? ["".concat(COMPONENT_NAME.value, "__body")] : ["".concat(COMPONENT_NAME.value, "__body__icon")];
          if (isFullScreen.value && footerContent) {
            bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen"));
          } else if (isFullScreen.value) {
            bodyClassName.push("".concat(COMPONENT_NAME.value, "__body--fullscreen--without-footer"));
          }
          return Vue.createVNode("div", {
            "class": bodyClassName,
            "onMousedown": onStopDown
          }, [body]);
        };
        var renderFooter = function renderFooter() {
          var footerClassName = isFullScreen.value ? ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--fullscreen")] : "".concat(COMPONENT_NAME.value, "__footer");
          return footerContent && Vue.createVNode("div", {
            "class": footerClassName,
            "onMousedown": onStopDown
          }, [footerContent]);
        };
        return Vue.createVNode(Vue.Fragment, null, [renderHeader(), renderBody(), !!props.footer && renderFooter()]);
      };
      return function () {
        return Vue.withDirectives(Vue.createVNode("div", {
          "key": "dialog",
          "ref": rootRef,
          "class": dialogClass.value,
          "style": dialogStyle.value
        }, [renderCard()]), [[Vue.resolveDirective("draggable"), isModeLess.value && props.draggable]]);
      };
    }
  });

  var _excluded$2 = ["theme", "onConfirm", "onCancel", "onCloseBtnClick"];
  var mousePosition;
  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };
  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }
  var key$1 = 1;
  var _Dialog = Vue.defineComponent({
    name: "TDialog",
    inheritAttrs: false,
    props: props$o,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var COMPONENT_NAME = usePrefixClass("dialog");
      var classPrefix = usePrefixClass();
      var dialogCardRef = Vue.ref(null);
      var _useConfig = useConfig("dialog"),
        globalConfig = _useConfig.globalConfig;
      var confirmBtnAction = function confirmBtnAction(context2) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, context2);
      };
      var cancelBtnAction = function cancelBtnAction(context2) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, context2);
        emitCloseEvent({
          e: context2.e,
          trigger: "cancel"
        });
      };
      var teleportElement = useTeleport(function () {
        return props2.attach;
      });
      useDestroyOnClose();
      var timer = Vue.ref();
      var styleEl = Vue.ref();
      var isModal = Vue.computed(function () {
        return props2.mode === "modal";
      });
      var isModeLess = Vue.computed(function () {
        return props2.mode === "modeless";
      });
      var isFullScreen = Vue.computed(function () {
        return props2.mode === "full-screen";
      });
      var computedVisible = Vue.computed(function () {
        return props2.visible;
      });
      var maskClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__mask"), !props2.showOverlay && "".concat(classPrefix.value, "-is-hidden")];
      });
      var positionClass = Vue.computed(function () {
        if (isFullScreen.value) return ["".concat(COMPONENT_NAME.value, "__position_fullscreen")];
        if (isModal.value || isModeLess.value) {
          return ["".concat(COMPONENT_NAME.value, "__position"), !!props2.top && "".concat(COMPONENT_NAME.value, "--top"), "".concat(props2.placement && !props2.top ? "".concat(COMPONENT_NAME.value, "--").concat(props2.placement) : "")];
        }
        return [];
      });
      var wrapClass = Vue.computed(function () {
        return isFullScreen.value || isModal.value || isModeLess.value ? ["".concat(COMPONENT_NAME.value, "__wrap")] : null;
      });
      var positionStyle = Vue.computed(function () {
        if (isFullScreen.value) return {};
        var top = props2.top;
        var topStyle = {};
        if (top !== void 0) {
          var topValue = getCSSValue(top);
          topStyle = {
            paddingTop: topValue
          };
        }
        return topStyle;
      });
      var _usePopupManager = usePopupManager("dialog", {
          visible: computedVisible
        }),
        isTopInteractivePopup = _usePopupManager.isTopInteractivePopup;
      var isMounted = Vue.ref(false);
      Vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (value) {
          var _document$activeEleme;
          isMounted.value = true;
          if (isModal.value && !props2.showInAttachedElement || isFullScreen.value) {
            if (props2.preventScrollThrough) {
              document.body.appendChild(styleEl.value);
            }
            Vue.nextTick(function () {
              var _dialogCardRef$value;
              if (mousePosition && (_dialogCardRef$value = dialogCardRef.value) !== null && _dialogCardRef$value !== void 0 && _dialogCardRef$value.$el) {
                var el = dialogCardRef.value.$el;
                el.style.transformOrigin = "".concat(mousePosition.x - el.offsetLeft, "px ").concat(mousePosition.y - el.offsetTop, "px");
              }
            });
          }
          (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 || _document$activeEleme.blur();
        } else {
          clearStyleFunc();
        }
        addKeyboardEvent(value);
      });
      function destroySelf() {
        var _styleEl$value$parent, _styleEl$value$parent2;
        (_styleEl$value$parent = styleEl.value.parentNode) === null || _styleEl$value$parent === void 0 || (_styleEl$value$parent2 = _styleEl$value$parent.removeChild) === null || _styleEl$value$parent2 === void 0 || _styleEl$value$parent2.call(_styleEl$value$parent, styleEl.value);
      }
      function clearStyleFunc() {
        clearTimeout(timer.value);
        timer.value = setTimeout(function () {
          destroySelf();
        }, 150);
      }
      var addKeyboardEvent = function addKeyboardEvent(status) {
        if (status) {
          document.addEventListener("keydown", keyboardEvent);
          props2.confirmOnEnter && document.addEventListener("keydown", keyboardEnterEvent);
        } else {
          document.removeEventListener("keydown", keyboardEvent);
          props2.confirmOnEnter && document.removeEventListener("keydown", keyboardEnterEvent);
        }
      };
      var keyboardEnterEvent = function keyboardEnterEvent(e) {
        var eventSrc = e.target;
        if (eventSrc.tagName.toLowerCase() === "input") return;
        var code = e.code;
        if ((code === "Enter" || code === "NumpadEnter") && isTopInteractivePopup()) {
          var _props2$onConfirm2;
          (_props2$onConfirm2 = props2.onConfirm) === null || _props2$onConfirm2 === void 0 || _props2$onConfirm2.call(props2, {
            e: e
          });
        }
      };
      var keyboardEvent = function keyboardEvent(e) {
        if (e.code === "Escape" && isTopInteractivePopup()) {
          var _props2$onEscKeydown, _props2$closeOnEscKey;
          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 || _props2$onEscKeydown.call(props2, {
            e: e
          });
          if ((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) {
            emitCloseEvent({
              e: e,
              trigger: "esc"
            });
            e.stopImmediatePropagation();
          }
        }
      };
      var overlayAction = function overlayAction(e) {
        var _props2$closeOnOverla;
        if (props2.showOverlay && ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick)) {
          var _props2$onOverlayClic;
          (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
            e: e
          });
          emitCloseEvent({
            e: e,
            trigger: "overlay"
          });
        }
      };
      var _useSameTarget = useSameTarget(overlayAction),
        onClick = _useSameTarget.onClick,
        onMousedown = _useSameTarget.onMousedown,
        onMouseup = _useSameTarget.onMouseup;
      var closeBtnAction = function closeBtnAction(context2) {
        var _props2$onCloseBtnCli;
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, context2);
        emitCloseEvent({
          trigger: "close-btn",
          e: context2.e
        });
      };
      var beforeEnter = function beforeEnter() {
        var _props2$onBeforeOpen;
        (_props2$onBeforeOpen = props2.onBeforeOpen) === null || _props2$onBeforeOpen === void 0 || _props2$onBeforeOpen.call(props2);
      };
      var afterEnter = function afterEnter() {
        var _props2$onOpened;
        (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 || _props2$onOpened.call(props2);
      };
      var beforeLeave = function beforeLeave() {
        var _props2$onBeforeClose;
        (_props2$onBeforeClose = props2.onBeforeClose) === null || _props2$onBeforeClose === void 0 || _props2$onBeforeClose.call(props2);
      };
      var afterLeave = function afterLeave() {
        var _dialogCardRef$value2, _dialogCardRef$value3, _props2$onClosed;
        (_dialogCardRef$value2 = dialogCardRef.value) === null || _dialogCardRef$value2 === void 0 || (_dialogCardRef$value3 = _dialogCardRef$value2.resetPosition) === null || _dialogCardRef$value3 === void 0 || _dialogCardRef$value3.call(_dialogCardRef$value2);
        (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 || _props2$onClosed.call(props2);
      };
      var emitCloseEvent = function emitCloseEvent(ctx) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, ctx);
        context.emit("update:visible", false);
      };
      var renderDialog = function renderDialog() {
        var theme = props2.theme;
          props2.onConfirm;
          props2.onCancel;
          props2.onCloseBtnClick;
          var otherProps = _objectWithoutProperties$1(props2, _excluded$2);
        return Vue.createVNode("div", {
          "class": wrapClass.value
        }, [Vue.createVNode("div", {
          "class": positionClass.value,
          "style": positionStyle.value,
          "onClick": onClick,
          "onMousedown": onMousedown,
          "onMouseup": onMouseup
        }, [Vue.createVNode(_DialogCard, Vue.mergeProps({
          "ref": dialogCardRef,
          "theme": theme
        }, otherProps, {
          "onConfirm": confirmBtnAction,
          "onCancel": cancelBtnAction,
          "onCloseBtnClick": closeBtnAction
        }), context.slots)])]);
      };
      Vue.onMounted(function () {
        var hasScrollBar = document.documentElement.scrollHeight > document.documentElement.clientHeight;
        var scrollWidth = hasScrollBar ? getScrollbarWidth() : 0;
        styleEl.value = document.createElement("style");
        styleEl.value.dataset.id = "td_dialog_".concat(+new Date(), "_").concat(key$1 += 1);
        styleEl.value.innerHTML = "\n        html body {\n          overflow-y: hidden;\n          width: calc(100% - ".concat(scrollWidth, "px);\n        }\n      ");
      });
      Vue.onBeforeUnmount(function () {
        addKeyboardEvent(false);
        destroySelf();
      });
      var shouldRender = Vue.computed(function () {
        var destroyOnClose = props2.destroyOnClose,
          visible = props2.visible,
          lazy = props2.lazy;
        if (!isMounted.value) {
          return !lazy;
        } else {
          return visible || !destroyOnClose;
        }
      });
      return function () {
        var maskView = (isModal.value || isFullScreen.value) && Vue.createVNode("div", {
          "key": "mask",
          "class": maskClass.value
        }, null);
        var dialogView = renderDialog();
        var view = [maskView, dialogView];
        var ctxStyle = {
          zIndex: props2.zIndex
        };
        var ctxClass = ["".concat(COMPONENT_NAME.value, "__ctx"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__ctx--fixed"), isModal.value || isFullScreen.value), "".concat(COMPONENT_NAME.value, "__ctx--absolute"), isModal.value && props2.showInAttachedElement), "".concat(COMPONENT_NAME.value, "__ctx--modeless"), isModeLess.value)];
        return Vue.createVNode(Vue.Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          "default": function _default() {
            return [Vue.createVNode(Vue.Transition, {
              "duration": 300,
              "name": "".concat(COMPONENT_NAME.value, "-zoom__vue"),
              "onBeforeEnter": beforeEnter,
              "onAfterEnter": afterEnter,
              "onBeforeLeave": beforeLeave,
              "onAfterLeave": afterLeave
            }, {
              "default": function _default() {
                return [shouldRender.value && Vue.withDirectives(Vue.createVNode("div", Vue.mergeProps({
                  "class": ctxClass,
                  "style": ctxStyle
                }, context.attrs), [view]), [[Vue.vShow, props2.visible]])];
              }
            })];
          }
        });
      };
    }
  });

  function ownKeys$O(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$N(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$O(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$O(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var createDialog = function createDialog(props, context) {
    var options = _objectSpread$N({}, props);
    var wrapper = document.createElement("div");
    var visible = Vue.ref(false);
    var className = options.className,
      style = options.style;
    var preClassName = className;
    var updateClassNameStyle = function updateClassNameStyle(className2, style2) {
      if (className2) {
        if (preClassName && preClassName !== className2) {
          var _wrapper$firstElement;
          (_wrapper$firstElement = wrapper.firstElementChild.classList).remove.apply(_wrapper$firstElement, _toConsumableArray(preClassName.split(" ").map(function (name) {
            return name.trim();
          })));
        }
        className2.split(" ").forEach(function (name) {
          wrapper.firstElementChild.classList.add(name.trim());
        });
      }
      if (style2) {
        wrapper.firstElementChild.style.cssText += style2;
      }
      preClassName = className2;
    };
    function destroySelf() {
      Vue.render(null, wrapper);
      wrapper.remove();
    }
    var component = Vue.defineComponent({
      setup: function setup(props2, _ref) {
        var expose = _ref.expose;
        var dialogOptions = Vue.ref(options);
        Vue.onMounted(function () {
          visible.value = true;
          document.activeElement.blur();
          Vue.nextTick(function () {
            updateClassNameStyle(className, style);
          });
        });
        var update = function update(newOptions) {
          dialogOptions.value = _objectSpread$N(_objectSpread$N({}, options), newOptions);
        };
        expose({
          update: update
        });
        return function () {
          var onClose = options.onClose || function () {
            visible.value = false;
            if (options.destroyOnClose) {
              setTimeout(function () {
                destroySelf();
              }, 300);
            }
          };
          delete options.className;
          delete options.style;
          return Vue.h(_Dialog, _objectSpread$N({
            onClose: onClose,
            visible: visible.value
          }, dialogOptions.value));
        };
      }
    });
    var dialog = Vue.createVNode(component);
    if (context !== null && context !== void 0 ? context : DialogPlugin._context) {
      dialog.appContext = context !== null && context !== void 0 ? context : DialogPlugin._context;
    }
    var container = getAttach(options.attach);
    if (container) {
      container.appendChild(wrapper);
    } else {
      console.error("attach is not exist");
    }
    Vue.render(dialog, wrapper);
    var dialogNode = {
      show: function show() {
        visible.value = true;
      },
      hide: function hide() {
        visible.value = false;
      },
      update: function update(newOptions) {
        dialog.component.exposed.update(omit$1(newOptions, ["className", "style"]));
        updateClassNameStyle(newOptions.className, newOptions.style);
      },
      destroy: function destroy() {
        visible.value = false;
        setTimeout(function () {
          destroySelf();
        }, 300);
      },
      setConfirmLoading: function setConfirmLoading(val) {
        dialog.component.exposed.update({
          confirmLoading: val
        });
      }
    };
    return dialogNode;
  };
  var confirm = function confirm(props, context) {
    return createDialog(props, context);
  };
  var alert = function alert(props, context) {
    var options = _objectSpread$N({}, props);
    options.cancelBtn = null;
    return createDialog(options, context);
  };
  var extraApi$1 = {
    confirm: confirm,
    alert: alert
  };
  var DialogPlugin = createDialog;
  DialogPlugin.install = function (app) {
    app.config.globalProperties.$dialog = createDialog;
    DialogPlugin._context = app._context;
    Object.keys(extraApi$1).forEach(function (funcName) {
      app.config.globalProperties.$dialog[funcName] = extraApi$1[funcName];
    });
  };
  Object.keys(extraApi$1).forEach(function (funcName) {
    DialogPlugin[funcName] = extraApi$1[funcName];
  });

  var Dialog = withInstall$1(_Dialog);
  var DialogCard = withInstall$1(_DialogCard);

  var props$n = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    closeBtn: {
      type: [Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": true
    },
    closeOnOverlay: Boolean,
    draggable: {
      type: Boolean,
      "default": void 0
    },
    imageReferrerpolicy: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["no-referrer", "no-referrer-when-downgrade", "origin", "origin-when-cross-origin", "same-origin", "strict-origin", "strict-origin-when-cross-origin", "unsafe-url"].includes(val);
      }
    },
    imageScale: {
      type: Object
    },
    images: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    index: {
      type: Number,
      "default": void 0
    },
    defaultIndex: {
      type: Number,
      "default": 0
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless"].includes(val);
      }
    },
    navigationArrow: {
      type: [Boolean, Function],
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": void 0
    },
    title: {
      type: [String, Function]
    },
    trigger: {
      type: [String, Function]
    },
    viewerScale: {
      type: Object
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onClose: Function,
    onDownload: Function,
    onIndexChange: Function
  };

  var TImageViewerUtils = Vue.defineComponent({
    name: "TImageViewerUtils",
    props: {
      scale: Number,
      onRotate: Function,
      onZoomIn: Function,
      onZoomOut: Function,
      onMirror: Function,
      onReset: Function,
      onDownload: Function,
      currentImage: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();
      var imageUrl = Vue.computed(function () {
        return props.currentImage.mainImage;
      });
      var _useImagePreviewUrl = useImagePreviewUrl(imageUrl),
        previewUrl = _useImagePreviewUrl.previewUrl;
      var _useConfig = useConfig("imageViewer"),
        globalConfig = _useConfig.globalConfig;
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__utils")
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-image-viewer__utils-content")
        }, [Vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": globalConfig.value.mirrorTipText,
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [Vue.createVNode(TImageViewerIcon, {
              "onClick": props.onMirror,
              "icon": function icon() {
                return Vue.createVNode(MirrorIcon, {
                  "size": "medium"
                }, null);
              }
            }, null)];
          }
        }), Vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": globalConfig.value.rotateTipText,
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [Vue.createVNode(TImageViewerIcon, {
              "onClick": props.onRotate,
              "icon": function icon() {
                return Vue.createVNode(RotationIcon, {
                  "size": "medium"
                }, null);
              }
            }, null)];
          }
        }), Vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return Vue.createVNode(ZoomOutIcon, {
              "size": "medium"
            }, null);
          },
          "onClick": props.onZoomOut
        }, null), Vue.createVNode(TImageViewerIcon, {
          "class": "".concat(classPrefix.value, "-image-viewer__utils-scale"),
          "size": "medium",
          "label": "".concat(largeNumberToFixed(String(props.scale * 100)), "%")
        }, null), Vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return Vue.createVNode(ZoomInIcon, {
              "size": "medium"
            }, null);
          },
          "onClick": props.onZoomIn
        }, null), Vue.createVNode(Tooltip, {
          "overlayClassName": "".concat(classPrefix.value, "-image-viewer__utils--tip"),
          "content": globalConfig.value.originalSizeTipText,
          "destroyOnClose": true,
          "placement": "top",
          "showArrow": true,
          "theme": "default"
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer__modal-icon")
            }, [Vue.createVNode(TImageViewerIcon, {
              "icon": function icon() {
                return Vue.createVNode(ImageIcon, {
                  "size": "medium"
                }, null);
              },
              "onClick": props.onReset
            }, null)])];
          }
        }), props.currentImage.download && Vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return Vue.createVNode(DownloadIcon, {
              "size": "medium"
            }, null);
          },
          "onClick": function onClick() {
            props.onDownload(previewUrl.value);
          }
        }, null)])]);
      };
    }
  });

  var TImageViewerModal = Vue.defineComponent({
    name: "TImageViewerModal",
    props: {
      zIndex: Number,
      visible: Boolean,
      index: Number,
      images: props$n.images,
      scale: Number,
      rotate: Number,
      mirror: Number,
      title: props$n.title,
      currentImage: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      onRotate: Function,
      onZoomIn: Function,
      onZoomOut: Function,
      onMirror: Function,
      onReset: Function,
      onClose: props$n.onClose,
      onDownload: props$n.onDownload,
      draggable: {
        type: Boolean,
        "default": true
      },
      viewerScale: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      showOverlay: Boolean,
      closeBtn: props$n.closeBtn,
      imageReferrerpolicy: props$n.imageReferrerpolicy
    },
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();
      var renderJSX = useTNodeJSX();
      var style = Vue.computed(function () {
        return {
          minWidth: props2.viewerScale.minWidth,
          minHeight: props2.viewerScale.minHeight
        };
      });
      return function () {
        return Vue.createVNode(Dialog, {
          "destroyOnClose": true,
          "attach": "body",
          "onClose": props2.onClose,
          "visible": props2.visible,
          "placement": "center",
          "mode": "modeless",
          "width": 1e3,
          "cancelBtn": null,
          "confirmBtn": null,
          "draggable": props2.draggable,
          "zIndex": props2.zIndex,
          "showOverlay": props2.showOverlay,
          "class": "".concat(classPrefix.value, "-image-viewer__dialog"),
          "header": renderJSX("title", ""),
          "footer": function footer() {
            return Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer-mini__footer")
            }, [Vue.createVNode(TImageViewerUtils, {
              "onZoomIn": props2.onZoomIn,
              "onZoomOut": props2.onZoomOut,
              "scale": props2.scale,
              "currentImage": props2.currentImage,
              "onRotate": props2.onRotate,
              "onMirror": props2.onMirror,
              "onReset": props2.onReset,
              "onDownload": props2.onDownload
            }, null)]);
          }
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-image-viewer-mini__content"),
              "style": style.value
            }, [Vue.createVNode(TImageItem, {
              "rotate": props2.rotate,
              "scale": props2.scale,
              "mirror": props2.mirror,
              "src": props2.currentImage.mainImage,
              "placementSrc": props2.currentImage.thumbnail,
              "isSvg": props2.currentImage.isSvg,
              "imageReferrerpolicy": props2.imageReferrerpolicy
            }, null)])];
          }
        });
      };
    }
  });

  var EVENT_CODE = /* @__PURE__ */function (EVENT_CODE2) {
    EVENT_CODE2["left"] = "ArrowLeft";
    EVENT_CODE2["up"] = "ArrowUp";
    EVENT_CODE2["right"] = "ArrowRight";
    EVENT_CODE2["down"] = "ArrowDown";
    EVENT_CODE2["esc"] = "Escape";
    return EVENT_CODE2;
  }(EVENT_CODE || {});

  function ownKeys$N(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$M(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$N(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$N(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var downloadFile = function downloadFile(imgSrc) {
    var _imgSrc$split, _imgSrc$split$split, _imgSrc$split$split$s;
    var image = new Image();
    var name = (imgSrc === null || imgSrc === void 0 || (_imgSrc$split = imgSrc.split) === null || _imgSrc$split === void 0 || (_imgSrc$split = _imgSrc$split.call(imgSrc, "?")) === null || _imgSrc$split === void 0 || (_imgSrc$split = _imgSrc$split[0]) === null || _imgSrc$split === void 0 || (_imgSrc$split$split = _imgSrc$split.split) === null || _imgSrc$split$split === void 0 || (_imgSrc$split$split = _imgSrc$split$split.call(_imgSrc$split, "#")) === null || _imgSrc$split$split === void 0 || (_imgSrc$split$split = _imgSrc$split$split[0]) === null || _imgSrc$split$split === void 0 || (_imgSrc$split$split$s = _imgSrc$split$split.split) === null || _imgSrc$split$split$s === void 0 ? void 0 : _imgSrc$split$split$s.call(_imgSrc$split$split, "/").pop()) || Math.random().toString(32).slice(2);
    image.setAttribute("crossOrigin", "anonymous");
    image.onload = function () {
      var canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      var context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      canvas.toBlob(function (blob) {
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.download = name;
        a.href = url;
        a.click();
        a.remove();
        URL.revokeObjectURL(url);
      });
    };
    image.src = imgSrc;
  };
  var isImageInfo = function isImageInfo(image) {
    return !!image && !isString(image) && !(image instanceof File);
  };
  var formatImages = function formatImages(images) {
    if (!isArray$1(images)) return [];
    return images.map(function (item) {
      if (isImageInfo(item)) {
        return _objectSpread$M({
          download: true,
          thumbnail: item.mainImage
        }, item);
      }
      return {
        mainImage: item,
        thumbnail: item,
        download: true
      };
    });
  };
  var getOverlay = function getOverlay(props) {
    if (props.showOverlay !== void 0) {
      return props.showOverlay;
    }
    return props.mode === "modal";
  };

  var _ImageViewer = Vue.defineComponent({
    name: "TImageViewer",
    props: props$n,
    setup: function setup(props2) {
      var _props2$defaultIndex;
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("image-viewer");
      var renderTNodeJSX = useTNodeJSX();
      var isExpand = Vue.ref(true);
      var showOverlayValue = Vue.computed(function () {
        return getOverlay(props2);
      });
      var _toRefs = Vue.toRefs(props2),
        index = _toRefs.index,
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue,
        imageReferrerpolicy = _toRefs.imageReferrerpolicy;
      var _useDefaultValue = useDefaultValue(index, (_props2$defaultIndex = props2.defaultIndex) !== null && _props2$defaultIndex !== void 0 ? _props2$defaultIndex : 0, props2.onIndexChange, "index"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        indexValue = _useDefaultValue2[0],
        setIndexValue = _useDefaultValue2[1];
      var _useVModel = useVModel$1(visible, modelValue, props2.defaultVisible, function () {}, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        visibleValue = _useVModel2[0],
        setVisibleValue = _useVModel2[1];
      var animationEnd = Vue.ref(true);
      var animationTimer = Vue.ref();
      var teleportElement = useTeleport(function () {
        return props2.attach;
      });
      var wrapClass = Vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "-preview-image"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-hide"), !visibleValue.value)];
      });
      var headerClass = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-image-viewer__modal-header"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-show"), isExpand.value)];
      });
      var zIndexValue = Vue.computed(function () {
        var _props2$zIndex;
        return (_props2$zIndex = props2.zIndex) !== null && _props2$zIndex !== void 0 ? _props2$zIndex : 2600;
      });
      var toggleExpand = function toggleExpand() {
        isExpand.value = !isExpand.value;
      };
      var _useMirror = useMirror(),
        mirror = _useMirror.mirror,
        onMirror = _useMirror.onMirror,
        resetMirror = _useMirror.resetMirror;
      var _useScale = useScale(props2.imageScale),
        scale = _useScale.scale,
        onZoomIn = _useScale.onZoomIn,
        onZoomOut = _useScale.onZoomOut,
        resetScale = _useScale.resetScale;
      var _useRotate = useRotate(),
        rotate = _useRotate.rotate,
        onRotate = _useRotate.onRotate,
        resetRotate = _useRotate.resetRotate;
      var onRest = function onRest() {
        resetMirror();
        resetScale();
        resetRotate();
      };
      var images = Vue.computed(function () {
        return formatImages(props2.images);
      });
      var currentImage = Vue.computed(function () {
        var _images$value$indexVa;
        return (_images$value$indexVa = images.value[indexValue.value]) !== null && _images$value$indexVa !== void 0 ? _images$value$indexVa : {
          mainImage: ""
        };
      });
      var _usePopupManager = usePopupManager("dialog", {
          visible: visibleValue
        }),
        isTopInteractivePopup = _usePopupManager.isTopInteractivePopup;
      var prevImage = function prevImage() {
        var newIndex = indexValue.value - 1;
        onRest();
        setIndexValue(newIndex < 0 ? 0 : newIndex, {
          trigger: "prev"
        });
      };
      var nextImage = function nextImage() {
        var newIndex = indexValue.value + 1;
        onRest();
        setIndexValue(newIndex >= images.value.length ? indexValue.value : newIndex, {
          trigger: "next"
        });
      };
      var onImgClick = function onImgClick(i) {
        setIndexValue(i, {
          trigger: "current"
        });
      };
      var onDownloadClick = function onDownloadClick(url) {
        props2.onDownload ? props2.onDownload(url) : downloadFile(url);
      };
      var openHandler = function openHandler() {
        setVisibleValue(true);
      };
      var onClose = function onClose(ctx) {
        var _props2$onClose;
        setVisibleValue(false);
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, ctx);
      };
      var closeBtnAction = function closeBtnAction(e) {
        onClose({
          e: e,
          trigger: "close-btn"
        });
      };
      var clickOverlayHandler = function clickOverlayHandler(e) {
        if (props2.closeOnOverlay) {
          onClose({
            e: e,
            trigger: "overlay"
          });
        }
      };
      var keydownHandler = function keydownHandler(e) {
        e.stopPropagation();
        switch (e.code) {
          case EVENT_CODE.left:
            prevImage();
            break;
          case EVENT_CODE.right:
            nextImage();
            break;
          case EVENT_CODE.up:
            onZoomIn();
            break;
          case EVENT_CODE.down:
            onZoomOut();
            break;
          case EVENT_CODE.esc:
            if (props2.closeOnEscKeydown && isTopInteractivePopup()) {
              onClose({
                e: e,
                trigger: "esc"
              });
            }
            break;
        }
      };
      var divRef = Vue.ref();
      Vue.watch(function () {
        return visibleValue.value;
      }, function (val) {
        clearTimeout(animationTimer.value);
        if (val) {
          animationEnd.value = false;
          Vue.nextTick().then(function () {
            var _divRef$value, _divRef$value$focus;
            (_divRef$value = divRef.value) === null || _divRef$value === void 0 || (_divRef$value$focus = _divRef$value.focus) === null || _divRef$value$focus === void 0 || _divRef$value$focus.call(_divRef$value);
          });
          onRest();
        } else {
          animationTimer.value = setTimeout(function () {
            animationEnd.value = true;
          }, 200);
        }
      });
      var onWheel = function onWheel(e) {
        e.preventDefault();
        var deltaY = e.deltaY;
        deltaY > 0 ? onZoomOut() : onZoomIn();
      };
      var transStyle = Vue.computed(function () {
        return {
          transform: "translateX(calc(-".concat(indexValue.value, " * (40px / 9 * 16 + 4px)))")
        };
      });
      var renderHeader = function renderHeader() {
        return Vue.createVNode("div", {
          "class": headerClass.value
        }, [Vue.createVNode(TImageViewerIcon, {
          "icon": function icon() {
            return Vue.createVNode(TdChevronDownIcon, null, null);
          },
          "class": "".concat(COMPONENT_NAME.value, "__header-pre-bt"),
          "onClick": toggleExpand
        }, null), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-prev")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header-trans"),
          "style": transStyle.value
        }, [images.value.map(function (image, index2) {
          return Vue.createVNode("div", {
            "key": index2,
            "class": ["".concat(COMPONENT_NAME.value, "__header-box"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-active"), index2 === indexValue.value)]
          }, [Vue.createVNode(Image$1, {
            "src": image.thumbnail || image.mainImage,
            "error": "",
            "class": "".concat(COMPONENT_NAME.value, "__header-img"),
            "onClick": function onClick() {
              return onImgClick(index2);
            }
          }, null)]);
        })])])]);
      };
      var renderNavigationArrow = function renderNavigationArrow(type) {
        var rotateDeg = type === "prev" ? 0 : 180;
        var _icon = renderTNodeJSX("navigationArrow", Vue.createVNode(TdChevronLeftIcon, {
          "style": {
            transform: "rotate(".concat(rotateDeg, "deg)")
          },
          "size": "24px"
        }, null));
        return Vue.createVNode(TImageViewerIcon, {
          "class": "".concat(COMPONENT_NAME.value, "__modal-").concat(type, "-bt"),
          "onClick": type === "prev" ? prevImage : nextImage,
          "icon": function icon() {
            return _icon;
          }
        }, null);
      };
      var renderCloseBtn = function renderCloseBtn() {
        if (props2.closeBtn === false) {
          return;
        }
        return Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__modal-icon"), "".concat(COMPONENT_NAME.value, "__modal-close-bt")],
          "onClick": closeBtnAction
        }, [renderTNodeJSX("closeBtn", Vue.createVNode(TdCloseIcon, {
          "size": "24px"
        }, null))]);
      };
      return function () {
        if (props2.mode === "modeless") {
          return Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("trigger", {
            params: {
              open: openHandler
            }
          }), Vue.createVNode(TImageViewerModal, {
            "zIndex": zIndexValue.value,
            "visible": visibleValue.value,
            "index": indexValue.value,
            "images": images.value,
            "scale": scale.value,
            "rotate": rotate.value,
            "mirror": mirror.value,
            "currentImage": currentImage.value,
            "onRotate": onRotate,
            "onZoomIn": onZoomIn,
            "onZoomOut": onZoomOut,
            "onMirror": onMirror,
            "onReset": onRest,
            "onClose": onClose,
            "onDownload": onDownloadClick,
            "draggable": props2.draggable,
            "showOverlay": showOverlayValue.value,
            "title": props2.title,
            "imageReferrerpolicy": imageReferrerpolicy.value
          }, null)]);
        }
        return Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("trigger", {
          params: {
            open: openHandler
          }
        }), Vue.createVNode(Vue.Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          "default": function _default() {
            return [Vue.createVNode(Vue.Transition, null, {
              "default": function _default() {
                return [(visibleValue.value || !animationEnd.value) && Vue.withDirectives(Vue.createVNode("div", {
                  "ref": divRef,
                  "class": wrapClass.value,
                  "style": {
                    zIndex: zIndexValue.value
                  },
                  "onWheel": onWheel,
                  "tabindex": -1,
                  "onKeydown": keydownHandler
                }, [!!showOverlayValue.value && Vue.createVNode("div", {
                  "class": "".concat(COMPONENT_NAME.value, "__modal-mask"),
                  "onClick": clickOverlayHandler
                }, null), images.value.length > 1 && Vue.createVNode(Vue.Fragment, null, [renderHeader(), Vue.createVNode("div", {
                  "class": "".concat(COMPONENT_NAME.value, "__modal-index")
                }, [props2.title && renderTNodeJSX("title"), "".concat(indexValue.value + 1, "/").concat(images.value.length)]), renderNavigationArrow("prev"), renderNavigationArrow("next")]), renderCloseBtn(), Vue.createVNode(TImageViewerUtils, {
                  "onZoomIn": onZoomIn,
                  "onZoomOut": onZoomOut,
                  "onMirror": onMirror,
                  "onReset": onRest,
                  "onRotate": onRotate,
                  "onDownload": onDownloadClick,
                  "scale": scale.value,
                  "currentImage": currentImage.value
                }, null), Vue.createVNode(TImageItem, {
                  "scale": scale.value,
                  "rotate": rotate.value,
                  "mirror": mirror.value,
                  "src": currentImage.value.mainImage,
                  "placementSrc": currentImage.value.thumbnail,
                  "isSvg": currentImage.value.isSvg,
                  "imageReferrerpolicy": imageReferrerpolicy.value
                }, null)]), [[Vue.vShow, visibleValue.value]])];
              }
            })];
          }
        })]);
      };
    }
  });

  var ImageViewer = withInstall$1(_ImageViewer);

  var props$m = {
    action: {
      type: [String, Function]
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    }
  };

  var _ListItem = Vue.defineComponent({
    name: "TListItem",
    props: props$m,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("list-item");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var propsContent = renderTNodeJSX("content");
        var propsDefaultContent = renderTNodeJSX("default");
        var propsActionContent = renderTNodeJSX("action");
        return Vue.createVNode("li", {
          "class": COMPONENT_NAME.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-main")
        }, [propsDefaultContent || propsContent, propsActionContent && Vue.createVNode("li", {
          "class": "".concat(COMPONENT_NAME.value, "__action")
        }, [propsActionContent])])]);
      };
    }
  });

  var props$l = {
    asyncLoading: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    scroll: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    split: Boolean,
    stripe: Boolean,
    onLoadMore: Function,
    onScroll: Function
  };

  var LOAD_MORE = "load-more";
  var LOADING = "loading";

  function ownKeys$M(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$L(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$M(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$M(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _createForOfIteratorHelper$2(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$2(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }
  function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var useListItems = function useListItems() {
    var getChildComponentSlots = useChildComponentSlots();
    var listItems = Vue.computed(function () {
      var computedListItems = [];
      var listItemSlots = getChildComponentSlots("ListItem");
      if (isArray$1(listItemSlots)) {
        var _iterator = _createForOfIteratorHelper$2(listItemSlots),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            computedListItems.push(_objectSpread$L(_objectSpread$L({}, child.props), {}, {
              slots: child.children
            }));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return computedListItems;
    });
    return {
      listItems: listItems
    };
  };

  function ownKeys$L(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$K(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$L(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$L(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useListVirtualScroll = function useListVirtualScroll(scroll, listRef, listItems) {
    var virtualScrollParams = Vue.computed(function () {
      return {
        data: listItems.value,
        scroll: scroll
      };
    });
    var virtualConfig = useVirtualScrollNew(listRef, virtualScrollParams);
    var isVirtualScroll = Vue.computed(function () {
      return virtualConfig.isVirtualScroll.value;
    });
    var lastScrollY = -1;
    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      var target = e.target || e.srcElement;
      var top = target.scrollTop;
      if (lastScrollY !== top) {
        virtualConfig.isVirtualScroll.value && virtualConfig.handleScroll();
      } else {
        lastScrollY = -1;
      }
      lastScrollY = top;
    };
    var cursorStyle = Vue.computed(function () {
      return {
        position: "absolute",
        width: "1px",
        height: "1px",
        transition: "transform 0.2s",
        transform: "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
        "-ms-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
        "-moz-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)")
      };
    });
    var listStyle = Vue.computed(function () {
      return {
        transform: "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
        "-ms-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
        "-moz-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
        "-webkit-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)")
      };
    });
    var handleScrollTo = function handleScrollTo(params) {
      var index = params.index,
        key = params.key;
      var targetIndex = index === 0 ? index : index !== null && index !== void 0 ? index : Number(key);
      if (!targetIndex && targetIndex !== 0) {
        log.error("List", "scrollTo: `index` or `key` must exist.");
        return;
      }
      if (targetIndex < 0 || targetIndex >= listItems.value.length) {
        log.error("List", "".concat(targetIndex, " does not exist in data, check `index` or `key` please."));
        return;
      }
      virtualConfig.scrollToElement(_objectSpread$K(_objectSpread$K({}, params), {}, {
        index: targetIndex - 1
      }));
    };
    return {
      virtualConfig: virtualConfig,
      cursorStyle: cursorStyle,
      listStyle: listStyle,
      isVirtualScroll: isVirtualScroll,
      onInnerVirtualScroll: onInnerVirtualScroll,
      scrollToElement: handleScrollTo
    };
  };

  var _List = Vue.defineComponent({
    name: "TList",
    props: props$l,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var listRef = Vue.ref();
      var _useConfig = useConfig("list"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("list");
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var renderTNodeJSX = useTNodeJSX();
      var _useListItems = useListItems(),
        listItems = _useListItems.listItems;
      var _useListVirtualScroll = useListVirtualScroll(props2.scroll, listRef, listItems),
        virtualConfig = _useListVirtualScroll.virtualConfig,
        cursorStyle = _useListVirtualScroll.cursorStyle,
        listStyle = _useListVirtualScroll.listStyle,
        isVirtualScroll = _useListVirtualScroll.isVirtualScroll,
        onInnerVirtualScroll = _useListVirtualScroll.onInnerVirtualScroll,
        scrollToElement = _useListVirtualScroll.scrollToElement;
      var listClass = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--split"), props2.split), "".concat(COMPONENT_NAME.value, "--stripe"), props2.stripe), "".concat(COMPONENT_NAME.value, "--vertical-action"), props2.layout === "vertical")];
      });
      var renderContent = function renderContent() {
        var propsHeaderContent = renderTNodeJSX("header");
        var propsFooterContent = renderTNodeJSX("footer");
        var isVirtualScroll2 = virtualConfig.isVirtualScroll.value;
        return Vue.createVNode(Vue.Fragment, null, [propsHeaderContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [propsHeaderContent]) : null, isVirtualScroll2 ? Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
          "style": cursorStyle.value
        }, null), Vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": listStyle.value
        }, [virtualConfig.visibleData.value.map(function (item) {
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode(_ListItem, omit$1(item, "slots"), item.slots)]);
        })])]) : Vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("default")]), propsFooterContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__footer")
        }, [propsFooterContent]) : null]);
      };
      var handleScroll = function handleScroll(e) {
        var _props2$onScroll;
        var listElement = e.target;
        var scrollTop = listElement.scrollTop,
          scrollHeight = listElement.scrollHeight,
          clientHeight = listElement.clientHeight;
        if (isVirtualScroll.value) onInnerVirtualScroll(e);
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 || _props2$onScroll.call(props2, {
          e: e,
          scrollTop: scrollTop,
          scrollBottom: scrollHeight - clientHeight - scrollTop
        });
      };
      var loadingClass = Vue.computed(function () {
        return isString(props2.asyncLoading) && ["loading", "load-more"].includes(props2.asyncLoading) ? "".concat(COMPONENT_NAME.value, "__load ").concat(COMPONENT_NAME.value, "__load--").concat(props2.asyncLoading) : "".concat(COMPONENT_NAME.value, "__load");
      });
      var renderLoading = function renderLoading() {
        if (props2.asyncLoading && isString(props2.asyncLoading)) {
          if (props2.asyncLoading === LOADING) {
            return Vue.createVNode("div", null, [Vue.createVNode(Loading, null, null), Vue.createVNode("span", null, [globalConfig.value.loadingText])]);
          }
          if (props2.asyncLoading === LOAD_MORE) {
            return Vue.createVNode("span", null, [globalConfig.value.loadingMoreText]);
          }
        }
        return renderTNodeJSX("asyncLoading");
      };
      var handleLoadMore = function handleLoadMore(e) {
        var _props2$onLoadMore;
        if (isString(props2.asyncLoading) && props2.asyncLoading !== LOAD_MORE) return;
        (_props2$onLoadMore = props2.onLoadMore) === null || _props2$onLoadMore === void 0 || _props2$onLoadMore.call(props2, {
          e: e
        });
      };
      expose({
        scrollTo: scrollToElement
      });
      return function () {
        var listContent = [renderContent(), Vue.createVNode("div", {
          "class": loadingClass.value,
          "onClick": handleLoadMore
        }, [renderLoading()])];
        return Vue.createVNode("div", {
          "class": listClass.value,
          "onScroll": handleScroll,
          "ref": listRef,
          "style": isVirtualScroll.value ? "position:relative" : void 0
        }, [listContent]);
      };
    }
  });

  var props$k = {
    avatar: {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    }
  };

  var _ListItemMeta = Vue.defineComponent({
    name: "TListItemMeta",
    props: props$k,
    setup: function setup(props2, ctx) {
      var COMPONENT_NAME = usePrefixClass("list-item__meta");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var renderAvatar = function renderAvatar() {
        if (props2.avatar || ctx.slots.avatar) {
          console.warn("`avatar` is going to be deprecated, please use `image` instead");
        }
        var thumbnail = renderContent("avatar", "image");
        if (!thumbnail) return;
        if (isString(thumbnail)) {
          return Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-avatar")
          }, [Vue.createVNode("img", {
            "src": thumbnail
          }, null)]);
        }
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-avatar")
        }, [thumbnail]);
      };
      return function () {
        var propsTitleContent = renderTNodeJSX("title");
        var propsDescriptionContent = renderTNodeJSX("description");
        var listItemMetaContent = [renderAvatar(), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [propsTitleContent && Vue.createVNode("h3", {
          "class": "".concat(COMPONENT_NAME.value, "-title")
        }, [propsTitleContent]), propsDescriptionContent && Vue.createVNode("p", {
          "class": "".concat(COMPONENT_NAME.value, "-description")
        }, [propsDescriptionContent])])];
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [listItemMetaContent]);
      };
    }
  });

  var List = withInstall$1(_List);
  var ListItem = withInstall$1(_ListItem);
  var ListItemMeta = withInstall$1(_ListItemMeta);

  var PRO_THEME = {
    LINE: "line",
    PLUMP: "plump",
    CIRCLE: "circle"
  };
  var CIRCLE_SIZE = {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  };
  var CIRCLE_SIZE_PX = {
    SMALL: 72,
    MEDIUM: 112,
    LARGE: 160
  };
  var CIRCLE_FONT_SIZE_RATIO = {
    SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
    MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
    LARGE: 36 / CIRCLE_SIZE_PX.LARGE
  };
  var STATUS_ICON = ["success", "error", "warning"];

  var props$j = {
    color: {
      type: [String, Object, Array],
      "default": ""
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    percentage: {
      type: Number,
      "default": 0
    },
    size: {
      type: [String, Number],
      "default": "medium"
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "error", "warning", "active"].includes(val);
      }
    },
    strokeWidth: {
      type: [String, Number]
    },
    theme: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        if (!val) return true;
        return ["line", "plump", "circle"].includes(val);
      }
    },
    trackColor: {
      type: String,
      "default": ""
    }
  };

  var _Progress = Vue.defineComponent({
    name: "TProgress",
    props: props$j,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("progress");
      var _useGlobalIcon = useGlobalIcon({
          CloseCircleFilledIcon: TdCloseCircleFilledIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
          CloseIcon: TdCloseIcon,
          CheckIcon: CheckIcon,
          ErrorIcon: TdErrorIcon
        }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon,
        CheckIcon$1 = _useGlobalIcon.CheckIcon,
        ErrorIcon = _useGlobalIcon.ErrorIcon;
      var CIRCLE_ICONS_MAP = {
        success: CheckIcon$1,
        warning: ErrorIcon,
        error: CloseIcon
      };
      var NORMAL_ICONS_MAP = {
        success: CheckCircleFilledIcon,
        warning: ErrorCircleFilledIcon,
        error: CloseCircleFilledIcon
      };
      var statusStyle = Vue.computed(function () {
        if (!props2.status && props2.percentage >= 100) {
          return "success";
        }
        return props2.status || "default";
      });
      var trackBgStyle = Vue.computed(function () {
        var style = {};
        if (props2.strokeWidth) {
          var height = isString(props2.strokeWidth) ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
          style.height = height;
          style.borderRadius = height;
        }
        if (props2.trackColor) {
          style.backgroundColor = props2.trackColor;
        }
        return style;
      });
      var barStyle = Vue.computed(function () {
        return {
          width: "".concat(props2.percentage, "%"),
          background: props2.color && getBackgroundColor(props2.color)
        };
      });
      var circlePathStyle = Vue.computed(function () {
        var strokeColor = isObject(props2.color) ? "" : props2.color;
        return {
          stroke: strokeColor
        };
      });
      var circleOuterStyle = Vue.computed(function () {
        var strokeColor = isObject(props2.trackColor) ? "" : props2.trackColor;
        return {
          stroke: strokeColor
        };
      });
      var diameter = Vue.computed(function () {
        var diameterValue = CIRCLE_SIZE_PX.MEDIUM;
        if (!props2.size) {
          return diameterValue;
        }
        var SMALL = CIRCLE_SIZE.SMALL,
          LARGE = CIRCLE_SIZE.LARGE,
          MEDIUM = CIRCLE_SIZE.MEDIUM;
        switch (props2.size) {
          case SMALL:
            diameterValue = CIRCLE_SIZE_PX.SMALL;
            break;
          case MEDIUM:
            diameterValue = CIRCLE_SIZE_PX.MEDIUM;
            break;
          case LARGE:
            diameterValue = CIRCLE_SIZE_PX.LARGE;
            break;
          default:
            var customSize = Number(props2.size);
            diameterValue = !isNaN(customSize) && customSize > 0 ? customSize : CIRCLE_SIZE_PX.MEDIUM;
            break;
        }
        return diameterValue;
      });
      var rPoints = Vue.computed(function () {
        return diameter.value / 2;
      });
      var radius = Vue.computed(function () {
        return rPoints.value - circleStrokeWidth.value / 2;
      });
      var circleStyle = Vue.computed(function () {
        if (props2.theme !== PRO_THEME.CIRCLE) {
          return {};
        }
        var fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;
        if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;
        } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;
        }
        return {
          width: "".concat(diameter.value, "px"),
          height: "".concat(diameter.value, "px"),
          fontSize: "".concat(fontSize, "px")
        };
      });
      var circleStrokeWidth = Vue.computed(function () {
        var defaultWidth = props2.size === CIRCLE_SIZE.SMALL ? 4 : 6;
        return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
      });
      var strokeDashArr = Vue.computed(function () {
        var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
        var perimeter = Math.PI * 2 * radius2;
        var percent = props2.percentage / 100;
        return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      });
      var getIconMap = Vue.computed(function () {
        return props2.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS_MAP : NORMAL_ICONS_MAP;
      });
      var getLabelContent = function getLabelContent() {
        var labelContentRender = "".concat(props2.percentage, "%");
        var status = props2.status || "";
        if (STATUS_ICON.includes(status) && props2.theme !== PRO_THEME.PLUMP) {
          var component = getIconMap.value[status];
          if (component) {
            labelContentRender = Vue.createVNode(component, {
              "class": ["".concat(COMPONENT_NAME.value, "__icon")]
            }, null);
          }
        }
        return labelContentRender;
      };
      var infoIsOut = Vue.ref(true);
      var infoRef = Vue.ref(null);
      var separateClasses = Vue.computed(function () {
        return infoIsOut.value ? "".concat(COMPONENT_NAME.value, "--over-ten") : "".concat(COMPONENT_NAME.value, "--under-ten");
      });
      function updateInfoIsOut() {
        return _updateInfoIsOut.apply(this, arguments);
      }
      function _updateInfoIsOut() {
        _updateInfoIsOut = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var infoEl;
          return _regeneratorRuntime.wrap(function (_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!(props2.theme === PRO_THEME.PLUMP)) {
                  _context.next = 3;
                  break;
                }
                if (!(!infoRef.value || props2.label === false)) {
                  _context.next = 1;
                  break;
                }
                return _context.abrupt("return");
              case 1:
                _context.next = 2;
                return Vue.nextTick();
              case 2:
                infoEl = infoRef.value.querySelector(".".concat(COMPONENT_NAME.value, "__info")) || infoRef.value.nextElementSibling;
                infoIsOut.value = infoRef.value.clientWidth > (infoEl === null || infoEl === void 0 ? void 0 : infoEl.clientWidth) + 10;
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return _updateInfoIsOut.apply(this, arguments);
      }
      useResizeObserver(infoRef, updateInfoIsOut);
      return function () {
        var labelContent = Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__info")
        }, [renderTNodeJSX("label", getLabelContent())]);
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [props2.theme === PRO_THEME.LINE && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--thin ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value)
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__bar"),
          "style": trackBgStyle.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": barStyle.value
        }, null)]), labelContent]), props2.theme === PRO_THEME.PLUMP && Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__bar ").concat(COMPONENT_NAME.value, "--plump ").concat(separateClasses.value), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value), statusStyle.value)],
          "style": trackBgStyle.value
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "ref": infoRef,
          "style": barStyle.value
        }, [infoIsOut.value && labelContent]), !infoIsOut.value && labelContent]), props2.theme === PRO_THEME.CIRCLE && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--circle ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value),
          "style": circleStyle.value
        }, [labelContent, Vue.createVNode("svg", {
          "width": diameter.value,
          "height": diameter.value,
          "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
        }, [Vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "fill": "none",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-outer")],
          "style": circleOuterStyle.value
        }, null), props2.percentage > 0 && Vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "fill": "none",
          "stroke-linecap": "round",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-inner")],
          "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
          "stroke-dasharray": strokeDashArr.value,
          "style": circlePathStyle.value
        }, null)])])]);
      };
    }
  });

  var Progress = withInstall$1(_Progress);

  var props$i = {
    animation: {
      type: String,
      "default": "none",
      validator: function validator(val) {
        if (!val) return true;
        return ["gradient", "flashed", "none"].includes(val);
      }
    },
    delay: {
      type: Number,
      "default": 0
    },
    loading: {
      type: Boolean,
      "default": true
    },
    rowCol: {
      type: Array
    },
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
      }
    }
  };

  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }, [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }]]
  };
  var getColItemStyle = function getColItemStyle(obj) {
    var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
    var style = /* @__PURE__ */Object.create(null);
    styleName.forEach(function (name) {
      if (name in obj) {
        var val = obj[name];
        var px = isNumber(val) ? "".concat(val, "px") : val;
        if (name === "size") {
          var _ref = [px, px];
          style.width = _ref[0];
          style.height = _ref[1];
        } else {
          style[name] = px;
        }
      }
    });
    return style;
  };
  var _Skeleton = Vue.defineComponent({
    name: "TSkeleton",
    props: props$i,
    setup: function setup(props2, _ref2) {
      var slots = _ref2.slots;
      var isShow = Vue.ref(false);
      var COMPONENT_NAME = usePrefixClass("skeleton");
      var renderContent = useContent();
      var getColItemClass = function getColItemClass(obj) {
        return ["".concat(COMPONENT_NAME.value, "__col"), "".concat(COMPONENT_NAME.value, "--type-").concat(obj.type || "text"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--animation-").concat(props2.animation), props2.animation)];
      };
      var renderCols = function renderCols(_cols) {
        var cols = [];
        if (isArray$1(_cols)) {
          cols = _cols;
        } else if (isNumber(_cols)) {
          cols = new Array(_cols).fill({
            type: "text"
          });
        } else {
          cols = [_cols];
        }
        return cols.map(function (obj) {
          return Vue.createVNode("div", {
            "class": getColItemClass(obj),
            "style": getColItemStyle(obj)
          }, [isFunction(obj.content) ? obj.content(Vue.h) : obj.content]);
        });
      };
      var renderRowCol = function renderRowCol(_rowCol) {
        var rowCol = _rowCol || props2.rowCol;
        var getBlockClass = function getBlockClass() {
          return ["".concat(COMPONENT_NAME.value, "__row")];
        };
        return rowCol.map(function (item) {
          return Vue.createVNode("div", {
            "class": getBlockClass()
          }, [renderCols(item)]);
        });
      };
      var timer = null;
      Vue.watch(function () {
        return props2.loading;
      }, function (bool) {
        if (!bool) {
          clearTimeout(timer);
          isShow.value = false;
          return;
        }
        if (props2.delay > 0) {
          timer = setTimeout(function () {
            clearTimeout(timer);
            isShow.value = true;
          }, props2.delay);
        } else {
          isShow.value = true;
        }
      }, {
        immediate: true
      });
      return function () {
        var content = renderContent("default", "content");
        if (slots["default"] && !isShow.value) {
          return Vue.createVNode("div", null, [content]);
        }
        if (!isShow.value) {
          return;
        }
        var children = [];
        if (props2.theme) {
          children.push(renderRowCol(ThemeMap[props2.theme]));
        }
        if (props2.rowCol) {
          children.push(renderRowCol(props2.rowCol));
        }
        if (!props2.theme && !props2.rowCol) {
          children.push(renderRowCol([1, 1, 1, {
            width: "70%"
          }]));
        }
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [children]);
      };
    }
  });

  var Skeleton = withInstall$1(_Skeleton);

  var props$h = {
    animation: {
      type: Object
    },
    animationStart: Boolean,
    color: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["black", "blue", "red", "orange", "green"].includes(val);
      }
    },
    decimalPlaces: {
      type: Number
    },
    extra: {
      type: [String, Function]
    },
    format: {
      type: Function
    },
    loading: Boolean,
    prefix: {
      type: [String, Function]
    },
    separator: {
      type: String,
      "default": ","
    },
    suffix: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    },
    trend: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["increase", "decrease"].includes(val);
      }
    },
    trendPlacement: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    unit: {
      type: [String, Function]
    },
    value: {
      type: Number
    }
  };

  var quartOut = function quartOut(t) {
    return 1 - Math.abs(Math.pow(t - 1, 4));
  };
  var Tween = /*#__PURE__*/function () {
    function Tween(_ref) {
      var _this = this;
      var from = _ref.from,
        to = _ref.to,
        _ref$duration = _ref.duration,
        duration = _ref$duration === void 0 ? 200 : _ref$duration,
        onStart = _ref.onStart,
        _ref$onUpdate = _ref.onUpdate,
        onUpdate = _ref$onUpdate === void 0 ? function () {} : _ref$onUpdate,
        onFinish = _ref.onFinish;
      _classCallCheck(this, Tween);
      _defineProperty$2(this, "from", void 0);
      _defineProperty$2(this, "to", void 0);
      _defineProperty$2(this, "duration", void 0);
      _defineProperty$2(this, "onStart", void 0);
      _defineProperty$2(this, "onUpdate", void 0);
      _defineProperty$2(this, "onFinish", void 0);
      _defineProperty$2(this, "startTime", void 0);
      _defineProperty$2(this, "started", void 0);
      _defineProperty$2(this, "finished", void 0);
      _defineProperty$2(this, "timer", void 0);
      _defineProperty$2(this, "keys", void 0);
      _defineProperty$2(this, "time", 0);
      _defineProperty$2(this, "elapsed", 0);
      this.from = from;
      this.to = to;
      this.duration = duration;
      this.onStart = onStart;
      this.onUpdate = onUpdate;
      this.onFinish = onFinish;
      this.startTime = Date.now();
      this.started = false;
      this.finished = false;
      this.timer = null;
      this.keys = {};
      Object.entries(from).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];
        if (_this.to[key] === void 0) {
          _this.to[key] = value;
        }
      });
      Object.entries(to).forEach(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          key = _ref5[0],
          value = _ref5[1];
        if (_this.from[key] === void 0) {
          _this.from[key] = value;
        }
      });
    }
    return _createClass(Tween, [{
      key: "update",
      value: function update() {
        var _this2 = this;
        this.time = Date.now();
        if (this.time < this.startTime || this.finished) return;
        if (this.elapsed >= this.duration) {
          var _this$onFinish;
          this.finished = true;
          (_this$onFinish = this.onFinish) === null || _this$onFinish === void 0 || _this$onFinish.call(this, this.keys);
          return;
        }
        var elapsed = Math.min(this.time - this.startTime, this.duration);
        this.elapsed = elapsed;
        var progress = quartOut(elapsed / this.duration);
        Object.keys(this.to).forEach(function (key) {
          var delta = _this2.to[key] - _this2.from[key];
          _this2.keys[key] = _this2.from[key] + delta * progress;
        });
        if (!this.started) {
          var _this$onStart;
          (_this$onStart = this.onStart) === null || _this$onStart === void 0 || _this$onStart.call(this, this.keys);
          this.started = true;
        }
        this.onUpdate(this.keys);
      }
    }, {
      key: "polyfillStart",
      value: function polyfillStart() {
        var _this3 = this;
        var elapsed = Date.now() - this.startTime;
        var interval = quartOut(elapsed / this.duration);
        this.timer = setInterval(function () {
          _this3.update();
          if (_this3.finished) {
            clearInterval(_this3.timer);
          }
        }, interval);
      }
    }, {
      key: "normalStart",
      value: function normalStart() {
        var _this4 = this;
        var _tick = function tick() {
          _this4.update();
          _this4.timer = requestAnimationFrame(_tick);
          if (_this4.finished) {
            cancelAnimationFrame(_this4.timer);
            _this4.timer = null;
          }
        };
        _tick();
      }
    }, {
      key: "start",
      value: function start() {
        this.startTime = Date.now();
        if (getIEVersion() < 10) this.polyfillStart();else this.normalStart();
      }
    }, {
      key: "stop",
      value: function stop() {
        if (getIEVersion() < 10) clearInterval(this.timer);else cancelAnimationFrame(this.timer);
        this.timer = null;
      }
    }]);
  }();

  var COLOR_MAP = {
    black: "var(--td-text-color-primary)",
    blue: "var(--td-brand-color)",
    red: "var(--td-error-color)",
    orange: "var(--td-warning-color)",
    green: "var(--td-success-color)"
  };
  function getFormatValue(value, decimalPlaces, separator) {
    var options = {
      minimumFractionDigits: decimalPlaces !== null && decimalPlaces !== void 0 ? decimalPlaces : 0,
      maximumFractionDigits: decimalPlaces !== null && decimalPlaces !== void 0 ? decimalPlaces : 20,
      useGrouping: !!separator
    };
    return value.toLocaleString(void 0, options).replace(/,|，/g, separator);
  }

  var _Statistic = Vue.defineComponent({
    name: "TStatistic",
    props: props$h,
    setup: function setup(props2, _ref) {
      var _props2$animation$val, _props2$animation;
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("statistic");
      var renderTNodeJSX = useTNodeJSX();
      var _useGlobalIcon = useGlobalIcon({
          ArrowTriangleUpFilledIcon: TDArrowTriangleUpFilledIcon,
          ArrowTriangleDownFilledIcon: TDArrowTriangleDownFilledIcon
        }),
        ArrowTriangleUpFilledIcon = _useGlobalIcon.ArrowTriangleUpFilledIcon,
        ArrowTriangleDownFilledIcon = _useGlobalIcon.ArrowTriangleDownFilledIcon;
      var trendIcons = {
        increase: Vue.createVNode(ArrowTriangleUpFilledIcon, null, null),
        decrease: Vue.createVNode(ArrowTriangleDownFilledIcon, null, null)
      };
      var numberValue = Vue.computed(function () {
        return isNumber(props2.value) ? props2.value : 0;
      });
      var innerValue = Vue.ref((_props2$animation$val = (_props2$animation = props2.animation) === null || _props2$animation === void 0 ? void 0 : _props2$animation.valueFrom) !== null && _props2$animation$val !== void 0 ? _props2$animation$val : props2.value);
      var innerDecimalPlaces = Vue.computed(function () {
        var _ref2, _props2$decimalPlaces, _numberValue$value$to;
        return (_ref2 = (_props2$decimalPlaces = props2.decimalPlaces) !== null && _props2$decimalPlaces !== void 0 ? _props2$decimalPlaces : (_numberValue$value$to = numberValue.value.toString().split(".")[1]) === null || _numberValue$value$to === void 0 ? void 0 : _numberValue$value$to.length) !== null && _ref2 !== void 0 ? _ref2 : 0;
      });
      var tween = Vue.ref();
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value;
      var start = function start() {
        var _props2$animation$val2, _props2$animation2;
        var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_props2$animation$val2 = (_props2$animation2 = props2.animation) === null || _props2$animation2 === void 0 ? void 0 : _props2$animation2.valueFrom) !== null && _props2$animation$val2 !== void 0 ? _props2$animation$val2 : 0;
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : numberValue.value;
        if (from !== to) {
          var _tween$value;
          tween.value = new Tween({
            from: {
              value: from
            },
            to: {
              value: to
            },
            duration: props2.animation.duration,
            onUpdate: function onUpdate(keys) {
              innerValue.value = Number(keys.value.toFixed(innerDecimalPlaces.value));
            },
            onFinish: function onFinish() {
              innerValue.value = to;
            }
          });
          (_tween$value = tween.value) === null || _tween$value === void 0 || _tween$value.start();
        }
      };
      var formatValue = Vue.computed(function () {
        if (isFunction(props2.format)) {
          return props2.format(innerValue.value);
        }
        return getFormatValue(innerValue.value, props2.decimalPlaces, props2.separator);
      });
      var contentStyle = Vue.computed(function () {
        var color = props2.color;
        return {
          color: COLOR_MAP[color] || color
        };
      });
      Vue.watch(function () {
        return props2.animationStart;
      }, function (value2) {
        if (props2.animation && value2 && !tween.value) {
          start();
        }
      });
      Vue.watch(value, function (value2) {
        if (tween.value) {
          var _tween$value2;
          (_tween$value2 = tween.value) === null || _tween$value2 === void 0 || _tween$value2.stop();
          tween.value = null;
        }
        innerValue.value = value2;
        if (props2.animationStart && props2.animation) {
          start();
        }
      });
      Vue.onMounted(function () {
        return props2.animation && props2.animationStart && start();
      });
      expose({
        start: start
      });
      return function () {
        var trendIcon = props2.trend ? trendIcons[props2.trend] : null;
        var prefix = renderTNodeJSX("prefix") || (trendIcon && props2.trendPlacement !== "right" ? trendIcon : null);
        var suffix = renderTNodeJSX("suffix") || (trendIcon && props2.trendPlacement === "right" ? trendIcon : null);
        var title = renderTNodeJSX("title");
        var unit = renderTNodeJSX("unit");
        var extra = renderTNodeJSX("extra");
        return Vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [title && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-title")
        }, [title]), Vue.createVNode(Skeleton, {
          "animation": "gradient",
          "theme": "text",
          "loading": !!props2.loading
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "-content"),
              "style": contentStyle.value
            }, [prefix && Vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME.value, "-content-prefix")
            }, [prefix]), Vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME.value, "-content-value")
            }, [formatValue.value]), unit && Vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME.value, "-content-unit")
            }, [unit]), suffix && Vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME.value, "-content-suffix")
            }, [suffix])])];
          }
        }), extra && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-extra")
        }, [extra])]);
      };
    }
  });

  var Statistic = withInstall$1(_Statistic);

  var props$g = {
    animation: {
      type: String,
      "default": "slide",
      validator: function validator(val) {
        if (!val) return true;
        return ["slide", "fade"].includes(val);
      }
    },
    autoplay: {
      type: Boolean,
      "default": true
    },
    current: {
      type: Number,
      "default": 0
    },
    defaultCurrent: {
      type: Number,
      "default": 0
    },
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    duration: {
      type: Number,
      "default": 300
    },
    height: {
      type: Number
    },
    interval: {
      type: Number,
      "default": 5e3
    },
    loop: {
      type: Boolean,
      "default": true
    },
    navigation: {
      type: [Object, Function]
    },
    stopOnHover: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "card"].includes(val);
      }
    },
    cardScale: {
      type: Number,
      "default": 210 / 332
    },
    onChange: Function
  };

  function ownKeys$K(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$J(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$K(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$K(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var swiperItemProps = {
    index: {
      type: Number
    },
    currentIndex: {
      type: Number
    },
    isSwitching: {
      type: Boolean,
      "default": false
    },
    getWrapAttribute: {
      type: Function
    },
    swiperItemLength: {
      type: Number,
      "default": 0
    }
  };
  var itemWidth = 0.415;
  var _SwiperItem = Vue.defineComponent({
    name: "TSwiperItem",
    props: _objectSpread$J(_objectSpread$J({}, props$g), swiperItemProps),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var prefix = usePrefixClass();
      var active = Vue.computed(function () {
        return props2.index === props2.currentIndex;
      });
      var disposeIndex = Vue.computed(function () {
        if (props2.type !== "card") return 0;
        if (props2.currentIndex === 0 && props2.index === props2.swiperItemLength - 1) {
          return -1;
        }
        if (props2.currentIndex === props2.swiperItemLength - 1 && props2.index === 0) {
          return props2.swiperItemLength;
        }
        if (props2.index < props2.currentIndex - 1 && props2.currentIndex - props2.index >= props2.swiperItemLength / 2) {
          return props2.swiperItemLength + 1;
        }
        if (props2.index > props2.currentIndex + 1 && props2.index - props2.currentIndex >= props2.swiperItemLength / 2) {
          return -2;
        }
        return props2.index;
      });
      var translateX = Vue.computed(function () {
        if (props2.type !== "card") return 0;
        var wrapWidth = props2.getWrapAttribute("offsetWidth") || 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var inStage = Math.abs(translateIndex - props2.currentIndex) <= 1;
        if (inStage) {
          return wrapWidth * ((translateIndex - props2.currentIndex) * (1 - itemWidth * props2.cardScale) - itemWidth + 1) / 2;
        }
        if (translateIndex < props2.currentIndex) {
          return -itemWidth * (1 + props2.cardScale) * wrapWidth / 2;
        }
        return (2 + itemWidth * (props2.cardScale - 1)) * wrapWidth / 2;
      });
      var zIndex = Vue.computed(function () {
        if (props2.type !== "card") return 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var isActivity = translateIndex === props2.currentIndex;
        var inStage = Math.round(Math.abs(translateIndex - props2.currentIndex)) <= 1;
        if (isActivity) {
          return 2;
        }
        if (inStage) {
          return 1;
        }
        return 0;
      });
      var itemStyle = Vue.computed(function () {
        if (props2.animation === "fade") {
          return {
            opacity: active.value ? 1 : 0,
            transition: props2.isSwitching ? "opacity ".concat(props2.duration / 1e3, "s") : "",
            zIndex: active.value ? 1 : 0
          };
        }
        if (props2.type === "card") {
          var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
          var isActivity = translateIndex === props2.currentIndex;
          return {
            transform: "translateX(".concat(translateX.value, "px) scale(").concat(isActivity ? 1 : props2.cardScale, ")"),
            transition: "transform ".concat(props2.duration / 1e3, "s ease"),
            zIndex: zIndex.value
          };
        }
        return {};
      });
      return function () {
        var _slots$default;
        return Vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__container__item"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-swiper__card"), props2.type === "card"), "".concat(prefix.value, "-is-active"), props2.type === "card" && active.value), "".concat(prefix.value, "-swiper__fade"), props2.animation === "fade")],
          "style": itemStyle.value
        }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {})) || []]);
      };
    }
  });

  function ownKeys$J(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$I(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$J(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$J(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$e(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };
  var _Swiper = Vue.defineComponent({
    name: "TSwiper",
    props: props$g,
    emits: ["update:current"],
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var prefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _useGlobalIcon = useGlobalIcon({
          ChevronLeftIcon: TdChevronLeftIcon,
          ChevronRightIcon: TdChevronRightIcon
        }),
        ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
        ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
      var swiperTimer = null;
      var swiperSwitchingTimer = 0;
      var isBeginToEnd = false;
      var isEndToBegin = false;
      var currentIndex = Vue.ref(props2.current || props2.defaultCurrent);
      var navActiveIndex = Vue.ref(props2.current || props2.defaultCurrent);
      var isHovering = Vue.ref(false);
      var isSwitching = Vue.ref(false);
      var showArrow = Vue.ref(false);
      var swiperWrap = Vue.ref();
      var getChildComponentByName = useChildComponentSlots();
      var swiperItemLength = Vue.ref(0);
      var navigationConfig = Vue.computed(function () {
        return _objectSpread$I(_objectSpread$I({}, defaultNavigation), Vue.isVNode(props2.navigation) ? {} : props2.navigation);
      });
      var isEnd = Vue.computed(function () {
        if (props2.type === "card") {
          return !props2.loop && currentIndex.value + 1 >= swiperItemLength.value;
        }
        return !props2.loop && currentIndex.value + 2 >= swiperItemLength.value;
      });
      var propsToUpdateSetTimer = Vue.computed(function () {
        return [props2.autoplay, currentIndex.value, props2.duration, props2.interval];
      });
      var swiperWrapClass = Vue.computed(function () {
        return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-swiper__wrap"), true), "".concat(prefix.value, "-swiper--inside"), navigationConfig.value.placement === "inside"), "".concat(prefix.value, "-swiper--outside"), navigationConfig.value.placement === "outside"), "".concat(prefix.value, "-swiper--vertical"), props2.direction === "vertical"), "".concat(prefix.value, "-swiper--large"), navigationConfig.value.size === "large"), "".concat(prefix.value, "-swiper--small"), navigationConfig.value.size === "small");
      });
      var containerStyle = Vue.computed(function () {
        var offsetHeight = props2.height ? "".concat(props2.height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");
        if (props2.type === "card" || props2.animation === "fade") {
          return {
            height: offsetHeight
          };
        }
        if (props2.animation === "slide") {
          var style = {
            transition: isSwitching.value ? "transform ".concat(props2.duration / 1e3, "s ease") : ""
          };
          var active = currentIndex.value;
          if (swiperItemLength.value > 1) {
            active += 1;
            if (isBeginToEnd || isEndToBegin) {
              style.transition = "";
            }
          }
          if (props2.direction === "vertical") {
            style.height = offsetHeight;
            style.transform = "translate3d(0, -".concat(active * 100, "%, 0px)");
          } else {
            style.transform = "translate3d(-".concat(active * 100, "%, 0px, 0px)");
          }
          ["msTransform", "WebkitTransform"].forEach(function (key) {
            style[key] = style.transform;
          });
          return style;
        }
        return {};
      });
      var swiperItems = function swiperItems() {
        var swiperItemList = getChildComponentByName("SwiperItem");
        swiperItemLength.value = swiperItemList.length;
        var items = swiperItemList.map(function (swiperItem, index) {
          var _slot;
          var p = _objectSpread$I(_objectSpread$I({}, props2), swiperItem.props);
          return Vue.createVNode(_SwiperItem, Vue.mergeProps({
            "index": index,
            "currentIndex": currentIndex.value,
            "isSwitching": isSwitching.value,
            "getWrapAttribute": getWrapAttribute,
            "swiperItemLength": swiperItemLength.value
          }, p), _isSlot$e(_slot = swiperItem.children["default"]()) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        });
        if (props2.animation === "slide" && items.length > 1) {
          var first = Vue.cloneVNode(items[0], {
            key: "swiper-item-append-".concat(0)
          });
          var last = Vue.cloneVNode(items[items.length - 1], {
            key: "swiper-item-prepend-".concat(items.length - 1)
          });
          items.unshift(last);
          items.push(first);
        }
        return items;
      };
      var swiperTo = function swiperTo(index, context) {
        var _props2$onChange;
        var targetIndex = index % swiperItemLength.value;
        navActiveIndex.value = targetIndex;
        emit("update:current", targetIndex);
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 || _props2$onChange.call(props2, targetIndex, context);
        isSwitching.value = true;
        if (props2.animation === "slide" && swiperItemLength.value > 1 && props2.type !== "card") {
          targetIndex = index;
          isBeginToEnd = false;
          isEndToBegin = false;
          if (index >= swiperItemLength.value) {
            clearTimer();
            setTimeout(function () {
              isEndToBegin = true;
              currentIndex.value = 0;
            }, props2.duration);
          }
          if (currentIndex.value === 0) {
            if (swiperItemLength.value >= 2 && index === swiperItemLength.value - 1) {
              targetIndex = -1;
              navActiveIndex.value = swiperItemLength.value - 1;
              clearTimer();
              setTimeout(function () {
                isBeginToEnd = true;
                currentIndex.value = swiperItemLength.value - 1;
              }, props2.duration);
            }
          }
        }
        currentIndex.value = targetIndex;
      };
      var clearTimer = function clearTimer() {
        if (swiperTimer) {
          clearTimeout(swiperTimer);
          swiperTimer = null;
        }
      };
      var setTimer = function setTimer() {
        if (props2.autoplay && props2.interval > 0) {
          clearTimer();
          swiperTimer = setTimeout(function () {
            swiperTo(currentIndex.value + 1, {
              source: "autoplay"
            });
          }, currentIndex.value === 0 ? props2.interval - (props2.duration + 50) : props2.interval);
        }
      };
      var onMouseEnter = function onMouseEnter() {
        isHovering.value = true;
        if (props2.stopOnHover) {
          clearTimer();
        }
        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = true;
        }
      };
      var onMouseLeave = function onMouseLeave() {
        isHovering.value = false;
        if (!isEnd.value) {
          setTimer();
        }
        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = false;
        }
      };
      var onMouseEnterNavigationItem = function onMouseEnterNavigationItem(i) {
        if (props2.trigger === "hover") {
          swiperTo(i, {
            source: "hover"
          });
        }
      };
      var onClickNavigationItem = function onClickNavigationItem(i) {
        if (props2.trigger === "click") {
          swiperTo(i, {
            source: "click"
          });
        }
      };
      var goNext = function goNext(context) {
        if (isSwitching.value) return;
        if (props2.type === "card") {
          return swiperTo(currentIndex.value + 1 >= swiperItemLength.value ? 0 : currentIndex.value + 1, context);
        }
        return swiperTo(currentIndex.value + 1, context);
      };
      var goPrevious = function goPrevious(context) {
        if (isSwitching.value) return;
        if (currentIndex.value - 1 < 0) {
          if (props2.animation === "slide" && swiperItemLength.value === 2) {
            return swiperTo(0, context);
          }
          return swiperTo(swiperItemLength.value - 1, context);
        }
        return swiperTo(currentIndex.value - 1, context);
      };
      var getWrapAttribute = function getWrapAttribute(attr) {
        var _swiperWrap$value;
        return (_swiperWrap$value = swiperWrap.value) === null || _swiperWrap$value === void 0 || (_swiperWrap$value = _swiperWrap$value.parentNode) === null || _swiperWrap$value === void 0 ? void 0 : _swiperWrap$value[attr];
      };
      var renderPagination = function renderPagination() {
        var fractionIndex = currentIndex.value + 1 > swiperItemLength.value ? 1 : currentIndex.value + 1;
        return Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow")
        }, [Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [Vue.createVNode(ChevronLeftIcon, null, null)]), Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__navigation-text-fraction")
        }, [fractionIndex, "/", swiperItemLength.value]), Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [Vue.createVNode(ChevronRightIcon, null, null)])]);
      };
      var renderArrow = function renderArrow() {
        if (!showArrow.value) return null;
        return Vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__arrow"), "".concat(prefix.value, "-swiper__arrow--default")]
        }, [Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [Vue.createVNode(ChevronLeftIcon, null, null)]), Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [Vue.createVNode(ChevronRightIcon, null, null)])]);
      };
      var renderNavigation = function renderNavigation() {
        if (Vue.isVNode(props2.navigation)) return props2.navigation;
        var navigationSlot = renderTNodeJSX("navigation");
        if (navigationSlot && Vue.isVNode(navigationSlot === null || navigationSlot === void 0 ? void 0 : navigationSlot[0])) return navigationSlot;
        if (navigationConfig.value.type === "fraction") {
          return Vue.createVNode("div", {
            "class": ["".concat(prefix.value, "-swiper__navigation"), "".concat(prefix.value, "-swiper__navigation--fraction")]
          }, [renderPagination()]);
        }
        var swiperItemList = getChildComponentByName("SwiperItem");
        return Vue.createVNode("ul", {
          "class": ["".concat(prefix.value, "-swiper__navigation"), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-swiper__navigation-bars"), navigationConfig.value.type === "bars"), "".concat(prefix.value, "-swiper__navigation-dots"), navigationConfig.value.type === "dots"), "".concat(prefix.value, "-swiper__navigation-dots-bar"), navigationConfig.value.type === "dots-bar")]
        }, [swiperItemList.map(function (_, i) {
          return Vue.createVNode("li", {
            "key": i,
            "class": ["".concat(prefix.value, "-swiper__navigation-item"), _defineProperty$2({}, "".concat(prefix.value, "-is-active"), i === navActiveIndex.value)],
            "onMouseenter": function onMouseenter() {
              return onMouseEnterNavigationItem(i);
            },
            "onClick": function onClick() {
              return onClickNavigationItem(i);
            }
          }, [Vue.createVNode("span", null, null)]);
        })]);
      };
      var renderSwiperItems = function renderSwiperItems() {
        return swiperItems();
      };
      Vue.watch(function () {
        return propsToUpdateSetTimer.value;
      }, function () {
        setTimer();
      });
      Vue.watch(function () {
        return isSwitching.value;
      }, function () {
        if (isSwitching.value) {
          if (swiperSwitchingTimer) clearTimeout(swiperSwitchingTimer);
          swiperSwitchingTimer = setTimeout(function () {
            isSwitching.value = false;
            swiperSwitchingTimer = 0;
            if (isEnd.value) {
              clearTimer();
            }
          }, props2.duration + 50);
        }
      });
      Vue.watch(function () {
        return props2.current;
      }, function () {
        swiperTo(props2.current, {
          source: "autoplay"
        });
      });
      Vue.onMounted(function () {
        setTimer();
        showArrow.value = navigationConfig.value.showSlideBtn === "always";
      });
      return function () {
        return Vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper")],
          "onMouseenter": onMouseEnter,
          "onMouseleave": onMouseLeave,
          "ref": swiperWrap
        }, [Vue.createVNode("div", {
          "class": swiperWrapClass.value
        }, [Vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__content"), _defineProperty$2(_defineProperty$2({}, "".concat(prefix.value, "-swiper-fade"), props2.animation === "fade"), "".concat(prefix.value, "-swiper-card"), props2.type === "card")]
        }, [Vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__container"),
          "style": containerStyle.value
        }, [renderSwiperItems()])]), renderNavigation(), renderArrow()])]);
      };
    }
  });

  var Swiper = withInstall$1(_Swiper);
  var SwiperItem = withInstall$1(_SwiperItem);

  var baseTableProps = {
    activeRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultActiveRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    activeRowType: {
      type: String,
      "default": ""
    },
    allowResizeColumnWidth: {
      type: Boolean,
      "default": void 0
    },
    attach: {
      type: [String, Function]
    },
    bordered: Boolean,
    bottomContent: {
      type: [String, Function]
    },
    cellEmptyContent: {
      type: [String, Function]
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableDataPage: Boolean,
    disableSpaceInactiveRow: {
      type: Boolean,
      "default": void 0
    },
    empty: {
      type: [String, Function],
      "default": ""
    },
    firstFullRow: {
      type: [String, Function]
    },
    fixedRows: {
      type: Array
    },
    footData: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    footerAffixProps: {
      type: Object
    },
    footerAffixedBottom: {
      type: [Boolean, Object],
      "default": false
    },
    footerSummary: {
      type: [String, Function]
    },
    headerAffixProps: {
      type: Object
    },
    headerAffixedTop: {
      type: [Boolean, Object],
      "default": false
    },
    height: {
      type: [String, Number]
    },
    horizontalScrollAffixedBottom: {
      type: [Boolean, Object]
    },
    hover: Boolean,
    keyboardRowHover: {
      type: Boolean,
      "default": true
    },
    lastFullRow: {
      type: [String, Function]
    },
    lazyLoad: Boolean,
    loading: {
      type: [Boolean, Function],
      "default": void 0
    },
    loadingProps: {
      type: Object
    },
    locale: {
      type: Object
    },
    maxHeight: {
      type: [String, Number]
    },
    pagination: {
      type: Object
    },
    paginationAffixedBottom: {
      type: [Boolean, Object]
    },
    resizable: Boolean,
    rowAttributes: {
      type: [Object, Array, Function]
    },
    rowClassName: {
      type: [String, Object, Array, Function]
    },
    rowKey: {
      type: String,
      "default": "id",
      required: true
    },
    rowspanAndColspan: {
      type: Function
    },
    rowspanAndColspanInFooter: {
      type: Function
    },
    scroll: {
      type: Object
    },
    showHeader: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    stripe: Boolean,
    tableContentWidth: {
      type: String,
      "default": ""
    },
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        if (!val) return true;
        return ["auto", "fixed"].includes(val);
      }
    },
    topContent: {
      type: [String, Function]
    },
    verticalAlign: {
      type: String,
      "default": "middle",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    onActiveChange: Function,
    onActiveRowAction: Function,
    onCellClick: Function,
    onColumnResizeChange: Function,
    onPageChange: Function,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowMousedown: Function,
    onRowMouseenter: Function,
    onRowMouseleave: Function,
    onRowMouseover: Function,
    onRowMouseup: Function,
    onScroll: Function,
    onScrollX: Function,
    onScrollY: Function
  };

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      depthMap.set(col, depth);
      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);
        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }
    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];
    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];
      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }
    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();
    var _loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;
        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);
        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          _loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };
    var leafColumns = [];
    _loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var _loop2 = function loop(nodes, thRows) {
      var _children;
      var thRowData = [];
      var children = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;
        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);
        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }
      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        _loop2(children, thRows);
      }
      thRows.push(thRowData);
      return thRowData;
    };
    var list = [];
    _loop2(columns, list);
    list = list.reverse();
    return list;
  }

  function useClassName() {
    var classPrefix = usePrefixClass();
    var classNames = {
      classPrefix: classPrefix.value,
      tableBaseClass: {
        table: "".concat(classPrefix.value, "-table"),
        columnResizableTable: "".concat(classPrefix.value, "-table--column-resizable"),
        overflowVisible: "".concat(classPrefix.value, "-table--overflow-visible"),
        body: "".concat(classPrefix.value, "-table__body"),
        content: "".concat(classPrefix.value, "-table__content"),
        topContent: "".concat(classPrefix.value, "-table__top-content"),
        bottomContent: "".concat(classPrefix.value, "-table__bottom-content"),
        paginationWrap: "".concat(classPrefix.value, "-table__pagination-wrap"),
        tdLastRow: "".concat(classPrefix.value, "-table__td-last-row"),
        tdFirstCol: "".concat(classPrefix.value, "-table__td-first-col"),
        thCellInner: "".concat(classPrefix.value, "-table__th-cell-inner"),
        tableRowEdit: "".concat(classPrefix.value, "-table--row-edit"),
        cellEditable: "".concat(classPrefix.value, "-table__cell--editable"),
        cellEditWrap: "".concat(classPrefix.value, "-table__cell-wrap"),
        bordered: "".concat(classPrefix.value, "-table--bordered"),
        striped: "".concat(classPrefix.value, "-table--striped"),
        hover: "".concat(classPrefix.value, "-table--hoverable"),
        loading: "".concat(classPrefix.value, "-table--loading"),
        rowspanAndColspan: "".concat(classPrefix.value, "-table--rowspan-colspan"),
        empty: "".concat(classPrefix.value, "-table__empty"),
        emptyRow: "".concat(classPrefix.value, "-table__empty-row"),
        headerFixed: "".concat(classPrefix.value, "-table--header-fixed"),
        columnFixed: "".concat(classPrefix.value, "-table--column-fixed"),
        widthOverflow: "".concat(classPrefix.value, "-table--width-overflow"),
        multipleHeader: "".concat(classPrefix.value, "-table--multiple-header"),
        footerAffixed: "".concat(classPrefix.value, "-table--footer-affixed"),
        horizontalBarAffixed: "".concat(classPrefix.value, "-table--horizontal-bar-affixed"),
        affixedHeader: "".concat(classPrefix.value, "-table--affixed-header"),
        affixedHeaderElm: "".concat(classPrefix.value, "-table__affixed-header-elm"),
        affixedFooterElm: "".concat(classPrefix.value, "-table__affixed-footer-elm"),
        affixedFooterWrap: "".concat(classPrefix.value, "-table__affixed-footer-wrap"),
        scrollbarDivider: "".concat(classPrefix.value, "-table__scroll-bar-divider"),
        fullHeight: "".concat(classPrefix.value, "-table--full-height"),
        resizeLine: "".concat(classPrefix.value, "-table__resize-line"),
        obviousScrollbar: "".concat(classPrefix.value, "-table__scrollbar--obvious"),
        affixedHeaderWrap: "".concat(classPrefix.value, "-table__affixed-header-elm-wrap")
      },
      tdAlignClasses: {
        left: "".concat(classPrefix.value, "-align-left"),
        right: "".concat(classPrefix.value, "-align-right"),
        center: "".concat(classPrefix.value, "-align-center")
      },
      tableHeaderClasses: {
        header: "".concat(classPrefix.value, "-table__header"),
        thBordered: "".concat(classPrefix.value, "-table__header-th--bordered"),
        fixed: "".concat(classPrefix.value, "-table__header--fixed"),
        multipleHeader: "".concat(classPrefix.value, "-table__header--multiple")
      },
      tableFooterClasses: {
        footer: "".concat(classPrefix.value, "-table__footer"),
        fixed: "".concat(classPrefix.value, "-table__footer--fixed")
      },
      tableAlignClasses: {
        top: "".concat(classPrefix.value, "-vertical-align-top"),
        middle: "".concat(classPrefix.value, "-vertical-align-middle"),
        bottom: "".concat(classPrefix.value, "-vertical-align-bottom")
      },
      tableRowFixedClasses: {
        top: "".concat(classPrefix.value, "-table__row--fixed-top"),
        bottom: "".concat(classPrefix.value, "-table__row--fixed-bottom"),
        firstBottom: "".concat(classPrefix.value, "-table__row--fixed-bottom-first"),
        withoutBorderBottom: "".concat(classPrefix.value, "-table__row--without-border-bottom")
      },
      tableColFixedClasses: {
        left: "".concat(classPrefix.value, "-table__cell--fixed-left"),
        right: "".concat(classPrefix.value, "-table__cell--fixed-right"),
        lastLeft: "".concat(classPrefix.value, "-table__cell--fixed-left-last"),
        firstRight: "".concat(classPrefix.value, "-table__cell--fixed-right-first"),
        leftShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-left"),
        rightShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-right")
      },
      tableLayoutClasses: {
        auto: "".concat(classPrefix.value, "-table--layout-auto"),
        fixed: "".concat(classPrefix.value, "-table--layout-fixed")
      },
      tdEllipsisClass: "".concat(classPrefix.value, "-table-td--ellipsis"),
      tableFullRowClasses: {
        base: "".concat(classPrefix.value, "-table__row--full"),
        innerFullRow: "".concat(classPrefix.value, "-table__row-full-inner"),
        innerFullElement: "".concat(classPrefix.value, "-table__row-full-element"),
        firstFullRow: "".concat(classPrefix.value, "-table__first-full-row"),
        lastFullRow: "".concat(classPrefix.value, "-table__last-full-row")
      },
      tableExpandClasses: {
        iconBox: "".concat(classPrefix.value, "-table__expand-box"),
        iconCell: "".concat(classPrefix.value, "-table__expandable-icon-cell"),
        rowExpanded: "".concat(classPrefix.value, "-table__row--expanded"),
        rowFolded: "".concat(classPrefix.value, "-table__row--folded"),
        row: "".concat(classPrefix.value, "-table__expanded-row"),
        rowInner: "".concat(classPrefix.value, "-table__expanded-row-inner"),
        expanded: "".concat(classPrefix.value, "-table__row--expanded"),
        collapsed: "".concat(classPrefix.value, "-table__row--collapsed")
      },
      tableSortClasses: {
        sortable: "".concat(classPrefix.value, "-table__cell--sortable"),
        sortColumn: "".concat(classPrefix.value, "-table__sort-column"),
        title: "".concat(classPrefix.value, "-table__cell--title"),
        trigger: "".concat(classPrefix.value, "-table__cell--sort-trigger"),
        doubleIcon: "".concat(classPrefix.value, "-table__double-icons"),
        sortIcon: "".concat(classPrefix.value, "-table__sort-icon"),
        iconDirection: {
          asc: "".concat(classPrefix.value, "-table-sort-asc"),
          desc: "".concat(classPrefix.value, "-table-sort-desc")
        },
        iconActive: "".concat(classPrefix.value, "-table__sort-icon--active"),
        iconDefault: "".concat(classPrefix.value, "-icon-sort--default")
      },
      tableSelectedClasses: {
        selected: "".concat(classPrefix.value, "-table__row--selected"),
        disabled: "".concat(classPrefix.value, "-table__row--disabled"),
        checkCell: "".concat(classPrefix.value, "-table__cell-check")
      },
      tableFilterClasses: {
        filterable: "".concat(classPrefix.value, "-table__cell--filterable"),
        popup: "".concat(classPrefix.value, "-table__filter-pop"),
        icon: "".concat(classPrefix.value, "-table__filter-icon"),
        popupContent: "".concat(classPrefix.value, "-table__filter-pop-content"),
        result: "".concat(classPrefix.value, "-table__filter-result"),
        inner: "".concat(classPrefix.value, "-table__row-filter-inner"),
        bottomButtons: "".concat(classPrefix.value, "-table__filter--bottom-buttons"),
        contentInner: "".concat(classPrefix.value, "-table__filter-pop-content-inner"),
        iconWrap: "".concat(classPrefix.value, "-table__filter-icon-wrap")
      },
      asyncLoadingClass: "".concat(classPrefix.value, "-table__async-loading"),
      isFocusClass: "".concat(classPrefix.value, "-is-focus"),
      isLoadingClass: "".concat(classPrefix.value, "-is-loading"),
      isLoadMoreClass: "".concat(classPrefix.value, "-is-load-more"),
      tableTreeClasses: {
        col: "".concat(classPrefix.value, "-table__tree-col"),
        inlineCol: "".concat(classPrefix.value, "-table__tree-col--inline"),
        icon: "".concat(classPrefix.value, "-table__tree-op-icon"),
        leafNode: "".concat(classPrefix.value, "-table__tree-leaf-node")
      },
      tableDraggableClasses: {
        rowDraggable: "".concat(classPrefix.value, "-table--row-draggable"),
        rowHandlerDraggable: "".concat(classPrefix.value, "-table--row-handler-draggable"),
        colDraggable: "".concat(classPrefix.value, "-table--col-draggable"),
        handle: "".concat(classPrefix.value, "-table__handle-draggable"),
        ghost: "".concat(classPrefix.value, "-table__ele--draggable-ghost"),
        chosen: "".concat(classPrefix.value, "-table__ele--draggable-chosen"),
        dragging: "".concat(classPrefix.value, "-table__ele--draggable-dragging"),
        dragSortTh: "".concat(classPrefix.value, "-table__th--drag-sort")
      },
      virtualScrollClasses: {
        cursor: "".concat(classPrefix.value, "-table__virtual-scroll-cursor"),
        header: "".concat(classPrefix.value, "-table__virtual-scroll-header")
      },
      positiveRotate90: "".concat(classPrefix.value, "-positive-rotate-90"),
      negativeRotate180: "".concat(classPrefix.value, "-negative-rotate-180")
    };
    return classNames;
  }

  function ownKeys$I(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$H(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$I(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$I(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$d(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var TEllipsis = Vue.defineComponent({
    name: "TEllipsis",
    props: {
      content: {
        type: [String, Function]
      },
      "default": {
        type: [String, Function]
      },
      tooltipContent: {
        type: [String, Number, Function]
      },
      placement: String,
      attach: [String, Function],
      tooltipProps: Object,
      zIndex: Number,
      overlayClassName: String,
      classPrefix: {
        type: String,
        "default": "t"
      }
    },
    setup: function setup(props) {
      var root = Vue.ref();
      var flag = Vue.ref(false);
      var isOverflow = Vue.ref(false);
      var renderContent = useContent();
      var ellipsisClasses = Vue.computed(function () {
        return ["".concat(props.classPrefix, "-table__ellipsis"), "".concat(props.classPrefix, "-text-ellipsis")];
      });
      var innerEllipsisClassName = Vue.computed(function () {
        return ["".concat(props.classPrefix, "-table__ellipsis-content"), props.overlayClassName];
      });
      Vue.onMounted(function () {
        isOverflow.value = isTextEllipsis(root.value);
      });
      Vue.onUpdated(function () {
        isOverflow.value = isTextEllipsis(root.value);
      });
      var onTriggerMouseenter = function onTriggerMouseenter() {
        if (!root.value) return;
        flag.value = true;
      };
      var onTriggerMouseleave = function onTriggerMouseleave() {
        if (!root.value) return;
      };
      var handleVisibleChange = function handleVisibleChange(v) {
        if (!v) flag.value = false;
      };
      var onMouseAround = debounce$1(function (e) {
        e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
      }, 80);
      return function () {
        var cellNode = renderContent("default", "content");
        var ellipsisContent = Vue.createVNode("div", {
          "ref": root,
          "class": ellipsisClasses.value,
          "onMouseenter": onMouseAround,
          "onMouseleave": onMouseAround,
          "style": {
            textOverflow: isOverflow.value ? "ellipsis" : "clip"
          }
        }, [cellNode]);
        var content = null;
        var tooltipProps = props.tooltipProps;
        if (isOverflow.value && flag.value) {
          var rProps = _objectSpread$H({
            content: props.tooltipContent || function () {
              return cellNode;
            },
            destroyOnClose: true,
            zIndex: props.zIndex,
            attach: props.attach,
            placement: props.placement,
            overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? innerEllipsisClassName.value.concat(tooltipProps.overlayClassName) : innerEllipsisClassName.value,
            onVisibleChange: handleVisibleChange
          }, tooltipProps);
          content = Vue.createVNode(Tooltip, rProps, _isSlot$d(ellipsisContent) ? ellipsisContent : {
            "default": function _default() {
              return [ellipsisContent];
            }
          });
        } else {
          content = ellipsisContent;
        }
        return content;
      };
    }
  });

  function ownKeys$H(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$G(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$H(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$H(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$c(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  function renderTitle(slots, col, index) {
    var params = {
      col: col,
      colIndex: index
    };
    if (isFunction(col.title)) {
      return col.title(Vue.h, params);
    }
    if (isString(col.title) && slots[col.title]) {
      return slots[col.title](params);
    }
    if (isFunction(col.render)) {
      return col.render(Vue.h, _objectSpread$G(_objectSpread$G({}, params), {}, {
        type: "title",
        row: {},
        rowIndex: -1
      })) || col.title;
    }
    return col.title;
  }
  function useTableHeader(props) {
    var _useClassName = useClassName(),
      tableSortClasses = _useClassName.tableSortClasses,
      tableFilterClasses = _useClassName.tableFilterClasses;
    var spansAndLeafNodes = Vue.computed(function () {
      return getThRowspanAndColspan(props.columns);
    });
    var thList = Vue.computed(function () {
      return getThList(props.columns);
    });
    var isMultipleHeader = Vue.computed(function () {
      return thList.value.length > 1;
    });
    var renderTitleWidthIcon = function renderTitleWidthIcon(_ref, col, colIndex, ellipsisTitle, attach, extra) {
      var _ref2 = _slicedToArray(_ref, 3),
        title = _ref2[0],
        sortIcon = _ref2[1],
        filterIcon = _ref2[2];
      var classes = _defineProperty$2(_defineProperty$2({}, tableSortClasses.sortable, sortIcon), tableFilterClasses.filterable, filterIcon);
      var content = isFunction(ellipsisTitle) ? ellipsisTitle(Vue.h, {
        col: col,
        colIndex: colIndex
      }) : void 0;
      var isEllipsis = ellipsisTitle !== void 0 ? Boolean(ellipsisTitle) : Boolean(col.ellipsis);
      return Vue.createVNode("div", {
        "class": classes
      }, [Vue.createVNode("div", {
        "class": tableSortClasses.title
      }, [isEllipsis ? Vue.createVNode(TEllipsis, {
        "placement": "bottom",
        "attach": props.attach || (attach ? function () {
          return attach;
        } : void 0),
        "tooltipContent": content && function () {
          return content;
        },
        "tooltipProps": _typeof$3(ellipsisTitle) === "object" ? ellipsisTitle : void 0,
        "classPrefix": extra === null || extra === void 0 ? void 0 : extra.classPrefix,
        "overlayClassName": extra === null || extra === void 0 ? void 0 : extra.ellipsisOverlayClassName
      }, _isSlot$c(title) ? title : {
        "default": function _default() {
          return [title];
        }
      }) : Vue.createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && Vue.createVNode("div", {
        "class": tableFilterClasses.iconWrap
      }, [sortIcon, filterIcon])])]);
    };
    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  function ownKeys$G(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$F(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$G(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$G(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_MIN_WIDTH = 80;
  var DEFAULT_MAX_WIDTH = 600;
  var distance = 8;
  function useColumnResize(params) {
    var isWidthOverflow = params.isWidthOverflow,
      tableContentRef = params.tableContentRef,
      showColumnShadow = params.showColumnShadow,
      getThWidthList = params.getThWidthList,
      updateThWidthList = params.updateThWidthList,
      setTableElmWidth = params.setTableElmWidth,
      updateTableAfterColumnResize = params.updateTableAfterColumnResize,
      onColumnResizeChange = params.onColumnResizeChange;
    var resizeLineRef = Vue.ref();
    var effectColMap = Vue.ref({});
    var leafColumns = Vue.ref([]);
    var originalSelectStart;
    var originalDragStart;
    Vue.onMounted(function () {
      var hasDocument = typeof document !== "undefined";
      originalSelectStart = hasDocument ? document.onselectstart : null;
      originalDragStart = hasDocument ? document.ondragstart : null;
    });
    var getSiblingResizableCol = function getSiblingResizableCol(nodes, index, type) {
      var i = index;
      while (nodes[i] && nodes[i].resizable === false) {
        if (type === "next") {
          i += 1;
        } else {
          i -= 1;
        }
      }
      return nodes[i];
    };
    var _setEffectColMap = function setEffectColMap(nodes, parent) {
      if (!nodes) return;
      leafColumns.value = nodes;
      nodes.forEach(function (n, index) {
        var prevNode = getSiblingResizableCol(nodes, index - 1, "prev");
        var nextNode = getSiblingResizableCol(nodes, index + 1, "next");
        var parentPrevCol = parent ? effectColMap.value[parent.colKey].prev : nextNode;
        var parentNextCol = parent ? effectColMap.value[parent.colKey].next : prevNode;
        var prev = index === 0 ? parentPrevCol : prevNode;
        var next = index === nodes.length - 1 ? parentNextCol : nextNode;
        effectColMap.value[n.colKey] = {
          prev: prev,
          next: next,
          current: {
            prevSibling: getSiblingResizableCol(nodes, index - 1, "prev"),
            nextSibling: getSiblingResizableCol(nodes, index + 1, "next")
          }
        };
        _setEffectColMap(n.children, n);
      });
    };
    var resizeLineParams = {
      isDragging: false,
      draggingCol: null,
      draggingStart: 0,
      effectCol: "next"
    };
    var resizeLineStyle = Vue.reactive({
      display: "none",
      height: "10px",
      left: "10px",
      bottom: "0"
    });
    var isColRightFixActive = function isColRightFixActive(col) {
      return col.fixed === "right" && showColumnShadow.right;
    };
    var onColumnMouseover = function onColumnMouseover(e, col) {
      if (!resizeLineRef.value || resizeLineParams.isDragging || !e.target) return;
      var target = e.target.closest("th");
      var colKey = target.getAttribute("data-colkey");
      if (!leafColumns.value.find(function (t) {
        return t.colKey === colKey;
      })) return;
      var targetBoundRect = target.getBoundingClientRect();
      var thRightCursor = targetBoundRect.right - e.pageX <= distance;
      var thLeftCursor = e.pageX - targetBoundRect.left <= distance;
      var isFixedToRight = isColRightFixActive(col);
      if (thRightCursor || isFixedToRight) {
        var _col$resizable;
        var colResizable = (_col$resizable = col.resizable) !== null && _col$resizable !== void 0 ? _col$resizable : true;
        if (colResizable) {
          target.style.cursor = thRightCursor || isFixedToRight && thLeftCursor ? "col-resize" : "";
          var isCurrent = thRightCursor && !isFixedToRight || isFixedToRight && thLeftCursor;
          resizeLineParams.draggingCol = isCurrent ? target : target.nextElementSibling;
          resizeLineParams.effectCol = "next";
          return;
        }
      } else if (thLeftCursor) {
        var prevEl = target.previousElementSibling;
        if (prevEl) {
          var _effectColMap$value$c, _effectPrevCol$resiza;
          var effectPrevCol = (_effectColMap$value$c = effectColMap.value[col.colKey]) === null || _effectColMap$value$c === void 0 ? void 0 : _effectColMap$value$c.prev;
          var _colResizable = (_effectPrevCol$resiza = effectPrevCol === null || effectPrevCol === void 0 ? void 0 : effectPrevCol.resizable) !== null && _effectPrevCol$resiza !== void 0 ? _effectPrevCol$resiza : true;
          if (_colResizable) {
            target.style.cursor = "col-resize";
            resizeLineParams.draggingCol = prevEl;
            resizeLineParams.effectCol = "prev";
            return;
          }
        }
      }
      target.style.cursor = "";
      resizeLineParams.draggingCol = null;
      resizeLineParams.effectCol = null;
    };
    var getMinMaxColWidth = function getMinMaxColWidth(targetCol) {
      var _targetCol$resize, _targetCol$resize2;
      var propMinWidth = isNumber(targetCol.minWidth) ? targetCol.minWidth : parseInt(targetCol.minWidth || "0", 10);
      return {
        minColWidth: Math.max(((_targetCol$resize = targetCol.resize) === null || _targetCol$resize === void 0 ? void 0 : _targetCol$resize.minWidth) || DEFAULT_MIN_WIDTH, propMinWidth),
        maxColWidth: ((_targetCol$resize2 = targetCol.resize) === null || _targetCol$resize2 === void 0 ? void 0 : _targetCol$resize2.maxWidth) || DEFAULT_MAX_WIDTH
      };
    };
    var getNormalResizeInfo = function getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) {
      var resizeLinePos = targetBoundRect.right - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var targetCol = resizeLineParams.effectCol === "next" ? col : effectPrevCol;
      var _getMinMaxColWidth = getMinMaxColWidth(targetCol),
        minColWidth = _getMinMaxColWidth.minColWidth,
        maxColWidth = _getMinMaxColWidth.maxColWidth;
      return {
        resizeLinePos: resizeLinePos,
        minResizeLineLeft: colLeft + minColWidth,
        maxResizeLineLeft: colLeft + maxColWidth
      };
    };
    var getFixedToRightResizeInfo = function getFixedToRightResizeInfo(target, col, effectPrevCol, targetBoundRect, tableBoundRect) {
      var resizeLinePos = targetBoundRect.left - tableBoundRect.left;
      var targetCol = target.dataset.colkey === col.colKey ? col : effectPrevCol;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var _getMinMaxColWidth2 = getMinMaxColWidth(targetCol),
        minColWidth = _getMinMaxColWidth2.minColWidth,
        maxColWidth = _getMinMaxColWidth2.maxColWidth;
      return {
        resizeLinePos: resizeLinePos,
        minResizeLineLeft: colLeft + (targetBoundRect.width - maxColWidth),
        maxResizeLineLeft: colLeft + (targetBoundRect.width - minColWidth)
      };
    };
    var getFixedToLeftResizeInfo = function getFixedToLeftResizeInfo(targetBoundRect, tableBoundRect) {
      var resizeLinePos = targetBoundRect.left - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      return {
        resizeLinePos: resizeLinePos,
        minResizeLineLeft: colLeft,
        maxResizeLineLeft: colLeft
      };
    };
    var getTotalTableWidth = function getTotalTableWidth(thWidthList) {
      var tableWidth = 0;
      leafColumns.value.forEach(function (col) {
        tableWidth += thWidthList[col.colKey];
      });
      return tableWidth;
    };
    var getSiblingColCanResizable = function getSiblingColCanResizable(newThWidthList, effectNextCol, distance2, index) {
      var isWidthAbnormal = true;
      if (effectNextCol) {
        var _getMinMaxColWidth3 = getMinMaxColWidth(effectNextCol),
          minColWidth = _getMinMaxColWidth3.minColWidth,
          maxColWidth = _getMinMaxColWidth3.maxColWidth;
        var targetNextColWidth = newThWidthList[effectNextCol.colKey] + distance2;
        isWidthAbnormal = targetNextColWidth < minColWidth || targetNextColWidth > maxColWidth;
      }
      return !(isWidthAbnormal || isWidthOverflow.value || index === leafColumns.value.length - 1);
    };
    var getOtherResizeInfo = function getOtherResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) {
      return effectPrevCol ? getNormalResizeInfo(col, effectPrevCol, targetBoundRect, tableBoundRect) : getFixedToLeftResizeInfo(targetBoundRect, tableBoundRect);
    };
    var onColumnMousedown = function onColumnMousedown(e, col, index) {
      var _tableContentRef$valu, _effectColMap$value$c2, _effectColMap$value$c3;
      if (!resizeLineParams.draggingCol) return;
      var target = resizeLineParams.draggingCol;
      var targetBoundRect = target.getBoundingClientRect();
      var tableBoundRect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      var effectNextCol = (_effectColMap$value$c2 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c2 === void 0 ? void 0 : _effectColMap$value$c2.next;
      var effectPrevCol = (_effectColMap$value$c3 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c3 === void 0 ? void 0 : _effectColMap$value$c3.prev;
      var _ref = isColRightFixActive(col) ? getFixedToRightResizeInfo(target, col, effectNextCol, targetBoundRect, tableBoundRect) : getOtherResizeInfo(col, effectNextCol, targetBoundRect, tableBoundRect),
        resizeLinePos = _ref.resizeLinePos,
        minResizeLineLeft = _ref.minResizeLineLeft,
        maxResizeLineLeft = _ref.maxResizeLineLeft;
      resizeLineParams.isDragging = true;
      resizeLineParams.draggingStart = e.x;
      if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.value) {
        resizeLineStyle.display = "block";
        resizeLineStyle.height = "".concat(tableBoundRect.bottom - targetBoundRect.top, "px");
        resizeLineStyle.left = "".concat(resizeLinePos, "px");
        var parent = tableContentRef.value.parentElement.getBoundingClientRect();
        resizeLineStyle.bottom = "".concat(parent.bottom - tableBoundRect.bottom, "px");
      }
      var _onDragEnd = function onDragEnd() {
        var _effectColMap$value$c4;
        if (!resizeLineParams.isDragging) return;
        var moveDistance = resizeLinePos - parseFloat(resizeLineStyle.left) || 0;
        var thWidthList = getThWidthList("calculate");
        var currentCol = (_effectColMap$value$c4 = effectColMap.value[col.colKey]) === null || _effectColMap$value$c4 === void 0 ? void 0 : _effectColMap$value$c4.current;
        if (!currentCol) return;
        var currentSibling = resizeLineParams.effectCol === "next" ? currentCol.nextSibling : currentCol.prevSibling;
        var newThWidthList = _objectSpread$F({}, thWidthList);
        var tmpCurrentCol = col.resizable !== false ? col : currentSibling;
        var rightCol = resizeLineParams.effectCol === "next" ? currentCol.nextSibling : col;
        var canResizeSiblingColWidth = getSiblingColCanResizable(newThWidthList, rightCol, moveDistance, index);
        if (resizeLineParams.effectCol === "next") {
          if (isColRightFixActive(col)) {
            if (target.dataset.colkey !== col.colKey) {
              newThWidthList[effectNextCol.colKey] += moveDistance;
            } else {
              newThWidthList[tmpCurrentCol.colKey] += moveDistance;
            }
          } else {
            newThWidthList[tmpCurrentCol.colKey] -= moveDistance;
            if (canResizeSiblingColWidth) {
              newThWidthList[effectNextCol.colKey] += moveDistance;
            }
          }
        } else if (resizeLineParams.effectCol === "prev") {
          if (canResizeSiblingColWidth) {
            newThWidthList[tmpCurrentCol.colKey] += moveDistance;
          }
          effectPrevCol && (newThWidthList[effectPrevCol.colKey] -= moveDistance);
        }
        updateThWidthList(newThWidthList);
        var tableWidth = getTotalTableWidth(newThWidthList);
        setTableElmWidth(Math.round(tableWidth));
        updateTableAfterColumnResize();
        resizeLineParams.isDragging = false;
        resizeLineParams.draggingCol = null;
        resizeLineParams.effectCol = null;
        target.style.cursor = "";
        resizeLineStyle.display = "none";
        resizeLineStyle.left = "0";
        off$1(document, "mouseup", _onDragEnd);
        off$1(document, "mousemove", onDragOver);
        document.onselectstart = originalSelectStart;
        document.ondragstart = originalDragStart;
        onColumnResizeChange === null || onColumnResizeChange === void 0 || onColumnResizeChange({
          columnsWidth: newThWidthList
        });
      };
      var onDragOver = function onDragOver(e2) {
        if (resizeLineParams.isDragging) {
          var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;
          resizeLineStyle.left = "".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), "px");
        }
      };
      on$1(document, "mouseup", _onDragEnd);
      on$1(document, "mousemove", onDragOver);
      document.onselectstart = function () {
        return false;
      };
      document.ondragstart = function () {
        return false;
      };
    };
    return {
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      onColumnMouseover: onColumnMouseover,
      onColumnMousedown: onColumnMousedown,
      setEffectColMap: _setEffectColMap
    };
  }

  function ownKeys$F(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$E(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$F(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$F(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableColFixedClasses.left, col.fixed === "left"), tableColFixedClasses.right, col.fixed === "right"), tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var virtualTranslateY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableRowFixedClasses.top, fixedTop), tableRowFixedClasses.bottom, fixedBottom), tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top - virtualTranslateY, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom + virtualTranslateY, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, context, finalColumns, affixRef) {
    var _toRefs = Vue.toRefs(props),
      columns = _toRefs.columns,
      tableLayout = _toRefs.tableLayout,
      tableContentWidth = _toRefs.tableContentWidth,
      fixedRows = _toRefs.fixedRows,
      firstFullRow = _toRefs.firstFullRow,
      lastFullRow = _toRefs.lastFullRow,
      maxHeight = _toRefs.maxHeight,
      headerAffixedTop = _toRefs.headerAffixedTop,
      footerAffixedBottom = _toRefs.footerAffixedBottom,
      bordered = _toRefs.bordered,
      resizable = _toRefs.resizable,
      allowResizeColumnWidth = _toRefs.allowResizeColumnWidth;
    var data = Vue.ref([]);
    var tableRef = Vue.ref();
    var tableContentRef = Vue.ref();
    var isFixedHeader = Vue.ref(false);
    var isWidthOverflow = Vue.ref(false);
    var tableElmRef = Vue.ref();
    var scrollbarWidth = Vue.ref(6);
    var rowAndColFixedPosition = Vue.ref(/* @__PURE__ */new Map());
    var showColumnShadow = Vue.reactive({
      left: false,
      right: false
    });
    var virtualScrollHeaderPos = Vue.ref({
      left: 0,
      top: 0
    });
    var tableWidth = Vue.ref(0);
    var tableElmWidth = Vue.ref(0);
    var thWidthList = Vue.ref({});
    var isFixedColumn = Vue.ref(false);
    var isFixedRightColumn = Vue.ref(false);
    var isFixedLeftColumn = Vue.ref(false);
    var columnResizable = Vue.computed(function () {
      var _ref, _allowResizeColumnWid;
      return (_ref = (_allowResizeColumnWid = allowResizeColumnWidth.value) !== null && _allowResizeColumnWid !== void 0 ? _allowResizeColumnWid : resizable.value) !== null && _ref !== void 0 ? _ref : false;
    });
    var notNeedThWidthList = Vue.computed(function () {
      var _props$scroll;
      return !(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    });
    function setUseFixedTableElmRef(val) {
      tableElmRef.value = val;
    }
    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;
        var col = columns2[i];
        if (["left", "right"].includes(col.fixed)) {
          isFixedColumn.value = true;
        }
        if (col.fixed === "right") {
          isFixedRightColumn.value = true;
        }
        if (col.fixed === "left") {
          isFixedLeftColumn.value = true;
        }
        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }
        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }
      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }
    var _setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;
        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;
        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        if (colInfo) {
          colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        }
        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          _setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var _setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;
        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;
        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }
        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        if (colInfo) {
          colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
        }
        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          _setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };
    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;
      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;
        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;
          var th = thList[j];
          var colKey = th.dataset.colkey;
          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }
          var obj = initialColumnMap.get(colKey || j);
          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            initialColumnMap.set(colKey, _objectSpread$E(_objectSpread$E({}, obj), {}, {
              width: th.getBoundingClientRect().width
            }));
          }
        }
      }
      _setFixedLeftPos(columns.value, initialColumnMap);
      _setFixedRightPos(columns.value, initialColumnMap);
    };
    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref2 = fixedRows.value || [],
        _ref3 = _slicedToArray(_ref2, 2),
        fixedTopRows = _ref3[0],
        fixedBottomRows = _ref3[1];
      var data2 = props.data,
        _props$rowKey = props.rowKey,
        rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;
      for (var i = 0; i < fixedTopRows; i++) {
        var tr = trList[i];
        var rowId = get(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;
        if (i === 0) {
          defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
        }
        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$E(_objectSpread$E({}, thisRowInfo), {}, {
          height: (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect().height) || 0
        }));
      }
      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr = trList[trList.length - (data2.length - _i)];
        var _rowId = get(data2[_i], rowKey);
        var _thisRowInfo = initialColumnMap.get(_rowId) || {};
        var _lastRowId = get(data2[_i + 1], rowKey);
        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};
        var _defaultBottom = 0;
        if (_i === data2.length - 1) {
          _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
        }
        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$E(_objectSpread$E({}, _thisRowInfo), {}, {
          height: (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect().height) || 0
        }));
      }
    };
    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.value.clear();
      if (!tableContentElm) return;
      var thead = tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      rowAndColFixedPosition.value = initialColumnMap;
    };
    var shadowLastScrollLeft;
    var updateColumnFixedShadow = function updateColumnFixedShadow(target, extra) {
      if (!isFixedColumn.value || !target) return;
      var scrollLeft = target.scrollLeft;
      if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;
      shadowLastScrollLeft = scrollLeft;
      var isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;
      var isShowLeft = scrollLeft > 0;
      if (showColumnShadow.left === isShowLeft && showColumnShadow.right === isShowRight) return;
      showColumnShadow.left = isShowLeft && isFixedLeftColumn.value;
      showColumnShadow.right = isShowRight && isFixedRightColumn.value;
    };
    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];
        for (var i = 0, len = nodes.length; i < len; i++) {
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);
          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }
          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);
          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };
    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns.value),
        newColumnsMap = _getColumnMap.newColumnsMap,
        levelNodes = _getColumnMap.levelNodes;
      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        var _fixedRows$value;
        if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
          updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
        }
        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };
    var updateFixedHeader = function updateFixedHeader() {
      var timer = setTimeout(function () {
        if (!tableContentRef.value) return;
        isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
        isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
        var pos = tableContentRef.value.getBoundingClientRect();
        virtualScrollHeaderPos.value = {
          top: pos.top,
          left: pos.left
        };
        clearTimeout(timer);
      }, 0);
    };
    var setTableElmWidth = function setTableElmWidth(width) {
      if (tableElmWidth.value === width) return;
      tableElmWidth.value = width;
    };
    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$valu, _tableElmRef$value;
      var rect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      if (!rect) return;
      var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
      tableWidth.value = rect.width - reduceWidth - (props.bordered ? 1 : 0);
      var elmRect = tableElmRef === null || tableElmRef === void 0 || (_tableElmRef$value = tableElmRef.value) === null || _tableElmRef$value === void 0 ? void 0 : _tableElmRef$value.getBoundingClientRect();
      (elmRect === null || elmRect === void 0 ? void 0 : elmRect.width) && setTableElmWidth(elmRect.width);
    };
    var updateAffixPosition = function updateAffixPosition() {
      var _affixRef$paginationA, _affixRef$paginationA2, _affixRef$horizontalS, _affixRef$horizontalS2, _affixRef$headerTopAf, _affixRef$headerTopAf2, _affixRef$footerBotto, _affixRef$footerBotto2;
      (_affixRef$paginationA = affixRef.paginationAffixRef.value) === null || _affixRef$paginationA === void 0 || (_affixRef$paginationA2 = _affixRef$paginationA.handleScroll) === null || _affixRef$paginationA2 === void 0 || _affixRef$paginationA2.call(_affixRef$paginationA);
      (_affixRef$horizontalS = affixRef.horizontalScrollAffixRef.value) === null || _affixRef$horizontalS === void 0 || (_affixRef$horizontalS2 = _affixRef$horizontalS.handleScroll) === null || _affixRef$horizontalS2 === void 0 || _affixRef$horizontalS2.call(_affixRef$horizontalS);
      (_affixRef$headerTopAf = affixRef.headerTopAffixRef.value) === null || _affixRef$headerTopAf === void 0 || (_affixRef$headerTopAf2 = _affixRef$headerTopAf.handleScroll) === null || _affixRef$headerTopAf2 === void 0 || _affixRef$headerTopAf2.call(_affixRef$headerTopAf);
      (_affixRef$footerBotto = affixRef.footerBottomAffixRef.value) === null || _affixRef$footerBotto === void 0 || (_affixRef$footerBotto2 = _affixRef$footerBotto.handleScroll) === null || _affixRef$footerBotto2 === void 0 || _affixRef$footerBotto2.call(_affixRef$footerBotto);
    };
    var calculateThWidthList = function calculateThWidthList(trList) {
      var widthMap = {};
      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;
        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var th = thList[j];
          var colKey = th.dataset.colkey;
          widthMap[colKey] = th.getBoundingClientRect().width;
        }
      }
      return widthMap;
    };
    var updateThWidthList = function updateThWidthList(trList) {
      if (trList instanceof HTMLCollection) {
        if (columnResizable.value) return;
        thWidthList.value = calculateThWidthList(trList);
      } else {
        thWidthList.value = thWidthList.value || {};
        Object.entries(trList).forEach(function (_ref4) {
          var _ref5 = _slicedToArray(_ref4, 2),
            colKey = _ref5[0],
            width = _ref5[1];
          thWidthList.value[colKey] = width;
        });
      }
      return thWidthList.value;
    };
    var updateThWidthListHandler = function updateThWidthListHandler() {
      var timer = setTimeout(function () {
        var _tableContentRef$valu2;
        updateTableWidth();
        if (notNeedThWidthList.value) return;
        var thead = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };
    var resetThWidthList = function resetThWidthList() {
      thWidthList.value = {};
    };
    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;
      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 || _props$onScrollX.call(props, {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 || _props$onScrollY.call(props, {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, {
        e: e
      });
    };
    var getThWidthList = function getThWidthList(type) {
      if (type === "calculate") {
        var _tableContentRef$valu3;
        var trList = (_tableContentRef$valu3 = tableContentRef.value) === null || _tableContentRef$valu3 === void 0 || (_tableContentRef$valu3 = _tableContentRef$valu3.querySelector("thead")) === null || _tableContentRef$valu3 === void 0 ? void 0 : _tableContentRef$valu3.children;
        if (!trList) {
          return {};
        }
        return calculateThWidthList(trList);
      }
      return thWidthList.value || {};
    };
    Vue.watch([data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
      immediate: true
    });
    Vue.watch([isFixedColumn, columns], function () {
      var timer = setTimeout(function () {
        if (isFixedColumn.value) {
          updateColumnFixedShadow(tableContentRef.value);
        }
        clearTimeout(timer);
      }, 0);
    }, {
      immediate: true
    });
    Vue.watch([maxHeight, data, columns, bordered, tableContentRef], function () {
      if (tableContentRef.value) {
        updateFixedHeader();
      }
    }, {
      immediate: true
    });
    Vue.watch(finalColumns, function () {
      resetThWidthList();
    });
    Vue.watch([data, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, footerAffixedBottom, tableContentWidth], function () {
      var timer = setTimeout(function () {
        updateThWidthListHandler();
        updateAffixPosition();
        clearTimeout(timer);
      }, 60);
    }, {
      immediate: true
    });
    Vue.watch([finalColumns], function (_ref6, _ref7) {
      var _ref8 = _slicedToArray(_ref6, 1),
        finalColumns2 = _ref8[0];
      var _ref9 = _slicedToArray(_ref7, 1),
        preFinalColumns = _ref9[0];
      var finalColKeys = finalColumns2.map(function (t) {
        return t.colKey;
      });
      var preColKeys = preFinalColumns.map(function (t) {
        return t.colKey;
      });
      if (finalColKeys.length < preColKeys.length) {
        var reduceKeys = xorWith$1(preColKeys, finalColKeys);
        var thWidthList2 = getThWidthList("calculate");
        var reduceWidth = 0;
        reduceKeys.forEach(function (key) {
          reduceWidth += thWidthList2[key];
        });
        var rootThWidthList = pick$1(thWidthList2, preColKeys);
        var oldTotalWidth = Object.values(rootThWidthList).reduce(function () {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var n = arguments.length > 1 ? arguments[1] : undefined;
          return r + n;
        }, 0);
        var contentWidth = tableContentRef.value.clientWidth;
        var widthToReserve = oldTotalWidth - reduceWidth;
        setTableElmWidth(Math.max(contentWidth, widthToReserve));
      }
    });
    var refreshTable = function refreshTable() {
      updateThWidthListHandler();
      updateFixedHeader();
      updateAffixPosition();
      if (isFixedColumn.value || isFixedHeader.value) {
        updateFixedStatus();
        updateColumnFixedShadow(tableContentRef.value, {
          skipScrollLimit: true
        });
      }
      if (tableLayout.value === "auto") {
        updateThWidthList(getThWidthList("calculate"));
      }
    };
    var onResize = debounce$1(function () {
      refreshTable();
    }, 30);
    var resizeObserver = null;
    function addTableResizeObserver(tableElement) {
      if (typeof window === "undefined") return;
      if (getIEVersion() < 11 || typeof window.ResizeObserver === "undefined") return;
      off$1(window, "resize", onResize);
      resizeObserver = new window.ResizeObserver(function () {
        var timer = setTimeout(function () {
          refreshTable();
          clearTimeout(timer);
        }, 200);
      });
      resizeObserver.observe(tableElement);
      tableRef.value = tableElement;
    }
    Vue.onMounted(function () {
      var scrollWidth = getScrollbarWidthWithCSS();
      scrollbarWidth.value = scrollWidth;
      updateThWidthListHandler();
      var isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;
      var hasWindow = typeof window !== "undefined";
      var hasResizeObserver = hasWindow && typeof window.ResizeObserver !== "undefined";
      if (isWatchResize && getIEVersion() < 11 || !hasResizeObserver) {
        on$1(window, "resize", onResize);
      }
    });
    Vue.onBeforeUnmount(function () {
      var _resizeObserver, _resizeObserver2;
      if (typeof window !== "undefined") {
        off$1(window, "resize", onResize);
      }
      (_resizeObserver = resizeObserver) === null || _resizeObserver === void 0 || _resizeObserver.unobserve(tableRef.value);
      (_resizeObserver2 = resizeObserver) === null || _resizeObserver2 === void 0 || _resizeObserver2.disconnect();
    });
    var setData = function setData(dataSource) {
      data.value = dataSource;
    };
    var updateTableAfterColumnResize = function updateTableAfterColumnResize() {
      updateFixedStatus();
      updateFixedHeader();
    };
    return {
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      scrollbarWidth: scrollbarWidth,
      setData: setData,
      refreshTable: refreshTable,
      setTableElmWidth: setTableElmWidth,
      emitScrollEvent: emitScrollEvent,
      updateThWidthListHandler: updateThWidthListHandler,
      updateColumnFixedShadow: updateColumnFixedShadow,
      setUseFixedTableElmRef: setUseFixedTableElmRef,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      addTableResizeObserver: addTableResizeObserver,
      updateTableAfterColumnResize: updateTableAfterColumnResize
    };
  }

  function ownKeys$E(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$D(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$E(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$E(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function usePagination(props, context) {
    var _toRefs = Vue.toRefs(props),
      pagination = _toRefs.pagination,
      data = _toRefs.data,
      disableDataPage = _toRefs.disableDataPage;
    var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;
    var innerPagination = Vue.ref(props.pagination);
    var dataSource = Vue.ref([]);
    var isPaginateData = Vue.ref(false);
    var updateDataSourceAndPaginate = function updateDataSourceAndPaginate() {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var data2 = props.data;
      var t = Boolean(!disableDataPage.value && data2.length > pageSize);
      isPaginateData.value = t;
      if (t) {
        var start = (current - 1) * pageSize;
        var end = current * pageSize;
        dataSource.value = data2.slice(start, end);
      } else {
        dataSource.value = data2;
      }
    };
    Vue.watch(function () {
      var _pagination$value, _pagination$value2;
      return [(_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.current, (_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.pageSize, data.value.length, disableDataPage];
    }, function () {
      if (!pagination.value || !pagination.value.current) return;
      var _pagination$value3 = pagination.value,
        current = _pagination$value3.current,
        pageSize = _pagination$value3.pageSize;
      innerPagination.value = {
        current: current,
        pageSize: pageSize
      };
      updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
    }, {
      immediate: true
    });
    Vue.watch([data], function () {
      var _innerPagination$valu, _innerPagination$valu2;
      if (!pagination.value || !pagination.value.defaultCurrent) return;
      var isControlled = Boolean(pagination.value.current);
      if (isControlled) return;
      updateDataSourceAndPaginate((_innerPagination$valu = innerPagination.value.current) !== null && _innerPagination$valu !== void 0 ? _innerPagination$valu : pagination.value.defaultCurrent, (_innerPagination$valu2 = innerPagination.value.pageSize) !== null && _innerPagination$valu2 !== void 0 ? _innerPagination$valu2 : pagination.value.defaultPageSize);
    }, {
      immediate: true
    });
    var renderPagination = function renderPagination() {
      if (!props.pagination) return null;
      var paginationProps = _objectSpread$D({}, props.pagination);
      delete paginationProps.onChange;
      return Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-table__pagination")
      }, [Vue.createVNode(Pagination, Vue.mergeProps({
        "size": props.size === "large" ? null : props.size
      }, paginationProps, {
        "onChange": function onChange(pageInfo) {
          var _props$pagination, _props$pagination$onC, _props$onPageChange;
          (_props$pagination = props.pagination) === null || _props$pagination === void 0 || (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 || _props$pagination$onC.call(_props$pagination, pageInfo);
          innerPagination.value = pageInfo;
          updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
          (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 || _props$onPageChange.call(props, pageInfo, dataSource.value);
        }
      }), {
        totalContent: context.slots.totalContent
      })]);
    };
    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      innerPagination: innerPagination,
      renderPagination: renderPagination
    };
  }

  function useAffix(props) {
    var tableContentRef = Vue.ref();
    var affixHeaderRef = Vue.ref();
    var affixFooterRef = Vue.ref();
    var horizontalScrollbarRef = Vue.ref();
    var paginationRef = Vue.ref();
    var showAffixHeader = Vue.ref(true);
    var showAffixFooter = Vue.ref(true);
    var showAffixPagination = Vue.ref(true);
    var isMousedown = false;
    var isMouseInScrollableArea = false;
    var isVirtualScroll = Vue.computed(function () {
      return props.scroll && props.scroll.type === "virtual" && (props.scroll.threshold || 100) < props.data.length;
    });
    var isAffixed = Vue.computed(function () {
      return !!(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom);
    });
    var lastScrollLeft = 0;
    var onHorizontalScroll = function onHorizontalScroll(scrollElement) {
      if (!isAffixed.value && !isVirtualScroll.value) return;
      var target = scrollElement;
      if (!target && tableContentRef.value) {
        lastScrollLeft = 0;
        target = tableContentRef.value;
      }
      if (!target) return;
      var left = target.scrollLeft;
      if (lastScrollLeft === left) return;
      lastScrollLeft = left;
      var toUpdateScrollElement = [tableContentRef.value, affixHeaderRef.value, affixFooterRef.value, horizontalScrollbarRef.value];
      for (var i = 0, len = toUpdateScrollElement.length; i < len; i++) {
        if (toUpdateScrollElement[i] && scrollElement !== toUpdateScrollElement[i]) {
          toUpdateScrollElement[i].scrollLeft = left;
        }
      }
    };
    var isAffixedBottomElementShow = function isAffixedBottomElementShow(elementRect, tableRect, headerHeight) {
      return tableRect.top + headerHeight < elementRect.top && elementRect.top > elementRect.height;
    };
    var getOffsetTop = function getOffsetTop(props2) {
      if (isBoolean(props2)) return 0;
      return props2.offsetTop || 0;
    };
    var updateAffixHeaderOrFooter = function updateAffixHeaderOrFooter() {
      var _tableContentRef$valu, _tableContentRef$valu2, _affixFooterRef$value;
      if (!isAffixed.value && !isVirtualScroll.value && !tableContentRef.value) return;
      var pos = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      if (!pos) return;
      var headerRect = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 || (_tableContentRef$valu2 = _tableContentRef$valu2.querySelector("thead")) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.getBoundingClientRect();
      var headerHeight = (headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0;
      var footerRect = (_affixFooterRef$value = affixFooterRef.value) === null || _affixFooterRef$value === void 0 ? void 0 : _affixFooterRef$value.getBoundingClientRect();
      if ((props.headerAffixedTop || isVirtualScroll.value) && affixHeaderRef.value) {
        var offsetTop = getOffsetTop(props.headerAffixProps || props.headerAffixedTop);
        var footerHeight = (footerRect === null || footerRect === void 0 ? void 0 : footerRect.height) || 0;
        var r = Math.abs(pos.top) < pos.height - headerHeight - offsetTop - footerHeight;
        if (isVirtualScroll.value) {
          r = pos.top > -1 * headerRect.height;
        }
        showAffixHeader.value = r;
      }
      if (props.footerAffixedBottom && affixFooterRef !== null && affixFooterRef !== void 0 && affixFooterRef.value) {
        showAffixFooter.value = isAffixedBottomElementShow(footerRect, pos, headerHeight);
      } else if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef !== null && horizontalScrollbarRef !== void 0 && horizontalScrollbarRef.value) {
        var horizontalScrollbarRect = horizontalScrollbarRef.value.getBoundingClientRect();
        showAffixFooter.value = isAffixedBottomElementShow(horizontalScrollbarRect, pos, headerHeight);
      }
      if (props.paginationAffixedBottom && paginationRef.value) {
        var pageRect = paginationRef.value.getBoundingClientRect();
        showAffixPagination.value = isAffixedBottomElementShow(pageRect, pos, headerHeight);
      }
    };
    var onDocumentScroll = function onDocumentScroll() {
      updateAffixHeaderOrFooter();
    };
    var onFootScroll = function onFootScroll() {
      onHorizontalScroll(affixFooterRef.value);
    };
    var onHeaderScroll = function onHeaderScroll() {
      onHorizontalScroll(affixHeaderRef.value);
    };
    var horizontalScrollbarScroll = function horizontalScrollbarScroll() {
      onHorizontalScroll(horizontalScrollbarRef.value);
    };
    var onTableContentScroll = function onTableContentScroll() {
      onHorizontalScroll(tableContentRef.value);
    };
    var onFootMouseEnter = function onFootMouseEnter() {
      on$1(affixFooterRef.value, "scroll", onFootScroll);
    };
    var onFootMouseLeave = function onFootMouseLeave() {
      off$1(affixFooterRef.value, "scroll", onFootScroll);
    };
    var onHeaderMouseEnter = function onHeaderMouseEnter() {
      on$1(affixHeaderRef.value, "scroll", onHeaderScroll);
      onMouseEnterScrollableArea();
    };
    var onHeaderMouseLeave = function onHeaderMouseLeave() {
      if (!isMousedown) off$1(affixHeaderRef.value, "scroll", onHeaderScroll);
      onMouseLeaveScrollableArea();
    };
    var onScrollbarMouseEnter = function onScrollbarMouseEnter() {
      on$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };
    var onScrollbarMouseLeave = function onScrollbarMouseLeave() {
      off$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };
    var onTableContentMouseEnter = function onTableContentMouseEnter() {
      on$1(tableContentRef.value, "scroll", onTableContentScroll);
      onMouseEnterScrollableArea();
    };
    var onTableContentMouseLeave = function onTableContentMouseLeave() {
      if (!isMousedown) off$1(tableContentRef.value, "scroll", onTableContentScroll);
      onMouseLeaveScrollableArea();
    };
    var onMousedown = function onMousedown() {
      isMousedown = true;
    };
    var onMouseup = function onMouseup() {
      isMousedown = false;
      if (!isMouseInScrollableArea) {
        off$1(affixHeaderRef.value, "scroll", onHeaderScroll);
        off$1(tableContentRef.value, "scroll", onTableContentScroll);
      }
    };
    var onMouseEnterScrollableArea = function onMouseEnterScrollableArea() {
      isMouseInScrollableArea = true;
    };
    var onMouseLeaveScrollableArea = function onMouseLeaveScrollableArea() {
      isMouseInScrollableArea = false;
    };
    var activatingTouchScrollListenerCleanups = [];
    var setupElementTouchScrollListener = function setupElementTouchScrollListener(element) {
      var debounceOffScrollListener = debounce$1(function (listener) {
        off$1(element, "scroll", listener);
      }, 200);
      function onElementTouchScroll() {
        onHorizontalScroll(element);
        debounceOffScrollListener(onElementTouchScroll);
      }
      function onElementTouchStart(e) {
        if (e.composedPath().includes(element)) {
          activatingTouchScrollListenerCleanups.forEach(function (cleanup) {
            return cleanup();
          });
          activatingTouchScrollListenerCleanups.length = 0;
          on$1(element, "scroll", onElementTouchScroll);
          debounceOffScrollListener(onElementTouchScroll);
          activatingTouchScrollListenerCleanups.push(function () {
            off$1(element, "scroll", onElementTouchScroll);
          });
        }
      }
      on$1(element, "touchstart", onElementTouchStart);
      function removeElementTouchScrollListener() {
        off$1(element, "touchstart", onElementTouchStart);
      }
      return {
        removeElementTouchScrollListener: removeElementTouchScrollListener
      };
    };
    var elementTouchScrollCleanups = [];
    var cleanupElementTouchScroll = function cleanupElementTouchScroll() {
      elementTouchScrollCleanups.forEach(function (cleanup) {
        return cleanup();
      });
      elementTouchScrollCleanups.length = 0;
    };
    var removeHorizontalScrollListeners = function removeHorizontalScrollListeners() {
      off$1(window, "mousedown", onMousedown);
      off$1(window, "mouseup", onMouseup);
      cleanupElementTouchScroll();
      if (affixHeaderRef.value) {
        off$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        off$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
      }
      if (affixFooterRef.value) {
        off$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        off$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
      }
      if (tableContentRef.value) {
        off$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        off$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
      }
      if (horizontalScrollbarRef.value) {
        off$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        off$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
      }
    };
    var addHorizontalScrollListeners = function addHorizontalScrollListeners() {
      on$1(window, "mousedown", onMousedown);
      on$1(window, "mouseup", onMouseup);
      removeHorizontalScrollListeners();
      if (affixHeaderRef.value) {
        on$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        on$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
        var _setupElementTouchScr = setupElementTouchScrollListener(affixHeaderRef.value),
          removeElementTouchScrollListener = _setupElementTouchScr.removeElementTouchScrollListener;
        elementTouchScrollCleanups.push(removeElementTouchScrollListener);
      }
      if (props.footerAffixedBottom && affixFooterRef.value) {
        on$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        on$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
        var _setupElementTouchScr2 = setupElementTouchScrollListener(affixFooterRef.value),
          _removeElementTouchScrollListener = _setupElementTouchScr2.removeElementTouchScrollListener;
        elementTouchScrollCleanups.push(_removeElementTouchScrollListener);
      }
      if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.value) {
        on$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        on$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
        var _setupElementTouchScr3 = setupElementTouchScrollListener(horizontalScrollbarRef.value),
          _removeElementTouchScrollListener2 = _setupElementTouchScr3.removeElementTouchScrollListener;
        elementTouchScrollCleanups.push(_removeElementTouchScrollListener2);
      }
      if ((isAffixed.value || isVirtualScroll.value) && tableContentRef.value) {
        on$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        on$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
        var _setupElementTouchScr4 = setupElementTouchScrollListener(tableContentRef.value),
          _removeElementTouchScrollListener3 = _setupElementTouchScr4.removeElementTouchScrollListener;
        elementTouchScrollCleanups.push(_removeElementTouchScrollListener3);
      }
    };
    var addVerticalScrollListener = function addVerticalScrollListener() {
      if (!isAffixed.value && !props.paginationAffixedBottom) return;
      var timer = setTimeout(function () {
        if (isAffixed.value || props.paginationAffixedBottom) {
          on$1(document, "scroll", onDocumentScroll);
        } else {
          off$1(document, "scroll", onDocumentScroll);
        }
        clearTimeout(timer);
      });
    };
    Vue.watch([affixHeaderRef, affixFooterRef, horizontalScrollbarRef, tableContentRef], function () {
      addHorizontalScrollListeners();
      onHorizontalScroll();
      updateAffixHeaderOrFooter();
    });
    Vue.watch(isAffixed, addVerticalScrollListener);
    Vue.watch(function () {
      return [props.data, props.columns, props.headerAffixedTop, props.footerAffixedBottom, props.horizontalScrollAffixedBottom];
    }, function () {
      onHorizontalScroll();
    });
    Vue.onBeforeUnmount(function () {
      off$1(document, "scroll", onDocumentScroll);
      removeHorizontalScrollListeners();
      affixHeaderRef.value = null;
      affixFooterRef.value = null;
      horizontalScrollbarRef.value = null;
      tableContentRef.value = null;
    });
    var setTableContentRef = function setTableContentRef(tableContent) {
      tableContentRef.value = tableContent;
      addVerticalScrollListener();
    };
    return {
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      showAffixPagination: showAffixPagination,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      horizontalScrollbarRef: horizontalScrollbarRef,
      paginationRef: paginationRef,
      onHorizontalScroll: onHorizontalScroll,
      setTableContentRef: setTableContentRef,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter
    };
  }

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};
    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }
    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
      rowIndex = params.rowIndex;
    var customClasses = [];
    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction(rName) ? rName(params) : rName;
      if (isObject(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }
      customClasses = customClasses.concat(tClass);
    }
    return customClasses;
  }
  function formatClassNames(classNames, params) {
    var classes = classNames instanceof Array ? classNames : [classNames];
    var arr = [];
    for (var i = 0, len = classes.length; i < len; i++) {
      var cls = classes[i];
      if (isFunction(cls)) {
        arr.push(cls(params));
      } else {
        arr.push(cls);
      }
    }
    return arr;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i;
      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i = _columns$i.children) !== null && _columns$i !== void 0 && _columns$i.length) {
        var _columns$i2;
        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }
  function getAffixProps(mainAffixProps, subAffixProps) {
    if (_typeof$3(mainAffixProps) === "object") return mainAffixProps;
    if (_typeof$3(subAffixProps) === "object") return subAffixProps;
    return {};
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = Vue.computed(function () {
      return Math.max(params.rowHeight || 48, 48);
    });
    var isInit = Vue.ref(false);
    var hasLazyLoadHolder = Vue.computed(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
    });
    var requestAnimationFrame = !isServer$1 && window.requestAnimationFrame || function (cb) {
      return setTimeout(cb, 16.6);
    };
    var init = function init() {
      if (!isInit.value) {
        requestAnimationFrame(function () {
          isInit.value = true;
        });
      }
    };
    Vue.onMounted(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      Vue.nextTick(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight.value * bufferSize;
        if (!(childRef !== null && childRef !== void 0 && childRef.value) || !(containerRef !== null && containerRef !== void 0 && containerRef.value)) return;
        observe(childRef.value, containerRef.value, init, height);
      });
    });
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function getCellKey(row, rowKey, colKey, colIndex) {
    var rowValue = get(row, rowKey);
    if (rowValue === void 0) {
      log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
    }
    return [rowValue, colKey || colIndex].join("_");
  }
  function getRowKeyFromCell(cellKey) {
    var _cellKey$split;
    return (_cellKey$split = cellKey.split("_")) === null || _cellKey$split === void 0 ? void 0 : _cellKey$split[0];
  }
  function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
    var skipSpansMap = Vue.ref(/* @__PURE__ */new Map());
    var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
      var rowIndex = params.rowIndex,
        colIndex = params.colIndex;
      if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
      var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
      var maxColIndex = colIndex + (skipSpansValue.colspan || 1);
      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            if (!data.value[i] || !columns.value[j]) return;
            var cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);
            var state = skipSpansMap.value.get(cellKey) || {};
            state.skipped = true;
            skipSpansMap.value.set(cellKey, state);
          }
        }
      }
    };
    var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
      var _skipSpansMap$value;
      (_skipSpansMap$value = skipSpansMap.value) === null || _skipSpansMap$value === void 0 || _skipSpansMap$value.clear();
      if (!data2 || !rowspanAndColspan2) return;
      for (var i = 0, len = data2.length; i < len; i++) {
        var row = data2[i];
        for (var j = 0, colLen = columns2.length; j < colLen; j++) {
          var col = columns2[j];
          var params = {
            row: row,
            col: col,
            rowIndex: i,
            colIndex: j
          };
          var cellKey = getCellKey(row, rowKey.value, col.colKey, j);
          var state = skipSpansMap.value.get(cellKey) || {};
          var o = rowspanAndColspan2(params) || {};
          if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
            o.rowspan && (state.rowspan = o.rowspan);
            o.colspan && (state.colspan = o.colspan);
            skipSpansMap.value.set(cellKey, state);
          }
          onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 || onTrRowspanOrColspan(params, state);
        }
      }
    };
    Vue.watch(function () {
      return [data.value, columns.value, rowspanAndColspan];
    }, function () {
      updateSkipSpansMap(data.value, columns.value, rowspanAndColspan === null || rowspanAndColspan === void 0 ? void 0 : rowspanAndColspan.value);
    }, {
      immediate: true
    });
    return {
      skipSpansMap: skipSpansMap
    };
  }

  function ownKeys$D(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$C(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$D(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$D(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$b(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
  function renderCell(params, slots, extra) {
    var col = params.col,
      row = params.row,
      rowIndex = params.rowIndex;
    if (col.colKey === "serial-number") {
      var _ref = (extra === null || extra === void 0 ? void 0 : extra.pagination) || {},
        current = _ref.current,
        pageSize = _ref.pageSize,
        defaultCurrent = _ref.defaultCurrent,
        defaultPageSize = _ref.defaultPageSize;
      var tCurrent = current || defaultCurrent;
      var tPageSize = pageSize || defaultPageSize;
      if (tPageSize && tCurrent) {
        return tPageSize * (tCurrent - 1) + rowIndex + 1;
      }
      return rowIndex + 1;
    }
    if (isFunction(col.cell)) {
      return col.cell(Vue.h, params);
    }
    if (slots[col.colKey]) {
      return slots[col.colKey](params);
    }
    if (isString(col.cell) && slots[col.cell]) {
      return slots[col.cell](params);
    }
    if (isFunction(col.render)) {
      return col.render(Vue.h, _objectSpread$C(_objectSpread$C({}, params), {}, {
        type: "cell"
      }));
    }
    var r = get(row, col.colKey);
    if (![void 0, "", null].includes(r)) return r;
    if (extra !== null && extra !== void 0 && extra.cellEmptyContent) {
      return isFunction(extra.cellEmptyContent) ? extra.cellEmptyContent(Vue.h, params) : extra.cellEmptyContent;
    }
    if (slots.cellEmptyContent) return slots.cellEmptyContent(params);
    if (slots["cell-empty-content"]) return slots["cell-empty-content"](params);
    return r;
  }
  var TrElement = Vue.defineComponent({
    name: "TR",
    props: _objectSpread$C(_objectSpread$C({
      row: Object,
      rowIndex: Number,
      dataLength: Number,
      ellipsisOverlayClassName: String,
      classPrefix: String,
      rowAndColFixedPosition: Map,
      skipSpansMap: Map,
      virtualConfig: Object,
      active: Boolean,
      isHover: Boolean
    }, pick$1(baseTableProps, TABLE_PROPS)), {}, {
      tableElm: {},
      tableContentElm: {}
    }),
    emits: ["row-mounted"],
    setup: function setup(props, context) {
      var _toRefs = Vue.toRefs(props),
        tableContentElm = _toRefs.tableContentElm,
        active = _toRefs.active,
        isHover = _toRefs.isHover;
      var trRef = Vue.ref(null);
      var _useClassName = useClassName(),
        tdEllipsisClass = _useClassName.tdEllipsisClass,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses,
        tableRowFixedClasses = _useClassName.tableRowFixedClasses,
        tdAlignClasses = _useClassName.tdAlignClasses,
        tableDraggableClasses = _useClassName.tableDraggableClasses;
      var trStyles = Vue.computed(function () {
        return getRowFixedStyles(get(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses, props.virtualConfig.isVirtualScroll.value ? props.virtualConfig.translateY.value : 0);
      });
      var trAttributes = Vue.computed(function () {
        return formatRowAttributes(props.rowAttributes, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }) || {};
      });
      var classes = Vue.computed(function () {
        var _trStyles$value;
        var customClasses = formatRowClassNames(props.rowClassName, {
          row: props.row,
          rowKey: props.rowKey,
          rowIndex: props.rowIndex,
          type: "body"
        }, props.rowKey || "id");
        return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses, _defineProperty$2(_defineProperty$2({}, "".concat(props.classPrefix, "-table__row--active"), active.value), "".concat(props.classPrefix, "-table__row--hover"), isHover.value)].filter(function (v) {
          return v;
        });
      });
      var _useLazyLoad = useLazyLoad(tableContentElm, trRef, Vue.reactive(_objectSpread$C(_objectSpread$C({}, props.scroll), {}, {
          rowIndex: props.rowIndex
        }))),
        hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
        tRowHeight = _useLazyLoad.tRowHeight;
      var getTrListeners = function getTrListeners(row, rowIndex) {
        var trListeners = {};
        ROW_LISTENERS.forEach(function (eventName) {
          trListeners["on".concat(upperFirst$1(eventName))] = function (e) {
            var _props;
            var p = {
              e: e,
              row: row,
              index: rowIndex
            };
            (_props = props["onRow".concat(upperFirst$1(eventName))]) === null || _props === void 0 || _props.call(props, p);
          };
        });
        return trListeners;
      };
      var notifyVirtualSizeUpdate = function notifyVirtualSizeUpdate() {
        var _props$virtualConfig;
        if ((_props$virtualConfig = props.virtualConfig) !== null && _props$virtualConfig !== void 0 && _props$virtualConfig.isVirtualScroll.value) {
          context.emit("row-mounted", {
            ref: trRef,
            data: props.row
          });
        }
      };
      Vue.onMounted(function () {
        Vue.nextTick(function () {
          notifyVirtualSizeUpdate();
        });
      });
      Vue.onUpdated(function () {
        Vue.nextTick(function () {
          notifyVirtualSizeUpdate();
        });
      });
      function renderEllipsisCell(cellParams, params) {
        var cellNode = params.cellNode;
        var col = cellParams.col,
          colIndex = cellParams.colIndex;
        var content;
        if (isFunction(col.ellipsis)) {
          content = col.ellipsis(Vue.h, cellParams);
        } else if (_typeof$3(col.ellipsis) === "object" && isFunction(col.ellipsis.content)) {
          content = col.ellipsis.content(Vue.h, cellParams);
        } else if (context.slots["ellipsis-".concat(col.colKey)]) {
          content = context.slots["ellipsis-".concat(col.colKey)](cellParams);
        } else if (context.slots.ellipsis) {
          content = context.slots.ellipsis(cellParams);
        }
        var tooltipProps = {};
        if (_typeof$3(col.ellipsis) === "object") {
          tooltipProps = "props" in col.ellipsis ? col.ellipsis.props : col.ellipsis || void 0;
        }
        var tableElement = props.tableElm;
        var placement = colIndex === 0 ? "top-left" : "top";
        placement = colIndex === props.columns.length - 1 ? "top-right" : placement;
        return Vue.createVNode(TEllipsis, {
          "placement": placement,
          "attach": tableElement ? function () {
            return tableElement;
          } : void 0,
          "tooltipContent": content && function () {
            return content;
          },
          "tooltipProps": tooltipProps,
          "overlayClassName": props.ellipsisOverlayClassName,
          "classPrefix": props.classPrefix
        }, _isSlot$b(cellNode) ? cellNode : {
          "default": function _default() {
            return [cellNode];
          }
        });
      }
      function renderTd(params, extra) {
        var col = params.col,
          colIndex = params.colIndex,
          rowIndex = params.rowIndex;
        var cellSpans = extra.cellSpans,
          dataLength = extra.dataLength,
          rowAndColFixedPosition = extra.rowAndColFixedPosition;
        var cellNode = renderCell(params, context.slots, {
          cellEmptyContent: extra.cellEmptyContent,
          pagination: props.pagination
        });
        var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, tableColFixedClasses);
        var customClasses = formatClassNames(col.className, _objectSpread$C(_objectSpread$C({}, params), {}, {
          type: "td"
        }));
        var classes2 = [tdStyles.classes, customClasses, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tdEllipsisClass, col.ellipsis), tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), tableBaseClass.tdFirstCol, colIndex === 0 && props.rowspanAndColspan), tdAlignClasses[col.align], col.align && col.align !== "left"), tableDraggableClasses.handle, col.colKey === "drag")];
        var onClick = function onClick(e) {
          var _props$onCellClick;
          var p = _objectSpread$C(_objectSpread$C({}, params), {}, {
            e: e
          });
          if (col.stopPropagation) {
            e.stopPropagation();
          }
          (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 || _props$onCellClick.call(props, p);
        };
        var normalAttrs = isFunction(col.attrs) ? col.attrs(_objectSpread$C(_objectSpread$C({}, params), {}, {
          type: "td"
        })) : col.attrs;
        var attrs = _objectSpread$C(_objectSpread$C({}, normalAttrs), cellSpans);
        return Vue.createVNode("td", Vue.mergeProps({
          "key": col.colKey || colIndex,
          "class": classes2,
          "style": tdStyles.style
        }, attrs, {
          "onClick": onClick
        }), [col.ellipsis ? renderEllipsisCell(params, {
          cellNode: cellNode
        }) : cellNode]);
      }
      return function () {
        var _trStyles$value2;
        var columns = props.columns,
          skipSpansMap = props.skipSpansMap,
          row = props.row,
          dataLength = props.dataLength,
          rowAndColFixedPosition = props.rowAndColFixedPosition;
        var columnVNodeList = columns === null || columns === void 0 ? void 0 : columns.map(function (col, colIndex) {
          var cellSpans = {};
          var params = {
            row: row,
            col: col,
            rowIndex: props.rowIndex,
            colIndex: colIndex
          };
          var spanState = null;
          if (props.skipSpansMap.size) {
            var _spanState, _spanState2;
            var cellKey = getCellKey(row, props.rowKey, col.colKey, colIndex);
            spanState = skipSpansMap.get(cellKey) || {};
            ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
            ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
            if (spanState.skipped) return null;
          }
          return renderTd(params, {
            dataLength: dataLength,
            rowAndColFixedPosition: rowAndColFixedPosition,
            columnLength: columns.length,
            cellSpans: cellSpans,
            cellEmptyContent: props.cellEmptyContent
          });
        });
        return Vue.createVNode("tr", Vue.mergeProps({
          "ref": trRef
        }, trAttributes.value, {
          "style": (_trStyles$value2 = trStyles.value) === null || _trStyles$value2 === void 0 ? void 0 : _trStyles$value2.style,
          "class": classes.value
        }, getTrListeners(row, props.rowIndex)), [hasLazyLoadHolder.value ? [Vue.createVNode("td", {
          "style": {
            height: "".concat(tRowHeight.value, "px"),
            border: "none"
          }
        }, null)] : columnVNodeList]);
      };
    }
  });

  function ownKeys$C(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$B(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$C(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$C(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  [].concat(_toConsumableArray(ROW_LISTENERS), ["cell-click"]);
  var extendTableProps = ["bordered", "rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  var TBody = Vue.defineComponent({
    name: "TBody",
    props: _objectSpread$B({
      classPrefix: String,
      data: Array,
      columns: Array,
      ellipsisOverlayClassName: String,
      rowAndColFixedPosition: Map,
      showColumnShadow: Object,
      tableElm: {},
      tableWidth: Number,
      isWidthOverflow: Boolean,
      virtualConfig: Object,
      tableContentElm: {},
      handleRowMounted: Function,
      renderExpandedRow: Function,
      firstFullRow: [String, Function],
      lastFullRow: [String, Function],
      activeRow: [Array],
      hoverRow: [String, Number]
    }, pick$1(baseTableProps, extendTableProps)),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var renderTNode = useTNodeJSX();
      var _toRefs = Vue.toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns,
        rowKey = _toRefs.rowKey,
        rowspanAndColspan = _toRefs.rowspanAndColspan;
      var _useConfig = useConfig("table", props.locale),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useClassName = useClassName(),
        tableFullRowClasses = _useClassName.tableFullRowClasses,
        tableBaseClass = _useClassName.tableBaseClass;
      var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;
      var tbodyClasses = Vue.computed(function () {
        return [tableBaseClass.body];
      });
      return function () {
        var _data$value, _data$value2, _props$virtualConfig, _props$virtualConfig2;
        var renderEmpty = function renderEmpty(columns2) {
          var tableWidth = props.bordered ? props.tableWidth - 2 : props.tableWidth;
          return Vue.createVNode("tr", {
            "class": [tableBaseClass.emptyRow, _defineProperty$2({}, tableFullRowClasses.base, props.isWidthOverflow)]
          }, [Vue.createVNode("td", {
            "colspan": columns2.length
          }, [Vue.createVNode("div", {
            "class": [tableBaseClass.empty, _defineProperty$2({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)],
            "style": props.isWidthOverflow ? {
              width: "".concat(tableWidth, "px")
            } : {}
          }, [renderTNode("empty") || t(globalConfig.value.empty)])])]);
        };
        var getFullRow = function getFullRow(columnLength2, type) {
          var tType = camelCase$1(type);
          var fullRowNode = renderTNode(tType);
          if (["", null, void 0, false].includes(fullRowNode)) return null;
          var isFixedToLeft = props.isWidthOverflow && columns.value.find(function (col) {
            return col.fixed === "left";
          });
          var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
          var tableWidth = props.bordered ? props.tableWidth - 2 : props.tableWidth;
          return Vue.createVNode("tr", {
            "class": classes,
            "key": "key-full-row-".concat(type)
          }, [Vue.createVNode("td", {
            "colspan": columnLength2
          }, [Vue.createVNode("div", {
            "class": _defineProperty$2({}, tableFullRowClasses.innerFullRow, isFixedToLeft),
            "style": isFixedToLeft ? {
              width: "".concat(tableWidth, "px")
            } : {}
          }, [Vue.createVNode("div", {
            "class": tableFullRowClasses.innerFullElement
          }, [fullRowNode])])])]);
        };
        var columnLength = columns.value.length;
        var dataLength = (_data$value = data.value) === null || _data$value === void 0 ? void 0 : _data$value.length;
        var trNodeList = [];
        var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "pagination", "attach"];
        var renderData = props.virtualConfig.isVirtualScroll.value ? props.virtualConfig.visibleData.value : data.value;
        renderData === null || renderData === void 0 || renderData.forEach(function (row, rowIndex) {
          var _props$activeRow;
          var rowKey2 = props.rowKey || "id";
          var rowValue = get(row, rowKey2);
          var trProps = _objectSpread$B(_objectSpread$B({}, pick$1(props, TABLE_PROPS)), {}, {
            rowKey: rowKey2,
            row: row,
            columns: columns.value,
            rowIndex: row.VIRTUAL_SCROLL_INDEX || rowIndex,
            dataLength: dataLength,
            skipSpansMap: skipSpansMap.value,
            virtualConfig: props.virtualConfig,
            active: (_props$activeRow = props.activeRow) === null || _props$activeRow === void 0 ? void 0 : _props$activeRow.includes(rowValue),
            isHover: props.hoverRow === rowValue
          }, pick$1(props, properties));
          if (props.onCellClick) {
            trProps.onCellClick = props.onCellClick;
          }
          var trNode = Vue.createVNode(TrElement, Vue.mergeProps({
            "key": get(row, rowKey2 || "id") || rowIndex
          }, trProps, {
            "onRowMounted": props.handleRowMounted
          }), slots);
          trNodeList.push(trNode);
          if (props.renderExpandedRow) {
            var p = {
              row: row,
              index: rowIndex,
              columns: columns.value,
              tableWidth: props.tableWidth,
              isWidthOverflow: props.isWidthOverflow
            };
            var expandedContent = props.renderExpandedRow(p);
            expandedContent && trNodeList.push(expandedContent);
          }
        });
        var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
        var isEmpty = !((_data$value2 = data.value) !== null && _data$value2 !== void 0 && _data$value2.length) && !props.loading && !props.firstFullRow && !props.lastFullRow;
        var translate = "translateY(".concat((_props$virtualConfig = props.virtualConfig) === null || _props$virtualConfig === void 0 ? void 0 : _props$virtualConfig.translateY.value, "px)");
        var posStyle = (_props$virtualConfig2 = props.virtualConfig) !== null && _props$virtualConfig2 !== void 0 && _props$virtualConfig2.isVirtualScroll.value ? {
          transform: translate,
          "-ms-transform": translate,
          "-moz-transform": translate,
          "-webkit-transform": translate
        } : void 0;
        return Vue.createVNode("tbody", {
          "class": tbodyClasses.value,
          "style": _objectSpread$B({}, posStyle)
        }, [isEmpty ? renderEmpty(columns.value) : list]);
      };
    }
  });

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var _toRefs = Vue.toRefs(props),
      size = _toRefs.size,
      bordered = _toRefs.bordered,
      stripe = _toRefs.stripe,
      hover = _toRefs.hover,
      verticalAlign = _toRefs.verticalAlign,
      height = _toRefs.height,
      maxHeight = _toRefs.maxHeight,
      tableContentWidth = _toRefs.tableContentWidth;
    var _useClassName = useClassName(),
      tableBaseClass = _useClassName.tableBaseClass,
      tableAlignClasses = _useClassName.tableAlignClasses;
    var _useCommonClassName = useCommonClassName$1(),
      SIZE = _useCommonClassName.SIZE;
    var _useConfig = useConfig("table", props.locale),
      globalConfig = _useConfig.globalConfig;
    var tableSize = Vue.computed(function () {
      var _size$value;
      return (_size$value = size.value) !== null && _size$value !== void 0 ? _size$value : globalConfig.value.size;
    });
    var tableClasses = Vue.computed(function () {
      return [tableBaseClass.table, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, SIZE.value[tableSize.value], tableSize.value !== "medium"), tableBaseClass.bordered, bordered.value), tableBaseClass.striped, stripe.value), tableBaseClass.hover, hover.value), tableBaseClass.loading, props.loading), tableBaseClass.affixedHeader, props.headerAffixedTop), tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle")];
    });
    var tableContentStyles = Vue.computed(function () {
      return {
        height: formatCSSUnit(height.value),
        maxHeight: formatCSSUnit(maxHeight.value)
      };
    });
    var tableElementStyles = Vue.computed(function () {
      return {
        width: formatCSSUnit(tableContentWidth.value)
      };
    });
    return {
      tableClasses: tableClasses,
      sizeClassNames: SIZE.value,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$B(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$A(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$B(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$B(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$a(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var THead = Vue.defineComponent({
    name: "THead",
    props: {
      classPrefix: String,
      ellipsisOverlayClassName: String,
      isFixedHeader: Boolean,
      thDraggable: Boolean,
      maxHeight: [String, Number],
      height: [String, Number],
      rowAndColFixedPosition: Map,
      thWidthList: Object,
      bordered: Boolean,
      isMultipleHeader: Boolean,
      resizable: Boolean,
      attach: [String, Function],
      spansAndLeafNodes: Object,
      thList: Array,
      columnResizeParams: Object,
      showColumnShadow: Object
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var theadRef = Vue.ref();
      var classnames = useClassName();
      var tableHeaderClasses = classnames.tableHeaderClasses,
        tableBaseClass = classnames.tableBaseClass;
      var theadClasses = Vue.computed(function () {
        return [tableHeaderClasses.header, _defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableHeaderClasses.fixed, Boolean(props.maxHeight || props.height)), tableBaseClass.bordered, props.bordered && props.isMultipleHeader), tableHeaderClasses.multipleHeader, props.isMultipleHeader)];
      });
      var colspanSkipMap = Vue.computed(function () {
        var map = {};
        var _processColumns = function processColumns(columns) {
          for (var i = 0, len = columns.length; i < len; i++) {
            var item = columns[i];
            if (item.colspan > 1) {
              for (var j = i + 1; j < i + item.colspan; j++) {
                if (columns[j]) {
                  map[columns[j].colKey] = true;
                }
              }
            }
            if (item.children) {
              _processColumns(item.children);
            }
          }
        };
        var list = props.thList[0];
        _processColumns(list);
        return map;
      });
      var getTableNode = function getTableNode(thead) {
        var parent = thead;
        while (parent) {
          var _parent;
          parent = parent.parentNode;
          if ((_parent = parent) !== null && _parent !== void 0 && (_parent = _parent.classList) !== null && _parent !== void 0 && _parent.contains("".concat(props.classPrefix, "-table"))) {
            break;
          }
        }
        return parent;
      };
      return function () {
        var renderThNodeList = function renderThNodeList(rowAndColFixedPosition, thWidthList) {
          var thBorderMap = /* @__PURE__ */new Map();
          var thRowspanAndColspan = props.spansAndLeafNodes.rowspanAndColspanMap;
          return props.thList.map(function (row, rowIndex) {
            var thRow = row.map(function (col, index) {
              var _col$children;
              if (colspanSkipMap.value[col.colKey]) return null;
              var rowspanAndColspan = thRowspanAndColspan.get(col);
              if (index === 0 && rowspanAndColspan.rowspan > 1) {
                for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
                  thBorderMap.set(props.thList[j][0], true);
                }
              }
              var thStyles = getColumnFixedStyles(col, index, props.rowAndColFixedPosition, classnames.tableColFixedClasses);
              var colParams = {
                col: col,
                colIndex: index,
                row: {},
                rowIndex: -1
              };
              var customClasses = formatClassNames(col.className, _objectSpread$A(_objectSpread$A({}, colParams), {}, {
                type: "th"
              }));
              var thCustomClasses = formatClassNames(col.thClassName, _objectSpread$A(_objectSpread$A({}, colParams), {}, {
                type: "th"
              }));
              var isLeftFixedActive = props.showColumnShadow.left && col.fixed === "left";
              var isRightFixedActive = props.showColumnShadow.right && col.fixed === "right";
              var canDragSort = props.thDraggable && !(isLeftFixedActive || isRightFixedActive);
              var thClasses = [thStyles.classes, customClasses, thCustomClasses, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableHeaderClasses.thBordered, thBorderMap.get(col)), "".concat(props.classPrefix, "-table__th-").concat(col.colKey), col.colKey), classnames.tdAlignClasses[col.align], col.align && col.align !== "left"), classnames.tableDraggableClasses.dragSortTh, canDragSort)];
              var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
              var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;
              var styles = _objectSpread$A(_objectSpread$A({}, thStyles.style || {}), {}, {
                width: width
              });
              var innerTh = renderTitle(slots, col, index);
              var resizeColumnListener = props.resizable || !canDragSort ? {
                onMousedown: function onMousedown(e) {
                  if (props.resizable) {
                    var _props$columnResizePa, _props$columnResizePa2;
                    (_props$columnResizePa = props.columnResizeParams) === null || _props$columnResizePa === void 0 || (_props$columnResizePa2 = _props$columnResizePa.onColumnMousedown) === null || _props$columnResizePa2 === void 0 || _props$columnResizePa2.call(_props$columnResizePa, e, col, index);
                  }
                  if (!canDragSort) {
                    var timer = setTimeout(function () {
                      var _thList$index;
                      var thList = theadRef.value.querySelectorAll("th");
                      (_thList$index = thList[index]) === null || _thList$index === void 0 || _thList$index.removeAttribute("draggable");
                      clearTimeout(timer);
                    }, 10);
                  }
                },
                onMousemove: function onMousemove(e) {
                  var _props$columnResizePa3, _props$columnResizePa4;
                  props.resizable && ((_props$columnResizePa3 = props.columnResizeParams) === null || _props$columnResizePa3 === void 0 || (_props$columnResizePa4 = _props$columnResizePa3.onColumnMouseover) === null || _props$columnResizePa4 === void 0 ? void 0 : _props$columnResizePa4.call(_props$columnResizePa3, e, col));
                }
              } : {};
              var content = isFunction(col.ellipsisTitle) ? col.ellipsisTitle(Vue.h, {
                col: col,
                colIndex: index
              }) : void 0;
              var isEllipsis = col.ellipsisTitle !== void 0 ? Boolean(col.ellipsisTitle) : Boolean(col.ellipsis);
              var attrs = (isFunction(col.attrs) ? col.attrs(_objectSpread$A(_objectSpread$A({}, colParams), {}, {
                type: "th"
              })) : col.attrs) || {};
              if (col.colspan > 1) {
                attrs.colspan = col.colspan;
              }
              return Vue.createVNode("th", Vue.mergeProps({
                "key": col.colKey,
                "data-colkey": col.colKey,
                "class": thClasses,
                "style": styles
              }, attrs, rowspanAndColspan, resizeColumnListener), [Vue.createVNode("div", {
                "class": tableBaseClass.thCellInner
              }, [isEllipsis ? Vue.createVNode(TEllipsis, {
                "placement": "bottom",
                "attach": props.attach || (theadRef.value ? function () {
                  return getTableNode(theadRef.value);
                } : void 0),
                "tooltipContent": content && function () {
                  return content;
                },
                "tooltipProps": _typeof$3(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0,
                "overlayClassName": props.ellipsisOverlayClassName,
                "classPrefix": props.classPrefix
              }, _isSlot$a(innerTh) ? innerTh : {
                "default": function _default() {
                  return [innerTh];
                }
              }) : innerTh])]);
            });
            return Vue.createVNode("tr", {
              "key": rowIndex
            }, [thRow]);
          });
        };
        return Vue.createVNode("thead", {
          "ref": theadRef,
          "class": theadClasses.value
        }, [renderThNodeList(props.rowAndColFixedPosition, props.thWidthList)]);
      };
    }
  });

  function ownKeys$A(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$z(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$A(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$A(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TFoot = Vue.defineComponent({
    name: "TFoot",
    props: {
      rowKey: String,
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      footData: Array,
      columns: Array,
      rowAttributes: [Array, Object, Function],
      rowClassName: [Array, String, Object, Function],
      thWidthList: [Object],
      footerSummary: [String, Function],
      rowspanAndColspanInFooter: Function,
      virtualScroll: Boolean
    },
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();
      var classnames = useClassName();
      var _toRefs = Vue.toRefs(props),
        footData = _toRefs.footData,
        columns = _toRefs.columns,
        rowKey = _toRefs.rowKey,
        rowspanAndColspanInFooter = _toRefs.rowspanAndColspanInFooter;
      var _useRowspanAndColspan = useRowspanAndColspan(footData, columns, rowKey, rowspanAndColspanInFooter),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;
      var renderTFootCell = function renderTFootCell(p) {
        var col = p.col,
          row = p.row;
        if (isFunction(col.foot)) {
          return col.foot(Vue.h, p);
        }
        if (isString(col.foot) && context.slots[col.foot]) {
          return context.slots[col.foot](p) || col.foot;
        }
        return col.foot || get(row, col.colKey);
      };
      return function () {
        var _props$footData;
        if (!columns.value) return null;
        var theadClasses = [classnames.tableFooterClasses.footer, _defineProperty$2({}, classnames.tableFooterClasses.fixed, props.isFixedHeader)];
        var footerDomList = (_props$footData = props.footData) === null || _props$footData === void 0 ? void 0 : _props$footData.map(function (row, rowIndex) {
          var trAttributes = formatRowAttributes(props.rowAttributes, {
            row: row,
            rowIndex: rowIndex,
            type: "foot"
          });
          var customClasses = formatRowClassNames(props.rowClassName, {
            row: row,
            rowIndex: rowIndex,
            type: "foot"
          }, rowKey.value || "id");
          return Vue.createVNode("tr", Vue.mergeProps(trAttributes, {
            "key": rowIndex,
            "class": customClasses
          }), [columns.value.map(function (col, colIndex) {
            var _props$thWidthList;
            var cellSpans = {};
            var spanState = null;
            if (skipSpansMap.value.size) {
              var _spanState, _spanState2;
              var cellKey = getCellKey(row, rowKey.value, col.colKey, colIndex);
              spanState = skipSpansMap.value.get(cellKey) || {};
              ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
              ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
              if (spanState.skipped) return null;
            }
            var tdStyles = getColumnFixedStyles(col, colIndex, props.rowAndColFixedPosition, classnames.tableColFixedClasses);
            var style = _objectSpread$z({}, tdStyles.style);
            if ((_props$thWidthList = props.thWidthList) !== null && _props$thWidthList !== void 0 && _props$thWidthList[col.colKey]) {
              style.width = "".concat(props.thWidthList[col.colKey], "px");
            }
            return Vue.createVNode("td", Vue.mergeProps(_objectSpread$z({
              key: col.colKey
            }, cellSpans), {
              "class": tdStyles.classes,
              "style": style
            }), [renderTFootCell({
              row: row,
              rowIndex: rowIndex,
              col: col,
              colIndex: colIndex
            })]);
          })]);
        });
        var footerSummary = renderTNode("footerSummary");
        if (!footerSummary && (!props.footData || !props.footData.length)) return null;
        return Vue.createVNode("tfoot", {
          "class": theadClasses,
          "style": {
            visibility: props.virtualScroll ? "hidden" : "visible"
          }
        }, [footerSummary && Vue.createVNode("tr", {
          "class": classnames.tableFullRowClasses.base
        }, [Vue.createVNode("td", {
          "colspan": columns.value.length
        }, [Vue.createVNode("div", {
          "class": classnames.tableFullRowClasses.innerFullElement
        }, [footerSummary])])]), footerDomList]);
      };
    }
  });

  function useRowHighlight(props, tableRef) {
    var _toRefs = Vue.toRefs(props),
      data = _toRefs.data,
      activeRowType = _toRefs.activeRowType,
      activeRowKeys = _toRefs.activeRowKeys,
      defaultActiveRowKeys = _toRefs.defaultActiveRowKeys,
      disableSpaceInactiveRow = _toRefs.disableSpaceInactiveRow;
    var currentOperationRowIndex = Vue.ref(-1);
    var isShiftPressed = Vue.ref(false);
    var shiftSelectionState = Vue.ref(false);
    var areaSelectionStartIndex = Vue.ref(-1);
    var _useDefaultValue = useDefaultValue(activeRowKeys, defaultActiveRowKeys.value, props.onActiveChange, "activeRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tActiveRow = _useDefaultValue2[0],
      setTActiveRow = _useDefaultValue2[1];
    var handleInactive = function handleInactive(ctx) {
      var row = ctx.row,
        index = ctx.index;
      var rowValue = get(row, props.rowKey);
      if (activeRowType.value === "single") {
        var newActiveRowKeys = tActiveRow.value.length > 1 ? [rowValue] : [];
        setTActiveRow(newActiveRowKeys, {
          type: "inactive",
          activeRowList: [{
            row: row,
            rowIndex: index
          }],
          currentRowData: row
        });
      } else if (activeRowType.value === "multiple") {
        var _newActiveRowKeys = tActiveRow.value.filter(function (t) {
          return t !== rowValue;
        });
        var activeRowList = [];
        for (var i = 0, len = data.value.length; i < len; i++) {
          var row2 = data.value[i];
          if (_newActiveRowKeys.includes(get(row2, props.rowKey))) {
            activeRowList.push({
              row: row2,
              rowIndex: i
            });
          }
        }
        setTActiveRow(_newActiveRowKeys, {
          type: "inactive",
          activeRowList: activeRowList,
          currentRowData: row
        });
      }
    };
    var handleActive = function handleActive(ctx) {
      var row = ctx.row;
      var rowValue = get(row, props.rowKey);
      if (activeRowType.value === "single") {
        setTActiveRow([rowValue], {
          activeRowList: [{
            row: row,
            rowIndex: ctx.index
          }],
          currentRowData: row,
          type: "active"
        });
      } else {
        var newActiveRowKeys = tActiveRow.value.concat(rowValue);
        var activeRowList = [];
        for (var i = 0, len = data.value.length; i < len; i++) {
          var row2 = data.value[i];
          if (newActiveRowKeys.includes(get(row2, props.rowKey))) {
            activeRowList.push({
              row: row2,
              rowIndex: i
            });
          }
        }
        setTActiveRow(newActiveRowKeys, {
          activeRowList: activeRowList,
          currentRowData: row,
          type: "active"
        });
      }
    };
    var handleShiftActive = function handleShiftActive(ctx) {
      document.getSelection().removeAllRanges();
      var row = ctx.row;
      var currentIndex = currentOperationRowIndex.value;
      var startIndex = Math.min(areaSelectionStartIndex.value, currentIndex);
      var endIndex = Math.max(areaSelectionStartIndex.value, currentIndex);
      var newActiveRowData = [];
      for (var i = startIndex; i <= endIndex; i++) {
        newActiveRowData.push({
          row: data.value[i],
          rowIndex: i
        });
      }
      var newActiveRowKeys = newActiveRowData.map(function (item) {
        return get(item.row, props.rowKey);
      });
      setTActiveRow(newActiveRowKeys, {
        activeRowList: newActiveRowData,
        type: "active",
        currentRowData: row
      });
    };
    var getActiveRowList = function getActiveRowList() {
      var list = [];
      for (var i = 0, len = data.value.length; i < len; i++) {
        var row = data.value[i];
        var rowValue = get(row, props.rowKey);
        if (tActiveRow.value.includes(rowValue)) {
          list.push({
            row: row,
            rowIndex: i
          });
        }
      }
      return list;
    };
    var onHighlightRow = function onHighlightRow(ctx, extra) {
      if (!activeRowType.value) return;
      var row = ctx.row,
        index = ctx.index;
      var rowValue = get(row, props.rowKey);
      if (isShiftPressed.value) {
        currentOperationRowIndex.value = index;
        handleShiftActive(ctx);
        shiftSelectionState.value = true;
      } else if (tActiveRow.value.includes(rowValue) && (extra === null || extra === void 0 ? void 0 : extra.action) !== "active") {
        if (!disableSpaceInactiveRow.value) {
          handleInactive(ctx);
          currentOperationRowIndex.value = index;
        }
      } else {
        handleActive(ctx);
        currentOperationRowIndex.value = index;
      }
    };
    var clearActive = function clearActive() {
      var _props$onActiveRowAct;
      setTActiveRow([], {
        activeRowList: [],
        currentRowData: void 0,
        type: "inactive"
      });
      (_props$onActiveRowAct = props.onActiveRowAction) === null || _props$onActiveRowAct === void 0 || _props$onActiveRowAct.call(props, {
        action: "clear",
        activeRowList: []
      });
      currentOperationRowIndex.value = -1;
    };
    var setAllActive = function setAllActive() {
      var _props$onActiveRowAct2;
      var activeKeys = data.value.map(function (item) {
        return get(item, props.rowKey);
      });
      var activeRowList = data.value.map(function (row, rowIndex) {
        return {
          row: row,
          rowIndex: rowIndex
        };
      });
      setTActiveRow(activeKeys, {
        activeRowList: activeRowList,
        currentRowData: void 0,
        type: "active"
      });
      (_props$onActiveRowAct2 = props.onActiveRowAction) === null || _props$onActiveRowAct2 === void 0 || _props$onActiveRowAct2.call(props, {
        action: "select-all",
        activeRowList: activeRowList
      });
      currentOperationRowIndex.value = -1;
    };
    var clearShiftAreaSelection = function clearShiftAreaSelection() {
      shiftSelectionState.value = false;
    };
    var keyboardDownListener = function keyboardDownListener(e) {
      var _e$key;
      var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
      if (ARROW_DOWN_REG.test(code)) {
        e.preventDefault();
        var index = Math.min(data.value.length - 1, currentOperationRowIndex.value + 1);
        if (activeRowType.value === "single") {
          onHighlightRow({
            row: data.value[index],
            index: index,
            e: e
          }, {
            action: "active"
          });
        } else {
          currentOperationRowIndex.value = index;
        }
      } else if (ARROW_UP_REG.test(code)) {
        e.preventDefault();
        var _index = Math.max(0, currentOperationRowIndex.value - 1);
        if (activeRowType.value === "single") {
          onHighlightRow({
            row: data.value[_index],
            index: _index,
            e: e
          }, {
            action: "active"
          });
        } else {
          currentOperationRowIndex.value = _index;
        }
      } else if (SPACE_REG.test(code)) {
        e.preventDefault();
        var _index2 = currentOperationRowIndex.value;
        if (shiftSelectionState.value) {
          var _props$onActiveRowAct3;
          (_props$onActiveRowAct3 = props.onActiveRowAction) === null || _props$onActiveRowAct3 === void 0 || _props$onActiveRowAct3.call(props, {
            action: "shift-area-selection",
            activeRowList: getActiveRowList()
          });
        } else if (!disableSpaceInactiveRow.value) {
          onHighlightRow({
            row: data.value[_index2],
            index: _index2,
            e: e
          });
        } else {
          var _props$onActiveRowAct4;
          (_props$onActiveRowAct4 = props.onActiveRowAction) === null || _props$onActiveRowAct4 === void 0 || _props$onActiveRowAct4.call(props, {
            action: "space-one-selection",
            activeRowList: getActiveRowList()
          });
        }
      } else if (SHIFT_REG.test(code)) {
        isShiftPressed.value = true;
        areaSelectionStartIndex.value = currentOperationRowIndex.value;
      } else if (ESCAPE_REG.test(code) || CLEAR_REG.test(code)) {
        clearActive();
        clearShiftAreaSelection();
      } else if (ALL_REG.test(code)) {
        if (activeRowType.value === "multiple") {
          setAllActive();
        }
      }
      if (!SPACE_REG.test(code)) {
        clearShiftAreaSelection();
      }
    };
    var keyboardUpListener = function keyboardUpListener(e) {
      var _e$key2;
      var code = e.code || ((_e$key2 = e.key) === null || _e$key2 === void 0 ? void 0 : _e$key2.trim());
      if (SHIFT_REG.test(code)) {
        isShiftPressed.value = false;
      }
    };
    var addHighlightKeyboardListener = function addHighlightKeyboardListener() {
      on$1(tableRef.value, "keydown", keyboardDownListener);
      on$1(tableRef.value, "keyup", keyboardUpListener);
    };
    var removeHighlightKeyboardListener = function removeHighlightKeyboardListener() {
      off$1(tableRef.value, "keydown", keyboardDownListener);
      off$1(tableRef.value, "keyup", keyboardUpListener);
    };
    return {
      tActiveRow: tActiveRow,
      onHighlightRow: onHighlightRow,
      addHighlightKeyboardListener: addHighlightKeyboardListener,
      removeHighlightKeyboardListener: removeHighlightKeyboardListener
    };
  }

  function useHoverKeyboardEvent(props, tableRef) {
    var _toRefs = Vue.toRefs(props),
      hover = _toRefs.hover,
      data = _toRefs.data,
      activeRowType = _toRefs.activeRowType,
      keyboardRowHover = _toRefs.keyboardRowHover,
      disableSpaceInactiveRow = _toRefs.disableSpaceInactiveRow;
    var hoverRow = Vue.ref();
    var currentHoverRowIndex = Vue.ref(-1);
    var tableRefTabIndex = Vue.ref(0);
    var needKeyboardRowHover = Vue.computed(function () {
      if (activeRowType.value === "single") return false;
      if (activeRowType.value === "multiple") return true;
      return hover.value || keyboardRowHover.value;
    });
    var onHoverRow = function onHoverRow(ctx, extra) {
      var rowValue = get(ctx.row, props.rowKey);
      if (hoverRow.value === rowValue && (extra === null || extra === void 0 ? void 0 : extra.action) !== "hover") {
        if (!disableSpaceInactiveRow.value) {
          hoverRow.value = void 0;
        }
      } else {
        hoverRow.value = rowValue;
      }
      currentHoverRowIndex.value = ctx.index;
    };
    var clearHoverRow = function clearHoverRow() {
      hoverRow.value = void 0;
      currentHoverRowIndex.value = -1;
    };
    var keyboardDownListener = function keyboardDownListener(e) {
      var _e$key;
      if (!needKeyboardRowHover.value) return;
      var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
      if (ARROW_DOWN_REG.test(code)) {
        e.preventDefault();
        var index = Math.min(data.value.length - 1, currentHoverRowIndex.value + 1);
        onHoverRow({
          row: data.value[index],
          index: index,
          e: e
        }, {
          action: "hover"
        });
      } else if (ARROW_UP_REG.test(code)) {
        e.preventDefault();
        var _index = Math.max(0, currentHoverRowIndex.value - 1);
        onHoverRow({
          row: data.value[_index],
          index: _index,
          e: e
        }, {
          action: "hover"
        });
      } else if (SPACE_REG.test(code) && props.activeRowType !== "multiple") {
        var _index2 = currentHoverRowIndex.value;
        onHoverRow({
          row: data.value[_index2],
          index: _index2,
          e: e
        });
        if (!props.activeRowType) {
          var _props$onActiveRowAct;
          (_props$onActiveRowAct = props.onActiveRowAction) === null || _props$onActiveRowAct === void 0 || _props$onActiveRowAct.call(props, {
            action: "space-one-selection",
            activeRowList: [{
              row: data.value[_index2],
              rowIndex: _index2
            }]
          });
        }
      } else if (ESCAPE_REG.test(code) && !props.activeRowType) {
        var _props$onActiveRowAct2;
        hoverRow.value = void 0;
        (_props$onActiveRowAct2 = props.onActiveRowAction) === null || _props$onActiveRowAct2 === void 0 || _props$onActiveRowAct2.call(props, {
          action: "clear",
          activeRowList: []
        });
      } else if (ALL_REG.test(code) && !props.activeRowType) {
        var _props$onActiveRowAct3;
        (_props$onActiveRowAct3 = props.onActiveRowAction) === null || _props$onActiveRowAct3 === void 0 || _props$onActiveRowAct3.call(props, {
          action: "select-all",
          activeRowList: []
        });
      } else if (CLEAR_REG.test(code) && !props.activeRowType && !e.ctrlKey && !e.metaKey) {
        var _props$onActiveRowAct4;
        (_props$onActiveRowAct4 = props.onActiveRowAction) === null || _props$onActiveRowAct4 === void 0 || _props$onActiveRowAct4.call(props, {
          action: "clear",
          activeRowList: []
        });
      }
      if (ARROW_LEFT_REG.test(code) || ARROW_RIGHT_REG.test(code)) {
        tableRefTabIndex.value = void 0;
      } else {
        tableRefTabIndex.value = 0;
      }
    };
    var addRowHoverKeyboardListener = function addRowHoverKeyboardListener() {
      on$1(tableRef.value, "keydown", keyboardDownListener);
    };
    var removeRowHoverKeyboardListener = function removeRowHoverKeyboardListener() {
      off$1(tableRef.value, "keydown", keyboardDownListener);
    };
    return {
      hoverRow: hoverRow,
      needKeyboardRowHover: needKeyboardRowHover,
      clearHoverRow: clearHoverRow,
      addRowHoverKeyboardListener: addRowHoverKeyboardListener,
      removeRowHoverKeyboardListener: removeRowHoverKeyboardListener,
      tableRefTabIndex: tableRefTabIndex
    };
  }

  function ownKeys$z(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$y(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$z(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$z(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$9(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var BASE_TABLE_EVENTS = ["page-change", "cell-click", "scroll", "scrollX", "scrollY"];
  ROW_LISTENERS.map(function (t) {
    return "row-".concat(t);
  }).concat(BASE_TABLE_EVENTS);
  var _BaseTable = Vue.defineComponent({
    name: "TBaseTable",
    props: _objectSpread$y(_objectSpread$y({}, baseTableProps), {}, {
      renderExpandedRow: Function,
      onLeafColumnsChange: Function,
      thDraggable: Boolean
    }),
    emits: ["show-element-change"],
    setup: function setup(props2, context) {
      var _toRefs = Vue.toRefs(props2),
        lazyLoad = _toRefs.lazyLoad;
      var renderTNode = useTNodeJSX();
      var tableRef = Vue.ref();
      var tableElmRef = Vue.ref();
      var tableBodyRef = Vue.ref();
      var bottomContentRef = Vue.ref();
      var tableFootHeight = Vue.ref(0);
      var _useClassName = useClassName(),
        classPrefix = _useClassName.classPrefix,
        virtualScrollClasses = _useClassName.virtualScrollClasses,
        tableLayoutClasses = _useClassName.tableLayoutClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses;
      var _useStyle = useStyle(props2),
        tableClasses = _useStyle.tableClasses,
        sizeClassNames = _useStyle.sizeClassNames,
        tableContentStyles = _useStyle.tableContentStyles,
        tableElementStyles = _useStyle.tableElementStyles;
      var _useConfig = useConfig("table", props2.locale),
        globalConfig = _useConfig.globalConfig;
      var _useTableHeader = useTableHeader(props2),
        isMultipleHeader = _useTableHeader.isMultipleHeader,
        spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
        thList = _useTableHeader.thList;
      var finalColumns = Vue.computed(function () {
        var _spansAndLeafNodes$va;
        return ((_spansAndLeafNodes$va = spansAndLeafNodes.value) === null || _spansAndLeafNodes$va === void 0 ? void 0 : _spansAndLeafNodes$va.leafColumns) || props2.columns;
      });
      var tableSize = Vue.computed(function () {
        var _props2$size;
        return (_props2$size = props2.size) !== null && _props2$size !== void 0 ? _props2$size : globalConfig.value.size;
      });
      var _useElementLazyRender = useElementLazyRender(tableRef, lazyLoad),
        showElement = _useElementLazyRender.showElement;
      var paginationAffixRef = Vue.ref();
      var horizontalScrollAffixRef = Vue.ref();
      var headerTopAffixRef = Vue.ref();
      var footerBottomAffixRef = Vue.ref();
      var _useFixed = useFixed(props2, context, finalColumns, {
          paginationAffixRef: paginationAffixRef,
          horizontalScrollAffixRef: horizontalScrollAffixRef,
          headerTopAffixRef: headerTopAffixRef,
          footerBottomAffixRef: footerBottomAffixRef
        }),
        scrollbarWidth = _useFixed.scrollbarWidth,
        tableWidth = _useFixed.tableWidth,
        tableElmWidth = _useFixed.tableElmWidth,
        tableContentRef = _useFixed.tableContentRef,
        isFixedHeader = _useFixed.isFixedHeader,
        isWidthOverflow = _useFixed.isWidthOverflow,
        isFixedColumn = _useFixed.isFixedColumn,
        thWidthList = _useFixed.thWidthList,
        showColumnShadow = _useFixed.showColumnShadow,
        rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
        setData = _useFixed.setData,
        refreshTable = _useFixed.refreshTable,
        setTableElmWidth = _useFixed.setTableElmWidth,
        emitScrollEvent = _useFixed.emitScrollEvent,
        setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
        updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
        getThWidthList = _useFixed.getThWidthList,
        updateThWidthList = _useFixed.updateThWidthList,
        addTableResizeObserver = _useFixed.addTableResizeObserver,
        updateTableAfterColumnResize = _useFixed.updateTableAfterColumnResize;
      var _useAffix = useAffix(props2),
        affixHeaderRef = _useAffix.affixHeaderRef,
        affixFooterRef = _useAffix.affixFooterRef,
        horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
        paginationRef = _useAffix.paginationRef,
        showAffixHeader = _useAffix.showAffixHeader,
        showAffixFooter = _useAffix.showAffixFooter,
        showAffixPagination = _useAffix.showAffixPagination,
        onHorizontalScroll = _useAffix.onHorizontalScroll,
        setTableContentRef = _useAffix.setTableContentRef,
        updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;
      var _usePagination = usePagination(props2, context),
        dataSource = _usePagination.dataSource,
        innerPagination = _usePagination.innerPagination,
        isPaginateData = _usePagination.isPaginateData,
        renderPagination = _usePagination.renderPagination;
      var columnResizeParams = useColumnResize({
        isWidthOverflow: isWidthOverflow,
        tableContentRef: tableContentRef,
        showColumnShadow: showColumnShadow,
        getThWidthList: getThWidthList,
        updateThWidthList: updateThWidthList,
        setTableElmWidth: setTableElmWidth,
        updateTableAfterColumnResize: updateTableAfterColumnResize,
        onColumnResizeChange: props2.onColumnResizeChange
      });
      var resizeLineRef = columnResizeParams.resizeLineRef,
        resizeLineStyle = columnResizeParams.resizeLineStyle,
        setEffectColMap = columnResizeParams.setEffectColMap;
      var dynamicBaseTableClasses = Vue.computed(function () {
        return [tableClasses.value, _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableBaseClass.headerFixed, isFixedHeader.value), tableBaseClass.columnFixed, isFixedColumn.value), tableBaseClass.widthOverflow, isWidthOverflow.value), tableBaseClass.multipleHeader, isMultipleHeader.value), tableColFixedClasses.leftShadow, showColumnShadow.left), tableColFixedClasses.rightShadow, showColumnShadow.right), tableBaseClass.columnResizableTable, props2.resizable), "".concat(classPrefix, "-table__row--active-").concat(props2.activeRowType), props2.activeRowType)];
      });
      var tableElmClasses = Vue.computed(function () {
        return [[tableLayoutClasses[props2.tableLayout]]];
      });
      var showRightDivider = Vue.computed(function () {
        return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
      });
      var dividerBottom = Vue.computed(function () {
        var _bottomContentRef$val, _paginationRef$value;
        if (!props2.bordered) return 0;
        var bottomRect = (_bottomContentRef$val = bottomContentRef.value) === null || _bottomContentRef$val === void 0 ? void 0 : _bottomContentRef$val.getBoundingClientRect();
        var paginationRect = (_paginationRef$value = paginationRef.value) === null || _paginationRef$value === void 0 ? void 0 : _paginationRef$value.getBoundingClientRect();
        return ((bottomRect === null || bottomRect === void 0 ? void 0 : bottomRect.height) || 0) + ((paginationRect === null || paginationRect === void 0 ? void 0 : paginationRect.height) || 0);
      });
      var _useRowHighlight = useRowHighlight(props2, tableRef),
        tActiveRow = _useRowHighlight.tActiveRow,
        onHighlightRow = _useRowHighlight.onHighlightRow,
        addHighlightKeyboardListener = _useRowHighlight.addHighlightKeyboardListener,
        removeHighlightKeyboardListener = _useRowHighlight.removeHighlightKeyboardListener;
      var _useHoverKeyboardEven = useHoverKeyboardEvent(props2, tableRef),
        hoverRow = _useHoverKeyboardEven.hoverRow,
        needKeyboardRowHover = _useHoverKeyboardEven.needKeyboardRowHover,
        clearHoverRow = _useHoverKeyboardEven.clearHoverRow,
        addRowHoverKeyboardListener = _useHoverKeyboardEven.addRowHoverKeyboardListener,
        removeRowHoverKeyboardListener = _useHoverKeyboardEven.removeRowHoverKeyboardListener,
        tableRefTabIndex = _useHoverKeyboardEven.tableRefTabIndex;
      Vue.watch(tableElmRef, function () {
        setUseFixedTableElmRef(tableElmRef.value);
      });
      Vue.watch(function () {
        return [props2.data, dataSource];
      }, function () {
        setData(isPaginateData.value ? dataSource.value : props2.data);
      });
      Vue.watch(spansAndLeafNodes, function () {
        var _props2$onLeafColumns;
        (_props2$onLeafColumns = props2.onLeafColumnsChange) === null || _props2$onLeafColumns === void 0 || _props2$onLeafColumns.call(props2, spansAndLeafNodes.value.leafColumns);
        setEffectColMap(spansAndLeafNodes.value.leafColumns, null);
      }, {
        immediate: true
      });
      var onFixedChange = function onFixedChange() {
        Vue.nextTick(function () {
          onHorizontalScroll();
          updateAffixHeaderOrFooter();
        });
      };
      var syncThWidthList = throttle$1(function () {
        updateThWidthList(getThWidthList("calculate"));
      });
      var virtualScrollParams = Vue.computed(function () {
        return {
          data: props2.data,
          scroll: _objectSpread$y(_objectSpread$y({}, props2.scroll), {}, {
            fixedRows: props2.fixedRows
          })
        };
      });
      var virtualConfig = useVirtualScrollNew(tableContentRef, virtualScrollParams);
      var lastScrollY = -1;
      var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
        var target = e.target || e.srcElement;
        var top = target.scrollTop;
        if (lastScrollY !== top) {
          virtualConfig.isVirtualScroll.value && virtualConfig.handleScroll();
        } else {
          lastScrollY = -1;
          updateColumnFixedShadow(target);
        }
        lastScrollY = top;
        emitScrollEvent(e);
        if (props2.tableLayout === "auto") {
          syncThWidthList();
        }
      };
      var getTFootHeight = function getTFootHeight() {
        var _tableElmRef$value$qu;
        if (!tableElmRef.value) return;
        tableFootHeight.value = (_tableElmRef$value$qu = tableElmRef.value.querySelector("tfoot")) === null || _tableElmRef$value$qu === void 0 ? void 0 : _tableElmRef$value$qu.getBoundingClientRect().height;
      };
      var scrollColumnIntoView = function scrollColumnIntoView(colKey) {
        if (!tableContentRef.value) return;
        var thDom = tableContentRef.value.querySelector("th[data-colkey=\"".concat(colKey, "\"]"));
        var fixedThDom = tableContentRef.value.querySelectorAll("th.t-table__cell--fixed-left");
        var totalWidth = 0;
        for (var i = 0, len = fixedThDom.length; i < len; i++) {
          totalWidth += fixedThDom[i].getBoundingClientRect().width;
        }
        var domRect = thDom.getBoundingClientRect();
        var contentRect = tableContentRef.value.getBoundingClientRect();
        var distance = domRect.left - contentRect.left - totalWidth;
        tableContentRef.value.scrollTo({
          left: distance,
          behavior: "smooth"
        });
      };
      Vue.watch(tableContentRef, function () {
        setTableContentRef(tableContentRef.value);
        if (props2.tableLayout === "auto") {
          syncThWidthList();
        }
      });
      Vue.watch(function () {
        return [tableElmRef.value, props2.footData, props2.footerSummary, props2.columns];
      }, function () {
        var timer = setTimeout(function () {
          getTFootHeight();
          clearTimeout(timer);
        }, 0);
      });
      Vue.watch(tableRef, function (tableRef2) {
        addTableResizeObserver(tableRef2);
      });
      Vue.onMounted(function () {
        getTFootHeight();
        setTableContentRef(tableContentRef.value);
        addTableResizeObserver(tableRef.value);
      });
      var onTableFocus = function onTableFocus() {
        props2.activeRowType && addHighlightKeyboardListener();
        needKeyboardRowHover.value && addRowHoverKeyboardListener();
      };
      var onTableBlur = function onTableBlur() {
        props2.activeRowType && removeHighlightKeyboardListener();
        needKeyboardRowHover.value && removeRowHoverKeyboardListener();
      };
      var onInnerRowClick = function onInnerRowClick(ctx) {
        var _props2$onRowClick;
        (_props2$onRowClick = props2.onRowClick) === null || _props2$onRowClick === void 0 || _props2$onRowClick.call(props2, ctx);
        props2.activeRowType && onHighlightRow(ctx);
        needKeyboardRowHover.value && clearHoverRow();
      };
      Vue.watch([showElement], function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 1),
          showElement2 = _ref3[0];
        context.emit("show-element-change", showElement2);
      }, {
        immediate: true
      });
      var tableData = Vue.computed(function () {
        return isPaginateData.value ? dataSource.value : props2.data;
      });
      var scrollToElement = function scrollToElement(params) {
        var index = params.index;
        if (!index && index !== 0) {
          var _tableData$value;
          if (!params.key) {
            log.error("Table", "scrollToElement: one of `index` or `key` must exist.");
            return;
          }
          index = (_tableData$value = tableData.value) === null || _tableData$value === void 0 ? void 0 : _tableData$value.findIndex(function (item) {
            return get(item, props2.rowKey) === params.key;
          });
          if (index < 0) {
            log.error("Table", "".concat(params.key, " does not exist in data, check `rowKey` or `data` please."));
          }
        }
        if (virtualConfig.isVirtualScroll.value) {
          virtualConfig.scrollToElement(_objectSpread$y(_objectSpread$y({}, params), {}, {
            index: index + 1
          }));
        } else {
          var _tableBodyRef$value, _el$children;
          var el = (_tableBodyRef$value = tableBodyRef.value) === null || _tableBodyRef$value === void 0 ? void 0 : _tableBodyRef$value.$el;
          var row = el === null || el === void 0 || (_el$children = el.children) === null || _el$children === void 0 ? void 0 : _el$children[index];
          if (row) {
            var _params$top, _params$behavior;
            var offsetTop = row.offsetTop;
            var scrollTop = tableContentRef.value.scrollTop;
            var scrollHeight = offsetTop - scrollTop - ((_params$top = params.top) !== null && _params$top !== void 0 ? _params$top : 0);
            tableContentRef.value.scrollBy({
              top: scrollHeight,
              behavior: (_params$behavior = params.behavior) !== null && _params$behavior !== void 0 ? _params$behavior : "auto"
            });
          }
        }
      };
      context.expose({
        refreshTable: refreshTable,
        scrollColumnIntoView: scrollColumnIntoView,
        scrollToElement: scrollToElement
      });
      return function () {
        var _props2$allowResizeCo, _affixHeaderRef$value, _props2$footData, _tableFootHeight$valu, _tableFootHeight$valu2, _affixHeaderHeight$va, _tableContentRef$valu;
        if (!showElement.value) {
          return Vue.createVNode("div", {
            "ref": tableRef
          }, null);
        }
        var data = isPaginateData.value ? dataSource.value : props2.data;
        var columns = (spansAndLeafNodes === null || spansAndLeafNodes === void 0 ? void 0 : spansAndLeafNodes.value.leafColumns) || props2.columns;
        var columnResizable = (_props2$allowResizeCo = props2.allowResizeColumnWidth) !== null && _props2$allowResizeCo !== void 0 ? _props2$allowResizeCo : props2.resizable;
        if (columnResizable && props2.tableLayout === "auto") {
          log.warn("Table", "table-layout can not be `auto`, cause you are using column resizable, set `table-layout: fixed` please.");
        }
        var defaultColWidth = props2.tableLayout === "fixed" && isWidthOverflow.value ? "100px" : void 0;
        var renderColGroup = function renderColGroup() {
          var isAffixHeader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          return Vue.createVNode("colgroup", null, [columns.map(function (col) {
            var style = {
              width: formatCSSUnit((isAffixHeader || columnResizable ? thWidthList.value[col.colKey] : void 0) || col.width) || defaultColWidth
            };
            if (col.minWidth) {
              style.minWidth = formatCSSUnit(col.minWidth);
            }
            if (!style.width && !col.minWidth && props2.tableLayout === "fixed") {
              style.minWidth = "80px";
            }
            return Vue.createVNode("col", {
              "key": col.colKey,
              "style": style
            }, null);
          })]);
        };
        var renderAffixedHeader = function renderAffixedHeader() {
          if (props2.showHeader === false) return null;
          return !!(virtualConfig.isVirtualScroll.value || props2.headerAffixedTop) && (props2.headerAffixedTop ? Vue.createVNode(Affix, Vue.mergeProps({
            "offsetTop": 0
          }, getAffixProps(props2.headerAffixedTop), {
            "onFixedChange": onFixedChange,
            "ref": headerTopAffixRef
          }), _isSlot$9(affixHeaderWithWrap) ? affixHeaderWithWrap : {
            "default": function _default() {
              return [affixHeaderWithWrap];
            }
          }) : isFixedHeader.value && affixHeaderWithWrap);
        };
        var renderAffixedHorizontalScrollbar = function renderAffixedHorizontalScrollbar() {
          return Vue.createVNode(Affix, Vue.mergeProps({
            "offsetBottom": 0
          }, getAffixProps(props2.horizontalScrollAffixedBottom), {
            "style": {
              marginTop: "-".concat(scrollbarWidth.value * 2, "px")
            },
            "horizontalScrollAffixedBottom": true,
            "ref": horizontalScrollAffixRef
          }), {
            "default": function _default() {
              return [Vue.createVNode("div", {
                "ref": horizontalScrollbarRef,
                "class": ["scrollbar", tableBaseClass.obviousScrollbar],
                "style": {
                  width: "".concat(tableWidth.value, "px"),
                  overflow: "auto",
                  opacity: Number(showAffixFooter.value)
                }
              }, [Vue.createVNode("div", {
                "style": {
                  width: "".concat(tableElmWidth.value, "px"),
                  height: "5px"
                }
              }, null)])];
            }
          });
        };
        var headProps = {
          isFixedHeader: isFixedHeader.value,
          rowAndColFixedPosition: rowAndColFixedPosition.value,
          isMultipleHeader: isMultipleHeader.value,
          bordered: props2.bordered,
          maxHeight: props2.maxHeight,
          height: props2.height,
          spansAndLeafNodes: spansAndLeafNodes.value,
          thList: thList.value,
          thWidthList: thWidthList.value,
          resizable: props2.resizable,
          columnResizeParams: columnResizeParams,
          classPrefix: classPrefix,
          ellipsisOverlayClassName: tableSize.value !== "medium" ? sizeClassNames[tableSize.value] : "",
          attach: props2.attach,
          showColumnShadow: showColumnShadow,
          thDraggable: props2.thDraggable
        };
        var IEHeaderWrap = getIEVersion() <= 11 ? 4 : 0;
        var barWidth = isWidthOverflow.value ? scrollbarWidth.value : 0;
        var affixHeaderHeight = Vue.ref((((_affixHeaderRef$value = affixHeaderRef.value) === null || _affixHeaderRef$value === void 0 ? void 0 : _affixHeaderRef$value.getBoundingClientRect().height) || 0) - IEHeaderWrap);
        var timer = setTimeout(function () {
          var _affixHeaderRef$value2;
          affixHeaderHeight.value = (((_affixHeaderRef$value2 = affixHeaderRef.value) === null || _affixHeaderRef$value2 === void 0 ? void 0 : _affixHeaderRef$value2.getBoundingClientRect().height) || 0) - IEHeaderWrap;
          clearTimeout(timer);
        }, 0);
        var affixHeaderWrapHeight = Vue.computed(function () {
          return affixHeaderHeight.value - barWidth;
        });
        var headerOpacity = props2.headerAffixedTop ? Number(showAffixHeader.value) : 1;
        var affixHeaderWrapHeightStyle = Vue.computed(function () {
          return {
            width: "".concat(tableWidth.value, "px"),
            height: "".concat(affixHeaderWrapHeight.value, "px"),
            opacity: headerOpacity
          };
        });
        var affixedLeftBorder = props2.bordered ? 1 : 0;
        var affixedHeader = Boolean((props2.headerAffixedTop || virtualConfig.isVirtualScroll.value) && tableWidth.value) && Vue.createVNode("div", {
          "ref": affixHeaderRef,
          "style": {
            width: "".concat(tableWidth.value - affixedLeftBorder, "px"),
            opacity: Number(showAffixHeader.value)
          },
          "class": ["scrollbar", _defineProperty$2({}, tableBaseClass.affixedHeaderElm, props2.headerAffixedTop || virtualConfig.isVirtualScroll.value)]
        }, [Vue.createVNode("table", {
          "class": tableElmClasses.value,
          "style": _objectSpread$y(_objectSpread$y({}, tableElementStyles.value), {}, {
            width: "".concat(tableElmWidth.value, "px")
          })
        }, [renderColGroup(true), Vue.createVNode(THead, headProps, context.slots)])]);
        var affixHeaderWithWrap = Vue.createVNode("div", {
          "class": tableBaseClass.affixedHeaderWrap,
          "style": affixHeaderWrapHeightStyle.value
        }, [affixedHeader]);
        var marginScrollbarWidth = isWidthOverflow.value ? scrollbarWidth.value : 0;
        if (props2.bordered) {
          marginScrollbarWidth += 1;
        }
        var showFooter = Boolean(virtualConfig.isVirtualScroll.value || props2.footerAffixedBottom);
        var hasFooter = ((_props2$footData = props2.footData) === null || _props2$footData === void 0 ? void 0 : _props2$footData.length) || props2.footerSummary || context.slots["footerSummary"];
        var affixedFooter = Boolean(showFooter && hasFooter && tableWidth.value) && Vue.createVNode(Affix, Vue.mergeProps({
          "class": tableBaseClass.affixedFooterWrap,
          "onFixedChange": onFixedChange,
          "offsetBottom": marginScrollbarWidth || 0
        }, getAffixProps(props2.footerAffixedBottom), {
          "style": {
            marginTop: "".concat(-1 * (((_tableFootHeight$valu = tableFootHeight.value) !== null && _tableFootHeight$valu !== void 0 ? _tableFootHeight$valu : 0) + marginScrollbarWidth), "px")
          },
          "ref": footerBottomAffixRef
        }), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "ref": affixFooterRef,
              "style": {
                width: "".concat(tableWidth.value - affixedLeftBorder, "px"),
                opacity: Number(showAffixFooter.value)
              },
              "class": ["scrollbar", _defineProperty$2({}, tableBaseClass.affixedFooterElm, props2.footerAffixedBottom || virtualConfig.isVirtualScroll.value)]
            }, [Vue.createVNode("table", {
              "class": tableElmClasses.value,
              "style": _objectSpread$y(_objectSpread$y({}, tableElementStyles.value), {}, {
                width: "".concat(tableElmWidth.value, "px")
              })
            }, [renderColGroup(true), Vue.createVNode(TFoot, {
              "rowKey": props2.rowKey,
              "isFixedHeader": isFixedHeader.value,
              "rowAndColFixedPosition": rowAndColFixedPosition.value,
              "footData": props2.footData,
              "columns": spansAndLeafNodes.value.leafColumns,
              "rowAttributes": props2.rowAttributes,
              "rowClassName": props2.rowClassName,
              "thWidthList": thWidthList.value,
              "footerSummary": props2.footerSummary,
              "rowspanAndColspanInFooter": props2.rowspanAndColspanInFooter
            }, context.slots)])])];
          }
        });
        var translate = "translate(0, ".concat(virtualConfig.scrollHeight.value + ((_tableFootHeight$valu2 = tableFootHeight.value) !== null && _tableFootHeight$valu2 !== void 0 ? _tableFootHeight$valu2 : 0) + ((_affixHeaderHeight$va = affixHeaderHeight.value) !== null && _affixHeaderHeight$va !== void 0 ? _affixHeaderHeight$va : 0), "px)");
        var virtualStyle = {
          transform: translate,
          "-ms-transform": translate,
          "-moz-transform": translate,
          "-webkit-transform": translate
        };
        var tableBodyProps = _objectSpread$y(_objectSpread$y({
          classPrefix: classPrefix,
          ellipsisOverlayClassName: tableSize.value !== "medium" ? sizeClassNames[tableSize.value] : "",
          rowAndColFixedPosition: rowAndColFixedPosition.value,
          showColumnShadow: showColumnShadow,
          data: data,
          virtualConfig: virtualConfig,
          columns: spansAndLeafNodes.value.leafColumns,
          tableElm: tableRef.value,
          tableWidth: tableWidth.value,
          isWidthOverflow: isWidthOverflow.value,
          scroll: props2.scroll,
          cellEmptyContent: props2.cellEmptyContent,
          tableContentElm: tableContentRef.value,
          handleRowMounted: virtualConfig.handleRowMounted,
          renderExpandedRow: props2.renderExpandedRow
        }, pick$1(props2, extendTableProps)), {}, {
          pagination: innerPagination.value,
          attach: props2.attach,
          hoverRow: hoverRow.value,
          activeRow: tActiveRow.value,
          onRowClick: onInnerRowClick
        });
        var tableContent = Vue.createVNode("div", {
          "ref": tableContentRef,
          "class": tableBaseClass.content,
          "style": tableContentStyles.value,
          "onScroll": onInnerVirtualScroll
        }, [virtualConfig.isVirtualScroll.value && Vue.createVNode("div", {
          "class": virtualScrollClasses.cursor,
          "style": virtualStyle
        }, null), Vue.createVNode("table", {
          "ref": tableElmRef,
          "class": tableElmClasses.value,
          "style": _objectSpread$y(_objectSpread$y({}, tableElementStyles.value), {}, {
            width: props2.resizable && isWidthOverflow.value && tableElmWidth.value ? "".concat(tableElmWidth.value, "px") : tableElementStyles.value.width
          })
        }, [renderColGroup(false), props2.showHeader && Vue.createVNode(THead, _objectSpread$y(_objectSpread$y({}, headProps), {}, {
          thWidthList: columnResizable ? thWidthList.value : {}
        }), context.slots), Vue.createVNode(TBody, Vue.mergeProps({
          "ref": tableBodyRef
        }, tableBodyProps), context.slots), Vue.createVNode(TFoot, {
          "rowKey": props2.rowKey,
          "isFixedHeader": isFixedHeader.value,
          "rowAndColFixedPosition": rowAndColFixedPosition.value,
          "footData": props2.footData,
          "columns": spansAndLeafNodes.value.leafColumns,
          "rowAttributes": props2.rowAttributes,
          "rowClassName": props2.rowClassName,
          "footerSummary": props2.footerSummary,
          "rowspanAndColspanInFooter": props2.rowspanAndColspanInFooter,
          "virtualScroll": virtualConfig.isVirtualScroll.value
        }, context.slots)])]);
        var getCustomLoadingText = isFunction(props2.loading) ? props2.loading : context.slots.loading;
        var loadingContent = props2.loading !== void 0 && Vue.createVNode(Loading, Vue.mergeProps({
          "loading": !!props2.loading,
          "text": getCustomLoadingText,
          "attach": tableRef.value ? function () {
            return tableRef.value;
          } : void 0,
          "showOverlay": true,
          "size": "small"
        }, props2.loadingProps), null);
        var topContent = renderTNode("topContent");
        var bottomContent = renderTNode("bottomContent");
        var pagination = Vue.createVNode("div", {
          "ref": paginationRef,
          "class": tableBaseClass.paginationWrap,
          "style": {
            opacity: Number(showAffixPagination.value)
          }
        }, [renderPagination()]);
        var bottom = !!bottomContent && Vue.createVNode("div", {
          "ref": bottomContentRef,
          "class": tableBaseClass.bottomContent
        }, [bottomContent]);
        return Vue.createVNode("div", {
          "ref": tableRef,
          "tabindex": tableRefTabIndex.value,
          "class": dynamicBaseTableClasses.value,
          "onFocus": onTableFocus,
          "onBlur": onTableBlur
        }, [!!topContent && Vue.createVNode("div", {
          "class": tableBaseClass.topContent
        }, [topContent]), renderAffixedHeader(), tableContent, affixedFooter, loadingContent, bottom, showRightDivider.value && Vue.createVNode("div", {
          "class": tableBaseClass.scrollbarDivider,
          "style": {
            right: "".concat(scrollbarWidth.value, "px"),
            bottom: dividerBottom.value ? "".concat(dividerBottom.value, "px") : void 0,
            height: "".concat((_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect().height, "px")
          }
        }, null), props2.horizontalScrollAffixedBottom && renderAffixedHorizontalScrollbar(), props2.paginationAffixedBottom ? Vue.createVNode(Affix, Vue.mergeProps({
          "offsetBottom": 0
        }, getAffixProps(props2.paginationAffixedBottom), {
          "ref": paginationAffixRef
        }), _isSlot$9(pagination) ? pagination : {
          "default": function _default() {
            return [pagination];
          }
        }) : pagination, Vue.createVNode("div", {
          "ref": resizeLineRef,
          "class": tableBaseClass.resizeLine,
          "style": resizeLineStyle
        }, null)]);
      };
    }
  });

  var primaryTableProps = {
    asyncLoading: {
      type: [String, Function]
    },
    columnController: {
      type: Object
    },
    columnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultColumnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    displayColumns: {
      type: Array,
      "default": void 0
    },
    defaultDisplayColumns: {
      type: Array
    },
    dragSort: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["row", "row-handler", "col", "row-handler-col", "drag-col"].includes(val);
      }
    },
    dragSortOptions: {
      type: Object
    },
    editableCellState: {
      type: Function
    },
    editableRowKeys: {
      type: Array
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandOnRowClick: Boolean,
    expandedRow: {
      type: [String, Function]
    },
    expandedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultExpandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    filterIcon: {
      type: Function
    },
    filterRow: {
      type: [String, Function]
    },
    filterValue: {
      type: Object,
      "default": void 0
    },
    defaultFilterValue: {
      type: Object
    },
    hideSortTips: Boolean,
    indeterminateSelectedRowKeys: {
      type: Array
    },
    multipleSort: Boolean,
    reserveSelectedRowOnPaginate: {
      type: Boolean,
      "default": true
    },
    rowSelectionAllowUncheck: Boolean,
    rowSelectionType: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["single", "multiple"].includes(val);
      }
    },
    selectOnRowClick: Boolean,
    selectedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultSelectedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showSortColumnBgColor: Boolean,
    sort: {
      type: [Object, Array],
      "default": void 0
    },
    defaultSort: {
      type: [Object, Array]
    },
    sortIcon: {
      type: Function
    },
    sortOnRowDraggable: Boolean,
    onAsyncLoadingClick: Function,
    onCellClick: Function,
    onChange: Function,
    onColumnChange: Function,
    onColumnControllerVisibleChange: Function,
    onDataChange: Function,
    onDisplayColumnsChange: Function,
    onDragSort: Function,
    onExpandChange: Function,
    onFilterChange: Function,
    onRowEdit: Function,
    onRowValidate: Function,
    onSelectChange: Function,
    onSortChange: Function,
    onValidate: Function
  };

  function ownKeys$y(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$x(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$y(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$y(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var ColumnCheckboxGroup = Vue.defineComponent({
    name: "ColumnCheckboxGroup",
    props: {
      checkboxProps: Object,
      options: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      label: String,
      uniqueKey: String,
      value: Array,
      onChange: Function
    },
    setup: function setup(props) {
      var _toRefs = Vue.toRefs(props),
        checkboxProps = _toRefs.checkboxProps,
        value = _toRefs.value,
        options = _toRefs.options;
      var classPrefix = usePrefixClass();
      var allCheckedColumnKeys = Vue.computed(function () {
        var allCheckedKeys = [];
        options.value.forEach(function (option) {
          if (_typeof$3(option) === "object") {
            if (option.disabled) return;
            if (option.value) {
              allCheckedKeys.push(option.value);
            } else if (typeof option.label === "string") {
              allCheckedKeys.push(option.label);
            }
          } else {
            allCheckedKeys.push(option);
          }
        });
        return allCheckedKeys;
      });
      var intersectionKeys = Vue.computed(function () {
        return intersection$1(allCheckedColumnKeys.value, value.value);
      });
      var isCheckedAll = Vue.computed(function () {
        var len = intersectionKeys.value.length;
        return Boolean(len && allCheckedColumnKeys.value.length === len);
      });
      var isIndeterminate = Vue.computed(function () {
        var len = intersectionKeys.value.length;
        return Boolean(len < allCheckedColumnKeys.value.length && len);
      });
      var onCheckAllColumnsChange = function onCheckAllColumnsChange(checkAll, ctx) {
        var changeParams = {
          e: ctx.e,
          type: "check",
          current: void 0,
          option: void 0
        };
        if (checkAll) {
          var _props$onChange;
          var newKeys = _toConsumableArray(new Set(value.value.concat(allCheckedColumnKeys.value)));
          (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, newKeys, changeParams);
        } else {
          var _props$onChange2;
          var _newKeys = value.value.filter(function (val) {
            return !allCheckedColumnKeys.value.includes(val);
          });
          (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 || _props$onChange2.call(props, _newKeys, _objectSpread$x(_objectSpread$x({}, changeParams), {}, {
            type: "uncheck"
          }));
        }
      };
      var handleCheckChange = function handleCheckChange(val, ctx) {
        var _props$onChange3;
        (_props$onChange3 = props.onChange) === null || _props$onChange3 === void 0 || _props$onChange3.call(props, val, ctx);
      };
      var classes = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-table__column-controller-item"), _defineProperty$2({}, "".concat(classPrefix.value, "-table__").concat(props.uniqueKey), props.uniqueKey)];
      });
      return function () {
        return Vue.createVNode("div", {
          "class": classes.value
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-table__column-controller-block")
        }, [Vue.createVNode(Checkbox, {
          "indeterminate": isIndeterminate.value,
          "checked": isCheckedAll.value,
          "onChange": onCheckAllColumnsChange,
          "disabled": !allCheckedColumnKeys.value.length
        }, {
          "default": function _default() {
            return [props.label];
          }
        })]), Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-table__column-controller-block")
        }, [Vue.createVNode(CheckboxGroup, Vue.mergeProps({
          "options": options.value
        }, checkboxProps.value, {
          "modelValue": value.value,
          "onChange": handleCheckChange
        }), null)])]);
      };
    }
  });

  function ownKeys$x(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$x(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$x(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      } else {
        col.colKey && keys.add(col.colKey);
      }
    }
    return keys;
  }
  function useColumnController(props, context) {
    var _useConfig = useConfig("table", props.locale),
      classPrefix = _useConfig.classPrefix,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        SettingIcon: TdSettingIcon
      }),
      SettingIcon = _useGlobalIcon.SettingIcon;
    var _toRefs = Vue.toRefs(props),
      columns = _toRefs.columns,
      columnController = _toRefs.columnController,
      displayColumns = _toRefs.displayColumns,
      columnControllerVisible = _toRefs.columnControllerVisible;
    var dialogInstance = Vue.ref(null);
    var renderTNodeJSX = useTNodeJSX();
    var enabledColKeys = Vue.computed(function () {
      var _columnController$val;
      var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function (v) {
        return v;
      });
      return new Set(arr);
    });
    var keys = _toConsumableArray(getColumnKeys(columns.value));
    var _useDefaultValue = useDefaultValue(displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tDisplayColumns = _useDefaultValue2[0],
      setTDisplayColumns = _useDefaultValue2[1];
    var columnCheckboxKeys = Vue.ref(displayColumns.value || props.defaultDisplayColumns || keys);
    var checkboxGroupList = Vue.computed(function () {
      var _columnController$val2;
      if ((_columnController$val2 = columnController.value) !== null && _columnController$val2 !== void 0 && (_columnController$val2 = _columnController$val2.groupColumns) !== null && _columnController$val2 !== void 0 && _columnController$val2.length) {
        return getCheckboxGroupOptions(columns.value);
      }
      var oneItem = {
        label: globalConfig.value.selectAllText,
        options: getCheckboxOptions(columns.value)
      };
      return [oneItem];
    });
    Vue.watch([displayColumns], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        val = _ref2[0];
      columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
    });
    function getOneColumnItem(column, i) {
      return {
        label: function label() {
          return renderTitle(context.slots, column, i);
        },
        value: column.colKey,
        disabled: !enabledColKeys.value.has(column.colKey)
      };
    }
    function getCheckboxGroupOptions(columns2) {
      var _columnController$val3;
      var groupColumns = (_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.groupColumns;
      if (!(groupColumns !== null && groupColumns !== void 0 && groupColumns.length)) return [];
      var groupList = [];
      var _loop = function loop(columns3) {
        for (var i = 0, len = columns3.length; i < len; i++) {
          var _column$children;
          var column = columns3[i];
          var oneItem = getOneColumnItem(column, i);
          for (var j = 0, len1 = groupColumns.length; j < len1; j++) {
            var _groupList$j;
            var groupInfo = groupColumns[j];
            if (!groupInfo.columns.includes(column.colKey)) continue;
            if ((_groupList$j = groupList[j]) !== null && _groupList$j !== void 0 && (_groupList$j = _groupList$j.options) !== null && _groupList$j !== void 0 && _groupList$j.length) {
              groupList[j].options.push(oneItem);
            } else {
              groupList[j] = _objectSpread$w(_objectSpread$w({}, groupColumns[j]), {}, {
                options: [oneItem]
              });
            }
          }
          if ((_column$children = column.children) !== null && _column$children !== void 0 && _column$children.length) {
            _loop(column.children);
          }
        }
      };
      _loop(columns2);
      return groupList;
    }
    function getCheckboxOptions(columns2) {
      var _columnController$val4;
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if ((_columnController$val4 = columnController.value) !== null && _columnController$val4 !== void 0 && (_columnController$val4 = _columnController$val4.groupColumns) !== null && _columnController$val4 !== void 0 && _columnController$val4.length) return [];
      for (var i = 0, len = columns2.length; i < len; i++) {
        var _item$children;
        var item = columns2[i];
        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        } else {
          if (item.colKey) {
            arr.push(getOneColumnItem(item, i));
          }
        }
      }
      return arr;
    }
    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;
      columnCheckboxKeys.value = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
    };
    var handleToggleColumnController = function handleToggleColumnController() {
      var _columnController$val8;
      if (dialogInstance.value) {
        dialogInstance.value.show();
        return;
      }
      dialogInstance.value = DialogPlugin.confirm(_objectSpread$w({
        header: globalConfig.value.columnConfigTitleText,
        body: function body() {
          var _columnController$val5;
          var widthMode = ((_columnController$val5 = columnController.value) === null || _columnController$val5 === void 0 ? void 0 : _columnController$val5.displayType) === "fixed-width" ? "fixed" : "auto";
          var _ref3 = columnController.value || {},
            columnControllerTopContent = _ref3.columnControllerTopContent,
            columnControllerBottomContent = _ref3.columnControllerBottomContent;
          var defaultNode = Vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-table__column-controller"), "".concat(classPrefix.value, "-table__column-controller--").concat(widthMode)]
          }, [Vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-body")
          }, [isFunction(columnControllerTopContent) ? columnControllerTopContent(Vue.h) : renderTNodeJSX("columnControllerTopContent"), globalConfig.value.columnConfigDescriptionText && Vue.createVNode("p", {
            "class": "".concat(classPrefix.value, "-table__column-controller-desc")
          }, [globalConfig.value.columnConfigDescriptionText]), checkboxGroupList.value.map(function (group, index) {
            var _columnController$val6, _columnController$val7;
            var uniqueKey = (_columnController$val6 = columnController.value) !== null && _columnController$val6 !== void 0 && (_columnController$val6 = _columnController$val6.groupColumns) !== null && _columnController$val6 !== void 0 && _columnController$val6.length ? String(group.value || index) : void 0;
            return Vue.createVNode(ColumnCheckboxGroup, {
              "key": group.value || index,
              "uniqueKey": uniqueKey,
              "value": columnCheckboxKeys.value,
              "label": group.label,
              "options": group.options,
              "onChange": handleCheckChange,
              "checkboxProps": (_columnController$val7 = columnController.value) === null || _columnController$val7 === void 0 ? void 0 : _columnController$val7.checkboxProps
            }, null);
          }), isFunction(columnControllerBottomContent) ? columnControllerBottomContent(Vue.h) : renderTNodeJSX("columnControllerBottomContent")])]);
          return defaultNode;
        },
        confirmBtn: globalConfig.value.confirmText,
        cancelBtn: globalConfig.value.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro;
            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
              trigger: "confirm"
            });
            context.emit("update:columnControllerVisible", false);
          }
        },
        onClose: function onClose() {
          columnCheckboxKeys.value = tDisplayColumns.value;
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro2;
            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
              trigger: "cancel"
            });
            context.emit("update:columnControllerVisible", false);
          }
        }
      }, ((_columnController$val8 = columnController.value) === null || _columnController$val8 === void 0 ? void 0 : _columnController$val8.dialogProps) || {}));
    };
    Vue.watch([columnControllerVisible], function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 1),
        visible = _ref5[0];
      if (visible === void 0) return;
      if (dialogInstance.value) {
        visible ? dialogInstance.value.show() : dialogInstance.value.hide();
      } else {
        visible && handleToggleColumnController();
      }
    }, {
      immediate: true
    });
    var renderColumnController = function renderColumnController() {
      var _props$columnControll;
      var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
      var placement = isColumnController ? columnController.value.placement || "top-right" : "";
      if (isColumnController && columnController.value.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty$2({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
      return Vue.createVNode("div", {
        "class": classes
      }, [Vue.createVNode(Button, Vue.mergeProps({
        "theme": "default",
        "variant": "outline",
        "onClick": handleToggleColumnController,
        "content": globalConfig.value.columnConfigButtonText
      }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
        icon: function icon() {
          return Vue.createVNode(SettingIcon, null, null);
        }
      })]);
    };
    return {
      tDisplayColumns: tDisplayColumns,
      columnCheckboxKeys: columnCheckboxKeys,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props, context) {
    var _toRefs = Vue.toRefs(props),
      expandedRowKeys = _toRefs.expandedRowKeys;
    var renderTNode = useTNodeJSX();
    var _useConfig = useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        ChevronRightCircleIcon: TdChevronRightCircleIcon
      }),
      ChevronRightCircleIcon = _useGlobalIcon.ChevronRightCircleIcon;
    var _useClassName = useClassName(),
      tableExpandClasses = _useClassName.tableExpandClasses,
      positiveRotate90 = _useClassName.positiveRotate90,
      tableFullRowClasses = _useClassName.tableFullRowClasses;
    var _useDefaultValue = useDefaultValue(expandedRowKeys, props.defaultExpandedRowKeys || [], props.onExpandChange, "expandedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tExpandedRowKeys = _useDefaultValue2[0],
      setTExpandedRowKeys = _useDefaultValue2[1];
    var showExpandedRow = Vue.computed(function () {
      return Boolean(props.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
    });
    var showExpandIconColumn = Vue.computed(function () {
      return props.expandIcon !== false && showExpandedRow.value;
    });
    var isFirstColumnFixed = Vue.computed(function () {
      var _props$columns;
      return ((_props$columns = props.columns) === null || _props$columns === void 0 || (_props$columns = _props$columns[0]) === null || _props$columns === void 0 ? void 0 : _props$columns.fixed) === "left";
    });
    var getExpandedRowClass = function getExpandedRowClass(params) {
      var _tExpandedRowKeys$val;
      if (!showExpandedRow.value) return null;
      var row = params.row,
        rowKey = params.rowKey;
      var currentRowKey = get(row, rowKey || "id");
      return tableExpandClasses[(_tExpandedRowKeys$val = tExpandedRowKeys.value) !== null && _tExpandedRowKeys$val !== void 0 && _tExpandedRowKeys$val.includes(currentRowKey) ? "rowExpanded" : "rowFolded"];
    };
    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get(row, props.rowKey || "id");
      var index = tExpandedRowKeys.value.indexOf(currentId);
      var newKeys = _toConsumableArray(tExpandedRowKeys.value);
      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t2) {
          return newKeys.includes(get(t2, props.rowKey || "id"));
        }),
        currentRowData: row
      });
    };
    var renderExpandIcon = function renderExpandIcon(_, p) {
      var row = p.row,
        rowIndex = p.rowIndex;
      var currentId = get(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.value.includes(currentId);
      var icon = renderTNode("expandIcon", {
        defaultNode: t(globalConfig.value.expandIcon) || Vue.createVNode(ChevronRightCircleIcon, null, null),
        params: {
          row: row,
          index: rowIndex
        }
      });
      if (!icon) return null;
      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$2({}, positiveRotate90, expanded)];
      return Vue.createVNode("span", {
        "class": classes,
        "onClick": function onClick(e) {
          return onToggleExpand(e, row);
        }
      }, [icon]);
    };
    var getExpandColumn = function getExpandColumn() {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 46,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed.value ? "left" : void 0,
        cell: renderExpandIcon,
        stopPropagation: true
      };
      return expandCol;
    };
    var renderExpandedRow = function renderExpandedRow(p) {
      var rowId = get(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys.value || !tExpandedRowKeys.value.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return Vue.createVNode("tr", {
        "key": "expand_".concat(rowId),
        "class": [tableExpandClasses.row, _defineProperty$2({}, tableFullRowClasses.base, isFixedLeft)]
      }, [Vue.createVNode("td", {
        "colspan": p.columns.length
      }, [Vue.createVNode("div", {
        "class": [tableExpandClasses.rowInner, _defineProperty$2({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
        "style": isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, [Vue.createVNode("div", {
        "class": tableFullRowClasses.innerFullElement
      }, [renderTNode("expandedRow", {
        params: p
      })])])])]);
    };
    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };
    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick,
      getExpandedRowClass: getExpandedRowClass
    };
  }

  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    if (!selectColumn) return false;
    var disabled = isFunction(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;
    if (selectColumn.checkProps) {
      if (isFunction(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }
    return !!disabled;
  }
  function getEditableKeysMap(keys, list, rowKey) {
    var map = {};
    for (var i = 0, len = list.length; i < len; i++) {
      var rowValue = get(list[i], rowKey);
      if (keys.includes(rowValue)) {
        map[rowValue] = true;
      }
    }
    return map;
  }
  function getColumnDataByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children;
      if (columns[i].colKey === colKey) return columns[i];
      if ((_columns$i$children = columns[i].children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return t;
      }
    }
    return null;
  }
  function getColumnIndexByKey(columns, colKey) {
    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i$children2;
      if (columns[i].colKey === colKey) {
        return i;
      }
      if ((_columns$i$children2 = columns[i].children) !== null && _columns$i$children2 !== void 0 && _columns$i$children2.length) {
        var t = getColumnDataByKey(columns[i].children, colKey);
        if (t) return i;
      }
    }
    return -1;
  }
  function getColumnsResetValue(columns) {
    var resetValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;
      var col = columns[i];
      if (col.filter && "resetValue" in col.filter) {
        resetValue[col.colKey] = col.filter.resetValue;
      }
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnsResetValue(col.children, resetValue);
      }
    }
    return resetValue;
  }

  function ownKeys$w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$w(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useRowSelect(props, tableSelectedClasses) {
    var _toRefs = Vue.toRefs(props),
      selectedRowKeys = _toRefs.selectedRowKeys,
      columns = _toRefs.columns,
      rowKey = _toRefs.rowKey,
      data = _toRefs.data,
      reserveSelectedRowOnPaginate = _toRefs.reserveSelectedRowOnPaginate,
      pagination = _toRefs.pagination;
    var currentPaginateData = Vue.ref(pagination.value ? data.value.slice((pagination.value.current - 1) * pagination.value.pageSize, pagination.value.current * pagination.value.pageSize) : data.value);
    var selectedRowClassNames = Vue.ref();
    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSelectedRowKeys = _useDefaultValue2[0],
      setTSelectedRowKeys = _useDefaultValue2[1];
    var selectedRowDataMap = Vue.ref(/* @__PURE__ */new Map());
    var selectColumn = Vue.computed(function () {
      return props.columns.find(function (_ref) {
        var type = _ref.type;
        return ["multiple", "single"].includes(type);
      });
    });
    var selectionType = Vue.computed(function () {
      var _selectColumn$value;
      return props.rowSelectionType || ((_selectColumn$value = selectColumn.value) === null || _selectColumn$value === void 0 ? void 0 : _selectColumn$value.type) || "single";
    });
    var canSelectedRows = Vue.computed(function () {
      var currentData = reserveSelectedRowOnPaginate.value ? data.value : currentPaginateData.value;
      return currentData.filter(function (row, rowIndex) {
        return !isDisabled(row, rowIndex);
      });
    });
    var intersectionKeys = Vue.computed(function () {
      return intersection$1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
        return get(t, props.rowKey || "id");
      }));
    });
    var allowUncheck = Vue.computed(function () {
      var _selectColumn$value2, _selectColumn$value3;
      if (props.rowSelectionAllowUncheck) return true;
      var singleSelectCol = selectionType.value === "single";
      if (!singleSelectCol || !((_selectColumn$value2 = selectColumn.value) !== null && _selectColumn$value2 !== void 0 && _selectColumn$value2.checkProps) || !("allowUncheck" in ((_selectColumn$value3 = selectColumn.value) === null || _selectColumn$value3 === void 0 ? void 0 : _selectColumn$value3.checkProps))) return false;
      return selectColumn.value.checkProps.allowUncheck;
    });
    Vue.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
      var _selectColumn$value4;
      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
      };
      var disabledRowClass = (_selectColumn$value4 = selectColumn.value) !== null && _selectColumn$value4 !== void 0 && _selectColumn$value4.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys.value);
      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get(row, props.rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };
      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
    }, {
      immediate: true
    });
    Vue.watch(data, function () {
      currentPaginateData.value = data.value;
    });
    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
    }
    function getSelectedHeader() {
      return function () {
        var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
        var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
        return Vue.createVNode(Checkbox, {
          "checked": isChecked,
          "indeterminate": isIndeterminate,
          "disabled": !canSelectedRows.value.length,
          "onChange": handleSelectAll
        }, null);
      };
    }
    function getRowSelectDisabledData(p) {
      var col = p.col,
        row = p.row,
        rowIndex = p.rowIndex;
      var disabled = isFunction(col.disabled) ? col.disabled({
        row: row,
        rowIndex: rowIndex
      }) : col.disabled;
      var checkProps = isFunction(col.checkProps) ? col.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : col.checkProps;
      return {
        disabled: disabled || (checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled),
        checkProps: checkProps
      };
    }
    function renderSelectCell(p) {
      var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row;
      var checked = tSelectedRowKeys.value.includes(get(row, props.rowKey || "id"));
      var _getRowSelectDisabled = getRowSelectDisabledData(p),
        disabled = _getRowSelectDisabled.disabled,
        checkProps = _getRowSelectDisabled.checkProps;
      var selectBoxProps = _objectSpread$v(_objectSpread$v({
        checked: checked,
        disabled: disabled
      }, checkProps), {}, {
        onClick: function onClick(e) {
          if (_typeof$3(e) === "object" && "e" in e) {
            var _e$e;
            (_e$e = e.e) === null || _e$e === void 0 || _e$e.stopPropagation();
          } else {
            e === null || e === void 0 || e.stopPropagation();
          }
        },
        onChange: function onChange() {
          return handleSelectChange(row);
        }
      });
      if (column.type === "single") return Vue.createVNode(Radio, selectBoxProps, null);
      if (column.type === "multiple") {
        var _props$indeterminateS;
        var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get(row, props.rowKey)) : false;
        return Vue.createVNode(Checkbox, Vue.mergeProps({
          "indeterminate": isIndeterminate
        }, selectBoxProps), null);
      }
      return null;
    }
    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
      var reRowKey = props.rowKey || "id";
      var id = get(row, reRowKey);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;
      if (selectionType.value === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectionType.value === "single") {
        selectedRowKeys2 = isExisted && allowUncheck.value ? [] : [id];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }
      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: selectedRowKeys2.map(function (t) {
          return selectedRowDataMap.value.get(t);
        }),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }
    function handleSelectAll(checked) {
      var _selectedRowKeys$valu;
      var reRowKey = props.rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
        return get(record, reRowKey);
      });
      var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: checked ? allIds.map(function (t) {
          return selectedRowDataMap.value.get(t);
        }) : [],
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }
    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$v(_objectSpread$v({}, col), {}, {
        width: col.width || 64,
        className: [tableSelectedClasses.checkCell, col.className],
        cell: function cell(_, p) {
          return renderSelectCell(p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : col.title
      });
    }
    var onInnerSelectRowClick = function onInnerSelectRowClick(_ref3) {
      var row = _ref3.row,
        index = _ref3.index;
      var selectedColIndex = props.columns.findIndex(function (item) {
        return item.colKey === "row-select";
      });
      var disabled = false;
      if (selectedColIndex !== -1) {
        var _getRowSelectDisabled2;
        disabled = (_getRowSelectDisabled2 = getRowSelectDisabledData({
          row: row,
          rowIndex: index,
          col: props.columns[selectedColIndex],
          colIndex: selectedColIndex
        })) === null || _getRowSelectDisabled2 === void 0 ? void 0 : _getRowSelectDisabled2.disabled;
      }
      if (disabled) return;
      handleSelectChange(row);
    };
    Vue.watch([data, rowKey], function () {
      for (var i = 0, len = data.value.length; i < len; i++) {
        selectedRowDataMap.value.set(get(data.value[i], rowKey.value || "id"), data.value[i]);
      }
    }, {
      immediate: true
    });
    var showRowSelect = Vue.computed(function () {
      return Boolean(selectColumn.value || props.selectOnRowClick || props.selectedRowKeys);
    });
    var clearAllSelectedRowKeys = function clearAllSelectedRowKeys() {
      setTSelectedRowKeys([], {
        selectedRowData: [],
        currentRowKey: void 0,
        currentRowData: void 0,
        type: "uncheck"
      });
    };
    var handleRowSelectWithAreaSelection = function handleRowSelectWithAreaSelection(_ref4) {
      var activeRowList = _ref4.activeRowList,
        action = _ref4.action;
      if (!showRowSelect.value) return;
      if (action === "clear") {
        clearAllSelectedRowKeys();
        return;
      }
      if (action === "select-all") {
        handleSelectAll(true);
        return;
      }
      if (selectionType.value === "single") {
        if (action === "space-one-selection") {
          handleSelectChange(activeRowList[0].row);
        }
        return;
      }
      var validAreaSelection = activeRowList.filter(function (_ref5) {
        var row = _ref5.row,
          rowIndex = _ref5.rowIndex;
        return !getRowSelectDisabledData({
          row: row,
          rowIndex: rowIndex,
          col: selectColumn.value,
          colIndex: void 0
        }).disabled;
      });
      if (!validAreaSelection.length) return;
      var areaSelectionKeys = validAreaSelection.map(function (_ref6) {
        var row = _ref6.row;
        return get(row, props.rowKey);
      });
      var intersectionKeys2 = intersection$1(tSelectedRowKeys.value, areaSelectionKeys);
      var toCheck = intersectionKeys2.length !== areaSelectionKeys.length;
      var clearedKeys = tSelectedRowKeys.value.filter(function (key) {
        return !areaSelectionKeys.includes(key);
      });
      var newSelectedRowKeys = toCheck ? _toConsumableArray(new Set(tSelectedRowKeys.value.concat(areaSelectionKeys))) : clearedKeys;
      var currentRowData = action === "space-one-selection" ? activeRowList[0].row : void 0;
      setTSelectedRowKeys(newSelectedRowKeys, {
        selectedRowData: activeRowList,
        currentRowKey: get(currentRowData, props.rowKey),
        currentRowData: currentRowData,
        type: toCheck ? "check" : "uncheck"
      });
    };
    return {
      selectColumn: selectColumn,
      showRowSelect: showRowSelect,
      selectedRowClassNames: selectedRowClassNames,
      currentPaginateData: currentPaginateData,
      setTSelectedRowKeys: setTSelectedRowKeys,
      formatToRowSelectColumn: formatToRowSelectColumn,
      onInnerSelectRowClick: onInnerSelectRowClick,
      handleRowSelectWithAreaSelection: handleRowSelectWithAreaSelection
    };
  }

  function _isSlot$8(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var SorterButton = Vue.defineComponent({
    name: "TSorterButton",
    props: {
      sortType: {
        type: String,
        "default": "all"
      },
      sortOrder: {
        type: String,
        "default": function _default() {
          return "";
        }
      },
      locale: Object,
      sortIcon: Function,
      tooltipProps: Object,
      hideSortTips: Boolean
    },
    emits: ["sort-icon-click"],
    setup: function setup(props, context) {
      var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        negativeRotate180 = _useClassName.negativeRotate180;
      var renderTNode = useTNodeDefault();
      var _useConfig = useConfig("table", props.locale),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          ChevronDownIcon: TdChevronDownIcon
        }),
        ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;
      var allowSortTypes = Vue.computed(function () {
        return props.sortType === "all" ? ["asc", "desc"] : [props.sortType];
      });
      var onSortIconClick = function onSortIconClick(e, direction) {
        context.emit("sort-icon-click", e, {
          descending: direction === "desc"
        });
      };
      var getSortIcon = function getSortIcon(direction, activeClass) {
        var defaultIcon = t(globalConfig.value.sortIcon) || Vue.createVNode(ChevronDownIcon, null, null);
        var icon = renderTNode("sortIcon", defaultIcon);
        var sortClassName = [activeClass, tableSortClasses.sortIcon, tableSortClasses.iconDirection[direction], _defineProperty$2({}, negativeRotate180, direction === "asc")];
        return Vue.createVNode("span", {
          "class": sortClassName,
          "onClick": function onClick(e) {
            return onSortIconClick(e, direction);
          }
        }, [icon]);
      };
      return function () {
        var classes = [tableSortClasses.trigger, _defineProperty$2({}, tableSortClasses.doubleIcon, allowSortTypes.value.length > 1)];
        var tooltips = {
          asc: globalConfig.value.sortAscendingOperationText,
          desc: globalConfig.value.sortDescendingOperationText
        };
        var sortButton = allowSortTypes.value.map(function (direction) {
          var _slot;
          var _props$hideSortTips;
          var activeClass = direction === props.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
          var cancelTips = globalConfig.value.sortCancelOperationText;
          var tips = direction === props.sortOrder ? cancelTips : tooltips[direction];
          if ((_props$hideSortTips = props.hideSortTips) !== null && _props$hideSortTips !== void 0 ? _props$hideSortTips : globalConfig.value.hideSortTips) return getSortIcon(direction, activeClass);
          return Vue.createVNode(Tooltip, Vue.mergeProps({
            "content": tips,
            "placement": "right",
            "showArrow": false,
            "class": tableSortClasses.iconDirection[direction]
          }, props.tooltipProps), _isSlot$8(_slot = getSortIcon(direction, activeClass)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        });
        return Vue.createVNode("div", {
          "class": classes
        }, [sortButton]);
      };
    }
  });

  function ownKeys$v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$v(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useSorter(props, _ref) {
    var slots = _ref.slots;
    var _toRefs = Vue.toRefs(props),
      sort = _toRefs.sort,
      data = _toRefs.data;
    var originalData = Vue.ref();
    var _useDefaultValue = useDefaultValue(sort, props.defaultSort, props.onSortChange, "sort"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSortInfo = _useDefaultValue2[0],
      setTSortInfo = _useDefaultValue2[1];
    var _useDefaultValue3 = useDefaultValue(data, [], props.onDataChange, "data"),
      _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
      tData = _useDefaultValue4[0],
      setTData = _useDefaultValue4[1];
    var sorterFuncMap = Vue.computed(function () {
      return getSorterFuncMap(props.columns);
    });
    var innerSort = Vue.ref();
    var sortArray = Vue.computed(function () {
      var sort2 = tSortInfo.value;
      if (!sort2) return [];
      return isArray$1(sort2) ? sort2 : [sort2];
    });
    var sortMap = Vue.computed(function () {
      var sortMap2 = {};
      sortArray.value.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$u({
          index: index
        }, info);
      });
      return sortMap2;
    });
    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;
        var col = columns[i];
        if (isFunction(col.sorter)) {
          map[col.colKey] = col.sorter;
        }
        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }
      return map;
    }
    function handleDataSort(sortInfo) {
      var sort2 = sortInfo;
      if (!Object.keys(sorterFuncMap.value).length) return;
      if (!originalData.value) {
        originalData.value = tData.value;
      }
      var isEmptyArraySort = !sort2 || sort2 instanceof Array && !sort2.length;
      var isEmptyObjectSort = !(sort2 instanceof Array) && !(sort2 !== null && sort2 !== void 0 && sort2.sortBy);
      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData.value, {
          trigger: "sort"
        });
        return originalData.value;
      }
      var formatedSort = sort2 instanceof Array ? sort2 : [sort2];
      var newData = tData.value.slice().sort(function (a, b) {
        var sortResult = 0;
        for (var i = 0, len = formatedSort.length; i < len; i++) {
          var item = formatedSort[i];
          var sortFunc = sorterFuncMap.value[item.sortBy];
          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }
        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData.value)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }
    function handleSortHeaderClick(col, p) {
      var _props$onChange;
      var sortInfo;
      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort2 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
        sortInfo = getSingleNextSort(col, sort2, p);
      }
      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData.value;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
      innerSort.value = sortInfo;
    }
    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }
    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }
      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }
    function getMultipleNextSort(col, p) {
      if (!Array.isArray(tSortInfo.value)) {
        tSortInfo.value = tSortInfo.value ? [tSortInfo.value] : [];
      }
      var sort2 = tSortInfo.value;
      var colKey = col.colKey;
      var result = _toConsumableArray(sort2);
      for (var i = 0, len = sort2.length; i < len; i++) {
        if (sort2[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort2[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }
      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }
    function renderSortIcon(_ref2) {
      var _sortMap$value$col$co;
      var col = _ref2.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips,
        locale: props.locale
      };
      return Vue.createVNode(SorterButton, Vue.mergeProps(sorterButtonsProps, {
        "onSortIconClick": function onSortIconClick(_, p) {
          return handleSortHeaderClick(col, p);
        }
      }), {
        sortIcon: slots.sortIcon
      });
    }
    var isSortInfoSame = function isSortInfoSame(a, b) {
      var tmpSortInfo = isArray$1(a) ? a : [a];
      var tmpInnerSortInfo = isArray$1(b) ? b : [b];
      if (tmpSortInfo.length && !b) return false;
      var _loop = function _loop() {
          var item = tmpSortInfo[i];
          var result = tmpInnerSortInfo.find(function (t) {
            return t.sortBy === item.sortBy;
          });
          if (!result) return {
            v: false
          };
          return {
            v: item.descending === result.descending
          };
        },
        _ret;
      for (var i = 0, len = tmpSortInfo.length; i < len; i++) {
        _ret = _loop();
        if (_ret) return _ret.v;
      }
    };
    Vue.watch(function () {
      return [tSortInfo, props.data];
    }, function () {
      if (!tSortInfo.value || !Object.keys(tSortInfo.value).length || !tData.value.length) return;
      if (!isSortInfoSame(tSortInfo.value, innerSort.value)) {
        handleDataSort(tSortInfo.value);
      }
    }, {
      immediate: true
    });
    return {
      renderSortIcon: renderSortIcon
    };
  }

  function ownKeys$u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$u(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TableFilterController = Vue.defineComponent({
    name: "TableFilterController",
    props: {
      locale: Object,
      column: Object,
      colIndex: Number,
      tFilterValue: Object,
      innerFilterValue: Object,
      tableFilterClasses: Object,
      isFocusClass: String,
      primaryTableElement: {},
      popupProps: Object,
      attach: [String, Function],
      onVisibleChange: Function,
      filterIcon: [Function]
    },
    emits: ["inner-filter-change", "reset", "confirm"],
    setup: function setup(props, context) {
      var triggerElementRef = Vue.ref(null);
      var renderTNode = useTNodeDefault();
      var _useConfig = useConfig("table", props.locale),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          FilterIcon: TdFilterIcon
        }),
        FilterIcon = _useGlobalIcon.FilterIcon;
      var filterPopupVisible = Vue.ref(false);
      var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
        var _props$onVisibleChang;
        filterPopupVisible.value = visible;
        (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 || _props$onVisibleChang.call(props, visible);
      };
      var renderComponent = function renderComponent(column, filterComponentProps, component) {
        if (!component) return null;
        var isVueComponent = !!component.setup;
        if (isFunction(column.filter.component) && !isVueComponent) {
          return column.filter.component(function (v, b) {
            var tProps = _typeof$3(b) === "object" && "attrs" in b ? b.attrs : {};
            return Vue.h(v, {
              props: _objectSpread$t(_objectSpread$t({}, filterComponentProps), tProps)
            });
          });
        }
        var filter = column.filter || {};
        return Vue.createVNode(component, Vue.mergeProps({
          "class": filter.classNames,
          "style": filter.style
        }, filter.attrs, filterComponentProps), null);
      };
      var getFilterContent = function getFilterContent(column) {
        var _column$filter, _column$filter2, _column$filter3;
        var types = ["single", "multiple", "input"];
        if ((_column$filter = column.filter) !== null && _column$filter !== void 0 && _column$filter.type && !types.includes(column.filter.type)) {
          console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
          return;
        }
        var _props$innerFilterVal = props.innerFilterValue,
          innerFilterValue = _props$innerFilterVal === void 0 ? {} : _props$innerFilterVal;
        var component = {
          single: RadioGroup,
          multiple: CheckboxGroup,
          input: Input
        }[column.filter.type] || column.filter.component;
        if (!component && !column.filter.component) return;
        var filterComponentProps = _objectSpread$t(_objectSpread$t({
          options: ["single", "multiple"].includes(column.filter.type) ? (_column$filter2 = column.filter) === null || _column$filter2 === void 0 ? void 0 : _column$filter2.list : void 0
        }, ((_column$filter3 = column.filter) === null || _column$filter3 === void 0 ? void 0 : _column$filter3.props) || {}), {}, {
          onChange: function onChange(val, ctx) {
            var _column$filter$props, _column$filter4;
            context.emit("inner-filter-change", val, column);
            if ((_column$filter$props = column.filter.props) !== null && _column$filter$props !== void 0 && _column$filter$props.onChange) {
              var _column$filter$props$, _column$filter$props2;
              (_column$filter$props$ = (_column$filter$props2 = column.filter.props).onChange) === null || _column$filter$props$ === void 0 || _column$filter$props$.call(_column$filter$props2, val, ctx);
            }
            if ((_column$filter4 = column.filter) !== null && _column$filter4 !== void 0 && (_column$filter4 = _column$filter4.confirmEvents) !== null && _column$filter4 !== void 0 && _column$filter4.includes("onChange")) {
              filterPopupVisible.value = false;
            }
          }
        });
        if (column.colKey && innerFilterValue && column.colKey in innerFilterValue) {
          filterComponentProps.value = innerFilterValue === null || innerFilterValue === void 0 ? void 0 : innerFilterValue[column.colKey];
        }
        if (column.filter.confirmEvents) {
          column.filter.confirmEvents.forEach(function (event) {
            if (event === "onChange") return;
            filterComponentProps[event] = function () {
              context.emit("confirm", column);
              filterPopupVisible.value = false;
            };
          });
        }
        return Vue.createVNode("div", {
          "class": props.tableFilterClasses.contentInner
        }, [renderComponent(column, filterComponentProps, component)]);
      };
      var getBottomButtons = function getBottomButtons(column) {
        if (!column.filter.showConfirmAndReset) return;
        return Vue.createVNode("div", {
          "class": props.tableFilterClasses.bottomButtons
        }, [Vue.createVNode(Button, {
          "theme": "default",
          "size": "small",
          "onClick": function onClick() {
            context.emit("reset", column);
            filterPopupVisible.value = false;
          }
        }, {
          "default": function _default() {
            return [globalConfig.value.resetText];
          }
        }), Vue.createVNode(Button, {
          "theme": "primary",
          "size": "small",
          "onClick": function onClick() {
            context.emit("confirm", column);
            filterPopupVisible.value = false;
          }
        }, {
          "default": function _default() {
            return [globalConfig.value.confirmText];
          }
        })]);
      };
      var getContent = function getContent() {
        return Vue.createVNode("div", {
          "class": props.tableFilterClasses.popupContent
        }, [getFilterContent(props.column), getBottomButtons(props.column)]);
      };
      return function () {
        var _props$tFilterValue;
        if (!props.column.filter || props.column.filter && !Object.keys(props.column.filter).length) return null;
        var defaultFilterIcon = t(globalConfig.value.filterIcon) || Vue.createVNode(FilterIcon, null, null);
        var filterValue = (_props$tFilterValue = props.tFilterValue) === null || _props$tFilterValue === void 0 ? void 0 : _props$tFilterValue[props.column.colKey];
        var isObjectTrue = _typeof$3(filterValue) === "object" && !isEmpty(filterValue);
        var isValueExist = ![null, void 0, ""].includes(filterValue) && _typeof$3(filterValue) !== "object";
        return Vue.createVNode(Popup, Vue.mergeProps({
          "attach": props.attach || (props.primaryTableElement ? function () {
            return props.primaryTableElement;
          } : void 0),
          "visible": filterPopupVisible.value,
          "destroyOnClose": true,
          "trigger": "click",
          "placement": "bottom-right",
          "showArrow": true,
          "overlayClassName": props.tableFilterClasses.popup,
          "onVisibleChange": function onVisibleChange(val) {
            return onFilterPopupVisibleChange(val);
          },
          "class": [props.tableFilterClasses.icon, _defineProperty$2({}, props.isFocusClass, isObjectTrue || isValueExist)],
          "content": getContent
        }, props.popupProps), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "ref": triggerElementRef
            }, [renderTNode("filterIcon", {
              defaultNode: defaultFilterIcon,
              params: {
                col: props.column,
                colIndex: props.colIndex
              }
            })])];
          }
        });
      };
    }
  });

  function ownKeys$t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$t(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function isFilterValueExist(value) {
    var isArrayTrue = value instanceof Array && value.length;
    var isObject = _typeof$3(value) === "object" && !(value instanceof Array);
    var isObjectTrue = value !== null && isObject && Object.keys(value).length;
    return isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(value));
  }
  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      if (isFilterValueExist(item)) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }
  function useFilter(props, context) {
    var primaryTableRef = Vue.ref(null);
    var _useConfig = useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var renderTNode = useTNodeDefault();
    var _toRefs = Vue.toRefs(props),
      filterValue = _toRefs.filterValue,
      columns = _toRefs.columns;
    var _useClassName = useClassName(),
      tableFilterClasses = _useClassName.tableFilterClasses,
      isFocusClass = _useClassName.isFocusClass;
    var isTableOverflowHidden = Vue.ref();
    var _useDefaultValue = useDefaultValue(filterValue, props.defaultFilterValue, props.onFilterChange, "filterValue"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tFilterValue = _useDefaultValue2[0],
      setTFilterValue = _useDefaultValue2[1];
    var innerFilterValue = Vue.ref(tFilterValue.value);
    var hasEmptyCondition = Vue.computed(function () {
      var filterEmpty = filterEmptyData(tFilterValue.value || {});
      return !tFilterValue.value || !Object.keys(filterEmpty).length;
    });
    Vue.watch([tFilterValue], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        val = _ref2[0];
      innerFilterValue.value = val;
    });
    function renderFirstFilterRow() {
      var _props$pagination, _props$data;
      if (hasEmptyCondition.value) return null;
      var defaultNode = Vue.createVNode("div", {
        "class": tableFilterClasses.result
      }, [Vue.createVNode("span", null, [t(globalConfig.value.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      })]), Vue.createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "onClick": onResetAll
      }, {
        "default": function _default() {
          return [globalConfig.value.clearFilterResultButtonText];
        }
      })]);
      var filterContent = renderTNode("filterRow");
      if (props.filterRow && !filterContent || props.filterRow === null) return null;
      return Vue.createVNode("div", {
        "class": tableFilterClasses.inner
      }, [filterContent || defaultNode]);
    }
    function getFilterResultContent() {
      var arr = [];
      var columns2 = [];
      getAllColumns(props.columns, columns2);
      columns2.filter(function (col) {
        return col.filter;
      }).forEach(function (col, index) {
        var value = tFilterValue.value[col.colKey];
        if (col.filter.list && !["null"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }
        if (isFilterValueExist(value)) {
          var _col$filter, _col$filter2;
          var _label = isFunction((_col$filter = col.filter) === null || _col$filter === void 0 ? void 0 : _col$filter.label) ? col.filter.label(Vue.h) : (_col$filter2 = col.filter) === null || _col$filter2 === void 0 ? void 0 : _col$filter2.label;
          var title = renderTitle(context.slots, col, index);
          arr.push("".concat(_label || title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }
    function getAllColumns(col, columns2) {
      col.forEach(function (column) {
        if (column.children) {
          getAllColumns(column.children, columns2);
        }
        columns2.push(column);
      });
    }
    function onInnerFilterChange(val, column) {
      var filterValue2 = _objectSpread$s(_objectSpread$s({}, innerFilterValue.value), {}, _defineProperty$2({}, column.colKey, val));
      innerFilterValue.value = filterValue2;
      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue2, "filter-change", column);
      }
    }
    function emitFilterChange(filterValue2, trigger, column) {
      var _props$onChange;
      setTFilterValue(filterValue2, {
        col: column,
        trigger: trigger
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, {
        filter: filterValue2
      }, {
        trigger: "filter"
      });
    }
    function onReset(column) {
      var _ref3, _column$filter$resetV;
      var filterValue2 = _objectSpread$s(_objectSpread$s({}, tFilterValue.value), {}, _defineProperty$2({}, column.colKey, (_ref3 = (_column$filter$resetV = column.filter.resetValue) !== null && _column$filter$resetV !== void 0 ? _column$filter$resetV : {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type]) !== null && _ref3 !== void 0 ? _ref3 : ""));
      emitFilterChange(filterValue2, "reset", column);
    }
    function onResetAll() {
      var resetValue = getColumnsResetValue(columns.value);
      emitFilterChange(resetValue, "clear", void 0);
    }
    function onConfirm(column) {
      emitFilterChange(innerFilterValue.value, "confirm", column);
    }
    function renderFilterIcon(_ref4) {
      var _primaryTableRef$valu;
      var col = _ref4.col,
        colIndex = _ref4.colIndex;
      return Vue.createVNode(TableFilterController, {
        "column": col,
        "colIndex": colIndex,
        "filterIcon": props.filterIcon,
        "tFilterValue": tFilterValue.value,
        "innerFilterValue": innerFilterValue.value,
        "tableFilterClasses": tableFilterClasses,
        "isFocusClass": isFocusClass,
        "popupProps": col.filter.popupProps,
        "attach": props.attach,
        "locale": props.locale,
        "onReset": onReset,
        "onConfirm": onConfirm,
        "onInnerFilterChange": onInnerFilterChange,
        "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el,
        "onVisibleChange": onPopupVisibleChange
      }, {
        filterIcon: context.slots.filterIcon
      });
    }
    function setFilterPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }
    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden.value) {
        isTableOverflowHidden.value = !visible;
      }
    }
    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow,
      setFilterPrimaryTableRef: setFilterPrimaryTableRef
    };
  }

  /**!
   * Sortable 1.15.6
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$s(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys$s(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$s(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var version = "1.15.6";
  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }
  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };
  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function matches(/**HTMLElement*/el, /**String*/selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));
    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }
    return false;
  }
  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }
  function closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;
      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }
        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }
    return null;
  }
  var R_SPACE = /\s+/g;
  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }
  function css(el, prop, val) {
    var style = el && el.style;
    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }
        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }
        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }
  function matrix(el, selfOnly) {
    var appliedTransforms = '';
    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');
        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */
      } while (!selfOnly && (el = el.parentNode));
    }
    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */
    return matrixFn && new matrixFn(appliedTransforms);
  }
  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;
      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }
      return list;
    }
    return [];
  }
  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;
    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }

  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */
  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;
    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }
    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode;

      // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11
      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect();

            // Set relative to edges of padding box of container
            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */
        } while (container = container.parentNode);
      }
    }
    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;
      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }
    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }

  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */
  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];

    /* jshint boss:true */
    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;
      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }
      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }
    return false;
  }

  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */
  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
      i = 0,
      children = el.children;
    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }
        currentChild++;
      }
      i++;
    }
    return null;
  }

  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */
  function lastChild(el, selector) {
    var last = el.lastElementChild;
    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }
    return last || null;
  }

  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */
  function index(el, selector) {
    var index = 0;
    if (!el || !el.parentNode) {
      return -1;
    }

    /* jshint boss:true */
    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }
    return index;
  }

  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */
  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();
    if (el) {
      do {
        var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }
    return [offsetLeft, offsetTop];
  }

  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */
  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;
      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }
    return -1;
  }
  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;
    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);
        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */
    } while (elem = elem.parentNode);
    return getWindowScrollingElement();
  }
  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }
    return dst;
  }
  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }
  var _throttleTimeout;
  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
          _this = this;
        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }
        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }
  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }
  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }
  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;
    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }
  function getChildContainingRectFromElement(container, options, ghostEl) {
    var rect = {};
    Array.from(container.children).forEach(function (child) {
      var _rect$left, _rect$top, _rect$right, _rect$bottom;
      if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
      var childRect = getRect(child);
      rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
      rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
      rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
      rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
    });
    rect.width = rect.right - rect.left;
    rect.height = rect.bottom - rect.top;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  var expando = 'Sortable' + new Date().getTime();
  function AnimationStateManager() {
    var animationStates = [],
      animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });
          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

          // If animating: compensate for current animation
          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);
            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }
          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;
        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }
        var animating = false,
          animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);
          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }
          target.toRect = toRect;
          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
            // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          }

          // if fromRect != toRect: animate
          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;
            if (!time) {
              time = _this.options.animation;
            }
            _this.animate(target, animatingRect, toRect, time);
          }
          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);
        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }
        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }
  function repaint(target) {
    return target.offsetWidth;
  }
  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }
  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }
      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;
      this.eventCanceled = false;
      evt.cancel = function () {
        _this.eventCanceled = true;
      };
      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return;
        // Fire global events if it exists in this sortable
        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        }

        // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined
        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized;

        // Add default options from plugin
        _extends(defaults, initialized.defaults);
      });
      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);
        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;
        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return;

        // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };
  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }
    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }
    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }
    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }
  var _excluded$1 = ["evt"];
  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded$1);
    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };
  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }
  var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
    ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)

    _silent = false,
    savedInputChecked = [];

  /** @const */
  var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
    supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
      if (!documentExists) return;
      // false when <= IE11
      if (IE11OrLess) {
        return false;
      }
      var el = document.createElement('x');
      el.style.cssText = 'pointer-events:auto';
      return el.style.pointerEvents === 'auto';
    }(),
    _detectDirection = function _detectDirection(el, options) {
      var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
      if (elCSS.display === 'flex') {
        return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
      }
      if (elCSS.display === 'grid') {
        return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
      }
      if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
        var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
        return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
      }
      return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
    },
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
      var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
      return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
    },
    /**
     * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
     * @param  {Number} x      X position
     * @param  {Number} y      Y position
     * @return {HTMLElement}   Element of the first found nearest Sortable
     */
    _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
      var ret;
      sortables.some(function (sortable) {
        var threshold = sortable[expando].options.emptyInsertThreshold;
        if (!threshold || lastChild(sortable)) return;
        var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
        if (insideHorizontally && insideVertically) {
          return ret = sortable;
        }
      });
      return ret;
    },
    _prepareGroup = function _prepareGroup(options) {
      function toFn(value, pull) {
        return function (to, from, dragEl, evt) {
          var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
          if (value == null && (pull || sameGroup)) {
            // Default pull value
            // Default pull and put value if same group
            return true;
          } else if (value == null || value === false) {
            return false;
          } else if (pull && value === 'clone') {
            return value;
          } else if (typeof value === 'function') {
            return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
          } else {
            var otherGroup = (pull ? to : from).options.group.name;
            return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
          }
        };
      }
      var group = {};
      var originalGroup = options.group;
      if (!originalGroup || _typeof(originalGroup) != 'object') {
        originalGroup = {
          name: originalGroup
        };
      }
      group.name = originalGroup.name;
      group.checkPull = toFn(originalGroup.pull, true);
      group.checkPut = toFn(originalGroup.put);
      group.revertClone = originalGroup.revertClone;
      options.group = group;
    },
    _hideGhostForTarget = function _hideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', 'none');
      }
    },
    _unhideGhostForTarget = function _unhideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', '');
      }
    };

  // #1184 fix - Prevent click event on fallback if dragged but item not changed position
  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }
  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;
      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
      if (nearest) {
        // Create imitation event
        var event = {};
        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }
        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;
        nearest[expando]._onDragOver(event);
      }
    }
  };
  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };

  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */
  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }
    this.el = el; // root element
    this.options = options = _extends({}, options);

    // Export instance
    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      // Disabled on Safari: #1571; Enabled on Safari IOS: #2244
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && (!Safari || IOS),
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults);

    // Set default options
    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }
    _prepareGroup(options);

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    // Setup drag mode
    this.nativeDraggable = options.forceFallback ? false : supportDraggable;
    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    }

    // Bind events
    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }
    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }
    sortables.push(this.el);

    // Restore sorting
    options.store && options.store.get && this.sort(options.store.get(this) || []);

    // Add animation state manager
    _extends(this, AnimationStateManager());
  }
  Sortable.prototype = /** @lends Sortable.prototype */{
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(/** Event|TouchEvent */evt) {
      if (!evt.cancelable) return;
      var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;
      _saveInputCheckedState(el);

      // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
      if (dragEl) {
        return;
      }
      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      }

      // cancel dnd if original target is content editable
      if (originalTarget.isContentEditable) {
        return;
      }

      // Safari ignores further event handling after mousedown
      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }
      target = closest(target, options.draggable, el, false);
      if (target && target.animated) {
        return;
      }
      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      }

      // Get the index of the dragged element within its parent
      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable);

      // Check filter
      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);
          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });
            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });
        if (filter) {
          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      }
      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      }

      // Prepare `dragstart`
      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(/** Event */evt, /** Touch */touch, /** HTMLElement */target) {
      var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;
      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';
        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });
          if (Sortable.eventCanceled) {
            _this._onDrop();
            return;
          }
          // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove
          _this._disableDelayedDragEvents();
          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          }

          // Bind the events: dragstart/dragend
          _this._triggerDragStart(evt, touch);

          // Drag start event
          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          });

          // Chosen item
          toggleClass(dragEl, options.chosenClass, true);
        };

        // Disable "draggable"
        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        if (options.supportPointer) {
          on(ownerDocument, 'pointerup', _this._onDrop);
          // Native D&D triggers pointercancel
          !this.nativeDraggable && on(ownerDocument, 'pointercancel', _this._onDrop);
        } else {
          on(ownerDocument, 'mouseup', _this._onDrop);
          on(ownerDocument, 'touchend', _this._onDrop);
          on(ownerDocument, 'touchcancel', _this._onDrop);
        }

        // Make dragEl draggable (must be before delay for FireFox)
        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }
        pluginEvent('delayStart', this, {
          evt: evt
        });

        // Delay is impossible for native DnD in Edge or IE
        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();
            return;
          }
          // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag
          if (options.supportPointer) {
            on(ownerDocument, 'pointerup', _this._disableDelayedDrag);
            on(ownerDocument, 'pointercancel', _this._disableDelayedDrag);
          } else {
            on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
            on(ownerDocument, 'touchend', _this._disableDelayedDrag);
            on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          }
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(/** TouchEvent|PointerEvent **/e) {
      var touch = e.touches ? e.touches[0] : e;
      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);
      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'pointerup', this._disableDelayedDrag);
      off(ownerDocument, 'pointercancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(/** Event */evt, /** Touch */touch) {
      touch = touch || evt.pointerType == 'touch' && evt;
      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }
      try {
        if (document.selection) {
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;
      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });
        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }
        var options = this.options;

        // Apply effect
        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost();

        // Drag start event
        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;
        _hideGhostForTarget();
        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;
        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }
        dragEl.parentNode[expando]._isOutsideThisEl(target);
        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });
              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }
            target = parent; // store last element
          }
          /* jshint boss:true */ while (parent = getParentOrHost(parent));
        }
        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(/**TouchEvent*/evt) {
      if (tapEvt) {
        var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

        // only set the status to dragging, when we are actually dragging
        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }
          this._onDragStart(evt, true);
        }
        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }
          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }
        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options;

        // Position absolutely
        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;
          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }
          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }
          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }
        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl);

        // Set transform-origin
        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(/**Event*/evt, /**boolean*/fallback) {
      var _this = this;
      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });
      if (Sortable.eventCanceled) {
        this._onDrop();
        return;
      }
      pluginEvent('setupClone', this);
      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';
        this._hideClone();
        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      }

      // #1143: IFrame support workaround
      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;
        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }
        _this._hideClone();
        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true);

      // Set proper drop events
      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);
        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }
        on(document, 'drop', _this);

        // #1276 fix:
        css(dragEl, 'transform', 'translateZ(0)');
      }
      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;
      window.getSelection().removeAllRanges();
      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(/**Event*/evt) {
      var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;
      if (_silent) return;
      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      }

      // Capture animation state
      function capture() {
        dragOverEvent('dragOverAnimationCapture');
        _this.captureAnimationState();
        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      }

      // Return invocation when dragEl is inserted (or completed)
      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });
        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }
          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }
          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          }

          // Animation
          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }
          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });
          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        }

        // Null lastTarget if it is not inside a previously swapped element
        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        }

        // no bubbling and not fallback
        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

          // Do not detect for empty insert if already inserted
          !insertion && nearestEmptyInsertDetectEvent(evt);
        }
        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      }

      // Call when dragEl has been inserted
      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }
      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }
      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;
      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }
      ignoreNextClick = false;
      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;
        if (revert) {
          parentEl = rootEl; // actualization
          capture();
          this._hideClone();
          dragOverEvent('revert');
          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }
          return completed(true);
        }
        var elLastChild = lastChild(el, options.draggable);
        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list

          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          }

          // if there is a last element, it is the target
          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }
          if (target) {
            targetRect = getRect(target);
          }
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);
          if (firstChild === dragEl) {
            return completed(false);
          }
          target = firstChild;
          targetRect = getRect(target);
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }
          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;
          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);
            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          }
          // If dragEl is already beside target: Do not insert
          if (direction === 0 || sibling === target) {
            return completed(false);
          }
          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
            after = false;
          after = direction === 1;
          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }
            _silent = true;
            setTimeout(_unsilent, 30);
            capture();
            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            }

            // Undo chrome's scroll adjustment (has no effect on other browsers)
            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }
            parentEl = dragEl.parentNode; // actualization

            // must be done before animation
            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }
            changed();
            return completed(true);
          }
        }
        if (el.contains(dragEl)) {
          return completed(false);
        }
      }
      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'pointercancel', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(/**Event*/evt) {
      var el = this.el,
        options = this.options;

      // Get the index of the dragged element within its parent
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode;

      // Get again after plugin event
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      if (Sortable.eventCanceled) {
        this._nulling();
        return;
      }
      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);
      _cancelNextTick(this.cloneId);
      _cancelNextTick(this._dragStartId);

      // Unbind events
      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }
      this._offMoveEvents();
      this._offUpEvents();
      if (Safari) {
        css(document.body, 'user-select', '');
      }
      css(dragEl, 'transform', '');
      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }
        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }
        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }
          _disableDraggable(dragEl);
          dragEl.style['will-change'] = '';

          // Remove classes
          // ghostClass is added in dragStarted
          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }
          toggleClass(dragEl, this.options.chosenClass, false);

          // Drag stop event
          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });
          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              // Remove event
              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              });

              // drag from one list and drop into another
              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }
          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }
            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            });

            // Save sorting
            this.save();
          }
        }
      }
      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(/**Event*/evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);
          break;
        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);
            _globalDragOver(evt);
          }
          break;
        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },
    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;
      for (; i < n; i++) {
        el = children[i];
        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }
      return order;
    },
    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
        rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];
        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },
    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },
    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;
      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);
        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }
        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },
    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);
      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      }
      // Remove draggable attributes
      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });
      this._onDrop();
      this._disableDelayedDragEvents();
      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');
        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }
        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();
        return;
      }
      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return;

        // show clone at dragEl or original position
        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }
        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }
        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };
  function _globalDragOver(/**Event*/evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }
    evt.cancelable && evt.preventDefault();
  }
  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal;
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }
    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);
    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }
    return retVal;
  }
  function _disableDraggable(el) {
    el.draggable = false;
  }
  function _unsilent() {
    _silent = false;
  }
  function _ghostIsFirst(evt, vertical, sortable) {
    var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
  }
  function _ghostIsLast(evt, vertical, sortable) {
    var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
  }
  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;
    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }
        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }
    invert = invert || invertSwap;
    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }
    return 0;
  }

  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */
  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }

  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */
  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;
    while (i--) {
      sum += str.charCodeAt(i);
    }
    return sum.toString(36);
  }
  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;
    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }
  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }
  function _cancelNextTick(id) {
    return clearTimeout(id);
  }

  // Fixed #973:
  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  }

  // Export utils
  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild,
    expando: expando
  };

  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */
  Sortable.get = function (element) {
    return element[expando];
  };

  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */
  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }
    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }
      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };

  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */
  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  };

  // Export
  Sortable.version = version;
  var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;
  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      };

      // Bind all private methods
      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }
    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;
        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent;
        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }
        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;
        var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt;

        // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good
        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback);

          // Listener for pointer element change
          var ogElemScroller = getParentAutoScrollElement(elem, true);
          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval();
            // Detect for pointer elem change, emulating native DnD behaviour
            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }
              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }
          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }
  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }
  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }
  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
      scrollCustomFn;

    // New scroll root, set scrollEl
    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;
      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }
    var layersOut = 0;
    var currentParent = scrollEl;
    do {
      var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;
      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }
      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }
      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);
        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */
          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
            }
            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }
            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }
      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);
  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();
    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };
  function Revert() {}
  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();
      if (putSortable) {
        putSortable.captureAnimationState();
      }
      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }
      this.sortable.animateAll();
      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };
  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });
  function Remove() {}
  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };
  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });
  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);
    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }
    return newData;
  }

  function ownKeys$r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$r(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function removeNode(node) {
    if (node.parentElement !== null) {
      node.parentElement.removeChild(node);
    }
  }
  function insertNodeAt(fatherNode, node, position) {
    var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;
    fatherNode.insertBefore(node, refNode);
  }
  function useDragSort(props, context, params) {
    var _toRefs = Vue.toRefs(props),
      sortOnRowDraggable = _toRefs.sortOnRowDraggable,
      dragSort = _toRefs.dragSort,
      data = _toRefs.data;
    var innerPagination = Vue.ref(props.pagination);
    var _useClassName = useClassName(),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass,
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableExpandClasses = _useClassName.tableExpandClasses;
    var columns = Vue.ref(props.columns || []);
    var primaryTableRef = Vue.ref(null);
    var dragCol = Vue.computed(function () {
      return columns.value.find(function (item) {
        return item.colKey === "drag";
      });
    });
    var isRowDraggable = Vue.computed(function () {
      return sortOnRowDraggable.value || ["row", "row-handler-col"].includes(dragSort.value);
    });
    var isRowHandlerDraggable = Vue.computed(function () {
      return ["row-handler", "row-handler-col"].includes(dragSort.value) && !!dragCol.value;
    });
    var isColDraggable = Vue.computed(function () {
      return ["col", "row-handler-col"].includes(dragSort.value);
    });
    if (props.sortOnRowDraggable) {
      log.error("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
    }
    function getDataPageIndex(index, pagination) {
      var _pagination$current, _pagination$pageSize;
      var current = (_pagination$current = pagination.current) !== null && _pagination$current !== void 0 ? _pagination$current : pagination.defaultCurrent;
      var pageSize = (_pagination$pageSize = pagination.pageSize) !== null && _pagination$pageSize !== void 0 ? _pagination$pageSize : pagination.defaultPageSize;
      if (!props.disableDataPage && pagination && data.value.length > pageSize) {
        return pageSize * (current - 1) + index;
      }
      return index;
    }
    var registerRowDragEvent = function registerRowDragEvent(element) {
      var _element$children;
      if ((element === null || element === void 0 || (_element$children = element.children) === null || _element$children === void 0 ? void 0 : _element$children.length) === 0 || !isRowHandlerDraggable.value && !isRowDraggable.value) return;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");
      if (!dragContainer) {
        console.error("tbody does not exist.");
        return null;
      }
      var baseOptions = _objectSpread$r({
        animation: 150,
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        filter: ".".concat(tableFullRowClasses.base, ",.").concat(tableExpandClasses.row),
        onMove: function onMove(evt) {
          return !hasClass(evt.related, tableFullRowClasses.base);
        },
        onEnd: function onEnd(evt) {
          var _props$onDragSort;
          if (evt.newIndex === evt.oldIndex) return;
          removeNode(evt.item);
          insertNodeAt(evt.from, evt.item, evt.oldIndex);
          var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
          if (isFunction(props.firstFullRow) && props.firstFullRow(Vue.h) || context.slots.firstFullRow || context.slots["first-full-row"]) {
            currentIndex -= 1;
            targetIndex -= 1;
          }
          if (innerPagination.value) {
            currentIndex = getDataPageIndex(currentIndex, innerPagination.value);
            targetIndex = getDataPageIndex(targetIndex, innerPagination.value);
          }
          var params2 = {
            data: data.value,
            currentIndex: currentIndex,
            current: data.value[currentIndex],
            targetIndex: targetIndex,
            target: data.value[targetIndex],
            newData: swapDragArrayElement(_toConsumableArray(props.data), currentIndex, targetIndex),
            e: evt,
            sort: "row"
          };
          params2.currentData = params2.newData;
          (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 || _props$onDragSort.call(props, params2);
        }
      }, props.dragSortOptions);
      if (!dragContainer) return;
      if (isRowDraggable.value) {
        new Sortable(dragContainer, _objectSpread$r({}, baseOptions));
      } else {
        new Sortable(dragContainer, _objectSpread$r(_objectSpread$r({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }
    };
    var registerOneLevelColDragEvent = function registerOneLevelColDragEvent(container, recover) {
      var options = _objectSpread$r({
        animation: 150,
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _props$onDragSort2;
          if (evt.newIndex === evt.oldIndex) return;
          if (recover) {
            removeNode(evt.item);
            insertNodeAt(evt.from, evt.item, evt.oldIndex);
          }
          var oldIndex = evt.oldIndex,
            newIndex = evt.newIndex,
            targetElement = evt.target;
          var currentIndex = recover ? oldIndex : newIndex;
          var targetIndex = recover ? newIndex : oldIndex;
          var oldElement = targetElement.children[currentIndex];
          var newElement = targetElement.children[targetIndex];
          var current = getColumnDataByKey(columns.value, oldElement.dataset.colkey);
          var target = getColumnDataByKey(columns.value, newElement.dataset.colkey);
          if (!current || !current.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
          }
          if (!target || !target.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
          }
          currentIndex = getColumnIndexByKey(props.columns, current.colKey);
          targetIndex = getColumnIndexByKey(props.columns, target.colKey);
          var params2 = {
            data: columns.value,
            currentIndex: currentIndex,
            current: current,
            targetIndex: targetIndex,
            target: target,
            newData: swapDragArrayElement(_toConsumableArray(props.columns), currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          params2.currentData = params2.newData;
          (_props$onDragSort2 = props.onDragSort) === null || _props$onDragSort2 === void 0 || _props$onDragSort2.call(props, params2);
        }
      }, props.dragSortOptions);
      if (!container) return;
      new Sortable(container, options);
    };
    var registerColDragEvent = function registerColDragEvent(tableElement) {
      if (!isColDraggable.value || !tableElement) return;
      var trList = tableElement.querySelectorAll("thead > tr");
      if (trList.length <= 1) {
        var _trList = _slicedToArray(trList, 1),
          container = _trList[0];
        registerOneLevelColDragEvent(container, true);
      } else {
        trList === null || trList === void 0 || trList.forEach(function (container) {
          registerOneLevelColDragEvent(container, false);
        });
      }
    };
    function setDragSortPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }
    function setDragSortColumns(val) {
      columns.value = val;
    }
    Vue.watch([primaryTableRef, columns, dragSort, params], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 4),
        val = _ref2[0];
        _ref2[1];
        _ref2[2];
        var params2 = _ref2[3];
      register(val, params2);
    });
    function register(val, params2) {
      var primaryTableCmp = val;
      if (!val || !primaryTableCmp.$el || !params2.showElement) return;
      var timerA = setTimeout(function () {
        registerRowDragEvent(primaryTableCmp.$el);
        registerColDragEvent(primaryTableCmp.$el);
        var timer = setTimeout(function () {
          if (primaryTableCmp.$refs.affixHeaderRef) {
            registerColDragEvent(primaryTableCmp.$refs.affixHeaderRef);
          }
          clearTimeout(timer);
        });
        clearTimeout(timerA);
      }, 60);
    }
    return {
      innerPagination: innerPagination,
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortPrimaryTableRef: setDragSortPrimaryTableRef,
      setDragSortColumns: setDragSortColumns
    };
  }

  function useAsyncLoading(props) {
    var renderTNode = useTNodeJSX();
    var _useConfig = useConfig("table", props.locale),
      globalConfig = _useConfig.globalConfig;
    var _useClassName = useClassName(),
      isLoadingClass = _useClassName.isLoadingClass,
      isLoadMoreClass = _useClassName.isLoadMoreClass,
      asyncLoadingClass = _useClassName.asyncLoadingClass;
    var classes = Vue.computed(function () {
      return [asyncLoadingClass, _defineProperty$2(_defineProperty$2({}, isLoadingClass, props.asyncLoading === "loading"), isLoadMoreClass, props.asyncLoading === "load-more")];
    });
    function onLoadClick() {
      var _props$onAsyncLoading;
      if (!isString(props.asyncLoading)) return;
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 || _props$onAsyncLoading.call(props, {
        status: props.asyncLoading
      });
    }
    function renderAsyncLoading() {
      var asyncLoadingNode = renderTNode("asyncLoading");
      if (isString(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": globalConfig.value.loadingMoreText,
          loading: globalConfig.value.loadingText
        }[String(asyncLoading)];
        return Vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [Vue.createVNode(Loading, {
          "indicator": asyncLoading === "loading",
          "loading": !!asyncLoading,
          "size": "small",
          "text": loadingText
        }, null)]);
      }
      if (![null, false, void 0].includes(asyncLoadingNode)) {
        return Vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [asyncLoadingNode]);
      }
      return null;
    }
    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  function _toArray(r) {
    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$7(r) || _nonIterableRest();
  }

  function ownKeys$q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$q(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var EditableCell = Vue.defineComponent({
    name: "TableEditableCell",
    props: {
      row: Object,
      rowKey: String,
      rowIndex: Number,
      col: Object,
      colIndex: Number,
      oldCell: [Function, String],
      tableBaseClass: Object,
      cellEmptyContent: [Function, String],
      editable: {
        type: Boolean,
        "default": void 0
      },
      readonly: {
        type: Boolean
      },
      errors: {
        type: Array,
        "default": void 0
      },
      onChange: Function,
      onValidate: Function,
      onRuleChange: Function,
      onEditableChange: Function
    },
    emits: ["update-edited-cell"],
    setup: function setup(props, context) {
      var _props$col$edit;
      var _toRefs = Vue.toRefs(props),
        row = _toRefs.row,
        col = _toRefs.col;
      Vue.ref(null);
      var isKeepEditMode = Vue.computed(function () {
        var _col$value$edit;
        return (_col$value$edit = col.value.edit) === null || _col$value$edit === void 0 ? void 0 : _col$value$edit.keepEditMode;
      });
      var isEdit = Vue.ref(isKeepEditMode.value || ((_props$col$edit = props.col.edit) === null || _props$col$edit === void 0 ? void 0 : _props$col$edit.defaultEditable) || false);
      var editValue = Vue.ref();
      var errorList = Vue.ref();
      var classPrefix = usePrefixClass();
      var _useGlobalIcon = useGlobalIcon({
          Edit1Icon: TdEdit1Icon
        }),
        Edit1Icon = _useGlobalIcon.Edit1Icon;
      var updateEditedCellValue = function updateEditedCellValue(obj) {
        if (_typeof$3(obj) === "object" && ("rowValue" in obj || obj.isUpdateCurrentRow)) {
          var rowValue = obj.isUpdateCurrentRow ? get(row.value, props.rowKey) : obj.rowValue;
          delete obj.rowValue;
          delete obj.isUpdateCurrentRow;
          context.emit("update-edited-cell", rowValue, row.value, obj);
        } else {
          editValue.value = obj;
        }
      };
      Vue.watch([isKeepEditMode], function (val) {
        if (val) {
          isEdit.value = true;
        }
      });
      var editOnListeners = Vue.computed(function () {
        var _col$value$edit2, _col$value$edit2$on;
        return ((_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 || (_col$value$edit2$on = _col$value$edit2.on) === null || _col$value$edit2$on === void 0 ? void 0 : _col$value$edit2$on.call(_col$value$edit2, _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
          editedRow: currentRow.value,
          updateEditedCellValue: updateEditedCellValue
        }))) || {};
      });
      var cellParams = Vue.computed(function () {
        return {
          rowIndex: props.rowIndex,
          colIndex: props.colIndex,
          col: props.col,
          row: props.row
        };
      });
      var currentRow = Vue.computed(function () {
        var colKey = col.value.colKey;
        var _ref = colKey.split(".") || [],
          _ref2 = _toArray(_ref),
          firstKey = _ref2[0],
          restKeys = _ref2.slice(1);
        var newRow = _objectSpread$q({}, row.value);
        if (restKeys.length) {
          newRow[firstKey] = cloneDeep(row.value[firstKey]);
          set(newRow[firstKey], restKeys.join("."), editValue.value);
        } else {
          set(newRow, colKey, editValue.value);
        }
        return newRow;
      });
      var cellNode = Vue.computed(function () {
        var node = renderCell({
          row: currentRow.value,
          col: _objectSpread$q(_objectSpread$q({}, col.value), {}, {
            cell: props.oldCell
          }),
          rowIndex: props.rowIndex,
          colIndex: props.colIndex
        }, context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        return node;
      });
      var editProps = Vue.computed(function () {
        var edit = col.value.edit;
        return isFunction(edit.props) ? edit.props(_objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
          editedRow: currentRow.value,
          updateEditedCellValue: updateEditedCellValue
        })) : _objectSpread$q({}, edit.props);
      });
      var componentProps = Vue.computed(function () {
        var _edit$abortEditOnEven;
        var edit = col.value.edit;
        if (!edit) return {};
        var tmpProps = _objectSpread$q({}, editProps.value);
        delete tmpProps.onChange;
        delete tmpProps.value;
        (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 || _edit$abortEditOnEven.forEach(function (item) {
          delete tmpProps[item];
        });
        return tmpProps;
      });
      var isAbortEditOnChange = Vue.computed(function () {
        var _edit$abortEditOnEven2;
        var edit = col.value.edit;
        if (!edit) return false;
        return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
      });
      var validateEdit = function validateEdit(trigger) {
        return new Promise(function (resolve) {
          var params = {
            result: [_objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
              errorList: [],
              value: editValue.value
            })],
            trigger: trigger
          };
          var rules = isFunction(col.value.edit.rules) ? col.value.edit.rules(cellParams.value) : col.value.edit.rules;
          if (!col.value.edit || !rules || !rules.length) {
            var _props$onValidate;
            (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, params);
            resolve(true);
            return;
          }
          validate(editValue.value, rules).then(function (result) {
            var _props$onValidate2;
            var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
              return !t.result;
            });
            params.result[0].errorList = list;
            (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, params);
            if (!list || !list.length) {
              errorList.value = [];
              resolve(true);
            } else {
              errorList.value = list;
              resolve(list);
            }
          });
        });
      };
      var isSame = function isSame(a, b) {
        if (isObject(a) && isObject(b)) {
          return JSON.stringify(a) === JSON.stringify(b);
        }
        return a === b;
      };
      var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent, eventName) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        validateEdit("self").then(function (result) {
          var _editOnListeners$valu, _editOnListeners$valu2;
          if (result !== true) return;
          var oldValue = get(row.value, col.value.colKey);
          if (!isSame(editValue.value, oldValue)) {
            editValue.value = oldValue;
            outsideAbortEvent === null || outsideAbortEvent === void 0 || outsideAbortEvent.apply(void 0, args);
          }
          (_editOnListeners$valu = (_editOnListeners$valu2 = editOnListeners.value)[eventName]) === null || _editOnListeners$valu === void 0 || _editOnListeners$valu.call(_editOnListeners$valu2, args[2]);
          var timer = setTimeout(function () {
            var _props$onEditableChan;
            if (!isKeepEditMode.value) {
              isEdit.value = false;
            }
            errorList.value = [];
            (_props$onEditableChan = props.onEditableChange) === null || _props$onEditableChan === void 0 || _props$onEditableChan.call(props, _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
              value: editValue.value,
              editedRow: _objectSpread$q(_objectSpread$q({}, props.row), {}, _defineProperty$2({}, props.col.colKey, editValue.value)),
              validateEdit: validateEdit,
              isEdit: false
            }));
            clearTimeout(timer);
          }, 0);
        });
      };
      var listeners = Vue.computed(function () {
        var _edit$abortEditOnEven3;
        var edit = col.value.edit;
        var isCellEditable = props.editable === void 0;
        if (!isEdit.value || !isCellEditable) return;
        if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
        var tListeners = {};
        var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
        edit.abortEditOnEvent.forEach(function (itemEvent) {
          if (itemEvent === "onChange") return;
          tListeners[itemEvent] = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            updateAndSaveAbort.apply(void 0, [outsideAbortEvent, itemEvent, _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
              trigger: itemEvent,
              newRowData: currentRow.value
            })].concat(args));
          };
        });
        return tListeners;
      });
      var onEditChange = function onEditChange(val) {
        var _editProps$value, _editProps$value$onCh, _props$onChange, _props$onRuleChange, _editOnListeners$valu3, _editOnListeners$valu4, _col$value$edit4;
        editValue.value = val;
        var params = _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
          value: val,
          editedRow: _objectSpread$q(_objectSpread$q({}, props.row), {}, _defineProperty$2({}, props.col.colKey, val))
        });
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        (_editProps$value = editProps.value) === null || _editProps$value === void 0 || (_editProps$value$onCh = _editProps$value.onChange) === null || _editProps$value$onCh === void 0 || _editProps$value$onCh.call.apply(_editProps$value$onCh, [_editProps$value, val].concat(args));
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, params);
        (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 || _props$onRuleChange.call(props, params);
        (_editOnListeners$valu3 = editOnListeners.value) === null || _editOnListeners$valu3 === void 0 || (_editOnListeners$valu4 = _editOnListeners$valu3.onChange) === null || _editOnListeners$valu4 === void 0 || _editOnListeners$valu4.call(_editOnListeners$valu3, params);
        var isCellEditable = props.editable === void 0;
        if (isCellEditable && isAbortEditOnChange.value) {
          var _col$value$edit3;
          var outsideAbortEvent = (_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.onEdited;
          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, "change", _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
            trigger: "onChange",
            newRowData: currentRow.value
          })].concat(args));
        }
        if (((_col$value$edit4 = col.value.edit) === null || _col$value$edit4 === void 0 ? void 0 : _col$value$edit4.validateTrigger) === "change") {
          validateEdit("self");
        }
      };
      var documentClickHandler = function documentClickHandler(e) {
        var _e$composedPath;
        if (!col.value.edit || !col.value.edit.component) return;
        if (!isEdit.value) return;
        var path = ((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e)) || e.path || [];
        var node = path.find(function (node2) {
          var _node2$classList;
          return (_node2$classList = node2.classList) === null || _node2$classList === void 0 ? void 0 : _node2$classList.contains("".concat(classPrefix.value, "-popup__content"));
        });
        if (node) return;
        var outsideAbortEvent = col.value.edit.onEdited;
        updateAndSaveAbort(outsideAbortEvent, "", _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
          trigger: "document",
          newRowData: currentRow.value
        }));
      };
      var enterEdit = function enterEdit() {
        var _props$onEditableChan2;
        (_props$onEditableChan2 = props.onEditableChange) === null || _props$onEditableChan2 === void 0 || _props$onEditableChan2.call(props, _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
          value: editValue.value,
          editedRow: props.row,
          isEdit: true,
          validateEdit: validateEdit
        }));
      };
      var onCellClick = function onCellClick(e) {
        isEdit.value = true;
        enterEdit();
        e.stopPropagation();
      };
      Vue.onMounted(function () {
        var _props$col$edit2;
        if ((_props$col$edit2 = props.col.edit) !== null && _props$col$edit2 !== void 0 && _props$col$edit2.defaultEditable) {
          enterEdit();
        }
      });
      var cellValue = Vue.computed(function () {
        return get(row.value, col.value.colKey);
      });
      Vue.watch(cellValue, function (cellValue2) {
        editValue.value = cellValue2;
      }, {
        immediate: true
      });
      Vue.watch(isEdit, function (isEdit2) {
        var isCellEditable = props.editable === void 0;
        if (!col.value.edit || !col.value.edit.component || !isCellEditable) return;
        if (isEdit2) {
          on$1(document, "click", documentClickHandler);
        } else {
          off$1(document, "click", documentClickHandler);
        }
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return [props.editable, props.row, props.col, props.rowIndex, props.colIndex];
      }, function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
          editable = _ref4[0];
        if (editable === false) {
          editValue.value = cellValue.value;
        } else if (editable === true) {
          var _props$onRuleChange2;
          (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 || _props$onRuleChange2.call(props, _objectSpread$q(_objectSpread$q({}, cellParams.value), {}, {
            value: cellValue.value,
            editedRow: row.value
          }));
        }
      }, {
        immediate: true
      });
      Vue.watch(function () {
        return props.errors;
      }, function (errors) {
        errorList.value = errors;
      });
      return function () {
        var _col$value$edit6, _errorList$value, _col$value$edit7, _errorList$value2;
        if (props.readonly) {
          return cellNode.value;
        }
        if (props.editable === void 0 && !isEdit.value || props.editable === false) {
          var _col$value$edit5;
          return Vue.createVNode("div", {
            "class": props.tableBaseClass.cellEditable,
            "onClick": onCellClick
          }, [cellNode.value, ((_col$value$edit5 = col.value.edit) === null || _col$value$edit5 === void 0 ? void 0 : _col$value$edit5.showEditIcon) !== false && Vue.createVNode(Edit1Icon, null, null)]);
        }
        var Component = (_col$value$edit6 = col.value.edit) === null || _col$value$edit6 === void 0 ? void 0 : _col$value$edit6.component;
        if (!Component) {
          log.error("Table", "edit.component is required.");
          return null;
        }
        var errorMessage = (_errorList$value = errorList.value) === null || _errorList$value === void 0 || (_errorList$value = _errorList$value[0]) === null || _errorList$value === void 0 ? void 0 : _errorList$value.message;
        var tmpEditOnListeners = _objectSpread$q({}, editOnListeners.value);
        delete tmpEditOnListeners.onChange;
        if ((_col$value$edit7 = col.value.edit) !== null && _col$value$edit7 !== void 0 && (_col$value$edit7 = _col$value$edit7.abortEditOnEvent) !== null && _col$value$edit7 !== void 0 && _col$value$edit7.length) {
          col.value.edit.abortEditOnEvent.forEach(function (onEventName) {
            if (tmpEditOnListeners[onEventName]) {
              delete tmpEditOnListeners[onEventName];
            }
          });
        }
        return Vue.createVNode("div", {
          "class": props.tableBaseClass.cellEditWrap,
          "onClick": function onClick(e) {
            e.stopPropagation();
          },
          "ref": "tableEditableCellRef"
        }, [Vue.createVNode(Component, Vue.mergeProps({
          "status": errorMessage ? ((_errorList$value2 = errorList.value) === null || _errorList$value2 === void 0 || (_errorList$value2 = _errorList$value2[0]) === null || _errorList$value2 === void 0 ? void 0 : _errorList$value2.type) || "error" : void 0,
          "tips": errorMessage
        }, componentProps.value, listeners.value, tmpEditOnListeners, {
          "value": editValue.value,
          "onChange": onEditChange
        }), null)]);
      };
    }
  });

  function ownKeys$p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$p(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useRowEdit(props) {
    var _toRefs = Vue.toRefs(props),
      editableRowKeys = _toRefs.editableRowKeys;
    var cellRuleMap = /* @__PURE__ */new Map();
    var errorListMap = Vue.ref({});
    var editableKeysMap = Vue.computed(function () {
      return getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || "id");
    });
    var editingCells = Vue.ref({});
    var editedFormData = Vue.ref({});
    var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
      var errorMap = {};
      errors.forEach(function (_ref) {
        var row = _ref.row,
          col = _ref.col,
          errorList = _ref.errorList;
        var rowValue = get(row, props.rowKey || "id");
        var key = [rowValue, col.colKey].join("__");
        if (errorList !== null && errorList !== void 0 && errorList.length) {
          errorMap[key] = errorList;
        } else {
          delete errorMap[key];
        }
      });
      return errorMap;
    };
    var validateOneRowData = function validateOneRowData(rowValue) {
      var rowRules = cellRuleMap.get(rowValue);
      if (!rowRules) return;
      var list = rowRules.map(function (item) {
        return new Promise(function (resolve) {
          var editedRow = item.editedRow,
            col = item.col;
          var rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;
          if (!col.edit || !rules || !rules.length) {
            resolve(_objectSpread$p(_objectSpread$p({}, item), {}, {
              errorList: []
            }));
            return;
          }
          validate(get(editedRow, col.colKey), rules).then(function (r) {
            resolve(_objectSpread$p(_objectSpread$p({}, item), {}, {
              errorList: r.filter(function (t) {
                return !t.result;
              })
            }));
          });
        });
      });
      return new Promise(function (resolve, reject) {
        Promise.all(list).then(function (errors) {
          resolve({
            errors: errors.filter(function (t) {
              var _t$errorList;
              return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
            }),
            errorMap: getErrorListMapByErrors(errors)
          });
        }, reject);
      });
    };
    var validateRowData = function validateRowData(rowValue) {
      return new Promise(function (resolve, reject) {
        validateOneRowData(rowValue).then(function (_ref2) {
          var _props$onRowValidate;
          var errors = _ref2.errors,
            errorMap = _ref2.errorMap;
          errorListMap.value = errorMap;
          var tTrigger = "parent";
          (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 || _props$onRowValidate.call(props, {
            trigger: tTrigger,
            result: errors
          });
          resolve({
            trigger: tTrigger,
            result: errors
          });
        }, reject);
      });
    };
    var validateTableCellData = function validateTableCellData() {
      var cellKeys = Object.keys(editingCells.value);
      var existKeys = props.data.map(function (v) {
        var _v$props$rowKey;
        return (_v$props$rowKey = v[props.rowKey]) === null || _v$props$rowKey === void 0 ? void 0 : _v$props$rowKey.toString();
      });
      var promiseList = cellKeys.filter(function (v) {
        return existKeys.includes(getRowKeyFromCell(v));
      }).map(function (cellKey) {
        return editingCells.value[cellKey].validateEdit("parent");
      });
      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (arr) {
          var _props$onValidate;
          var allErrorListMap = {};
          arr.forEach(function (result, index) {
            if (result === true) return;
            allErrorListMap[cellKeys[index]] = result;
          });
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };
    var validateTableData = function validateTableData() {
      if (Object.keys(editingCells.value).length) {
        return validateTableCellData();
      }
      var promiseList = [];
      var data = props.data || [];
      for (var i = 0, len = data.length; i < len; i++) {
        var rowValue = get(data[i], props.rowKey || "id");
        promiseList.push(validateOneRowData(rowValue));
      }
      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (rList) {
          var _props$onValidate2;
          var allErrorListMap = {};
          rList.forEach(function () {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                errors: [],
                errorMap: {}
              },
              errorMap = _ref3.errorMap;
            errorMap && Object.assign(allErrorListMap, errorMap);
          });
          errorListMap.value = allErrorListMap;
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };
    var onUpdateEditedCell = function onUpdateEditedCell(rowValue, lastRowData, data) {
      if (!editedFormData.value[rowValue]) {
        editedFormData.value[rowValue] = cloneDeep(lastRowData);
      }
      Object.entries(data).forEach(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          key = _ref5[0],
          val = _ref5[1];
        set(editedFormData.value[rowValue], key, val);
      });
    };
    var onRuleChange = function onRuleChange(context) {
      if (props.editableRowKeys) {
        var rowValue = get(context.row, props.rowKey || "id");
        var rules = cellRuleMap.get(rowValue);
        if (rules) {
          var index = rules.findIndex(function (t) {
            return t.col.colKey === context.col.colKey;
          });
          if (index === -1) {
            rules.push(context);
          } else {
            rules[index] = context;
          }
          cellRuleMap.set(rowValue, rules);
        } else {
          cellRuleMap.set(rowValue, [context]);
        }
      }
    };
    var clearValidateData = function clearValidateData() {
      errorListMap.value = {};
    };
    var onPrimaryTableCellEditChange = function onPrimaryTableCellEditChange(params) {
      var cellKey = getCellKey(params.row, props.rowKey, params.col.colKey, params.colIndex);
      if (params.isEdit) {
        editingCells.value[cellKey] = params;
      } else {
        delete editingCells.value[cellKey];
      }
    };
    var getEditRowData = function getEditRowData(_ref6) {
      var _props$editableRowKey;
      var row = _ref6.row,
        col = _ref6.col;
      var rowValue = get(row, props.rowKey || "id");
      var editedRowData = editedFormData.value[rowValue];
      if (editedRowData && (_props$editableRowKey = props.editableRowKeys) !== null && _props$editableRowKey !== void 0 && _props$editableRowKey.includes(rowValue)) {
        var tmpRow = _objectSpread$p({}, editedRowData);
        set(tmpRow, col.colKey, get(editedRowData, col.colKey));
        return tmpRow;
      }
      return row;
    };
    Vue.watch(function () {
      var _editableRowKeys$valu;
      return (_editableRowKeys$valu = editableRowKeys.value) === null || _editableRowKeys$valu === void 0 ? void 0 : _editableRowKeys$valu.join(",");
    }, function (keyStr) {
      var editableRowKeys2 = keyStr.split(",");
      var rowValueList = Object.keys(editedFormData.value);
      rowValueList.forEach(function (key) {
        if (!editableRowKeys2.includes(key)) {
          delete editedFormData.value[key];
        }
      });
    });
    return {
      editedFormData: editedFormData,
      errorListMap: errorListMap,
      editableKeysMap: editableKeysMap,
      validateTableData: validateTableData,
      validateTableCellData: validateTableCellData,
      validateRowData: validateRowData,
      onRuleChange: onRuleChange,
      clearValidateData: clearValidateData,
      onUpdateEditedCell: onUpdateEditedCell,
      getEditRowData: getEditRowData,
      onPrimaryTableCellEditChange: onPrimaryTableCellEditChange
    };
  }

  function ownKeys$o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$o(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var OMIT_PROPS = ["hideSortTips", "dragSort", "defaultExpandedRowKeys", "defaultSelectedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "expand-on-row-click", "expanded-row", "editable-row-keys", "editable-cell-state", "filter-value", "multipleSort", "expandIcon", "expand-icon", "reserveSelectedRowOnPaginate", "expandedRowKeys", "expandedRow", "reserve-selected-row-on-paginate", "reserveSelectedRowOnPaginate", "selected-row-keys", "selectedRowKeys", "selectOnRowClick", "column-controller", "columnController", "dragSort", "drag-sort", "hideSortTips", "showSortColumnBgColor", "filter-row", "filterRow", "multiple-sort", "multipleSort", "async-loading", "onChange", "onAsyncLoadingClick", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
  var _PrimaryTable = Vue.defineComponent({
    name: "TPrimaryTable",
    props: _objectSpread$o(_objectSpread$o({}, baseTableProps), primaryTableProps),
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();
      var _toRefs = Vue.toRefs(props),
        columns = _toRefs.columns,
        columnController = _toRefs.columnController;
      var primaryTableRef = Vue.ref(null);
      var showElement = Vue.ref(false);
      var _useClassName = useClassName(),
        classPrefix = _useClassName.classPrefix,
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableSelectedClasses = _useClassName.tableSelectedClasses,
        tableSortClasses = _useClassName.tableSortClasses;
      var _useConfig = useConfig("table", props.locale),
        globalConfig = _useConfig.globalConfig;
      var _useStyle = useStyle(props),
        sizeClassNames = _useStyle.sizeClassNames;
      var tableSize = Vue.computed(function () {
        var _props$size;
        return (_props$size = props.size) !== null && _props$size !== void 0 ? _props$size : globalConfig.value.size;
      });
      var _useColumnController = useColumnController(props, context),
        tDisplayColumns = _useColumnController.tDisplayColumns,
        renderColumnController = _useColumnController.renderColumnController;
      var _useRowExpand = useRowExpand(props, context),
        showExpandedRow = _useRowExpand.showExpandedRow,
        showExpandIconColumn = _useRowExpand.showExpandIconColumn,
        getExpandColumn = _useRowExpand.getExpandColumn,
        renderExpandedRow = _useRowExpand.renderExpandedRow,
        onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick,
        getExpandedRowClass = _useRowExpand.getExpandedRowClass;
      var _useSorter = useSorter(props, context),
        renderSortIcon = _useSorter.renderSortIcon;
      var _useRowSelect = useRowSelect(props, tableSelectedClasses),
        selectColumn = _useRowSelect.selectColumn,
        showRowSelect = _useRowSelect.showRowSelect,
        selectedRowClassNames = _useRowSelect.selectedRowClassNames,
        currentPaginateData = _useRowSelect.currentPaginateData,
        formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
        setTSelectedRowKeys = _useRowSelect.setTSelectedRowKeys,
        onInnerSelectRowClick = _useRowSelect.onInnerSelectRowClick,
        handleRowSelectWithAreaSelection = _useRowSelect.handleRowSelectWithAreaSelection;
      var _useFilter = useFilter(props, context),
        hasEmptyCondition = _useFilter.hasEmptyCondition,
        isTableOverflowHidden = _useFilter.isTableOverflowHidden,
        renderFilterIcon = _useFilter.renderFilterIcon,
        renderFirstFilterRow = _useFilter.renderFirstFilterRow,
        setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;
      var dragSortParams = Vue.computed(function () {
        return {
          showElement: showElement.value
        };
      });
      var _useDragSort = useDragSort(props, context, dragSortParams),
        isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
        isRowDraggable = _useDragSort.isRowDraggable,
        isColDraggable = _useDragSort.isColDraggable,
        innerPagination = _useDragSort.innerPagination,
        setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef,
        setDragSortColumns = _useDragSort.setDragSortColumns;
      var _useTableHeader = useTableHeader(props),
        renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;
      var _useAsyncLoading = useAsyncLoading(props),
        renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;
      var _useEditableRow = useRowEdit(props),
        errorListMap = _useEditableRow.errorListMap,
        editableKeysMap = _useEditableRow.editableKeysMap,
        validateRowData = _useEditableRow.validateRowData,
        validateTableData = _useEditableRow.validateTableData,
        validateTableCellData = _useEditableRow.validateTableCellData,
        onRuleChange = _useEditableRow.onRuleChange,
        clearValidateData = _useEditableRow.clearValidateData,
        onUpdateEditedCell = _useEditableRow.onUpdateEditedCell,
        getEditRowData = _useEditableRow.getEditRowData,
        onPrimaryTableCellEditChange = _useEditableRow.onPrimaryTableCellEditChange;
      var innerKeyboardRowHover = Vue.computed(function () {
        return Boolean(showExpandedRow.value || showRowSelect.value);
      });
      var innerDisableSpaceInactiveRow = Vue.computed(function () {
        return Boolean(showExpandedRow.value || showRowSelect.value);
      });
      var primaryTableClasses = Vue.computed(function () {
        var _selectColumn$value;
        return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, tableDraggableClasses.colDraggable, isColDraggable.value), tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), tableDraggableClasses.rowDraggable, isRowDraggable.value), tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), tableBaseClass.tableRowEdit, props.editableRowKeys), "".concat(classPrefix, "-table--select-").concat((_selectColumn$value = selectColumn.value) === null || _selectColumn$value === void 0 ? void 0 : _selectColumn$value.type), selectColumn.value), "".concat(classPrefix, "-table--row-select"), showRowSelect.value), "".concat(classPrefix, "-table--row-expandable"), showExpandedRow.value);
      });
      var tRowClassNames = Vue.computed(function () {
        var tClassNames = [props.rowClassName, selectedRowClassNames.value, getExpandedRowClass];
        return tClassNames.filter(function (v) {
          return v;
        });
      });
      var tRowAttributes = Vue.computed(function () {
        var tAttributes = [props.rowAttributes];
        if (isRowHandlerDraggable.value || isRowDraggable.value) {
          tAttributes.push(function (_ref2) {
            var row = _ref2.row;
            return {
              "data-id": get(row, props.rowKey || "id")
            };
          });
        }
        return tAttributes.filter(function (v) {
          return v;
        });
      });
      Vue.onMounted(function () {
        setFilterPrimaryTableRef(primaryTableRef.value);
        setDragSortPrimaryTableRef(primaryTableRef.value);
      });
      context.expose({
        validateRowData: validateRowData,
        validateTableData: validateTableData,
        validateTableCellData: validateTableCellData,
        clearValidateData: clearValidateData,
        refreshTable: function refreshTable() {
          primaryTableRef.value.refreshTable();
        },
        scrollToElement: function scrollToElement(data) {
          primaryTableRef.value.scrollToElement(data);
        },
        scrollColumnIntoView: function scrollColumnIntoView(colKey) {
          primaryTableRef.value.scrollColumnIntoView(colKey);
        },
        baseTableRef: primaryTableRef
      });
      var onEditableCellChange = function onEditableCellChange(params) {
        var _props$onRowEdit;
        (_props$onRowEdit = props.onRowEdit) === null || _props$onRowEdit === void 0 || _props$onRowEdit.call(props, params);
        var rowValue = get(params.editedRow, props.rowKey || "id");
        onUpdateEditedCell(rowValue, params.row, _defineProperty$2({}, params.col.colKey, params.value));
      };
      var _getColumns = function getColumns(columns2) {
        var parentDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var arr = [];
        var _loop = function _loop() {
          var _item$children, _tDisplayColumns$valu, _item$edit, _item$children2, _item$children3;
          var item = _objectSpread$o({}, columns2[i]);
          var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
          if (!isDisplayColumn && (props.columnController || props.displayColumns || props.defaultDisplayColumns) && !parentDisplay) return 1; // continue
          item = formatToRowSelectColumn(item);
          var sort = props.sort;
          if (item.sorter && props.showSortColumnBgColor) {
            var sorts = sort instanceof Array ? sort : [sort];
            var sortedColumn = sorts.find(function (sort2) {
              return sort2 && sort2.sortBy === item.colKey && sort2.descending !== void 0;
            });
            if (sortedColumn) {
              item.className = item.className instanceof Array ? item.className.concat(tableSortClasses.sortColumn) : [item.className, tableSortClasses.sortColumn];
            }
          }
          if (item.sorter || item.filter) {
            var titleContent = renderTitle(context.slots, item, i);
            var _item = item,
              ellipsisTitle = _item.ellipsisTitle;
            item.title = function (h2, p) {
              var _primaryTableRef$valu;
              var sortIcon = item.sorter ? renderSortIcon(p) : null;
              var filterIcon = item.filter ? renderFilterIcon(p) : null;
              var attach = (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.tableContentRef;
              return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach, {
                classPrefix: classPrefix,
                ellipsisOverlayClassName: tableSize.value !== "medium" ? sizeClassNames[tableSize.value] : ""
              });
            };
            item.ellipsisTitle = false;
          }
          if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
            var oldCell = item.cell;
            item.cell = function (h2, p) {
              var cellProps = _objectSpread$o(_objectSpread$o({}, p), {}, {
                row: getEditRowData(p),
                oldCell: oldCell,
                rowKey: props.rowKey || "id",
                tableBaseClass: tableBaseClass,
                cellEmptyContent: props.cellEmptyContent,
                onChange: onEditableCellChange,
                onValidate: props.onRowValidate,
                onRuleChange: onRuleChange,
                onEditableChange: onPrimaryTableCellEditChange
              });
              if (props.editableRowKeys) {
                var _errorListMap$value;
                var rowValue = get(p.row, props.rowKey || "id");
                cellProps.editable = editableKeysMap.value[rowValue] || false;
                var key = [rowValue, p.col.colKey].join("__");
                var errorList = (_errorListMap$value = errorListMap.value) === null || _errorListMap$value === void 0 ? void 0 : _errorListMap$value[key];
                errorList && (cellProps.errors = errorList);
              }
              if (props.editableCellState) {
                cellProps.readonly = !props.editableCellState(p);
              }
              return Vue.createVNode(EditableCell, Vue.mergeProps(cellProps, {
                "onUpdateEditedCell": onUpdateEditedCell
              }), context.slots);
            };
          }
          if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            var _tDisplayColumns$valu2;
            item.children = _getColumns(item.children, parentDisplay || ((_tDisplayColumns$valu2 = tDisplayColumns.value) === null || _tDisplayColumns$valu2 === void 0 ? void 0 : _tDisplayColumns$valu2.includes(item.colKey)));
          }
          if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
            arr.push(item);
          }
        };
        for (var i = 0, len = columns2.length; i < len; i++) {
          if (_loop()) continue;
        }
        return arr;
      };
      var tColumns = Vue.computed(function () {
        var cols = _getColumns(columns.value);
        if (showExpandIconColumn.value) {
          cols.unshift(getExpandColumn());
        }
        return cols;
      });
      var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
        var _props$onPageChange, _props$onChange;
        innerPagination.value = _objectSpread$o(_objectSpread$o({}, innerPagination.value), pageInfo);
        currentPaginateData.value = newData;
        (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 || _props$onPageChange.call(props, pageInfo, newData);
        var changeParams = [{
          pagination: pageInfo
        }, {
          trigger: "pagination",
          currentData: newData
        }];
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
        if (!props.reserveSelectedRowOnPaginate) {
          setTSelectedRowKeys([], {
            selectedRowData: [],
            type: "uncheck",
            currentRowKey: "CLEAR_ON_PAGINATE"
          });
        }
      };
      var onInnerActiveRowAction = function onInnerActiveRowAction(params) {
        var _props$onActiveRowAct;
        (_props$onActiveRowAct = props.onActiveRowAction) === null || _props$onActiveRowAct === void 0 || _props$onActiveRowAct.call(props, params);
        handleRowSelectWithAreaSelection(params);
      };
      var onSingleRowClick = function onSingleRowClick(params) {
        if (props.expandOnRowClick) {
          onInnerExpandRowClick(params);
        }
        if (props.selectOnRowClick) {
          onInnerSelectRowClick(params);
        }
      };
      var timer;
      var DURATION = 250;
      var onInnerRowClick = function onInnerRowClick(params) {
        if (!props.onRowDblclick) {
          onSingleRowClick(params);
          return;
        }
        if (timer) {
          clearTimeout(timer);
          timer = void 0;
        } else {
          timer = setTimeout(function () {
            onSingleRowClick(params);
            timer = void 0;
          }, DURATION);
        }
      };
      var onShowElementChange = function onShowElementChange(val) {
        showElement.value = val;
      };
      var formatNode = function formatNode(api, renderInnerNode, condition, extra) {
        if (!condition) return props[api];
        var innerNode = renderInnerNode(Vue.h);
        var propsNode = renderTNode(api);
        if (innerNode && !propsNode) return function () {
          return innerNode;
        };
        if (propsNode && !innerNode) return function () {
          return propsNode;
        };
        if (innerNode && propsNode) {
          return function () {
            return extra !== null && extra !== void 0 && extra.reverse ? Vue.createVNode("div", null, [innerNode, propsNode]) : Vue.createVNode("div", null, [propsNode, innerNode]);
          };
        }
        return null;
      };
      return function () {
        var _props$keyboardRowHov, _props$disableSpaceIn;
        var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
        var placement = isColumnController ? columnController.value.placement || "top-right" : "";
        var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
        var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
        var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
          reverse: true
        });
        var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition.value);
        var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props.asyncLoading);
        var _getCurrentInstance = Vue.getCurrentInstance(),
          vnode = _getCurrentInstance.vnode;
        var baseTableProps2 = _objectSpread$o(_objectSpread$o({}, omit$1(vnode.props, OMIT_PROPS)), {}, {
          rowKey: props.rowKey,
          rowClassName: tRowClassNames.value,
          rowAttributes: tRowAttributes.value,
          columns: tColumns.value,
          keyboardRowHover: (_props$keyboardRowHov = props.keyboardRowHover) !== null && _props$keyboardRowHov !== void 0 ? _props$keyboardRowHov : innerKeyboardRowHover.value,
          disableSpaceInactiveRow: (_props$disableSpaceIn = props.disableSpaceInactiveRow) !== null && _props$disableSpaceIn !== void 0 ? _props$disableSpaceIn : innerDisableSpaceInactiveRow.value,
          topContent: topContent,
          bottomContent: bottomContent,
          firstFullRow: firstFullRow,
          lastFullRow: lastFullRow,
          thDraggable: ["col", "row-handler-col"].includes(props.dragSort),
          onShowElementChange: onShowElementChange,
          onPageChange: onInnerPageChange,
          renderExpandedRow: showExpandedRow.value ? renderExpandedRow : void 0,
          onActiveRowAction: onInnerActiveRowAction
        });
        if (props.expandOnRowClick || props.selectOnRowClick) {
          baseTableProps2.onRowClick = onInnerRowClick;
        }
        return Vue.createVNode(_BaseTable, Vue.mergeProps(baseTableProps2, {
          "ref": primaryTableRef,
          "class": primaryTableClasses.value,
          "onLeafColumnsChange": setDragSortColumns
        }), context.slots);
      };
    }
  });

  var enhancedTableProps = {
    beforeDragSort: {
      type: Function
    },
    expandedTreeNodes: {
      type: Array,
      "default": void 0
    },
    defaultExpandedTreeNodes: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    tree: {
      type: Object
    },
    treeExpandAndFoldIcon: {
      type: Function
    },
    onAbnormalDragSort: Function,
    onExpandedTreeNodesChange: Function,
    onTreeExpandChange: Function
  };

  function ownKeys$n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$n(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };
  function getUniqueRowValue(row, colKey) {
    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var rowValue = get(row, colKey);
    return rowIndex || level ? "".concat(rowValue, "_").concat(rowIndex || 0, "_").concat(level || 0, "}") : rowValue;
  }
  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);
      _defineProperty$2(this, "treeDataMap", /* @__PURE__ */new Map());
      _defineProperty$2(this, "expandAllRowIndex", void 0);
      this.treeDataMap = /* @__PURE__ */new Map();
    }
    return _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;
        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 || _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns.find(function (col) {
          return col.colKey === "row-select";
        }), keys);
      }
    }, {
      key: "getAllUniqueKeys",
      value: function getAllUniqueKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          arr.push(getUniqueRowValue(item, keys.rowKey));
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.getAllUniqueKeys(children, keys, arr);
          }
        }
        return arr;
      }
    }, {
      key: "getExpandedChildrenKeys",
      value: function getExpandedChildrenKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          var rowValue = getUniqueRowValue(item, keys.rowKey);
          var rowState = this.treeDataMap.get(rowValue);
          if (rowState.expanded) {
            arr.push(rowValue);
          }
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.getExpandedChildrenKeys(children, keys, arr);
          }
        }
        return arr;
      }
    }, {
      key: "expandTreeNode",
      value: function expandTreeNode(rowList, dataSource, keys) {
        var _this = this;
        if (!rowList.length) return dataSource;
        rowList.forEach(function (rowValue) {
          var rowState = _this.treeDataMap.get(rowValue);
          if (!rowState) return;
          _this.toggleExpandData({
            row: rowState.row,
            rowIndex: rowState.rowIndex
          }, dataSource, keys, "expand");
        });
        return dataSource;
      }
    }, {
      key: "foldTreeNode",
      value: function foldTreeNode(rowList, dataSource, keys) {
        var _this2 = this;
        if (!rowList.length) return dataSource;
        rowList.forEach(function (rowValue) {
          var rowState = _this2.treeDataMap.get(rowValue);
          if (!rowState) return;
          _this2.toggleExpandData({
            row: rowState.row,
            rowIndex: rowState.rowIndex
          }, dataSource, keys, "fold");
        });
        return dataSource;
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys, type) {
        var _r$rowIndex;
        if (!p) {
          log.error("EnhancedTable", "the node toggleExpanded doest not exist in `data`");
          return dataSource;
        }
        var rowValue = get(p.row, keys.rowKey);
        if (isUndefined(rowValue)) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }
        var childrenNodes = get(p.row, keys.childrenKey);
        if (childrenNodes === true) return dataSource;
        var r = this.treeDataMap.get(rowValue);
        if (type === "expand" && r.expanded) return dataSource;
        if (type === "fold" && !r.expanded) return dataSource;
        r.rowIndex = (_r$rowIndex = r.rowIndex) !== null && _r$rowIndex !== void 0 ? _r$rowIndex : p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
          rowIndex = changeRow.rowIndex,
          expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get(row, keys.childrenKey);
        if (!row || !childrenNodes) return dataSource;
        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }
        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = getUniqueRowValue(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);
        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return -1;
        }
        if (get(newRowData, keys.childrenKey) === true) {
          var oldChildren = get(rowState.row, keys.childrenKey);
          if (oldChildren !== null && oldChildren !== void 0 && oldChildren.length) {
            for (var i = 0, len = oldChildren.length; i < len; i++) {
              var rowValue2 = getUniqueRowValue(oldChildren[i], keys.rowKey);
              var state = this.treeDataMap.get(rowValue2);
              if (state) {
                this.treeDataMap["delete"](rowValue2);
              }
            }
          }
        }
        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;
        if (rowState.parent) {
          var siblings = get(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return getUniqueRowValue(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }
        this.treeDataMap.set(newRowValue, rowState);
        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }
        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);
        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);
          if (r.parent) {
            var siblings = get(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }
          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          log.warn("EnhancedTable", "Can not remove this node, which is not appeared.");
        }
        return dataSource;
      }
    }, {
      key: "removeChildren",
      value: function removeChildren(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);
        if (r && r.rowIndex >= 0) {
          var removeNumber = r.expandChildrenLength || 0;
          if (removeNumber) {
            dataSource.splice(r.rowIndex + 1, removeNumber);
          }
          if (r.parent) {
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }
          r.expandChildrenLength = 0;
          r.expanded = false;
          set(r.row, keys.childrenKey, void 0);
          this.treeDataMap.set(key, r);
          if (removeNumber) {
            updateRowIndex(this.treeDataMap, dataSource, {
              minRowIndex: r.rowIndex + 1,
              rowKey: keys.rowKey,
              type: "remove"
            });
          }
        } else {
          log.warn("EnhancedTable", "Can not remove this node's children, which is not appeared.");
        }
        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var children = get(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var tmpData = newData instanceof Array ? newData : [newData];
        var newChildrenData = [];
        var firstNewChildrenIndex = -1;
        for (var i = 0, len = tmpData.length; i < len; i++) {
          var oneData = tmpData[i];
          var newRowValue = getUniqueRowValue(oneData, keys.rowKey);
          var mapState = this.treeDataMap.get(newRowValue);
          if (!this.validateDataDoubleExist(mapState, newRowValue)) {
            log.warn("Table", "Duplicated Data `".concat(newRowValue, "` has been removed."));
          } else {
            var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;
            if (i === 0) {
              firstNewChildrenIndex = rowIndex;
            }
            var newState = {
              id: newRowValue,
              row: oneData,
              rowIndex: rowIndex,
              level: state.level + 1,
              expanded: false,
              expandChildrenLength: 0,
              disabled: false,
              path: _toConsumableArray(state.path),
              parent: state
            };
            newState.path = newState.path.concat(newState);
            newChildrenData.push(oneData);
            this.treeDataMap.set(newRowValue, newState);
          }
        }
        if (!newChildrenData.length) return dataSource;
        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);
        } else {
          state.row[keys.childrenKey] = newChildrenData;
          state.expanded = true;
        }
        if (isShowNewNode) {
          dataSource.splice.apply(dataSource, [firstNewChildrenIndex, 0].concat(newChildrenData));
          var newChildrenCount = newChildrenData.length || 1;
          updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,
            rowKey: keys.rowKey,
            type: "add",
            count: 1
          });
        }
        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var newDataSource = dataSource.concat(newData);
        var tmpNewData = newData instanceof Array ? newData : [newData];
        var dataSourceLen = dataSource.length;
        for (var i = 0, len = tmpNewData.length; i < len; i++) {
          var rowValue = get(tmpNewData[i], keys.rowKey);
          if (!rowValue) {
            log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            continue;
          }
          var state = {
            id: rowValue,
            row: tmpNewData[i],
            rowIndex: dataSourceLen + i,
            level: 0,
            expanded: false,
            expandChildrenLength: 0,
            disabled: false
          };
          state.path = [state];
          this.treeDataMap.set(rowValue, state);
        }
        return newDataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;
        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }
        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get(params.current, keys.rowKey);
        var endRowValue = get(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);
        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }
        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);
        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);
          var _allSwapList = _middleRowList.concat(endRowList, startRowList);
          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }
        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;
          var targetIndex = -1;
          var currentIndex = -1;
          for (var i = 0, len = children.length; i < len; i++) {
            if (get(children[i], keys.rowKey) === startRowValue) {
              currentIndex = i;
              count += 1;
            }
            if (get(children[i], keys.rowKey) === endRowValue) {
              targetIndex = i;
              count += 1;
            }
            if (count >= 2) break;
          }
          if (currentIndex < targetIndex) {
            children.splice(targetIndex + 1, 0, params.current);
            children.splice(currentIndex, 1);
          } else {
            children.splice(currentIndex, 1);
            children.splice(targetIndex, 0, params.current);
          }
        }
        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this3 = this;
        this.expandAllRowIndex = 0;
        var newData = [];
        var _expandLoop = function expandLoop(dataSource2, keys2) {
          var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get(item, keys2.rowKey);
            var state = _this3.treeDataMap.get(rowValue);
            var children = get(item, keys2.childrenKey);
            state.rowIndex = _this3.expandAllRowIndex;
            if (children !== true && children !== null && children !== void 0 && children.length) {
              state.expanded = true;
            }
            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this3.expandAllRowIndex += 1;
            newData.push(item);
            _this3.treeDataMap.set(rowValue, state);
            if (children !== null && children !== void 0 && children.length) {
              var tmpParent = parent;
              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;
                tmpParent.expandChildrenLength += children.length;
                _this3.treeDataMap.set(tmpParent.id, tmpParent);
                tmpParent = tmpParent.parent;
              }
              _expandLoop(children, keys2, state);
            }
          }
        };
        _expandLoop(dataSource, keys);
        return newData;
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];
        var index = 0;
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? index : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;
          if (state.level === 0) {
            newData.push(item);
            index += 1;
          }
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }
        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          if (state.level === 0) {
            treeData.push(item);
          }
        }
        return treeData;
      }
    }, {
      key: "getTreeExpandedRow",
      value: function getTreeExpandedRow(dataSource, keys) {
        var _this4 = this;
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "data";
        var arr = [];
        dataSource.forEach(function (item) {
          var rowValue = get(item, keys.rowKey);
          var rowState = _this4.treeDataMap.get(rowValue);
          if (!rowState.expanded) return;
          if (type === "unique") {
            arr.push(rowValue);
          } else if (type === "data") {
            arr.push(item);
          } else {
            arr.push(rowState);
          }
        });
        return arr;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = getUniqueRowValue(item, keys.rowKey);
          if (isUndefined(rowValue)) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var children = get(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);
          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get(item, keys.rowKey);
          if (isUndefined(rowValue)) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }
          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get(item, keys.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          log.warn("EnhancedTable", "".concat(rowValue, " does not exist."));
          return false;
        }
        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          log.warn("EnhancedTable", "Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }
        return true;
      }
    }]);
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;
    while (tmp) {
      var _state$parent;
      var state = treeDataMap.get(get(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 || (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }
    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get(row, keys.childrenKey);
    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
      rowIndex = rowState.rowIndex;
    var childrenNodes = get(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);
      var newState = _objectSpread$n(_objectSpread$n({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });
      treeDataMap.set(rowValue, newState);
      if (!expanded) {
        var children = get(item, keys.childrenKey);
        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$n(_objectSpread$n({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];
      if (get(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }
      var children = get(item, keys.childrenKey) || [];
      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;
    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get(item, extra.rowKey));
      if (!state) {
        log.warn("Table", "tree map went wrong");
      }
      state.rowIndex = rowIndex + ((extra === null || extra === void 0 ? void 0 : extra.count) || 1) - 1;
    }
  }
  function diffExpandedTreeNode() {
    var newExpandedNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var oldExpandedNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var removedList = [];
    var addedList = [];
    var newExpandedNodeMap = /* @__PURE__ */new Map();
    var oldExpandedNodeMap = /* @__PURE__ */new Map();
    for (var i = 0, len = newExpandedNode.length; i < len; i++) {
      newExpandedNodeMap.set(newExpandedNode[i], true);
    }
    for (var _i = 0, _len = oldExpandedNode.length; _i < _len; _i++) {
      oldExpandedNodeMap.set(oldExpandedNode[_i], true);
    }
    for (var _i2 = 0, _len2 = newExpandedNode.length; _i2 < _len2; _i2++) {
      if (!oldExpandedNodeMap.get(newExpandedNode[_i2])) {
        addedList.push(newExpandedNode[_i2]);
      }
    }
    for (var _i3 = 0, _len3 = oldExpandedNode.length; _i3 < _len3; _i3++) {
      if (!newExpandedNodeMap.get(oldExpandedNode[_i3])) {
        removedList.push(oldExpandedNode[_i3]);
      }
    }
    return {
      removedList: removedList,
      addedList: addedList
    };
  }

  function ownKeys$m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$m(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeDataExpand(props, params) {
    var store = params.store,
      dataSource = params.dataSource,
      rowDataKeys = params.rowDataKeys;
    var _toRefs = Vue.toRefs(props),
      data = _toRefs.data,
      expandedTreeNodes = _toRefs.expandedTreeNodes,
      tree = _toRefs.tree;
    var isDefaultExpandAllExecute = Vue.ref(false);
    var isDefaultExpandedTreeNodesExecute = Vue.ref(false);
    var _useDefaultValue = useDefaultValue(expandedTreeNodes, props.defaultExpandedTreeNodes, props.onExpandedTreeNodesChange, "expandedTreeNodes"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tExpandedTreeNode = _useDefaultValue2[0],
      setTExpandedTreeNode = _useDefaultValue2[1];
    var changedExpandTreeNode = Vue.ref({
      type: "props-change"
    });
    function expandAll() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "expand-all";
      var list = arguments.length > 1 ? arguments[1] : undefined;
      var newData = list || data.value;
      dataSource.value = store.value.expandAll(newData, rowDataKeys.value);
      var expandedNode = dataSource.value.map(function (t) {
        return getUniqueRowValue(t, rowDataKeys.value.rowKey);
      });
      setTExpandedTreeNode(expandedNode, {
        row: void 0,
        rowState: void 0,
        rowIndex: void 0,
        type: "expand",
        trigger: type
      });
      changedExpandTreeNode.value.type = "expand-all";
    }
    function foldAll() {
      dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
      setTExpandedTreeNode([], {
        row: void 0,
        rowState: void 0,
        rowIndex: void 0,
        type: "fold",
        trigger: "fold-all"
      });
    }
    function onExpandFoldIconClick(p, trigger) {
      var _props$onTreeExpandCh;
      var row = p.row,
        rowIndex = p.rowIndex;
      changedExpandTreeNode.value = _objectSpread$m({
        type: "user-reaction-change"
      }, p);
      var rowValue = getUniqueRowValue(row, rowDataKeys.value.rowKey);
      var rowState = store.value.treeDataMap.get(rowValue);
      var expandedNodes = _toConsumableArray(tExpandedTreeNode.value);
      if (rowState.expanded) {
        var expandedChildrenKeys = store.value.getExpandedChildrenKeys([row], rowDataKeys.value);
        for (var i = 0, len = expandedNodes.length; i < len; i++) {
          var nodeValue = expandedNodes[i];
          if (expandedChildrenKeys.includes(nodeValue)) {
            expandedNodes[i] = void 0;
          }
        }
        expandedNodes = expandedNodes.filter(Boolean);
      } else {
        expandedNodes.push(rowValue);
      }
      var params2 = {
        row: row,
        rowIndex: rowIndex,
        rowState: rowState,
        trigger: trigger
      };
      setTExpandedTreeNode(expandedNodes, _objectSpread$m(_objectSpread$m({}, params2), {}, {
        type: rowState.expanded ? "fold" : "expand"
      }));
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, params2);
    }
    function updateExpandState(data2, tExpandedTreeNode2) {
      var oldExpandedTreeNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var _diffExpandedTreeNode = diffExpandedTreeNode(tExpandedTreeNode2, oldExpandedTreeNode),
        addedList = _diffExpandedTreeNode.addedList,
        removedList = _diffExpandedTreeNode.removedList;
      store.value.expandTreeNode(addedList, data2, rowDataKeys.value);
      store.value.foldTreeNode(removedList, data2, rowDataKeys.value);
      return _toConsumableArray(data2);
    }
    Vue.watch([tExpandedTreeNode, data], function (_ref, _ref2) {
      var _ref3 = _slicedToArray(_ref, 1),
        tExpandedTreeNode2 = _ref3[0];
      var _ref4 = _slicedToArray(_ref2, 1),
        oldExpandedTreeNode = _ref4[0];
      if (!store.value.treeDataMap.size || !data.value.length) return;
      if (changedExpandTreeNode.value.type === "user-reaction-change") {
        var _ref5 = changedExpandTreeNode.value || {},
          row = _ref5.row,
          rowIndex = _ref5.rowIndex;
        dataSource.value = _toConsumableArray(store.value.toggleExpandData({
          row: row,
          rowIndex: rowIndex
        }, _toConsumableArray(dataSource.value), rowDataKeys.value));
      } else if (changedExpandTreeNode.value.type === "props-change") {
        updateExpandState(dataSource.value, tExpandedTreeNode2, oldExpandedTreeNode);
      }
      changedExpandTreeNode.value.type = "props-change";
    });
    var updateExpandOnDataChange = function updateExpandOnDataChange(data2) {
      var _tree$value, _tExpandedTreeNode$va;
      if ((_tree$value = tree.value) !== null && _tree$value !== void 0 && _tree$value.defaultExpandAll && !isDefaultExpandAllExecute.value) {
        expandAll("default-expand-all", _toConsumableArray(data2));
        isDefaultExpandAllExecute.value = true;
      } else if ((_tExpandedTreeNode$va = tExpandedTreeNode.value) !== null && _tExpandedTreeNode$va !== void 0 && _tExpandedTreeNode$va.length) {
        Vue.nextTick(function () {
          dataSource.value = updateExpandState(_toConsumableArray(data2), tExpandedTreeNode.value, []);
        });
      }
    };
    return {
      tExpandedTreeNode: tExpandedTreeNode,
      isDefaultExpandAllExecute: isDefaultExpandAllExecute,
      isDefaultExpandedTreeNodesExecute: isDefaultExpandedTreeNodesExecute,
      expandAll: expandAll,
      foldAll: foldAll,
      onExpandFoldIconClick: onExpandFoldIconClick,
      updateExpandOnDataChange: updateExpandOnDataChange
    };
  }

  function ownKeys$l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$l(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useTreeData(props, context) {
    var _toRefs = Vue.toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns;
    var _useConfig = useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        AddRectangleIcon: TdAddRectangleIcon,
        MinusRectangleIcon: TdMinusRectangleIcon
      }),
      AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;
    var store = Vue.ref(new TableTreeStore());
    var treeNodeCol = Vue.shallowRef();
    var dataSource = Vue.ref([]);
    var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;
    var renderTNode = useTNodeDefault();
    var rowDataKeys = Vue.computed(function () {
      var _props$tree;
      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    var _useTreeDataExpand = useTreeDataExpand(props, {
        store: store,
        dataSource: dataSource,
        rowDataKeys: rowDataKeys
      }),
      tExpandedTreeNode = _useTreeDataExpand.tExpandedTreeNode,
      isDefaultExpandAllExecute = _useTreeDataExpand.isDefaultExpandAllExecute,
      isDefaultExpandedTreeNodesExecute = _useTreeDataExpand.isDefaultExpandedTreeNodesExecute,
      expandAll = _useTreeDataExpand.expandAll,
      foldAll = _useTreeDataExpand.foldAll,
      updateExpandOnDataChange = _useTreeDataExpand.updateExpandOnDataChange,
      onExpandFoldIconClick = _useTreeDataExpand.onExpandFoldIconClick;
    var checkedColumn = Vue.computed(function () {
      return columns.value.find(function (col) {
        return col.colKey === "row-select";
      });
    });
    Vue.watch(checkedColumn, function (column) {
      if (!store.value) return;
      store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
    });
    var foldIcon = function foldIcon(context2) {
      var params = _objectSpread$l(_objectSpread$l({}, context2), {}, {
        type: "fold"
      });
      var defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, Vue.h, params) || Vue.createVNode(MinusRectangleIcon, null, null);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultFoldIcon,
        params: params
      });
    };
    var expandIcon = function expandIcon(context2) {
      var params = _objectSpread$l(_objectSpread$l({}, context2), {}, {
        type: "expand"
      });
      var defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, Vue.h, params) || Vue.createVNode(AddRectangleIcon, null, null);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultExpandIcon,
        params: params
      });
    };
    Vue.watch([data], function () {
      if (props.tree) {
        resetData(data.value);
      } else {
        dataSource.value = data.value;
      }
    }, {
      immediate: true
    });
    Vue.onUnmounted(function () {
      var _store$value$treeData;
      if (!props.tree) return;
      (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 || _store$value$treeData.clear();
      store.value = null;
    });
    Vue.watch(function () {
      var _props$tree2;
      return [columns, (_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.treeNodeColumnIndex];
    }, function () {
      treeNodeCol.value = getTreeNodeColumnCol();
    }, {
      immediate: true
    });
    function resetData(data2) {
      var _tExpandedTreeNode$va;
      var columns2 = props.columns,
        expandedTreeNodes = props.expandedTreeNodes,
        defaultExpandedTreeNodes = props.defaultExpandedTreeNodes,
        tree = props.tree;
      store.value.initialTreeStore(data2, columns2, rowDataKeys.value);
      var defaultNeedExpand = Boolean(!isDefaultExpandedTreeNodesExecute.value && (defaultExpandedTreeNodes === null || defaultExpandedTreeNodes === void 0 ? void 0 : defaultExpandedTreeNodes.length));
      var needExpandAll = Boolean((tree === null || tree === void 0 ? void 0 : tree.defaultExpandAll) && !isDefaultExpandAllExecute.value);
      if ((_tExpandedTreeNode$va = tExpandedTreeNode.value) !== null && _tExpandedTreeNode$va !== void 0 && _tExpandedTreeNode$va.length && !!(expandedTreeNodes || defaultNeedExpand) || needExpandAll) {
        updateExpandOnDataChange(data2);
        isDefaultExpandedTreeNodesExecute.value = true;
      } else {
        dataSource.value = _toConsumableArray(data2);
      }
    }
    function getTreeNodeStyle(level) {
      var _props$tree3, _props$tree4;
      if (level === void 0) return;
      var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) === void 0 ? 24 : (_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent;
      return indent ? {
        paddingLeft: "".concat(level * indent || 1, "px")
      } : {};
    }
    function toggleExpandData(p, trigger) {
      var _store$value, _props$onTreeExpandCh;
      var currentData = _objectSpread$l({}, p);
      if (p.row.VIRTUAL_SCROLL_INDEX !== void 0) {
        currentData.rowIndex = p.row.VIRTUAL_SCROLL_INDEX;
      }
      dataSource.value = _toConsumableArray(store.value.toggleExpandData(currentData, dataSource.value, rowDataKeys.value));
      var rowValue = get(p.row, rowDataKeys.value.rowKey);
      var rowState = (_store$value = store.value) === null || _store$value === void 0 || (_store$value = _store$value.treeDataMap) === null || _store$value === void 0 ? void 0 : _store$value.get(rowValue);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 || _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: rowState,
        trigger: trigger
      });
    }
    function getTreeNodeColumnCol() {
      var _props$tree5;
      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.treeNodeColumnIndex) || 0;
      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;
        treeNodeColumnIndex += 1;
      }
      return columns2[treeNodeColumnIndex];
    }
    function formatTreeColumn(col) {
      if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;
      var newCol = _objectSpread$l({}, treeNodeCol.value);
      newCol.cell = function (h2, p) {
        var cellInfo = renderCell(_objectSpread$l(_objectSpread$l({}, p), {}, {
          col: _objectSpread$l({}, treeNodeCol.value)
        }), context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        var currentState = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
        var classes = _defineProperty$2({}, tableTreeClasses.inlineCol, !!col.ellipsis);
        var childrenNodes = get(p.row, rowDataKeys.value.childrenKey);
        if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
          var _store$value$treeData2;
          var iconNode = (_store$value$treeData2 = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData2 !== void 0 && _store$value$treeData2.expanded ? foldIcon(p) : expandIcon(p);
          return Vue.createVNode("div", {
            "class": [tableTreeClasses.col, classes],
            "style": colStyle
          }, [!!(childrenNodes.length || childrenNodes === true) && Vue.createVNode("span", {
            "class": tableTreeClasses.icon,
            "onClick": function onClick(e) {
              onExpandFoldIconClick(p, "expand-fold-icon");
              e.stopPropagation();
            }
          }, [iconNode]), cellInfo]);
        }
        return Vue.createVNode("div", {
          "style": colStyle,
          "class": [classes, tableTreeClasses.leafNode]
        }, [Vue.createVNode("span", {
          "class": tableTreeClasses.icon
        }, null), cellInfo]);
      };
      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (h2, p) {
          return renderCell(_objectSpread$l(_objectSpread$l({}, p), {}, {
            col: _objectSpread$l({}, treeNodeCol.value)
          }), context.slots);
        };
      }
      return newCol;
    }
    function setData(key, newRowData) {
      var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);
      var newData = _toConsumableArray(dataSource.value);
      newData[rowIndex] = newRowData;
      dataSource.value = newData;
    }
    function getData(key) {
      return store.value.getData(key);
    }
    function remove(key) {
      dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
    }
    function removeChildren(key) {
      dataSource.value = _toConsumableArray(store.value.removeChildren(key, dataSource.value, rowDataKeys.value));
    }
    function appendTo() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var newData = arguments.length > 1 ? arguments[1] : undefined;
      if (!key) {
        dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
        return;
      }
      dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
    }
    function insertAfter(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
    }
    function insertBefore(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
    }
    function swapData(params) {
      var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);
      if (r.result) {
        dataSource.value = _toConsumableArray(r.dataSource);
      } else {
        var _props$onAbnormalDrag;
        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 || _props$onAbnormalDrag.call(props, params2);
      }
    }
    function getTreeNode() {
      return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
    }
    function getTreeExpandedRow() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
      return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);
    }
    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      removeChildren: removeChildren,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode,
      resetData: resetData,
      getTreeExpandedRow: getTreeExpandedRow,
      onExpandFoldIconClick: onExpandFoldIconClick
    };
  }

  function ownKeys$k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$k(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, keys, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: [],
      leafNodeKeys: []
    };
    var children = get(data, keys.childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;
      return !((_treeDataMap$get = treeDataMap.get(get(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));
    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get(tItem, keys.childrenKey);
      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
        result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
      }
    }
    for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
      var item = result.allChildren[_i];
      var children2 = get(item, keys.childrenKey);
      var rowValue = get(item, keys.rowKey);
      result.allChildrenKeys.push(rowValue);
      if (!children2 || !children2.length) {
        result.leafNodeKeys.push(rowValue);
      }
    }
    result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
    result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
      removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }
    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
      selectedRowKeys = p.selectedRowKeys;
    var result = [];
    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }
    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var _toRefs = Vue.toRefs(props),
      selectedRowKeys = _toRefs.selectedRowKeys,
      tree = _toRefs.tree,
      data = _toRefs.data,
      indeterminateSelectedRowKeys = _toRefs.indeterminateSelectedRowKeys;
    var tIndeterminateSelectedRowKeys = Vue.ref([]);
    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSelectedRowKeys = _useDefaultValue2[0],
      setTSelectedRowKeys = _useDefaultValue2[1];
    var rowDataKeys = Vue.computed(function () {
      var _props$tree;
      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    Vue.watch([tree, treeDataMap, data, tSelectedRowKeys], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        tree2 = _ref2[0],
        treeDataMap2 = _ref2[1];
      if (!tree2 || !treeDataMap2.size || tree2.checkStrictly) return;
      updateIndeterminateState();
    });
    function updateIndeterminateState() {
      if (!tree.value || tree.value.checkStrictly) return;
      if (!tSelectedRowKeys.value.length) {
        tIndeterminateSelectedRowKeys.value = [];
        return;
      }
      var keys = [];
      var parentMap = {};
      for (var i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {
        var rowValue = tSelectedRowKeys.value[i];
        var state = treeDataMap.value.get(rowValue);
        if (!state) continue;
        var children = get(state.row, rowDataKeys.value.childrenKey);
        if (!children || !children.length) {
          var parentTmp = state.parent;
          while (parentTmp) {
            if (!parentMap[parentTmp.id]) {
              parentMap[parentTmp.id] = [];
            }
            parentMap[parentTmp.id].push(state.row);
            var checkedLength = parentMap[parentTmp.id].length;
            var _getChildrenData = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
              allChildrenKeys = _getChildrenData.allChildrenKeys;
            var parentTmpIndex = keys.indexOf(parentTmp.id);
            var selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);
            if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
              parentTmpIndex === -1 && keys.push(parentTmp.id);
            } else {
              parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
            }
            parentTmp = parentTmp.parent;
          }
        }
      }
      tIndeterminateSelectedRowKeys.value = keys;
    }
    function updateParentCheckedState(selectedKeys, currentRowKey, type) {
      if (!tree.value || tree.value.checkStrictly) return;
      var keys = _toConsumableArray(selectedKeys);
      var state = treeDataMap.value.get(currentRowKey);
      var parentTmp = state.parent;
      while (parentTmp) {
        var _getChildrenData2 = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
          leafNodeKeys = _getChildrenData2.leafNodeKeys;
        var checkedChildrenKeys = intersection$1(leafNodeKeys, selectedKeys);
        var selectedIndex = keys.indexOf(parentTmp.id);
        if (type === "uncheck") {
          selectedIndex !== -1 && keys.splice(selectedIndex, 1);
        } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
          selectedIndex === -1 && keys.push(parentTmp.id);
        }
        parentTmp = parentTmp.parent;
      }
      return keys;
    }
    function onInnerSelectChange(rowKeys, extraData) {
      if (!tree.value || tree.value.checkStrictly) {
        setTSelectedRowKeys(rowKeys, extraData);
        return;
      }
      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }
    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];
      if (extraData.type === "check") {
        var arr = _toConsumableArray(treeDataMap.value.values());
        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];
          if (!item.disabled) {
            newRowData.push(item.row);
            newRowKeys.push(get(item.row, rowDataKeys.value.rowKey));
          }
        }
      }
      var newExtraData = _objectSpread$k(_objectSpread$k({}, extraData), {}, {
        selectedRowData: newRowData || []
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    function handleSelect(rowKeys, extraData) {
      var _props$tree2;
      var newRowKeys = _toConsumableArray(rowKeys);
      if (((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.checkStrictly) === false) {
        if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
          var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
          var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);
          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });
          newRowKeys = _result.keys;
        }
      }
      newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap.value,
        selectedRowKeys: newRowKeys
      });
      var newExtraData = _objectSpread$k(_objectSpread$k({}, extraData), {}, {
        selectedRowData: newRowData
      });
      setTSelectedRowKeys(newRowKeys, newExtraData);
    }
    return {
      tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value ? indeterminateSelectedRowKeys : tIndeterminateSelectedRowKeys,
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded = ["store", "dataSource", "formatTreeColumn", "swapData", "onExpandFoldIconClick"];
  function ownKeys$j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$j(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _EnhancedTable = Vue.defineComponent({
    name: "TEnhancedTable",
    props: _objectSpread$j(_objectSpread$j(_objectSpread$j({}, baseTableProps), primaryTableProps), enhancedTableProps),
    setup: function setup(props, context) {
      var primaryTableRef = Vue.ref(null);
      var _useTreeData = useTreeData(props, context),
        store = _useTreeData.store,
        dataSource = _useTreeData.dataSource,
        formatTreeColumn = _useTreeData.formatTreeColumn,
        swapData = _useTreeData.swapData,
        onExpandFoldIconClick = _useTreeData.onExpandFoldIconClick,
        treeInstanceFunctions = _objectWithoutProperties$1(_useTreeData, _excluded);
      var classPrefix = usePrefixClass();
      var treeDataMap = Vue.ref(store.value.treeDataMap);
      var _useTreeSelect = useTreeSelect(props, treeDataMap),
        tIndeterminateSelectedRowKeys = _useTreeSelect.tIndeterminateSelectedRowKeys,
        onInnerSelectChange = _useTreeSelect.onInnerSelectChange;
      var _getColumns = function getColumns(columns) {
        var arr = [];
        for (var i = 0, len = columns.length; i < len; i++) {
          var _item$children, _item$children2;
          var item = _objectSpread$j({}, columns[i]);
          item = formatTreeColumn(item);
          if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
            item.children = _getColumns(item.children);
          }
          if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            arr.push(item);
          }
        }
        return arr;
      };
      var tColumns = Vue.computed(function () {
        var isTreeData = !props.tree || !Object.keys(props.tree).length;
        return isTreeData ? props.columns : _getColumns(props.columns);
      });
      var onDragSortChange = function onDragSortChange(params) {
        var _props$onDragSort;
        if (props.beforeDragSort && !props.beforeDragSort(params)) return;
        swapData({
          current: params.current,
          target: params.target,
          currentIndex: params.currentIndex,
          targetIndex: params.targetIndex
        });
        (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 || _props$onDragSort.call(props, params);
      };
      var onEnhancedTableRowClick = function onEnhancedTableRowClick(p) {
        var _props$tree, _props$onRowClick;
        if ((_props$tree = props.tree) !== null && _props$tree !== void 0 && _props$tree.expandTreeNodeOnClick) {
          onExpandFoldIconClick({
            row: p.row,
            rowIndex: p.index
          }, "row-click");
        }
        (_props$onRowClick = props.onRowClick) === null || _props$onRowClick === void 0 || _props$onRowClick.call(props, p);
      };
      var _getScrollRowIndex = function getScrollRowIndex(rowStateData, key) {
        if (!rowStateData) return -1;
        if (rowStateData.rowIndex >= 0) return rowStateData.rowIndex;
        if (rowStateData.rowIndex < 0) {
          return _getScrollRowIndex(rowStateData.parent);
        }
      };
      var scrollToElement = function scrollToElement(params) {
        var index = params.index;
        if (!index && index !== 0) {
          if (!params.key) {
            log.error("Table", "scrollToElement: one of `index` or `key` must exist.");
            return;
          }
          var rowStateData = treeDataMap.value.get(params.key);
          index = _getScrollRowIndex(rowStateData, params.key);
          if (index < 0 || index === void 0) {
            log.error("Table", "".concat(params.key, " does not exist in data, check `rowKey` or `data` please."));
          }
        }
        primaryTableRef.value.scrollToElement(_objectSpread$j(_objectSpread$j({}, params), {}, {
          index: index
        }));
      };
      context.expose(_objectSpread$j(_objectSpread$j({
        store: store.value,
        dataSource: dataSource.value
      }, treeInstanceFunctions), {}, {
        primaryTableRef: primaryTableRef,
        validateRowData: function validateRowData(rowValue) {
          return primaryTableRef.value.validateRowData(rowValue);
        },
        validateTableData: function validateTableData() {
          return primaryTableRef.value.validateTableData();
        },
        clearValidateData: function clearValidateData() {
          primaryTableRef.value.clearValidateData();
        },
        refreshTable: function refreshTable() {
          primaryTableRef.value.refreshTable();
        },
        scrollToElement: scrollToElement
      }));
      return function () {
        var _props$tree2;
        var _getCurrentInstance = Vue.getCurrentInstance(),
          vnode = _getCurrentInstance.vnode;
        var enhancedProps = _objectSpread$j(_objectSpread$j({}, vnode.props), {}, {
          rowKey: props.rowKey || "id",
          data: dataSource.value,
          columns: tColumns.value,
          indeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys.value,
          disableDataPage: Boolean(props.tree && Object.keys(props.tree).length) || props.disableDataPage,
          onSelectChange: onInnerSelectChange,
          onDragSort: onDragSortChange,
          rowClassName: function rowClassName(_ref) {
            var row = _ref.row;
            var rowValue = get(row, props.rowKey || "id");
            var rowState = treeDataMap.value.get(rowValue);
            if (!rowState) return [props.rowClassName];
            return ["".concat(classPrefix.value, "-table-tr--level-").concat(rowState.level), props.rowClassName];
          }
        });
        if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.expandTreeNodeOnClick) {
          enhancedProps.onRowClick = onEnhancedTableRowClick;
        }
        return Vue.createVNode(_PrimaryTable, Vue.mergeProps(enhancedProps, {
          "ref": primaryTableRef
        }), context.slots);
      };
    }
  });

  var BaseTable = withInstall$1(_BaseTable);
  var PrimaryTable = withInstall$1(_PrimaryTable);
  var EnhancedTable = withInstall$1(_EnhancedTable);
  var table = cloneDeep(_PrimaryTable);
  var Table = withInstall$1(table, "TTable");

  var TimeLineProps = {
    labelAlign: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "alternate", "top", "bottom"].includes(val);
      }
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    mode: {
      type: String,
      "default": "alternate",
      validator: function validator(val) {
        if (!val) return true;
        return ["alternate", "same"].includes(val);
      }
    },
    reverse: Boolean,
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    }
  };

  var DefaultAlign = {
    vertical: ["left", "right"],
    horizontal: ["top", "bottom"]
  };
  var TimelineInjectKey = Symbol("timeLineProvide");
  var DEFAULT_PROVIDER = Vue.computed(function () {
    return {
      theme: "default",
      reverse: false,
      itemsStatus: [],
      layout: "horizontal",
      renderAlign: "left",
      mode: "alternate"
    };
  });

  var props$f = {
    content: {
      type: [String, Function]
    },
    dot: {
      type: Function
    },
    dotColor: {
      type: String,
      "default": "primary"
    },
    label: {
      type: [String, Function]
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    loading: Boolean,
    onClick: Function
  };

  function ownKeys$i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$i(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DEFAULT_THEME = ["default", "primary", "success", "warning", "error"];
  var _TimelineItem = Vue.defineComponent({
    name: "TTimelineItem",
    props: _objectSpread$i(_objectSpread$i({}, props$f), {}, {
      index: {
        type: Number
      }
    }),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("timeline-item");
      var TimelineProvider = Vue.inject(TimelineInjectKey, DEFAULT_PROVIDER);
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var getPositionClassName = function getPositionClassName(index) {
        var _props2$labelAlign;
        var _TimelineProvider$val = TimelineProvider.value,
          layout = _TimelineProvider$val.layout,
          renderAlign = _TimelineProvider$val.renderAlign;
        var timelineItemAlign = (_props2$labelAlign = props2.labelAlign) !== null && _props2$labelAlign !== void 0 ? _props2$labelAlign : renderAlign;
        var left = layout === "horizontal" ? "top" : "left";
        var right = layout === "horizontal" ? "bottom" : "right";
        if (timelineItemAlign === "alternate") {
          return index % 2 === 0 ? "".concat(COMPONENT_NAME.value, "-").concat(left) : "".concat(COMPONENT_NAME.value, "-").concat(right);
        }
        if (timelineItemAlign === "left" || timelineItemAlign === "top") {
          return "".concat(COMPONENT_NAME.value, "-").concat(left);
        }
        if (timelineItemAlign === "right" || timelineItemAlign === "bottom") {
          return "".concat(COMPONENT_NAME.value, "-").concat(right);
        }
        return "";
      };
      var handleClick = function handleClick(e) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
          e: e,
          item: omit$1(props2, ["index"])
        });
      };
      return function () {
        var _TimelineProvider$val2 = TimelineProvider.value,
          mode = _TimelineProvider$val2.mode,
          theme = _TimelineProvider$val2.theme,
          itemsStatus = _TimelineProvider$val2.itemsStatus,
          reverse = _TimelineProvider$val2.reverse;
        var loading = props2.loading,
          dotColor = props2.dotColor,
          index = props2.index;
        var labelNode = renderTNodeJSX("label");
        var dotElement = renderTNodeJSX("dot");
        var dotContentClass = "".concat(COMPONENT_NAME.value, "__dot-content");
        if (dotElement !== null && dotElement !== void 0 && dotElement.props) {
          var _dotElement$props;
          var classes = dotElement === null || dotElement === void 0 || (_dotElement$props = dotElement.props) === null || _dotElement$props === void 0 ? void 0 : _dotElement$props["class"];
          dotElement.props["class"] = classes ? [dotContentClass, classes].join(" ") : dotContentClass;
        }
        return Vue.createVNode("li", {
          "class": ["".concat(COMPONENT_NAME.value), "".concat(getPositionClassName(props2.index))],
          "onClick": handleClick
        }, [mode === "alternate" && labelNode && Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
        }, [labelNode]), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__wrapper")
        }, [Vue.createVNode("div", {
          "class": _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__dot"), true), "".concat(COMPONENT_NAME.value, "__dot--custom"), !!dotElement || !dotElement && loading), "".concat(COMPONENT_NAME.value, "__dot--").concat(dotColor), DEFAULT_THEME.includes(dotColor)),
          "style": {
            borderColor: !DEFAULT_THEME.includes(dotColor) && dotColor
          }
        }, [!dotElement && loading && Vue.createVNode(Loading, {
          "size": "12px",
          "class": dotContentClass
        }, null), dotElement]), Vue.createVNode("div", {
          "class": _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__tail"), true), "".concat(COMPONENT_NAME.value, "__tail--theme-").concat(theme), true), "".concat(COMPONENT_NAME.value, "__tail--status-").concat(itemsStatus[index]), reverse)
        }, null)]), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderContent("default", "content"), mode === "same" && labelNode && Vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__label"), "".concat(COMPONENT_NAME.value, "__label--").concat(mode)]
        }, [labelNode])])]);
      };
    }
  });

  var _Timeline = Vue.defineComponent({
    name: "TTimeline",
    props: TimeLineProps,
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("timeline");
      var renderAlign = Vue.computed(function () {
        var labelAlign = props.labelAlign,
          layout = props.layout;
        var res = layout === "vertical" ? "left" : "top";
        if (layout === "vertical" && labelAlign) {
          var index = DefaultAlign.horizontal.indexOf(labelAlign);
          var isError = index !== -1;
          isError && log.warn("Timeline", 'If layout is vertical, align should be "left","alternate" or "right" ');
          res = isError ? DefaultAlign.vertical[index] : labelAlign;
        }
        if (layout === "horizontal" && labelAlign) {
          var _index = DefaultAlign.vertical.indexOf(labelAlign);
          var _isError = _index !== -1;
          _isError && log.warn("Timeline", 'If layout is horizontal, align should be "top","alternate" or "bottom" ');
          res = _isError ? DefaultAlign.horizontal[_index] : labelAlign;
        }
        return res;
      });
      var TimeLineProvide = Vue.computed(function () {
        var theme = props.theme,
          reverse = props.reverse,
          layout = props.layout,
          labelAlign = props.labelAlign,
          mode = props.mode;
        return {
          theme: theme,
          reverse: reverse,
          itemsStatus: [""],
          layout: layout,
          globalAlign: labelAlign,
          mode: mode,
          renderAlign: renderAlign.value
        };
      });
      var hasLabelItem = 1;
      Vue.provide(TimelineInjectKey, TimeLineProvide);
      return function () {
        var getChildComponentSlots = useChildComponentSlots();
        var timelineItems = getChildComponentSlots("TTimelineItem");
        if (props.reverse) timelineItems = timelineItems.reverse();
        return Vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value), _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-").concat(renderAlign.value), true), "".concat(COMPONENT_NAME.value, "-reverse"), props.reverse), "".concat(COMPONENT_NAME.value, "-").concat(props.layout), true), "".concat(COMPONENT_NAME.value, "-label"), hasLabelItem), "".concat(COMPONENT_NAME.value, "-label--").concat(props.mode), true)]
        }, [timelineItems.map(function (item, index) {
          return Vue.createVNode(_TimelineItem, Vue.mergeProps(item.props, {
            "index": index,
            "class": _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "-item--last"), index === timelineItems.length - 1)
          }), item.children);
        })]);
      };
    }
  });

  var Timeline = withInstall$1(_Timeline);
  var TimelineItem = withInstall$1(_TimelineItem);

  var props$e = {
    borderless: Boolean,
    defaultExpandAll: Boolean,
    disabled: Boolean,
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandIconPlacement: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    expandMutex: Boolean,
    expandOnRowClick: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onChange: Function
  };

  var _Collapse = Vue.defineComponent({
    name: "TCollapse",
    props: props$e,
    setup: function setup(props2) {
      var componentName = usePrefixClass("collapse");
      var borderlessClass = usePrefixClass("-border-less");
      var renderTNodeJSX = useTNodeJSX();
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        expandMutex = _toRefs.expandMutex,
        borderless = _toRefs.borderless,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        collapseValue = _useVModel2[0],
        setCollapseValue = _useVModel2[1];
      var updateCollapseValue = function updateCollapseValue(value2) {
        var newValue = [].concat(collapseValue.value || []);
        var index = newValue.indexOf(value2);
        if (index >= 0) {
          newValue.splice(index, 1);
        } else if (expandMutex.value) {
          newValue = [value2];
        } else {
          newValue.push(value2);
        }
        setCollapseValue(newValue);
      };
      var classes = Vue.computed(function () {
        return [componentName.value, _defineProperty$2({}, borderlessClass.value, !!borderless.value)];
      });
      var getUniqId = function () {
        var index = 0;
        return function () {
          return index++;
        };
      }();
      Vue.provide("collapseValue", collapseValue);
      Vue.provide("updateCollapseValue", updateCollapseValue);
      Vue.provide("collapseProps", Vue.toRefs(props2));
      Vue.provide("getUniqId", getUniqId);
      Vue.provide("renderParentTNode", renderTNodeJSX);
      return function () {
        var nodes = renderTNodeJSX("default");
        return Vue.createVNode("div", {
          "class": classes.value
        }, [nodes]);
      };
    }
  });

  var props$d = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnCollapse: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    header: {
      type: [String, Function]
    },
    headerRightContent: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  function _isSlot$7(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _CollapsePanel = Vue.defineComponent({
    name: "TCollapsePanel",
    props: props$d,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var componentName = usePrefixClass("collapse-panel");
      var disableClass = usePrefixClass("is-disabled");
      var clickableClass = usePrefixClass("is-clickable");
      var transitionClass = usePrefixClass("slide-down");
      var _toRefs = Vue.toRefs(props2),
        value = _toRefs.value,
        disabled = _toRefs.disabled,
        destroyOnCollapse = _toRefs.destroyOnCollapse;
      var collapseValue = Vue.inject("collapseValue");
      var updateCollapseValue = Vue.inject("updateCollapseValue");
      var getUniqId = Vue.inject("getUniqId", function () {
        return void 0;
      }, false);
      var _inject = Vue.inject("collapseProps"),
        defaultExpandAll = _inject.defaultExpandAll,
        disableAll = _inject.disabled,
        expandIconPlacement = _inject.expandIconPlacement,
        expandOnRowClick = _inject.expandOnRowClick;
      var renderParentTNode = Vue.inject("renderParentTNode");
      var innerValue = value.value || getUniqId();
      if (defaultExpandAll.value) {
        updateCollapseValue(innerValue);
      }
      var _useCollapseAnimation = useCollapseAnimation(),
        beforeEnter = _useCollapseAnimation.beforeEnter,
        enter = _useCollapseAnimation.enter,
        afterEnter = _useCollapseAnimation.afterEnter,
        beforeLeave = _useCollapseAnimation.beforeLeave,
        leave = _useCollapseAnimation.leave,
        afterLeave = _useCollapseAnimation.afterLeave;
      var iconRef = Vue.ref();
      var isDisabled = Vue.computed(function () {
        return disabled.value || disableAll.value;
      });
      var isActive = Vue.computed(function () {
        return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
      });
      var classes = Vue.computed(function () {
        return [componentName.value, _defineProperty$2({}, disableClass.value, isDisabled.value)];
      });
      var panelExpandIcon = Vue.computed(function () {
        return slots.expandIcon || props2.expandIcon;
      });
      var handleClick = function handleClick(e) {
        var canExpand = expandOnRowClick.value || e.currentTarget === iconRef.value;
        if (canExpand && !isDisabled.value) {
          updateCollapseValue(innerValue);
        }
        e.stopPropagation();
      };
      var handleHeaderRightContentClick = function handleHeaderRightContentClick(e) {
        e.stopPropagation();
      };
      var renderDefaultIcon = function renderDefaultIcon() {
        return Vue.createVNode(FakeArrow, {
          "overlayClassName": "".concat(componentName.value, "__icon--default")
        }, null);
      };
      var renderIcon = function renderIcon() {
        var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
        return Vue.createVNode("div", {
          "ref": iconRef,
          "class": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(expandIconPlacement.value, " ").concat(isActive.value ? "".concat(componentName.value, "__icon--active") : ""),
          "onClick": handleClick
        }, [tNodeRender("expandIcon", renderDefaultIcon())]);
      };
      var renderBlank = function renderBlank() {
        return Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__header--blank")
        }, null);
      };
      var renderHeaderRightContent = function renderHeaderRightContent() {
        var headerRightContent = renderTNodeJSX("headerRightContent");
        return headerRightContent ? Vue.createVNode("div", {
          "onClick": handleHeaderRightContentClick
        }, [headerRightContent]) : null;
      };
      var renderHeader = function renderHeader() {
        var cls = ["".concat(componentName.value, "__header"), _defineProperty$2({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
        return Vue.createVNode("div", {
          "class": cls,
          "onClick": handleClick
        }, [expandIconPlacement.value === "left" && renderIcon(), renderTNodeJSX("header"), renderBlank(), renderHeaderRightContent(), expandIconPlacement.value === "right" && renderIcon()]);
      };
      var renderBodyByNormal = function renderBodyByNormal() {
        return Vue.withDirectives(Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderContent("default", "content")])]), [[Vue.vShow, isActive.value]]);
      };
      var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse() {
        return isActive.value ? Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderContent("default", "content")])]) : null;
      };
      var renderBody = function renderBody() {
        return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
      };
      return function () {
        var _slot;
        return Vue.createVNode("div", {
          "class": classes.value
        }, [Vue.createVNode("div", {
          "class": "".concat(componentName.value, "__wrapper")
        }, [renderHeader(), Vue.createVNode(Vue.Transition, {
          "name": transitionClass.value,
          "onBeforeEnter": beforeEnter,
          "onEnter": enter,
          "onAfterEnter": afterEnter,
          "onBeforeLeave": beforeLeave,
          "onLeave": leave,
          "onAfterLeave": afterLeave
        }, _isSlot$7(_slot = renderBody()) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })])]);
      };
    }
  });

  var Collapse = withInstall$1(_Collapse);
  var CollapsePanel = withInstall$1(_CollapsePanel);

  var props$c = {
    alpha: {
      type: Number,
      "default": 1
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    height: {
      type: Number
    },
    isRepeat: {
      type: Boolean,
      "default": true
    },
    lineSpace: {
      type: Number,
      "default": 16
    },
    movable: Boolean,
    moveInterval: {
      type: Number,
      "default": 3e3
    },
    offset: {
      type: Array
    },
    removable: {
      type: Boolean,
      "default": true
    },
    rotate: {
      type: Number,
      "default": -22
    },
    watermarkContent: {
      type: [Object, Array]
    },
    width: {
      type: Number
    },
    x: {
      type: Number
    },
    y: {
      type: Number
    },
    zIndex: {
      type: Number
    }
  };

  function ownKeys$h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$h(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function generateBase64Url(_ref, onFinish) {
    var width = _ref.width,
      height = _ref.height,
      gapX = _ref.gapX,
      gapY = _ref.gapY,
      offsetLeft = _ref.offsetLeft,
      offsetTop = _ref.offsetTop,
      rotate = _ref.rotate,
      alpha = _ref.alpha,
      watermarkContent = _ref.watermarkContent,
      lineSpace = _ref.lineSpace,
      _ref$fontColor = _ref.fontColor,
      fontColor = _ref$fontColor === void 0 ? "rgba(0,0,0,0.1)" : _ref$fontColor;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (!ctx) {
      console.warn("\u5F53\u524D\u73AF\u5883\u4E0D\u652F\u6301Canvas, \u65E0\u6CD5\u7ED8\u5236\u6C34\u5370");
      onFinish("");
      return;
    }
    var ratio = window.devicePixelRatio || 1;
    var canvasWidth = (gapX + width) * ratio;
    var canvasHeight = (gapY + height) * ratio;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = "".concat(gapX + width, "px");
    canvas.style.height = "".concat(gapY + height, "px");
    ctx.translate(offsetLeft * ratio, offsetTop * ratio);
    ctx.rotate(Math.PI / 180 * Number(rotate));
    ctx.globalAlpha = alpha;
    var markWidth = width * ratio;
    var markHeight = height * ratio;
    ctx.fillStyle = "transparent";
    ctx.fillRect(0, 0, markWidth, markHeight);
    var contents = Array.isArray(watermarkContent) ? watermarkContent : [_objectSpread$h({}, watermarkContent)];
    var top = 0;
    contents.forEach(function (item) {
      if (item.url) {
        var url = item.url,
          _item$isGrayscale = item.isGrayscale,
          isGrayscale = _item$isGrayscale === void 0 ? false : _item$isGrayscale;
        item.top = top;
        top += height;
        var img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.src = url;
        img.onload = function () {
          ctx.drawImage(img, 0, item.top * ratio, width * ratio, height * ratio);
          if (isGrayscale) {
            var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
            var pixels = imgData.data;
            for (var i = 0; i < pixels.length; i += 4) {
              var lightness = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
              pixels[i] = lightness;
              pixels[i + 1] = lightness;
              pixels[i + 2] = lightness;
            }
            ctx.putImageData(imgData, 0, 0);
          }
          onFinish(canvas.toDataURL());
        };
      } else if (item.text) {
        var text = item.text,
          _item$fontSize = item.fontSize,
          fontSize = _item$fontSize === void 0 ? 16 : _item$fontSize,
          _item$fontFamily = item.fontFamily,
          fontFamily = _item$fontFamily === void 0 ? void 0 : _item$fontFamily,
          _item$fontWeight = item.fontWeight,
          fontWeight = _item$fontWeight === void 0 ? "normal" : _item$fontWeight;
        var fillStyle = (item === null || item === void 0 ? void 0 : item.fontColor) || fontColor;
        item.top = top;
        top += lineSpace;
        var markSize = Number(fontSize) * ratio;
        ctx.font = "normal normal ".concat(fontWeight, " ").concat(markSize, "px/").concat(markHeight, "px ").concat(fontFamily);
        ctx.textAlign = "start";
        ctx.textBaseline = "top";
        ctx.fillStyle = fillStyle;
        ctx.fillText(text, 0, item.top * ratio);
      }
    });
    onFinish(canvas.toDataURL());
  }

  function randomMovingStyle() {
    var align = Math.floor(Math.random() * 4);
    var p1 = Math.floor(Math.random() * 70) + 30;
    var leftTopLimit = 0;
    var bottomLimit = 95;
    var rightLimit = 90;
    var keyframesStyle = "\n  @keyframes watermark {\n    0%   {left: ".concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n    25% {left: ").concat(align === 0 ? rightLimit : align === 2 ? leftTopLimit : 100 - p1, "%; top: ").concat(align === 1 ? bottomLimit : align === 3 ? leftTopLimit : p1, "%;}\n    50% {left: ").concat(align === 1 ? leftTopLimit : align === 3 ? rightLimit : 100 - p1, "%; top: ").concat(align === 0 ? bottomLimit : align === 2 ? leftTopLimit : 100 - p1, "%; transform: translateX(-100%);}\n    75% {left: ").concat(align === 0 ? leftTopLimit : align === 2 ? rightLimit : p1, "%; top: ").concat(align === 1 ? leftTopLimit : align === 3 ? bottomLimit : 100 - p1, "%;}\n    100% {left: ").concat(align === 1 ? rightLimit : align === 3 ? leftTopLimit : p1, "%; top: ").concat(align === 0 ? leftTopLimit : align === 2 ? bottomLimit : p1, "%;}\n  }\n  ");
    return keyframesStyle;
  }

  var injectStyle = function injectStyle(style) {
    var styleElement = document.createElement("style");
    var styleSheet = null;
    document.head.appendChild(styleElement);
    styleSheet = styleElement.sheet;
    styleSheet.insertRule(style, styleSheet.cssRules.length);
  };

  function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
  function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var _Watermark = Vue.defineComponent({
    name: "TWatermark",
    props: props$c,
    setup: function setup(props2) {
      var backgroundImage = Vue.ref("");
      var watermarkRef = Vue.shallowRef();
      var watermarkContentRef = Vue.shallowRef();
      var offset = Vue.reactive(props2.offset || []);
      var gapX = Vue.computed(function () {
        return props2.movable ? 0 : props2.x;
      });
      var gapY = Vue.computed(function () {
        return props2.movable ? 0 : props2.y;
      });
      var rotate = Vue.computed(function () {
        return props2.movable ? 0 : props2.rotate;
      });
      var backgroundRepeat = Vue.computed(function () {
        if (props2.movable) {
          return "no-repeat";
        }
        return props2.isRepeat ? "repeat" : "no-repeat";
      });
      var offsetLeft = Vue.computed(function () {
        return offset[0] || gapX.value / 2;
      });
      var offsetTop = Vue.computed(function () {
        return offset[1] || gapY.value / 2;
      });
      var _useVariables = useVariables({
          fontColor: "--td-bg-color-secondarycontainer-hover"
        }),
        fontColor = _useVariables.fontColor;
      var bgImageOptions = Vue.computed(function () {
        return {
          width: props2.width,
          height: props2.height,
          rotate: rotate.value,
          lineSpace: props2.lineSpace,
          alpha: props2.alpha,
          gapX: gapX.value,
          gapY: gapY.value,
          watermarkContent: props2.watermarkContent,
          offsetLeft: offsetLeft.value,
          offsetTop: offsetTop.value,
          fontColor: fontColor.value
        };
      });
      var removeWaterMark = function removeWaterMark() {
        if (!watermarkContentRef.value) return;
        watermarkContentRef.value.remove();
        watermarkContentRef.value = null;
      };
      var injectWaterMark = function injectWaterMark() {
        generateBase64Url(bgImageOptions.value, function (base64Url) {
          var _watermarkRef$value;
          removeWaterMark();
          backgroundImage.value = base64Url;
          watermarkContentRef.value = document.createElement("div");
          setStyle(watermarkContentRef.value, {
            zIndex: props2.zIndex,
            position: "absolute",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            width: "100%",
            height: "100%",
            backgroundSize: "".concat(gapX.value + props2.width, "px"),
            pointerEvents: "none",
            backgroundRepeat: backgroundRepeat.value,
            backgroundImage: "url('".concat(backgroundImage.value, "')"),
            animation: props2.movable ? "watermark infinite ".concat(props2.moveInterval * 4 / 60, "s") : "none"
          });
          (_watermarkRef$value = watermarkRef.value) === null || _watermarkRef$value === void 0 || _watermarkRef$value.append(watermarkContentRef.value);
        });
        if (props2.movable) {
          var keyframesStyle = randomMovingStyle();
          injectStyle(keyframesStyle);
        }
      };
      Vue.onMounted(function () {
        injectWaterMark();
        useMutationObserver(watermarkRef.value, function (mutations) {
          if (props2.removable || !watermarkContentRef.value) return;
          var _iterator = _createForOfIteratorHelper$1(mutations),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var mutation = _step.value;
              var isRemoved = Array.from(mutation.removedNodes).includes(watermarkContentRef.value);
              var isModified = mutation.type === "attributes" && watermarkContentRef.value === mutation.target;
              if (isRemoved || isModified) {
                injectWaterMark();
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      });
      Vue.watch(function () {
        return [props2, fontColor.value];
      }, injectWaterMark, {
        deep: true,
        flush: "post"
      });
      return function () {
        var COMPONENT_NAME = usePrefixClass("watermark");
        var renderContent = useContent();
        return Vue.createVNode("div", {
          "style": {
            position: "relative",
            overflow: "hidden",
            width: "100%"
          },
          "class": COMPONENT_NAME.value,
          "ref": watermarkRef
        }, [renderContent("default", "content")]);
      };
    }
  });

  var Watermark = withInstall$1(_Watermark);

  var props$b = {
    allowHalf: Boolean,
    clearable: Boolean,
    color: {
      type: [String, Array],
      "default": "#ED7B2F"
    },
    count: {
      type: Number,
      "default": 5
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    gap: {
      type: Number,
      "default": 4
    },
    icon: {
      type: Function
    },
    showText: Boolean,
    size: {
      type: String,
      "default": "24px"
    },
    texts: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultValue: {
      type: Number,
      "default": 0
    },
    onChange: Function
  };

  var _Rate = Vue.defineComponent({
    name: "TRate",
    props: props$b,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var _useConfig = useConfig("rate"),
        globalConfig = _useConfig.globalConfig;
      var activeColor = isArray$1(props2.color) ? props2.color[0] : props2.color;
      var defaultColor = isArray$1(props2.color) ? props2.color[1] : "var(--td-bg-color-component)";
      var _toRefs = Vue.toRefs(props2),
        inputValue = _toRefs.value,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(inputValue, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        starValue = _useVModel2[0],
        setStarValue = _useVModel2[1];
      var hoverValue = Vue.ref(void 0);
      var root = Vue.ref();
      var displayValue = Vue.computed(function () {
        return Number(hoverValue.value || starValue.value);
      });
      var displayTexts = Vue.computed(function () {
        return props2.texts.length === 0 ? globalConfig.value.rateText : props2.texts;
      });
      var displayText = Vue.computed(function () {
        return displayTexts.value[Math.ceil(displayValue.value - 1)];
      });
      var RateIcon = function RateIcon(iconProps) {
        if (slots.icon !== void 0) {
          return renderTNodeJSX("icon", {
            params: iconProps
          });
        }
        return Vue.createVNode(StarFilledIcon, iconProps, null);
      };
      var getStarValue = function getStarValue(event, index) {
        if (props2.allowHalf) {
          var _root$value$getBoundi = root.value.getBoundingClientRect(),
            left = _root$value$getBoundi.left;
          var firstStar = root.value.firstChild.nextSibling;
          var _firstStar$getBoundin = firstStar.getBoundingClientRect(),
            width = _firstStar$getBoundin.width;
          var clientX = event.clientX;
          var starMiddle = width * (index - 0.5) + props2.gap * (index - 1);
          if (clientX - left >= starMiddle) return index;
          if (clientX - left < starMiddle) return index - 0.5;
        }
        return index;
      };
      var mouseEnterHandler = function mouseEnterHandler(event, index) {
        if (props2.disabled) return;
        hoverValue.value = getStarValue(event, index);
      };
      var mouseLeaveHandler = function mouseLeaveHandler() {
        if (props2.disabled) return;
        hoverValue.value = void 0;
      };
      var clickHandler = function clickHandler(event, index) {
        if (props2.disabled) return;
        var value = getStarValue(event, index);
        if (props2.clearable && value === starValue.value) {
          hoverValue.value = void 0;
          setStarValue(0);
        } else {
          setStarValue(value);
        }
      };
      var getStarCls = function getStarCls(index) {
        if (props2.allowHalf && index + 0.5 === displayValue.value) return "".concat(classPrefix.value, "-rate__item--half");
        if (index >= displayValue.value) return "";
        if (index < displayValue.value) return "".concat(classPrefix.value, "-rate__item--full");
      };
      var _useConfig2 = useConfig("classPrefix"),
        classPrefix = _useConfig2.classPrefix;
      return function () {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-rate"),
          "onMouseleave": mouseLeaveHandler
        }, [Vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-rate__list"),
          "style": {
            gap: "".concat(props2.gap, "px")
          },
          "ref": root
        }, [_toConsumableArray(Array(Number(props2.count))).map(function (_, index) {
          return Vue.createVNode("li", {
            "key": index,
            "class": ["".concat(classPrefix.value, "-rate__item"), getStarCls(index)],
            "onClick": function onClick(event) {
              return clickHandler(event, index + 1);
            },
            "onMousemove": function onMousemove(event) {
              return mouseEnterHandler(event, index + 1);
            }
          }, [props2.showText ? Vue.createVNode(Tooltip, {
            "key": index,
            "content": displayText.value
          }, {
            "default": function _default() {
              return [Vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-rate__star-top")
              }, [Vue.createVNode(RateIcon, {
                "size": props2.size,
                "color": activeColor
              }, null)]), Vue.createVNode("div", {
                "class": "".concat(classPrefix.value, "-rate__star-bottom")
              }, [Vue.createVNode(RateIcon, {
                "size": props2.size,
                "color": defaultColor
              }, null)])];
            }
          }) : Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-rate__star-top")
          }, [Vue.createVNode(RateIcon, {
            "size": props2.size,
            "color": activeColor
          }, null)]), Vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-rate__star-bottom")
          }, [Vue.createVNode(RateIcon, {
            "size": props2.size,
            "color": defaultColor
          }, null)])])]);
        })]), props2.showText && Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-rate__text")
        }, [displayText.value])]);
      };
    }
  });

  var Rate = withInstall$1(_Rate);

  var props$a = {
    code: Boolean,
    content: {
      type: [String, Function]
    },
    copyable: {
      type: [Boolean, Object],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    "delete": Boolean,
    disabled: Boolean,
    ellipsis: {
      type: [Boolean, Object],
      "default": false
    },
    italic: Boolean,
    keyboard: Boolean,
    mark: {
      type: [String, Boolean],
      "default": false
    },
    strong: Boolean,
    theme: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["primary", "secondary", "success", "warning", "error"].includes(val);
      }
    },
    underline: Boolean
  };

  var defaultMessage = "Copy to clipboard: #{key}, Enter";
  var format = function format(message) {
    var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
    return message.replace(/#{\s*key\s*}/g, copyKey);
  };
  var deselectCurrent = function deselectCurrent() {
    var selection = document.getSelection();
    if (!selection.rangeCount) {
      return function () {};
    }
    var active = document.activeElement;
    var ranges = [];
    for (var i = 0; i < selection.rangeCount; i++) {
      ranges.push(selection.getRangeAt(i));
    }
    var tagName = active.tagName.toUpperCase();
    switch (tagName) {
      case "INPUT":
      case "TEXTAREA":
        active.blur();
        break;
      default:
        active = null;
        break;
    }
    selection.removeAllRanges();
    return function () {
      selection.type === "Caret" && selection.removeAllRanges();
      if (!selection.rangeCount) {
        ranges.forEach(function (range) {
          selection.addRange(range);
        });
      }
      active && active.focus();
    };
  };
  var copy = function copy(text, options) {
    var message,
      reselectPrevious,
      range,
      selection,
      mark,
      success = false;
    if (!options) {
      options = {};
    }
    try {
      reselectPrevious = deselectCurrent();
      range = document.createRange();
      selection = document.getSelection();
      mark = document.createElement("span");
      mark.textContent = text;
      mark.style.all = "unset";
      mark.style.position = "fixed";
      mark.style.top = "0";
      mark.style.clip = "rect(0, 0, 0, 0)";
      mark.style.whiteSpace = "pre";
      mark.style.webkitUserSelect = "text";
      mark.style.userSelect = "text";
      mark.addEventListener("copy", function (e) {
        e.stopPropagation();
        if (options.format) {
          e.preventDefault();
          e.clipboardData.clearData();
          e.clipboardData.setData(options.format, text);
        }
        if (options.onCopy) {
          e.preventDefault();
          options.onCopy(e.clipboardData);
        }
      });
      document.body.appendChild(mark);
      range.selectNodeContents(mark);
      selection.addRange(range);
      var successful = document.execCommand("copy");
      if (!successful) {
        throw new Error("copy command was unsuccessful");
      }
      success = true;
    } catch (err) {
      try {
        window.clipboardData.setData(options.format || "text", text);
        options.onCopy && options.onCopy(window.clipboardData);
        success = true;
      } catch (err2) {
        message = format("message" in options ? options.message : defaultMessage);
        window.prompt(message, text);
      }
    } finally {
      if (selection) {
        if (typeof selection.removeRange == "function") {
          selection.removeRange(range);
        } else {
          selection.removeAllRanges();
        }
      }
      if (mark) {
        document.body.removeChild(mark);
      }
      reselectPrevious();
    }
    return success;
  };

  var props$9 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    ellipsis: {
      type: [Boolean, Object],
      "default": false
    }
  };

  function ownKeys$g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$g(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$6(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var Ellipsis = Vue.defineComponent({
    name: "TEllipsis",
    components: {
      TTooltip: Tooltip
    },
    props: props$9,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("typography");
      var _useConfig = useConfig("typography"),
        globalConfig = _useConfig.globalConfig;
      var content = Vue.computed(function () {
        return props2.content || (slots === null || slots === void 0 ? void 0 : slots["default"]());
      });
      var ellipsisState = Vue.computed(function () {
        var ellipsis = props2.ellipsis;
        return _objectSpread$g({
          row: 1,
          expandable: false
        }, _typeof$3(ellipsis) === "object" ? ellipsis : null);
      });
      var ellipsisStyles = Vue.computed(function () {
        var ellipsis = ellipsisState.value;
        var def = {
          overflow: props2.ellipsis ? "hidden" : "visible",
          textOverflow: props2.ellipsis ? "ellipsis" : "initial",
          whiteSpace: props2.ellipsis ? "normal" : "nowrap",
          display: "-webkit-box",
          WebkitLineClamp: ellipsis.row,
          WebkitBoxOrient: "vertical"
        };
        if (isExpand.value) {
          def.overflow = "visible";
          def.whiteSpace = "normal";
          def.display = "initial";
        }
        return def;
      });
      var isExpand = Vue.ref(false);
      var onExpand = function onExpand() {
        var _props2$ellipsis$onEx, _props2$ellipsis;
        isExpand.value = true;
        if (_typeof$3(props2.ellipsis) === "object") (_props2$ellipsis$onEx = (_props2$ellipsis = props2.ellipsis).onExpand) === null || _props2$ellipsis$onEx === void 0 || _props2$ellipsis$onEx.call(_props2$ellipsis, true);
      };
      var onCollapse = function onCollapse() {
        var _props2$ellipsis$onEx2, _props2$ellipsis2;
        isExpand.value = false;
        if (_typeof$3(props2.ellipsis) === "object") (_props2$ellipsis$onEx2 = (_props2$ellipsis2 = props2.ellipsis).onExpand) === null || _props2$ellipsis$onEx2 === void 0 || _props2$ellipsis$onEx2.call(_props2$ellipsis2, false);
      };
      var renderEllipsisExpand = function renderEllipsisExpand() {
        var suffix = ellipsisState.value.suffix;
        var moreNode = Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-ellipsis-symbol"),
          "onClick": onExpand,
          "style": "text-decoration:none;white-space:nowrap;flex: 1;"
        }, [suffix || globalConfig.value.expandText]);
        var _ellipsisState$value = ellipsisState.value,
          tooltipProps = _ellipsisState$value.tooltipProps,
          expandable = _ellipsisState$value.expandable,
          collapsible = _ellipsisState$value.collapsible;
        if (!isExpand.value && expandable) {
          return tooltipProps && tooltipProps.content ? Vue.createVNode(Tooltip, Vue.mergeProps(tooltipProps, {
            "content": tooltipProps.content
          }), _isSlot$6(moreNode) ? moreNode : {
            "default": function _default() {
              return [moreNode];
            }
          }) : moreNode;
        }
        if (expandable && isExpand.value && collapsible) {
          return Vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "-ellipsis-symbol"),
            "onClick": onCollapse,
            "style": "text-decoration:none;white-space:nowrap;flex: 1;"
          }, [globalConfig.value.collapseText]);
        }
      };
      return function () {
        var tooltipProps = ellipsisState.value.tooltipProps;
        return Vue.createVNode("div", {
          "style": {
            display: "flex",
            alignItems: "flex-end"
          }
        }, [tooltipProps && Vue.createVNode(Tooltip, {
          "content": tooltipProps.content,
          "placement": "top-right"
        }, null), Vue.createVNode("p", {
          "style": props2.ellipsis ? ellipsisStyles.value : {}
        }, [content.value]), renderEllipsisExpand()]);
      };
    }
  });

  function _isSlot$5(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Text = Vue.defineComponent({
    name: "TTypographyText",
    props: props$a,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("typography");
      var _useConfig = useConfig("typography"),
        globalConfig = _useConfig.globalConfig;
      var isCopied = Vue.ref(false);
      var renderContent = useContent();
      var wrapperDecorations = function wrapperDecorations(_ref2, content2) {
        var code = _ref2.code,
          underline = _ref2.underline,
          del = _ref2["delete"],
          strong = _ref2.strong,
          keyboard = _ref2.keyboard,
          mark = _ref2.mark,
          italic = _ref2.italic;
        var currentContent = content2;
        function wrap(needed, Tag) {
          var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          if (!needed) return;
          var _currentContent = function () {
            return currentContent;
          }();
          currentContent = Vue.createVNode(Tag, {
            "style": styles
          }, _isSlot$5(currentContent) ? currentContent : {
            "default": function _default() {
              return [_currentContent];
            }
          });
        }
        wrap(strong, "strong");
        wrap(underline, "u");
        wrap(del, "del");
        wrap(code, "code");
        wrap(mark !== false, "mark", mark ? {
          color: mark
        } : {});
        wrap(keyboard, "kbd");
        wrap(italic, "i");
        return currentContent;
      };
      var classList = Vue.computed(function () {
        var theme = props2.theme,
          disabled = props2.disabled;
        var prefix = COMPONENT_NAME.value;
        var list = [prefix];
        if (disabled) {
          list.push("".concat(prefix, "--disabled"));
        } else if (theme && ["primary", "secondary", "success", "warning", "error"].includes(theme)) {
          list.push("".concat(prefix, "--").concat(theme));
        }
        return list;
      });
      var tooltipText = Vue.computed(function () {
        var _copyable$tooltipProp;
        var copyable = props2.copyable;
        if (isCopied.value) return globalConfig.value.copiedText;else if (_typeof$3(copyable) === "object") return (_copyable$tooltipProp = copyable.tooltipProps) === null || _copyable$tooltipProp === void 0 ? void 0 : _copyable$tooltipProp.content;
        return null;
      });
      var content = Vue.computed(function () {
        return props2.content || (slots === null || slots === void 0 ? void 0 : slots["default"]());
      });
      var renderCopy = function renderCopy() {
        var copyable = props2.copyable;
        if (!copyable) return;
        var icon = isCopied.value ? function () {
          return Vue.createVNode(CheckIcon, null, null);
        } : function () {
          return Vue.createVNode(CopyIcon, null, null);
        };
        var tooltipConf = {
          theme: "default"
        };
        var onCopy = function onCopy() {};
        if (_typeof$3(copyable) === "object") {
          if (copyable.suffix && !isCopied.value) {
            icon = copyable.suffix;
          }
          if (copyable.tooltipProps) {
            tooltipConf = copyable.tooltipProps;
          }
          if (typeof copyable.onCopy === "function") {
            onCopy = copyable.onCopy;
          }
        }
        return Vue.createVNode(Tooltip, Vue.mergeProps(tooltipConf, {
          "content": tooltipText.value
        }), {
          "default": function _default() {
            return [Vue.createVNode(Button, {
              "icon": icon,
              "shape": "square",
              "theme": "primary",
              "variant": "text",
              "onClick": function onClick(e) {
                return onCopyClick(e, onCopy);
              }
            }, null)];
          }
        });
      };
      var getChildrenText = function getChildrenText() {
        if (typeof content.value === "string") {
          return content.value;
        } else if (Array.isArray(content.value)) {
          return content.value.map(function (v) {
            return v.children;
          }).join("");
        }
      };
      var onCopyClick = function onCopyClick(e, cb) {
        e.preventDefault();
        e.stopPropagation();
        isCopied.value = true;
        setTimeout(function () {
          isCopied.value = false;
        }, 1500);
        copy(getChildrenText());
        cb === null || cb === void 0 || cb();
      };
      return function () {
        var content2 = renderContent("default", "content");
        return props2.ellipsis ? Vue.createVNode(Ellipsis, Vue.mergeProps(props2, {
          "class": classList.value
        }), {
          "default": function _default() {
            return [wrapperDecorations(props2, content2), props2.copyable ? renderCopy() : null];
          }
        }) : Vue.createVNode("span", {
          "class": classList.value
        }, [wrapperDecorations(props2, content2), props2.copyable ? renderCopy() : null]);
      };
    }
  });

  function _isSlot$4(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Typography = Vue.defineComponent({
    name: "TTypography",
    setup: function setup() {
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var _slot;
        return Vue.createVNode(_Text, null, _isSlot$4(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var props$8 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    ellipsis: {
      type: [Boolean, Object],
      "default": false
    },
    level: {
      type: String,
      "default": "h1",
      validator: function validator(val) {
        if (!val) return true;
        return ["h1", "h2", "h3", "h4", "h5", "h6"].includes(val);
      }
    }
  };

  function _isSlot$3(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var _Title = Vue.defineComponent({
    name: "TTypographyTitle",
    props: props$8,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("typography");
      var renderContent = useContent();
      return function () {
        var _slot;
        var Tag = props2.level;
        var content = renderContent("default", "content");
        return props2.ellipsis ? Vue.createVNode(Ellipsis, Vue.mergeProps(props2, {
          "class": COMPONENT_NAME.value
        }), _isSlot$3(_slot = Vue.h.apply(void 0, [Tag].concat(_toConsumableArray(content)))) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }) : Vue.createVNode(Vue.Fragment, null, [Vue.h.apply(void 0, [Tag, {
          "class": COMPONENT_NAME.value
        }].concat(_toConsumableArray(content)))]);
      };
    }
  });

  function ownKeys$f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$f(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Paragraph = Vue.defineComponent({
    name: "TTypographyParagraph",
    components: {
      TTooltip: Tooltip
    },
    props: _objectSpread$f({
      style: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    }, props$9),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("typography");
      var content = Vue.computed(function () {
        return props2.content || (slots === null || slots === void 0 ? void 0 : slots["default"]());
      });
      return function () {
        return props2.ellipsis ? Vue.createVNode(Ellipsis, Vue.mergeProps(props2, {
          "class": COMPONENT_NAME.value
        }), {
          "default": function _default() {
            return [content.value];
          }
        }) : Vue.createVNode("p", {
          "class": COMPONENT_NAME.value
        }, [content.value]);
      };
    }
  });

  var Typography = withInstall$1(_Typography);
  var Text = withInstall$1(_Text);
  var Title = withInstall$1(_Title);
  var Paragraph = withInstall$1(_Paragraph);

  var props$7 = {
    bgColor: {
      type: String,
      "default": ""
    },
    borderless: Boolean,
    color: {
      type: String,
      "default": ""
    },
    icon: {
      type: String,
      "default": ""
    },
    iconSize: {
      type: [Number, Object],
      "default": 40
    },
    level: {
      type: String,
      "default": "M",
      validator: function validator(val) {
        if (!val) return true;
        return ["L", "M", "Q", "H"].includes(val);
      }
    },
    size: {
      type: Number,
      "default": 160
    },
    status: {
      type: String,
      "default": "active",
      validator: function validator(val) {
        if (!val) return true;
        return ["active", "expired", "loading", "scanned"].includes(val);
      }
    },
    statusRender: {
      type: Function
    },
    type: {
      type: String,
      "default": "canvas",
      validator: function validator(val) {
        if (!val) return true;
        return ["canvas", "svg"].includes(val);
      }
    },
    value: {
      type: String,
      "default": ""
    },
    onRefresh: Function
  };

  var _Mode, _Ecc;
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function appendBits(val, len, bb) {
    if (len < 0 || len > 31 || val >>> len !== 0) {
      throw new RangeError("Value out of range");
    }
    for (var i = len - 1; i >= 0; i--) {
      bb.push(val >>> i & 1);
    }
  }
  function getBit(x, i) {
    return (x >>> i & 1) !== 0;
  }
  function assert(cond) {
    if (!cond) {
      throw new Error("Assertion error");
    }
  }
  var Mode = /*#__PURE__*/function () {
    function Mode(modeBits, numBitsCharCount) {
      _classCallCheck(this, Mode);
      _defineProperty$2(this, "modeBits", void 0);
      _defineProperty$2(this, "numBitsCharCount", void 0);
      this.modeBits = modeBits;
      this.numBitsCharCount = numBitsCharCount;
    }
    return _createClass(Mode, [{
      key: "numCharCountBits",
      value: function numCharCountBits(ver) {
        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];
      }
    }]);
  }();
  _Mode = Mode;
  _defineProperty$2(Mode, "NUMERIC", new _Mode(1, [10, 12, 14]));
  _defineProperty$2(Mode, "ALPHANUMERIC", new _Mode(2, [9, 11, 13]));
  _defineProperty$2(Mode, "BYTE", new _Mode(4, [8, 16, 16]));
  _defineProperty$2(Mode, "KANJI", new _Mode(8, [8, 10, 12]));
  _defineProperty$2(Mode, "ECI", new _Mode(7, [0, 0, 0]));
  var Ecc = /*#__PURE__*/_createClass(function Ecc(ordinal, formatBits) {
    _classCallCheck(this, Ecc);
    _defineProperty$2(this, "ordinal", void 0);
    _defineProperty$2(this, "formatBits", void 0);
    this.ordinal = ordinal;
    this.formatBits = formatBits;
  });
  _Ecc = Ecc;
  _defineProperty$2(Ecc, "LOW", new _Ecc(0, 1));
  _defineProperty$2(Ecc, "MEDIUM", new _Ecc(1, 0));
  _defineProperty$2(Ecc, "QUARTILE", new _Ecc(2, 3));
  _defineProperty$2(Ecc, "HIGH", new _Ecc(3, 2));
  var QrSegment = /*#__PURE__*/function () {
    function QrSegment(mode, numChars, bitData) {
      _classCallCheck(this, QrSegment);
      _defineProperty$2(this, "mode", void 0);
      _defineProperty$2(this, "numChars", void 0);
      _defineProperty$2(this, "bitData", void 0);
      this.mode = mode;
      this.numChars = numChars;
      this.bitData = bitData;
      if (numChars < 0) {
        throw new RangeError("Invalid argument");
      }
      this.bitData = bitData.slice();
    }
    return _createClass(QrSegment, [{
      key: "getData",
      value: function getData() {
        return this.bitData.slice();
      }
    }], [{
      key: "makeBytes",
      value: function makeBytes(data) {
        var bb = [];
        var _iterator = _createForOfIteratorHelper(data),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var b = _step.value;
            appendBits(b, 8, bb);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return new QrSegment(Mode.BYTE, data.length, bb);
      }
    }, {
      key: "makeNumeric",
      value: function makeNumeric(digits) {
        if (!QrSegment.isNumeric(digits)) {
          throw new RangeError("String contains non-numeric characters");
        }
        var bb = [];
        for (var i = 0; i < digits.length;) {
          var n = Math.min(digits.length - i, 3);
          appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);
          i += n;
        }
        return new QrSegment(Mode.NUMERIC, digits.length, bb);
      }
    }, {
      key: "makeAlphanumeric",
      value: function makeAlphanumeric(text) {
        if (!QrSegment.isAlphanumeric(text)) {
          throw new RangeError("String contains unencodable characters in alphanumeric mode");
        }
        var bb = [];
        var i;
        for (i = 0; i + 2 <= text.length; i += 2) {
          var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;
          temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));
          appendBits(temp, 11, bb);
        }
        if (i < text.length) {
          appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);
        }
        return new QrSegment(Mode.ALPHANUMERIC, text.length, bb);
      }
    }, {
      key: "makeSegments",
      value: function makeSegments(text) {
        if (text === "") {
          return [];
        }
        if (QrSegment.isNumeric(text)) {
          return [QrSegment.makeNumeric(text)];
        }
        if (QrSegment.isAlphanumeric(text)) {
          return [QrSegment.makeAlphanumeric(text)];
        }
        return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];
      }
    }, {
      key: "makeEci",
      value: function makeEci(assignVal) {
        var bb = [];
        if (assignVal < 0) {
          throw new RangeError("ECI assignment value out of range");
        } else if (assignVal < 1 << 7) {
          appendBits(assignVal, 8, bb);
        } else if (assignVal < 1 << 14) {
          appendBits(2, 2, bb);
          appendBits(assignVal, 14, bb);
        } else if (assignVal < 1e6) {
          appendBits(6, 3, bb);
          appendBits(assignVal, 21, bb);
        } else {
          throw new RangeError("ECI assignment value out of range");
        }
        return new QrSegment(Mode.ECI, 0, bb);
      }
    }, {
      key: "isNumeric",
      value: function isNumeric(text) {
        return QrSegment.NUMERIC_REGEX.test(text);
      }
    }, {
      key: "isAlphanumeric",
      value: function isAlphanumeric(text) {
        return QrSegment.ALPHANUMERIC_REGEX.test(text);
      }
    }, {
      key: "getTotalBits",
      value: function getTotalBits(segs, version) {
        var result = 0;
        var _iterator2 = _createForOfIteratorHelper(segs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var seg = _step2.value;
            var ccbits = seg.mode.numCharCountBits(version);
            if (seg.numChars >= 1 << ccbits) {
              return Infinity;
            }
            result += 4 + ccbits + seg.bitData.length;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return result;
      }
    }, {
      key: "toUtf8ByteArray",
      value: function toUtf8ByteArray(input) {
        var str = encodeURI(input);
        var result = [];
        for (var i = 0; i < str.length; i++) {
          if (str.charAt(i) !== "%") {
            result.push(str.charCodeAt(i));
          } else {
            result.push(parseInt(str.substring(i + 1, i + 3), 16));
            i += 2;
          }
        }
        return result;
      }
    }]);
  }();
  _defineProperty$2(QrSegment, "NUMERIC_REGEX", /^[0-9]*$/);
  _defineProperty$2(QrSegment, "ALPHANUMERIC_REGEX", /^[A-Z0-9 $%*+.\/:-]*$/);
  _defineProperty$2(QrSegment, "ALPHANUMERIC_CHARSET", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:");
  var QrCode = /*#__PURE__*/function () {
    function QrCode(version, errorCorrectionLevel, dataCodewords, oriMsk) {
      _classCallCheck(this, QrCode);
      _defineProperty$2(this, "size", void 0);
      _defineProperty$2(this, "mask", void 0);
      _defineProperty$2(this, "modules", []);
      _defineProperty$2(this, "isFunction", []);
      _defineProperty$2(this, "version", void 0);
      _defineProperty$2(this, "errorCorrectionLevel", void 0);
      var msk = oriMsk;
      this.version = version;
      this.errorCorrectionLevel = errorCorrectionLevel;
      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {
        throw new RangeError("Version value out of range");
      }
      if (msk < -1 || msk > 7) {
        throw new RangeError("Mask value out of range");
      }
      this.size = version * 4 + 17;
      var row = [];
      for (var i = 0; i < this.size; i++) {
        row.push(false);
      }
      for (var _i = 0; _i < this.size; _i++) {
        this.modules.push(row.slice());
        this.isFunction.push(row.slice());
      }
      this.drawFunctionPatterns();
      var allCodewords = this.addEccAndInterleave(dataCodewords);
      this.drawCodewords(allCodewords);
      if (msk === -1) {
        var minPenalty = 1e9;
        for (var _i2 = 0; _i2 < 8; _i2++) {
          this.applyMask(_i2);
          this.drawFormatBits(_i2);
          var penalty = this.getPenaltyScore();
          if (penalty < minPenalty) {
            msk = _i2;
            minPenalty = penalty;
          }
          this.applyMask(_i2);
        }
      }
      assert(msk >= 0 && msk <= 7);
      this.mask = msk;
      this.applyMask(msk);
      this.drawFormatBits(msk);
      this.isFunction = [];
    }
    return _createClass(QrCode, [{
      key: "getModule",
      value: function getModule(x, y) {
        return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];
      }
    }, {
      key: "getModules",
      value: function getModules() {
        return this.modules;
      }
    }, {
      key: "drawFunctionPatterns",
      value: function drawFunctionPatterns() {
        for (var i = 0; i < this.size; i++) {
          this.setFunctionModule(6, i, i % 2 === 0);
          this.setFunctionModule(i, 6, i % 2 === 0);
        }
        this.drawFinderPattern(3, 3);
        this.drawFinderPattern(this.size - 4, 3);
        this.drawFinderPattern(3, this.size - 4);
        var alignPatPos = this.getAlignmentPatternPositions();
        var numAlign = alignPatPos.length;
        for (var _i3 = 0; _i3 < numAlign; _i3++) {
          for (var j = 0; j < numAlign; j++) {
            if (!(_i3 === 0 && j === 0 || _i3 === 0 && j === numAlign - 1 || _i3 === numAlign - 1 && j === 0)) {
              this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);
            }
          }
        }
        this.drawFormatBits(0);
        this.drawVersion();
      }
    }, {
      key: "drawFormatBits",
      value: function drawFormatBits(mask) {
        var data = this.errorCorrectionLevel.formatBits << 3 | mask;
        var rem = data;
        for (var i = 0; i < 10; i++) {
          rem = rem << 1 ^ (rem >>> 9) * 1335;
        }
        var bits = (data << 10 | rem) ^ 21522;
        assert(bits >>> 15 === 0);
        for (var _i4 = 0; _i4 <= 5; _i4++) {
          this.setFunctionModule(8, _i4, getBit(bits, _i4));
        }
        this.setFunctionModule(8, 7, getBit(bits, 6));
        this.setFunctionModule(8, 8, getBit(bits, 7));
        this.setFunctionModule(7, 8, getBit(bits, 8));
        for (var _i5 = 9; _i5 < 15; _i5++) {
          this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));
        }
        for (var _i6 = 0; _i6 < 8; _i6++) {
          this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));
        }
        for (var _i7 = 8; _i7 < 15; _i7++) {
          this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));
        }
        this.setFunctionModule(8, this.size - 8, true);
      }
    }, {
      key: "drawVersion",
      value: function drawVersion() {
        if (this.version < 7) {
          return;
        }
        var rem = this.version;
        for (var i = 0; i < 12; i++) {
          rem = rem << 1 ^ (rem >>> 11) * 7973;
        }
        var bits = this.version << 12 | rem;
        assert(bits >>> 18 === 0);
        for (var _i8 = 0; _i8 < 18; _i8++) {
          var color = getBit(bits, _i8);
          var a = this.size - 11 + _i8 % 3;
          var b = Math.floor(_i8 / 3);
          this.setFunctionModule(a, b, color);
          this.setFunctionModule(b, a, color);
        }
      }
    }, {
      key: "drawFinderPattern",
      value: function drawFinderPattern(x, y) {
        for (var dy = -4; dy <= 4; dy++) {
          for (var dx = -4; dx <= 4; dx++) {
            var dist = Math.max(Math.abs(dx), Math.abs(dy));
            var xx = x + dx;
            var yy = y + dy;
            if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) {
              this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4);
            }
          }
        }
      }
    }, {
      key: "drawAlignmentPattern",
      value: function drawAlignmentPattern(x, y) {
        for (var dy = -2; dy <= 2; dy++) {
          for (var dx = -2; dx <= 2; dx++) {
            this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1);
          }
        }
      }
    }, {
      key: "setFunctionModule",
      value: function setFunctionModule(x, y, isDark) {
        this.modules[y][x] = isDark;
        this.isFunction[y][x] = true;
      }
    }, {
      key: "addEccAndInterleave",
      value: function addEccAndInterleave(data) {
        var ver = this.version;
        var ecl = this.errorCorrectionLevel;
        if (data.length !== QrCode.getNumDataCodewords(ver, ecl)) {
          throw new RangeError("Invalid argument");
        }
        var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
        var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];
        var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);
        var numShortBlocks = numBlocks - rawCodewords % numBlocks;
        var shortBlockLen = Math.floor(rawCodewords / numBlocks);
        var blocks = [];
        var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);
        for (var i = 0, k = 0; i < numBlocks; i++) {
          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));
          k += dat.length;
          var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);
          if (i < numShortBlocks) {
            dat.push(0);
          }
          blocks.push(dat.concat(ecc));
        }
        var result = [];
        var _loop = function _loop(_i9) {
          blocks.forEach(function (block, j) {
            if (_i9 !== shortBlockLen - blockEccLen || j >= numShortBlocks) {
              result.push(block[_i9]);
            }
          });
        };
        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {
          _loop(_i9);
        }
        assert(result.length === rawCodewords);
        return result;
      }
    }, {
      key: "drawCodewords",
      value: function drawCodewords(data) {
        if (data.length !== Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {
          throw new RangeError("Invalid argument");
        }
        var i = 0;
        for (var right = this.size - 1; right >= 1; right -= 2) {
          if (right === 6) {
            right = 5;
          }
          for (var vert = 0; vert < this.size; vert++) {
            for (var j = 0; j < 2; j++) {
              var x = right - j;
              var upward = (right + 1 & 2) === 0;
              var y = upward ? this.size - 1 - vert : vert;
              if (!this.isFunction[y][x] && i < data.length * 8) {
                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));
                i++;
              }
            }
          }
        }
        assert(i === data.length * 8);
      }
    }, {
      key: "applyMask",
      value: function applyMask(mask) {
        if (mask < 0 || mask > 7) {
          throw new RangeError("Mask value out of range");
        }
        for (var y = 0; y < this.size; y++) {
          for (var x = 0; x < this.size; x++) {
            var invert = void 0;
            switch (mask) {
              case 0:
                invert = (x + y) % 2 === 0;
                break;
              case 1:
                invert = y % 2 === 0;
                break;
              case 2:
                invert = x % 3 === 0;
                break;
              case 3:
                invert = (x + y) % 3 === 0;
                break;
              case 4:
                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;
                break;
              case 5:
                invert = x * y % 2 + x * y % 3 === 0;
                break;
              case 6:
                invert = (x * y % 2 + x * y % 3) % 2 === 0;
                break;
              case 7:
                invert = ((x + y) % 2 + x * y % 3) % 2 === 0;
                break;
              default:
                throw new Error("Unreachable");
            }
            if (!this.isFunction[y][x] && invert) {
              this.modules[y][x] = !this.modules[y][x];
            }
          }
        }
      }
    }, {
      key: "getPenaltyScore",
      value: function getPenaltyScore() {
        var result = 0;
        for (var y = 0; y < this.size; y++) {
          var runColor = false;
          var runX = 0;
          var runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (var x = 0; x < this.size; x++) {
            if (this.modules[y][x] === runColor) {
              runX++;
              if (runX === 5) {
                result += QrCode.PENALTY_N1;
              } else if (runX > 5) {
                result++;
              }
            } else {
              this.finderPenaltyAddHistory(runX, runHistory);
              if (!runColor) {
                result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;
              }
              runColor = this.modules[y][x];
              runX = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;
        }
        for (var _x = 0; _x < this.size; _x++) {
          var _runColor = false;
          var runY = 0;
          var _runHistory = [0, 0, 0, 0, 0, 0, 0];
          for (var _y = 0; _y < this.size; _y++) {
            if (this.modules[_y][_x] === _runColor) {
              runY++;
              if (runY === 5) {
                result += QrCode.PENALTY_N1;
              } else if (runY > 5) {
                result++;
              }
            } else {
              this.finderPenaltyAddHistory(runY, _runHistory);
              if (!_runColor) {
                result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;
              }
              _runColor = this.modules[_y][_x];
              runY = 1;
            }
          }
          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;
        }
        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {
          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {
            var color = this.modules[_y2][_x2];
            if (color === this.modules[_y2][_x2 + 1] && color === this.modules[_y2 + 1][_x2] && color === this.modules[_y2 + 1][_x2 + 1]) {
              result += QrCode.PENALTY_N2;
            }
          }
        }
        var dark = 0;
        var _iterator3 = _createForOfIteratorHelper(this.modules),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var row = _step3.value;
            dark = row.reduce(function (sum, color) {
              return sum + (color ? 1 : 0);
            }, dark);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        var total = this.size * this.size;
        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;
        assert(k >= 0 && k <= 9);
        result += k * QrCode.PENALTY_N4;
        assert(result >= 0 && result <= 2568888);
        return result;
      }
    }, {
      key: "getAlignmentPatternPositions",
      value: function getAlignmentPatternPositions() {
        if (this.version === 1) {
          return [];
        }
        var numAlign = Math.floor(this.version / 7) + 2;
        var step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;
        var result = [6];
        for (var pos = this.size - 7; result.length < numAlign; pos -= step) {
          result.splice(1, 0, pos);
        }
        return result;
      }
    }, {
      key: "finderPenaltyCountPatterns",
      value: function finderPenaltyCountPatterns(runHistory) {
        var n = runHistory[1];
        assert(n <= this.size * 3);
        var core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;
        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);
      }
    }, {
      key: "finderPenaltyTerminateAndCount",
      value: function finderPenaltyTerminateAndCount(currentRunColor, oriCurrentRunLength, runHistory) {
        var currentRunLength = oriCurrentRunLength;
        if (currentRunColor) {
          this.finderPenaltyAddHistory(currentRunLength, runHistory);
          currentRunLength = 0;
        }
        currentRunLength += this.size;
        this.finderPenaltyAddHistory(currentRunLength, runHistory);
        return this.finderPenaltyCountPatterns(runHistory);
      }
    }, {
      key: "finderPenaltyAddHistory",
      value: function finderPenaltyAddHistory(oriCurrentRunLength, runHistory) {
        var currentRunLength = oriCurrentRunLength;
        if (runHistory[0] === 0) {
          currentRunLength += this.size;
        }
        runHistory.pop();
        runHistory.unshift(currentRunLength);
      }
    }], [{
      key: "encodeText",
      value: function encodeText(text, ecl) {
        var segs = QrSegment.makeSegments(text);
        return QrCode.encodeSegments(segs, ecl);
      }
    }, {
      key: "encodeBinary",
      value: function encodeBinary(data, ecl) {
        var seg = QrSegment.makeBytes(data);
        return QrCode.encodeSegments([seg], ecl);
      }
    }, {
      key: "encodeSegments",
      value: function encodeSegments(segs, oriEcl) {
        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;
        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
        if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) {
          throw new RangeError("Invalid value");
        }
        var version;
        var dataUsedBits;
        for (version = minVersion;; version++) {
          var dataCapacityBits2 = QrCode.getNumDataCodewords(version, oriEcl) * 8;
          var usedBits = QrSegment.getTotalBits(segs, version);
          if (usedBits <= dataCapacityBits2) {
            dataUsedBits = usedBits;
            break;
          }
          if (version >= maxVersion) {
            throw new RangeError("Data too long");
          }
        }
        var ecl = oriEcl;
        for (var _i0 = 0, _arr = [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]; _i0 < _arr.length; _i0++) {
          var newEcl = _arr[_i0];
          if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {
            ecl = newEcl;
          }
        }
        var bb = [];
        var _iterator4 = _createForOfIteratorHelper(segs),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var seg = _step4.value;
            appendBits(seg.mode.modeBits, 4, bb);
            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);
            var _iterator5 = _createForOfIteratorHelper(seg.getData()),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var b = _step5.value;
                bb.push(b);
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        assert(bb.length === dataUsedBits);
        var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;
        assert(bb.length <= dataCapacityBits);
        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);
        appendBits(0, (8 - bb.length % 8) % 8, bb);
        assert(bb.length % 8 === 0);
        for (var padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) {
          appendBits(padByte, 8, bb);
        }
        var dataCodewords = [];
        while (dataCodewords.length * 8 < bb.length) {
          dataCodewords.push(0);
        }
        bb.forEach(function (b, i) {
          dataCodewords[i >>> 3] |= b << 7 - (i & 7);
        });
        return new QrCode(version, ecl, dataCodewords, mask);
      }
    }, {
      key: "getNumRawDataModules",
      value: function getNumRawDataModules(ver) {
        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {
          throw new RangeError("Version number out of range");
        }
        var result = (16 * ver + 128) * ver + 64;
        if (ver >= 2) {
          var numAlign = Math.floor(ver / 7) + 2;
          result -= (25 * numAlign - 10) * numAlign - 55;
          if (ver >= 7) {
            result -= 36;
          }
        }
        assert(result >= 208 && result <= 29648);
        return result;
      }
    }, {
      key: "getNumDataCodewords",
      value: function getNumDataCodewords(ver, ecl) {
        return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];
      }
    }, {
      key: "reedSolomonComputeDivisor",
      value: function reedSolomonComputeDivisor(degree) {
        if (degree < 1 || degree > 255) {
          throw new RangeError("Degree out of range");
        }
        var result = [];
        for (var i = 0; i < degree - 1; i++) {
          result.push(0);
        }
        result.push(1);
        var root = 1;
        for (var _i1 = 0; _i1 < degree; _i1++) {
          for (var j = 0; j < result.length; j++) {
            result[j] = QrCode.reedSolomonMultiply(result[j], root);
            if (j + 1 < result.length) {
              result[j] ^= result[j + 1];
            }
          }
          root = QrCode.reedSolomonMultiply(root, 2);
        }
        return result;
      }
    }, {
      key: "reedSolomonComputeRemainder",
      value: function reedSolomonComputeRemainder(data, divisor) {
        var result = divisor.map(function () {
          return 0;
        });
        var _iterator6 = _createForOfIteratorHelper(data),
          _step6;
        try {
          var _loop2 = function _loop2() {
            var b = _step6.value;
            var factor = b ^ result.shift();
            result.push(0);
            divisor.forEach(function (coef, i) {
              result[i] ^= QrCode.reedSolomonMultiply(coef, factor);
            });
          };
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            _loop2();
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return result;
      }
    }, {
      key: "reedSolomonMultiply",
      value: function reedSolomonMultiply(x, y) {
        if (x >>> 8 !== 0 || y >>> 8 !== 0) {
          throw new RangeError("Byte out of range");
        }
        var z = 0;
        for (var i = 7; i >= 0; i--) {
          z = z << 1 ^ (z >>> 7) * 285;
          z ^= (y >>> i & 1) * x;
        }
        assert(z >>> 8 === 0);
        return z;
      }
    }]);
  }();
  _defineProperty$2(QrCode, "MIN_VERSION", 1);
  _defineProperty$2(QrCode, "MAX_VERSION", 40);
  _defineProperty$2(QrCode, "PENALTY_N1", 3);
  _defineProperty$2(QrCode, "PENALTY_N2", 3);
  _defineProperty$2(QrCode, "PENALTY_N3", 40);
  _defineProperty$2(QrCode, "PENALTY_N4", 10);
  _defineProperty$2(QrCode, "ECC_CODEWORDS_PER_BLOCK", [[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]]);
  _defineProperty$2(QrCode, "NUM_ERROR_CORRECTION_BLOCKS", [[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]]);

  var ERROR_LEVEL_MAP = {
    L: Ecc.LOW,
    M: Ecc.MEDIUM,
    Q: Ecc.QUARTILE,
    H: Ecc.HIGH
  };
  var DEFAULT_FRONT_COLOR = "#000000";
  var DEFAULT_NEED_MARGIN = false;
  var DEFAULT_MINVERSION = 1;
  var SPEC_MARGIN_SIZE = 4;
  var DEFAULT_MARGIN_SIZE = 0;
  var DEFAULT_IMG_SCALE = 0.1;
  var generatePath = function generatePath(modules) {
    var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var ops = [];
    modules.forEach(function (row, y) {
      var start = null;
      row.forEach(function (cell, x) {
        if (!cell && start !== null) {
          ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));
          start = null;
          return;
        }
        if (x === row.length - 1) {
          if (!cell) {
            return;
          }
          if (start === null) {
            ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));
          } else {
            ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));
          }
          return;
        }
        if (cell && start === null) {
          start = x;
        }
      });
    });
    return ops.join("");
  };
  var excavateModules = function excavateModules(modules, excavation) {
    return modules.slice().map(function (row, y) {
      if (y < excavation.y || y >= excavation.y + excavation.h) {
        return row;
      }
      return row.map(function (cell, x) {
        if (x < excavation.x || x >= excavation.x + excavation.w) {
          return cell;
        }
        return false;
      });
    });
  };
  var getImageSettings = function getImageSettings(cells, size, margin, imageSettings) {
    if (imageSettings == null) {
      return null;
    }
    var numCells = cells.length + margin * 2;
    var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);
    var scale = numCells / size;
    var w = (imageSettings.width || defaultSize) * scale;
    var h = (imageSettings.height || defaultSize) * scale;
    var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;
    var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;
    var opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;
    var excavation = null;
    if (imageSettings.excavate) {
      var floorX = Math.floor(x);
      var floorY = Math.floor(y);
      var ceilW = Math.ceil(w + x - floorX);
      var ceilH = Math.ceil(h + y - floorY);
      excavation = {
        x: floorX,
        y: floorY,
        w: ceilW,
        h: ceilH
      };
    }
    var crossOrigin = imageSettings.crossOrigin;
    return {
      x: x,
      y: y,
      h: h,
      w: w,
      excavation: excavation,
      opacity: opacity,
      crossOrigin: crossOrigin
    };
  };
  var getMarginSize = function getMarginSize(needMargin, marginSize) {
    if (marginSize != null) {
      return Math.max(Math.floor(marginSize), 0);
    }
    return needMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;
  };
  var isSupportPath2d = function () {
    try {
      new Path2D().addPath(new Path2D());
    } catch (_unused) {
      return false;
    }
    return true;
  }();

  var QRCodeSubComponentProps = {
    value: {
      type: String,
      "default": ""
    },
    size: {
      type: Number,
      "default": 128
    },
    level: {
      type: String,
      "default": "L"
    },
    bgColor: {
      type: String,
      "default": "#FFFFFF"
    },
    fgColor: {
      type: String,
      "default": "#000000"
    },
    style: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    includeMargin: {
      type: Boolean,
      "default": false
    },
    marginSize: {
      type: Number,
      "default": 0
    },
    imageSettings: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    title: {
      type: String,
      "default": ""
    },
    minVersion: {
      type: Number,
      "default": 1
    }
  };
  var QRCodeStatusProps = {
    locale: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    onRefresh: {
      type: Function
    },
    statusRender: {
      type: Function
    },
    status: {
      type: String,
      "default": "active"
    }
  };

  var useQRCode = function useQRCode(opt) {
    var value = opt.value,
      level = opt.level,
      minVersion = opt.minVersion,
      includeMargin = opt.includeMargin,
      marginSize = opt.marginSize,
      imageSettings = opt.imageSettings,
      size = opt.size;
    var memoizedQrcode = Vue.computed(function () {
      var segments = QrSegment.makeSegments(value);
      return QrCode.encodeSegments(segments, ERROR_LEVEL_MAP[level], minVersion);
    });
    var cs = Vue.computed(function () {
      return memoizedQrcode.value.getModules();
    });
    var mg = Vue.computed(function () {
      return getMarginSize(includeMargin, marginSize);
    });
    var cis = Vue.computed(function () {
      return getImageSettings(cs.value, size, mg.value, imageSettings);
    });
    return {
      cells: cs,
      margin: mg,
      numCells: Vue.computed(function () {
        return cs.value.length + mg.value * 2;
      }),
      calculatedImageSettings: cis,
      qrcode: memoizedQrcode
    };
  };

  var QRCodeCanvas = Vue.defineComponent({
    name: "QRCodeCanvas",
    props: QRCodeSubComponentProps,
    setup: function setup(props) {
      var imgSrc = Vue.computed(function () {
        var _props$imageSettings;
        return (_props$imageSettings = props.imageSettings) === null || _props$imageSettings === void 0 ? void 0 : _props$imageSettings.src;
      });
      var imageRef = Vue.ref(null);
      var canvasRef = Vue.ref(null);
      var imgCrossOrigin = Vue.ref("");
      var renderQRCode = function renderQRCode() {
        var _calculatedImageSetti;
        var _useQRCode = useQRCode({
            value: props.value,
            level: props.level,
            minVersion: DEFAULT_MINVERSION,
            includeMargin: DEFAULT_NEED_MARGIN,
            marginSize: props.marginSize,
            imageSettings: props.imageSettings,
            size: props.size
          }),
          margin = _useQRCode.margin,
          cells = _useQRCode.cells,
          numCells = _useQRCode.numCells,
          calculatedImageSettings = _useQRCode.calculatedImageSettings;
        if (!canvasRef.value) {
          return;
        }
        var canvas = canvasRef.value;
        var ctx = canvas.getContext("2d");
        if (!ctx) {
          return;
        }
        imgCrossOrigin.value = (_calculatedImageSetti = calculatedImageSettings.value) === null || _calculatedImageSetti === void 0 ? void 0 : _calculatedImageSetti.crossOrigin;
        var cellsToDraw = cells;
        var image = imageRef.value;
        if (image) {
          image.crossOrigin = calculatedImageSettings.value.crossOrigin;
        }
        var haveImageToRender = calculatedImageSettings.value && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;
        if (haveImageToRender && calculatedImageSettings.value.excavation != null) {
          cellsToDraw = Vue.computed(function () {
            return excavateModules(cells.value, calculatedImageSettings.value.excavation);
          });
        }
        var pixelRatio = window.devicePixelRatio || 1;
        canvas.height = props.size * pixelRatio;
        canvas.width = props.size * pixelRatio;
        var scale = props.size / numCells.value * pixelRatio;
        ctx.scale(scale, scale);
        ctx.fillStyle = props.bgColor;
        ctx.fillRect(0, 0, numCells.value, numCells.value);
        ctx.fillStyle = props.fgColor;
        if (isSupportPath2d) {
          ctx.fill(new Path2D(generatePath(cellsToDraw.value, margin.value)));
        } else {
          cells.value.forEach(function (row, rdx) {
            row.forEach(function (cell, cdx) {
              if (cell) {
                ctx.fillRect(cdx + margin.value, rdx + margin.value, 1, 1);
              }
            });
          });
        }
        if (calculatedImageSettings) {
          ctx.globalAlpha = calculatedImageSettings.value.opacity;
        }
        if (haveImageToRender) {
          ctx.globalAlpha = calculatedImageSettings.value.opacity;
          ctx.drawImage(image, calculatedImageSettings.value.x + margin.value, calculatedImageSettings.value.y + margin.value, calculatedImageSettings.value.w, calculatedImageSettings.value.h);
        }
      };
      Vue.watchEffect(function () {
        renderQRCode();
      });
      Vue.onMounted(function () {
        renderQRCode();
      });
      return function () {
        return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("canvas", {
          "ref": canvasRef,
          "role": "img"
        }, null), imgSrc.value != null ? Vue.createVNode("img", {
          "ref": imageRef,
          "onLoad": renderQRCode,
          "style": {
            display: "none"
          },
          "src": imgSrc.value
        }, null) : null]);
      };
    }
  });

  var QRCodeSVG = Vue.defineComponent({
    name: "QRCodeSVG",
    props: QRCodeSubComponentProps,
    setup: function setup(props) {
      var _useQRCode = useQRCode({
          value: props.value,
          level: props.level,
          minVersion: DEFAULT_MINVERSION,
          includeMargin: DEFAULT_NEED_MARGIN,
          marginSize: props.marginSize,
          imageSettings: props.imageSettings,
          size: props.size
        }),
        margin = _useQRCode.margin,
        cells = _useQRCode.cells,
        numCells = _useQRCode.numCells,
        calculatedImageSettings = _useQRCode.calculatedImageSettings;
      var cellsToDraw = Vue.computed(function () {
        var _calculatedImageSetti;
        if (props.imageSettings && ((_calculatedImageSetti = calculatedImageSettings.value) === null || _calculatedImageSetti === void 0 ? void 0 : _calculatedImageSetti.excavation) != null) {
          return excavateModules(cells.value, calculatedImageSettings.value.excavation);
        }
        return cells.value;
      });
      var imageNode = Vue.computed(function () {
        if (!props.imageSettings || !calculatedImageSettings.value) return null;
        return Vue.createVNode("image", {
          "href": props.imageSettings.src,
          "height": calculatedImageSettings.value.h,
          "width": calculatedImageSettings.value.w,
          "x": calculatedImageSettings.value.x + margin.value,
          "y": calculatedImageSettings.value.y + margin.value,
          "crossOrigin": calculatedImageSettings.value.crossOrigin
        }, null);
      });
      return function () {
        var fgPath = generatePath(cellsToDraw.value, margin.value);
        return Vue.createVNode("svg", {
          "height": props.size,
          "width": props.size,
          "viewBox": "0 0 ".concat(numCells.value, " ").concat(numCells.value),
          "role": "img",
          "style": props.style
        }, [!!props.title && Vue.createVNode("title", null, [props.title]), Vue.createVNode("path", {
          "fill": props.bgColor,
          "d": "M0,0 h".concat(numCells.value, "v").concat(numCells.value, "H0z"),
          "shape-rendering": "crispEdges"
        }, null), Vue.createVNode("path", {
          "fill": props.fgColor,
          "d": fgPath,
          "shape-rendering": "crispEdges"
        }, null), imageNode.value]);
      };
    }
  });

  var QRcodeStatus = Vue.defineComponent({
    name: "QRCodeStatus",
    props: QRCodeStatusProps,
    setup: function setup(props) {
      var _props$locale3;
      var classPrefix = usePrefixClass();
      var defaultSpin = Vue.createVNode(Loading, {
        "size": "32px"
      }, null);
      var defaultExpiredNode = Vue.computed(function () {
        var _props$locale, _props$locale2;
        return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("p", {
          "class": "".concat(classPrefix.value, "-expired__text")
        }, [(_props$locale = props.locale) === null || _props$locale === void 0 ? void 0 : _props$locale.expiredText]), (props === null || props === void 0 ? void 0 : props.onRefresh) && Vue.createVNode("p", {
          "class": "".concat(classPrefix.value, "-expired__button"),
          "onClick": props === null || props === void 0 ? void 0 : props.onRefresh
        }, [Vue.createVNode(RefreshIcon, {
          "size": "16"
        }, null), (_props$locale2 = props.locale) === null || _props$locale2 === void 0 ? void 0 : _props$locale2.refreshText])]);
      });
      var defaultScannedNode = Vue.createVNode("p", {
        "class": "".concat(classPrefix.value, "-scanned")
      }, [Vue.createVNode(TdCheckCircleFilledIcon, {
        "size": "16",
        "class": "".concat(classPrefix.value, "-scanned__icon")
      }, null), (_props$locale3 = props.locale) === null || _props$locale3 === void 0 ? void 0 : _props$locale3.scannedText]);
      var defaultNodes = Vue.computed(function () {
        return {
          expired: defaultExpiredNode.value,
          loading: defaultSpin,
          scanned: defaultScannedNode,
          active: null
        };
      });
      var renderStatus = function renderStatus(info) {
        return defaultNodes.value[info.status];
      };
      return function () {
        return Vue.createVNode(Vue.Fragment, null, [props.statusRender || renderStatus({
          status: props.status,
          onRefresh: props.onRefresh
        })]);
      };
    }
  });

  var _QRCode = Vue.defineComponent({
    name: "TQRCode",
    props: props$7,
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var _useConfig = useConfig("qrcode"),
        globalConfig = _useConfig.globalConfig;
      var _useVariables = useVariables({
          themeFgColor: "--td-text-color-primary",
          themeBgColor: "--td-bg-color-specialcomponent"
        }),
        themeFgColor = _useVariables.themeFgColor,
        themeBgColor = _useVariables.themeBgColor;
      var finalBgColor = Vue.computed(function () {
        return props2.bgColor || themeBgColor.value || "transparent";
      });
      var finalFgColor = Vue.computed(function () {
        return props2.color || themeFgColor.value || DEFAULT_FRONT_COLOR;
      });
      if (!props2.value) {
        return null;
      }
      var imageSettings = Vue.computed(function () {
        var _props2$iconSize$heig, _props2$iconSize, _props2$iconSize$widt, _props2$iconSize2;
        return {
          src: props2.icon,
          x: void 0,
          y: void 0,
          height: isNumber(props2.iconSize) ? props2.iconSize : (_props2$iconSize$heig = (_props2$iconSize = props2.iconSize) === null || _props2$iconSize === void 0 ? void 0 : _props2$iconSize.height) !== null && _props2$iconSize$heig !== void 0 ? _props2$iconSize$heig : 40,
          width: isNumber(props2.iconSize) ? props2.iconSize : (_props2$iconSize$widt = (_props2$iconSize2 = props2.iconSize) === null || _props2$iconSize2 === void 0 ? void 0 : _props2$iconSize2.width) !== null && _props2$iconSize$widt !== void 0 ? _props2$iconSize$widt : 40,
          excavate: true,
          crossOrigin: "anonymous"
        };
      });
      var classes = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-qrcode"), _defineProperty$2(_defineProperty$2({}, "".concat(classPrefix.value, "-borderless"), props2.borderless), "".concat(classPrefix.value, "-qrcode-svg"), props2.type === "svg")];
      });
      var mergedStyle = Vue.computed(function () {
        return {
          backgroundColor: finalBgColor.value,
          width: "".concat(props2.size, "px"),
          height: "".concat(props2.size, "px")
        };
      });
      return function () {
        var QRCodeProps = {
          value: props2.value,
          size: props2.size,
          bgColor: finalBgColor.value,
          fgColor: finalFgColor.value,
          imageSettings: props2.icon ? imageSettings.value : void 0,
          level: props2.level
        };
        return Vue.createVNode("div", Vue.mergeProps({
          "class": classes.value,
          "style": mergedStyle.value
        }, {
          level: props2.level
        }), [props2.status !== "active" && Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-mask"), _defineProperty$2({}, "".concat(classPrefix.value, "-").concat(props2.status), props2.status !== "loading")]
        }, [Vue.createVNode(QRcodeStatus, {
          "locale": globalConfig.value,
          "status": props2.status,
          "onRefresh": props2.onRefresh,
          "statusRender": renderTNodeJSX("statusRender", {
            params: {
              status: props2.status,
              onRefresh: props2.onRefresh
            }
          })
        }, null)]), props2.type === "canvas" ? Vue.createVNode(QRCodeCanvas, Vue.mergeProps(QRCodeProps, {
          "size": props2.size
        }), null) : Vue.createVNode(QRCodeSVG, Vue.mergeProps(QRCodeProps, {
          "size": props2.size
        }), null)]);
      };
    }
  });

  var QRCode = withInstall$1(_QRCode, "TQrcode");

  var props$6 = {
    close: {
      type: [String, Boolean, Function],
      "default": false
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    icon: {
      type: Function
    },
    maxLine: {
      type: Number,
      "default": 0
    },
    message: {
      type: [String, Function]
    },
    operation: {
      type: Function
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "info", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onClose: Function,
    onClosed: Function
  };

  var _Alert = Vue.defineComponent({
    name: "TAlert",
    props: props$6,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var instance = Vue.getCurrentInstance();
      var _useConfig = useConfig("alert"),
        globalConfig = _useConfig.globalConfig,
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          CloseIcon: TdCloseIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
          HelpCircleFilledIcon: TdHelpCircleFilledIcon,
          InfoCircleFilledIcon: TdInfoCircleFilledIcon
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        HelpCircleFilledIcon = _useGlobalIcon.HelpCircleFilledIcon,
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon;
      var COMPONENT_NAME = usePrefixClass("alert");
      var renderTNodeJSX = useTNodeJSX();
      var renderIconTNode = useIcon();
      var alertRef = Vue.ref(null);
      var descriptionRef = Vue.ref(null);
      var descHeight = Vue.ref(0);
      var visible = Vue.ref(true);
      var collapsed = Vue.ref(true);
      var renderIcon = function renderIcon() {
        var Component = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon,
          question: HelpCircleFilledIcon
        };
        var iconContent = renderIconTNode("icon", Component);
        return iconContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__icon")
        }, [iconContent]) : null;
      };
      var renderClose = function renderClose() {
        var closeBtn = props2.closeBtn;
        var isUsingClose = Object.prototype.hasOwnProperty.call(instance.vnode.props || {}, "close") || slots.close;
        var close = isUsingClose ? props2.close : closeBtn;
        if (isUsingClose) {
          log.warnOnce("TAlert", "prop `close` is going to be deprecated, please use `closeBtn` instead.");
        }
        var closeContent = null;
        if (close === true || close === "") {
          closeContent = Vue.createVNode(CloseIcon, null, null);
        } else if (isString(close)) {
          closeContent = close;
        } else {
          closeContent = renderTNodeJSX(isUsingClose ? "close" : "closeBtn");
        }
        return closeContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": handleClose
        }, [closeContent]) : null;
      };
      var renderTitle = function renderTitle() {
        var titleContent = renderTNodeJSX("title");
        return titleContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [" ", titleContent]) : null;
      };
      var renderMessage = function renderMessage() {
        var operationContent = renderTNodeJSX("operation");
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__message")
        }, [renderDescription(), operationContent ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__operation")
        }, [operationContent]) : null]);
      };
      var renderDescription = function renderDescription() {
        var _descriptionRef$value;
        var messageContent = renderTNodeJSX("default") || renderTNodeJSX("message");
        if (isArray$1(messageContent)) {
          messageContent = filterCommentNode(messageContent);
        }
        var contentLength = isArray$1(messageContent) ? messageContent.length : 1;
        var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
        var height = (_descriptionRef$value = descriptionRef.value) === null || _descriptionRef$value === void 0 || (_descriptionRef$value = _descriptionRef$value.children[0]) === null || _descriptionRef$value === void 0 ? void 0 : _descriptionRef$value.offsetHeight;
        if (hasCollapse && collapsed.value) {
          messageContent = messageContent.slice(0, props2.maxLine);
          height && (descriptionRef.value.style.height = "".concat(descHeight.value, "px"));
        } else if (hasCollapse) {
          height && (descriptionRef.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
        }
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description"),
          "ref": descriptionRef
        }, [hasCollapse ? messageContent.map(function (content) {
          return Vue.createVNode("div", null, [content]);
        }) : messageContent, hasCollapse ? Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__collapse"),
          "onClick": function onClick() {
            collapsed.value = !collapsed.value;
          }
        }, [collapsed.value ? globalConfig.value.expandText : globalConfig.value.collapseText]) : null]);
      };
      var renderContent = function renderContent() {
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderTitle(), renderMessage()]);
      };
      var handleClose = function handleClose(e) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
          e: e
        });
        addClass(alertRef.value, "".concat(COMPONENT_NAME.value, "--closing"));
      };
      var handleCloseEnd = function handleCloseEnd(e) {
        var isTransitionTarget = e.target === alertRef.value;
        if (e.propertyName === "opacity" && isTransitionTarget) {
          var _props2$onClosed;
          visible.value = false;
          (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 || _props2$onClosed.call(props2, {
            e: e
          });
        }
      };
      Vue.onMounted(function () {
        on$1(alertRef.value, "transitionend", handleCloseEnd);
        descHeight.value = descriptionRef.value.offsetHeight;
      });
      Vue.onBeforeUnmount(function () {
        off$1(alertRef.value, "transitionend", handleCloseEnd);
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": alertRef,
          "class": ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), _defineProperty$2({}, "".concat(classPrefix.value, "-is-hidden"), !visible.value)]
        }, [renderIcon(), renderContent(), renderClose()]);
      };
    }
  });

  var Alert = withInstall$1(_Alert);

  var props$5 = {
    attach: {
      type: [String, Function]
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function]
    },
    closeBtn: {
      type: [String, Boolean, Function]
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    drawerClassName: {
      type: String,
      "default": ""
    },
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: Boolean,
    mode: {
      type: String,
      "default": "overlay",
      validator: function validator(val) {
        if (!val) return true;
        return ["overlay", "push"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": void 0
    },
    sizeDraggable: {
      type: [Boolean, Object],
      "default": false
    },
    visible: Boolean,
    zIndex: {
      type: Number
    },
    onBeforeClose: Function,
    onBeforeOpen: Function,
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOverlayClick: Function,
    onSizeDragEnd: Function
  };

  function getSizeDraggable(sizeDraggable, limit) {
    if (typeof sizeDraggable === "boolean") {
      return {
        allowSizeDraggable: sizeDraggable,
        max: limit.max,
        min: limit.min
      };
    }
    return {
      allowSizeDraggable: true,
      max: sizeDraggable.max,
      min: sizeDraggable.min
    };
  }
  function calcSizeRange(size, min, max) {
    return Math.min(Math.max(size, min), max);
  }
  function calcMoveSize(placement, opts) {
    var x = opts.x,
      y = opts.y,
      max = opts.max,
      min = opts.min,
      maxWidth = opts.maxWidth,
      maxHeight = opts.maxHeight;
    var moveSize;
    switch (placement) {
      case "right":
        moveSize = calcSizeRange(maxWidth - x, min, max);
        break;
      case "left":
        moveSize = calcSizeRange(x, min, max);
        break;
      case "top":
        moveSize = calcSizeRange(y, min, max);
        break;
      case "bottom":
        moveSize = calcSizeRange(maxHeight - y, min, max);
        break;
      default:
        return moveSize;
    }
    return moveSize;
  }

  var useDrag$1 = function useDrag(props) {
    var isSizeDragging = Vue.ref(false);
    var draggedSizeValue = Vue.ref(null);
    var enableDrag = function enableDrag(e) {
      e.stopPropagation();
      document.addEventListener("mouseup", _handleMouseup, true);
      document.addEventListener("mousemove", handleMousemove, true);
      isSizeDragging.value = true;
    };
    var _handleMouseup = function handleMouseup() {
      document.removeEventListener("mouseup", _handleMouseup, true);
      document.removeEventListener("mousemove", handleMousemove, true);
      isSizeDragging.value = false;
    };
    var handleMousemove = function handleMousemove(e) {
      var _props$onSizeDragEnd;
      var x = e.x,
        y = e.y;
      var maxHeight = document.documentElement.clientHeight;
      var maxWidth = document.documentElement.clientWidth;
      var offsetHeight = 8;
      var offsetWidth = 8;
      var max = props.placement === "left" || props.placement === "right" ? maxWidth : maxHeight;
      var min = props.placement === "left" || props.placement === "right" ? offsetWidth : offsetHeight;
      var _getSizeDraggable = getSizeDraggable(props.sizeDraggable, {
          max: max,
          min: min
        }),
        allowSizeDraggable = _getSizeDraggable.allowSizeDraggable,
        limitMax = _getSizeDraggable.max,
        limitMin = _getSizeDraggable.min;
      if (!allowSizeDraggable || !isSizeDragging.value) return;
      var moveSize = calcMoveSize(props.placement, {
        x: x,
        y: y,
        maxWidth: maxWidth,
        maxHeight: maxHeight,
        max: limitMax,
        min: limitMin
      });
      if (typeof moveSize === "undefined") return;
      draggedSizeValue.value = "".concat(moveSize, "px");
      (_props$onSizeDragEnd = props.onSizeDragEnd) === null || _props$onSizeDragEnd === void 0 || _props$onSizeDragEnd.call(props, {
        e: e,
        size: moveSize
      });
    };
    var draggableLineStyles = Vue.computed(function () {
      var isHorizontal = ["right", "left"].includes(props.placement);
      var oppositeMap = {
        left: "right",
        right: "left",
        top: "bottom",
        bottom: "top"
      };
      return _defineProperty$2(_defineProperty$2(_defineProperty$2(_defineProperty$2({
        zIndex: 1,
        position: "absolute",
        background: "transparent"
      }, oppositeMap[props.placement], 0), "width", isHorizontal ? "16px" : "100%"), "height", isHorizontal ? "100%" : "16px"), "cursor", isHorizontal ? "col-resize" : "row-resize");
    });
    var draggingStyles = Vue.computed(function () {
      return isSizeDragging.value ? {
        userSelect: "none"
      } : {};
    });
    return {
      draggedSizeValue: draggedSizeValue,
      enableDrag: enableDrag,
      draggableLineStyles: draggableLineStyles,
      draggingStyles: draggingStyles
    };
  };

  function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var key = 1;
  var _Drawer = Vue.defineComponent({
    name: "TDrawer",
    inheritAttrs: false,
    props: props$5,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var destroyOnCloseVisible = Vue.ref(false);
      var isVisible = Vue.ref(false);
      var styleEl = Vue.ref();
      var styleTimer = Vue.ref();
      var _useConfig = useConfig("drawer"),
        globalConfig = _useConfig.globalConfig;
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: TdCloseIcon
        }),
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("drawer");
      var _useDrag = useDrag$1(props2),
        draggedSizeValue = _useDrag.draggedSizeValue,
        enableDrag = _useDrag.enableDrag,
        draggableLineStyles = _useDrag.draggableLineStyles,
        draggingStyles = _useDrag.draggingStyles;
      var computedVisible = Vue.computed(function () {
        return props2.visible;
      });
      var isMounted = Vue.ref(false);
      var teleportElement = useTeleport(function () {
        return props2.attach;
      });
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
          e: e
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "cancel",
          e: e
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      var drawerEle = Vue.ref(null);
      var drawerClasses = Vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.placement), _defineProperty$2(_defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "--open"), isVisible.value), "".concat(COMPONENT_NAME.value, "--attach"), props2.showInAttachedElement), "".concat(COMPONENT_NAME.value, "--without-mask"), !props2.showOverlay), props2.drawerClassName];
      });
      var sizeValue = Vue.computed(function () {
        var _props2$size;
        if (draggedSizeValue.value) return draggedSizeValue.value;
        var size = (_props2$size = props2.size) !== null && _props2$size !== void 0 ? _props2$size : globalConfig.value.size;
        var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
        return {
          small: "300px",
          medium: "500px",
          large: "760px"
        }[size] || defaultSize;
      });
      var wrapperStyles = Vue.computed(function () {
        return {
          transform: isVisible.value ? "translateX(0)" : void 0,
          width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
          height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
        };
      });
      var wrapperClasses = Vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__content-wrapper"), "".concat(COMPONENT_NAME.value, "__content-wrapper--").concat(props2.placement)];
      });
      var parentNode = Vue.computed(function () {
        var _drawerEle$value;
        return (_drawerEle$value = drawerEle.value) === null || _drawerEle$value === void 0 ? void 0 : _drawerEle$value.parentNode;
      });
      var modeAndPlacement = Vue.computed(function () {
        return [props2.mode, props2.placement].join();
      });
      var footerStyle = Vue.computed(function () {
        return {
          display: "flex",
          justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
        };
      });
      var handleEscKeydown = function handleEscKeydown(e) {
        var _props2$closeOnEscKey;
        if (((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) && e.key === "Escape" && isVisible.value && isTopInteractivePopup()) {
          var _props2$onEscKeydown;
          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 || _props2$onEscKeydown.call(props2, {
            e: e
          });
          closeDrawer({
            trigger: "esc",
            e: e
          });
          e.stopImmediatePropagation();
        }
      };
      var clearStyleEl = function clearStyleEl() {
        clearTimeout(styleTimer.value);
        styleTimer.value = setTimeout(function () {
          var _styleEl$value, _styleEl$value$remove;
          (_styleEl$value = styleEl.value) === null || _styleEl$value === void 0 || (_styleEl$value = _styleEl$value.parentNode) === null || _styleEl$value === void 0 || (_styleEl$value$remove = _styleEl$value.removeChild) === null || _styleEl$value$remove === void 0 || _styleEl$value$remove.call(_styleEl$value, styleEl.value);
          styleEl.value = null;
        }, 150);
        Vue.nextTick(function () {
          var _drawerEle$value2, _drawerEle$value2$foc;
          (_drawerEle$value2 = drawerEle.value) === null || _drawerEle$value2 === void 0 || (_drawerEle$value2$foc = _drawerEle$value2.focus) === null || _drawerEle$value2$foc === void 0 || _drawerEle$value2$foc.call(_drawerEle$value2);
        });
      };
      var createStyleEl = function createStyleEl() {
        if (!styleEl.value) return;
        var hasScrollBar = window.innerWidth > document.documentElement.clientWidth;
        var scrollWidth = hasScrollBar ? getScrollbarWidth() : 0;
        styleEl.value = document.createElement("style");
        styleEl.value.dataset.id = "td_drawer_".concat(+new Date(), "_").concat(key += 1);
        styleEl.value.innerHTML = "\n        html body {\n          overflow-y: hidden;\n          transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;\n          ".concat(props2.mode === "push" ? "" : "width: calc(100% - ".concat(scrollWidth, "px);"), "\n        }\n      ");
      };
      var handlePushMode = function handlePushMode() {
        if (props2.mode !== "push") return;
        Vue.nextTick(function () {
          if (!parentNode.value) return;
          parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
        });
      };
      var updatePushMode = function updatePushMode() {
        if (!parentNode.value || props2.mode !== "push") return;
        var marginValueData = {
          left: {
            name: "margin-left",
            value: sizeValue.value
          },
          right: {
            name: "margin-right",
            value: "-".concat(sizeValue.value)
          },
          top: {
            name: "margin-top",
            value: sizeValue.value
          },
          bottom: {
            name: "margin-bottom",
            value: "-".concat(sizeValue.value)
          }
        }[props2.placement];
        if (isVisible.value) {
          parentNode.value.style.setProperty(marginValueData.name, marginValueData.value);
        } else {
          parentNode.value.style.removeProperty(marginValueData.name);
        }
      };
      var getDefaultFooter = function getDefaultFooter() {
        var confirmBtn = getConfirmBtn({
          confirmBtn: props2.confirmBtn,
          globalConfirm: globalConfig.value.confirm,
          className: "".concat(COMPONENT_NAME.value, "__confirm")
        });
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        });
        return Vue.createVNode("div", {
          "style": footerStyle.value
        }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
      };
      var _usePopupManager = usePopupManager("drawer", {
          visible: computedVisible
        }),
        isTopInteractivePopup = _usePopupManager.isTopInteractivePopup;
      Vue.watch(modeAndPlacement, handlePushMode, {
        immediate: true
      });
      var updateVisibleState = function updateVisibleState(value) {
        if (value) {
          isMounted.value = true;
        }
        if (props2.destroyOnClose) {
          if (value) {
            destroyOnCloseVisible.value = false;
            setTimeout(function () {
              return isVisible.value = true;
            });
          } else {
            isVisible.value = false;
            if (destroyOnCloseVisible.value) {
              destroyOnCloseVisible.value = false;
            }
            setTimeout(function () {
              return destroyOnCloseVisible.value = true;
            }, 300);
          }
          return;
        }
        if (destroyOnCloseVisible.value && value) {
          destroyOnCloseVisible.value = false;
          setTimeout(function () {
            return isVisible.value = true;
          });
          return;
        }
        setTimeout(function () {
          return isVisible.value = value;
        });
      };
      var addStyleElToHead = function addStyleElToHead() {
        if (!props2.showInAttachedElement && props2.preventScrollThrough && isVisible.value && (isMounted.value || !props2.lazy)) {
          if (!styleEl.value) {
            createStyleEl();
          }
          if (styleEl.value && !document.head.contains(styleEl.value)) {
            document.head.appendChild(styleEl.value);
          }
        }
      };
      Vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (isServer$1) return;
        if (value) {
          var _props2$onBeforeOpen;
          addStyleElToHead();
          (_props2$onBeforeOpen = props2.onBeforeOpen) === null || _props2$onBeforeOpen === void 0 || _props2$onBeforeOpen.call(props2);
        } else {
          var _props2$onBeforeClose;
          clearStyleEl();
          (_props2$onBeforeClose = props2.onBeforeClose) === null || _props2$onBeforeClose === void 0 || _props2$onBeforeClose.call(props2);
        }
        updateVisibleState(value);
      }, {
        immediate: true
      });
      var handleCloseBtnClick = function handleCloseBtnClick(e) {
        var _props2$onCloseBtnCli;
        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "close-btn",
          e: e
        });
      };
      var handleWrapperClick = function handleWrapperClick(e) {
        var _props2$onOverlayClic, _props2$closeOnOverla;
        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
          e: e
        });
        if ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick) {
          closeDrawer({
            trigger: "overlay",
            e: e
          });
        }
      };
      var closeDrawer = function closeDrawer(params) {
        var _props2$onClose;
        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, params);
        context.emit("update:visible", false);
      };
      Vue.onUpdated(updatePushMode);
      Vue.onMounted(function () {
        addStyleElToHead();
        window.addEventListener("keydown", handleEscKeydown);
      });
      Vue.onBeforeUnmount(function () {
        clearStyleEl();
        window.removeEventListener("keydown", handleEscKeydown);
      });
      var shouldRender = Vue.computed(function () {
        if (!isMounted.value) {
          return !props2.lazy;
        } else {
          return isVisible.value || !destroyOnCloseVisible.value;
        }
      });
      return function () {
        if (!shouldRender.value) return;
        var body = renderContent("body", "default");
        var headerContent = renderTNodeJSX("header");
        var defaultFooter = getDefaultFooter();
        return Vue.createVNode(Vue.Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          "default": function _default() {
            return [Vue.createVNode("div", Vue.mergeProps({
              "ref": drawerEle,
              "class": drawerClasses.value,
              "style": {
                zIndex: props2.zIndex
              },
              "onKeydown": handleEscKeydown,
              "tabindex": 0
            }, context.attrs), [props2.showOverlay && Vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__mask"),
              "onClick": handleWrapperClick
            }, null), Vue.createVNode("div", {
              "class": wrapperClasses.value,
              "style": _objectSpread$e(_objectSpread$e({}, wrapperStyles.value), draggingStyles.value)
            }, [headerContent && Vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__header")
            }, [headerContent]), props2.closeBtn && Vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__close-btn"),
              "onClick": handleCloseBtnClick
            }, [renderTNodeJSX("closeBtn", Vue.createVNode(CloseIcon, null, null))]), Vue.createVNode("div", {
              "class": ["".concat(COMPONENT_NAME.value, "__body"), "narrow-scrollbar"]
            }, [body]), props2.footer && Vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME.value, "__footer")
            }, [renderTNodeJSX("footer", defaultFooter)]), props2.sizeDraggable && Vue.createVNode("div", {
              "style": draggableLineStyles.value,
              "onMousedown": enableDrag
            }, null)])])];
          }
        });
      };
    }
  });

  function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var createDrawer = function createDrawer(props, context) {
    var options = _objectSpread$d({}, props);
    var wrapper = document.createElement("div");
    var visible = Vue.ref(false);
    var style = options.style;
    var updateStyle = function updateStyle(style2) {
      if (style2) {
        wrapper.firstElementChild.style.cssText += style2;
      }
    };
    function destroySelf() {
      Vue.render(null, wrapper);
      wrapper.remove();
    }
    var component = Vue.defineComponent({
      setup: function setup(props2, _ref) {
        var expose = _ref.expose;
        var drawerOptions = Vue.ref(options);
        Vue.onMounted(function () {
          Vue.nextTick(function () {
            visible.value = true;
          });
          document.activeElement.blur();
          Vue.nextTick(function () {
            updateStyle(style);
          });
        });
        var update = function update(newOptions) {
          drawerOptions.value = _objectSpread$d(_objectSpread$d({}, options), newOptions);
        };
        expose({
          update: update
        });
        return function () {
          var _drawerOptions$value;
          var onClose = options.onClose || function () {
            visible.value = false;
            if (options.destroyOnClose) {
              setTimeout(function () {
                destroySelf();
              }, 300);
            }
          };
          delete options.style;
          return Vue.h(_Drawer, _objectSpread$d({
            onClose: onClose,
            visible: visible.value,
            drawerClassName: (_drawerOptions$value = drawerOptions.value) === null || _drawerOptions$value === void 0 ? void 0 : _drawerOptions$value.className
          }, drawerOptions.value));
        };
      }
    });
    var drawerComponent = Vue.createVNode(component);
    if (context !== null && context !== void 0 ? context : DrawerPlugin._context) {
      drawerComponent.appContext = context !== null && context !== void 0 ? context : DrawerPlugin._context;
    }
    var container = getAttach(options.attach);
    if (container) {
      container.appendChild(wrapper);
    } else {
      console.error("attach is not exist");
    }
    Vue.render(drawerComponent, wrapper);
    var destroyDrawer = function destroyDrawer() {
      visible.value = false;
      setTimeout(function () {
        destroySelf();
      }, 400);
    };
    var drawerNode = {
      show: function show() {
        visible.value = true;
      },
      hide: function hide() {
        visible.value = false;
      },
      update: function update(newOptions) {
        drawerComponent.component.exposed.update(omit$1(newOptions, ["style"]));
        updateStyle(newOptions.style);
      },
      destroy: function destroy() {
        destroyDrawer();
      }
    };
    return drawerNode;
  };
  var DrawerPlugin = createDrawer;
  DrawerPlugin.install = function (app) {
    DrawerPlugin._context = app._context;
    app.config.globalProperties.$drawer = createDrawer;
  };

  var Drawer = withInstall$1(_Drawer);

  var props$4 = {
    counter: {
      type: Function
    },
    current: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultCurrent: {
      type: Number
    },
    finishButtonProps: {
      type: Object
    },
    hideCounter: Boolean,
    hidePrev: Boolean,
    hideSkip: Boolean,
    highlightPadding: {
      type: Number,
      "default": 8
    },
    mode: {
      type: String,
      "default": "popup",
      validator: function validator(val) {
        if (!val) return true;
        return ["popup", "dialog"].includes(val);
      }
    },
    nextButtonProps: {
      type: Object
    },
    prevButtonProps: {
      type: Object
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    skipButtonProps: {
      type: Object
    },
    steps: {
      type: Array
    },
    zIndex: {
      type: Number,
      "default": 999999
    },
    onChange: Function,
    onFinish: Function,
    onNextStepClick: Function,
    onPrevStepClick: Function,
    onSkip: Function
  };

  function getScrollParent(element) {
    var style = window.getComputedStyle(element);
    var excludeStaticParent = style.position === "absolute";
    var overflowRegex = /(auto|scroll)/;
    if (style.position === "fixed") return document.body;
    for (var parent = element; parent.parentElement;) {
      parent = parent.parentElement;
      style = window.getComputedStyle(parent);
      if (excludeStaticParent && style.position === "static") {
        continue;
      }
      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;
    }
    return document.body;
  }
  function scrollToParentVisibleArea(element) {
    var parent = getScrollParent(element);
    if (parent === document.body) return;
    if (elementInViewport(element, parent)) return;
    parent.scrollTop = element.offsetTop - parent.offsetTop;
  }

  function getRelativePosition(elm) {
    var relativeElm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;
    var _getWindowScroll = getWindowScroll$1(),
      scrollTop = _getWindowScroll.scrollTop,
      scrollLeft = _getWindowScroll.scrollLeft;
    var _elm$getBoundingClien = elm.getBoundingClientRect(),
      elmTop = _elm$getBoundingClien.top,
      elmLeft = _elm$getBoundingClien.left;
    var _relativeElm$getBound = relativeElm.getBoundingClientRect(),
      relElmTop = _relativeElm$getBound.top,
      relElmLeft = _relativeElm$getBound.left;
    var relativeElmPosition = getElmCssPropValue(relativeElm, "position");
    if (relativeElm.tagName.toLowerCase() !== "body" && relativeElmPosition === "relative" || relativeElmPosition === "sticky") {
      return {
        top: elmTop - relElmTop,
        left: elmLeft - relElmLeft
      };
    }
    if (isFixed(elm)) {
      return {
        top: elmTop,
        left: elmLeft
      };
    }
    return {
      top: elmTop + scrollTop,
      left: elmLeft + scrollLeft
    };
  }

  function getTargetElm(elm) {
    if (elm) {
      var _process;
      var targetElement = null;
      if (isString(elm)) {
        targetElement = document.querySelector(elm);
      } else if (isFunction(elm)) {
        targetElement = elm();
      } else {
        throw new Error("elm should be string or function");
      }
      if (targetElement) {
        return targetElement;
      }
      if (((_process = process) === null || _process === void 0 || (_process = _process.env) === null || _process === void 0 ? void 0 : _process.NODE_ENV) !== "test") {
        throw new Error("There is no element with given.");
      }
    } else {
      return document.body;
    }
  }

  function scrollToElm(elm) {
    var rect = elm.getBoundingClientRect();
    if (!elementInViewport(elm)) {
      var winHeight = getWindowSize().height;
      scrollTo(rect.top - (winHeight / 2 - rect.height / 2), {});
    }
  }

  var _Guide = Vue.defineComponent({
    name: "TGuide",
    props: props$4,
    setup: function setup(props2, context) {
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("guide");
      var LOCK_CLASS = usePrefixClass("guide--lock");
      var _useConfig = useConfig("guide"),
        globalConfig = _useConfig.globalConfig;
      var _toRefs = Vue.toRefs(props2),
        current = _toRefs.current,
        modelValue = _toRefs.modelValue,
        hideCounter = _toRefs.hideCounter,
        hidePrev = _toRefs.hidePrev,
        hideSkip = _toRefs.hideSkip,
        steps = _toRefs.steps,
        zIndex = _toRefs.zIndex;
      var _useVModel = useVModel$1(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerCurrent = _useVModel2[0],
        setInnerCurrent = _useVModel2[1];
      var overlayLayerRef = Vue.ref();
      var highlightLayerRef = Vue.ref();
      var referenceLayerRef = Vue.ref();
      var currentHighlightLayerElm = Vue.ref();
      var dialogWrapperRef = Vue.ref();
      var dialogTooltipRef = Vue.ref();
      var popupTooltipRef = Vue.ref();
      var actived = Vue.ref(false);
      var stepsTotal = Vue.computed(function () {
        return steps.value.length;
      });
      var currentStepInfo = Vue.computed(function () {
        return steps.value[innerCurrent.value];
      });
      var isPopup = Vue.computed(function () {
        return getCurrentCrossProps("mode") === "popup";
      });
      var currentElmIsFixed = Vue.computed(function () {
        return isFixed(currentHighlightLayerElm.value || document.body);
      });
      var getCurrentCrossProps = function getCurrentCrossProps(propsName) {
        var _currentStepInfo$valu;
        return (_currentStepInfo$valu = currentStepInfo.value[propsName]) !== null && _currentStepInfo$valu !== void 0 ? _currentStepInfo$valu : props2[propsName];
      };
      var currentCustomHighlightContent = Vue.computed(function () {
        var highlightContent = currentStepInfo.value.highlightContent;
        var node = highlightContent;
        if (isFunction(highlightContent)) {
          node = highlightContent(hWithParams());
        } else if (context.slots.highlightContent) {
          node = context.slots.highlightContent(hWithParams());
        } else if (context.slots["highlight-content"]) {
          node = context.slots["highlight-content"](hWithParams());
        } else if (!!highlightContent) {
          node = Vue.createVNode(node, null, null);
        }
        if (node) {
          if (!node.props) node.props = {};
          node.props["class"] = node.props["class"] || "";
        }
        return node;
      });
      var showCustomHighlightContent = Vue.computed(function () {
        return Boolean(currentCustomHighlightContent.value && isPopup.value);
      });
      var popupVisible = Vue.ref(false);
      var hWithParams = function hWithParams() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          currentStepInfo: currentStepInfo.value
        };
        var newH = new Function("return " + Vue.h.toString())();
        return Object.assign({}, newH, params);
      };
      var setHighlightLayerPosition = function setHighlightLayerPosition(highlightLayer) {
        var isReference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var _getRelativePosition = getRelativePosition(currentHighlightLayerElm.value),
          top = _getRelativePosition.top,
          left = _getRelativePosition.left;
        var _currentHighlightLaye = currentHighlightLayerElm.value.getBoundingClientRect(),
          width = _currentHighlightLaye.width,
          height = _currentHighlightLaye.height;
        var highlightPadding = getCurrentCrossProps("highlightPadding");
        if (isPopup.value) {
          width += highlightPadding * 2;
          height += highlightPadding * 2;
          top -= highlightPadding;
          left -= highlightPadding;
        } else {
          var _getWindowScroll = getWindowScroll$1(),
            scrollTop = _getWindowScroll.scrollTop,
            scrollLeft = _getWindowScroll.scrollLeft;
          top += scrollTop;
          left += scrollLeft;
        }
        var style = {
          top: "".concat(top, "px"),
          left: "".concat(left, "px")
        };
        if (showCustomHighlightContent.value) {
          if (isReference) {
            var _highlightLayerRef$va = highlightLayerRef.value.getBoundingClientRect(),
              width2 = _highlightLayerRef$va.width,
              height2 = _highlightLayerRef$va.height;
            Object.assign(style, {
              width: "".concat(width2, "px"),
              height: "".concat(height2, "px")
            });
          } else {
            Object.assign(style, {
              width: "auto",
              height: "auto"
            });
          }
        } else {
          Object.assign(style, {
            width: "".concat(width, "px"),
            height: "".concat(height, "px")
          });
        }
        setStyle(highlightLayer, style);
      };
      var showPopupGuide = function showPopupGuide() {
        Vue.nextTick(function () {
          var _popupTooltipRef$valu;
          currentHighlightLayerElm.value = getTargetElm(currentStepInfo.value.element);
          if (!currentHighlightLayerElm.value) return;
          scrollToParentVisibleArea(currentHighlightLayerElm.value);
          setHighlightLayerPosition(highlightLayerRef.value);
          setHighlightLayerPosition(referenceLayerRef.value, true);
          scrollToElm(currentHighlightLayerElm.value);
          (_popupTooltipRef$valu = popupTooltipRef.value) === null || _popupTooltipRef$valu === void 0 || _popupTooltipRef$valu.update();
        });
      };
      var destroyTooltipElm = function destroyTooltipElm() {
        var _referenceLayerRef$va;
        (_referenceLayerRef$va = referenceLayerRef.value) === null || _referenceLayerRef$va === void 0 || _referenceLayerRef$va.parentNode.removeChild(referenceLayerRef.value);
      };
      var showDialogGuide = function showDialogGuide() {
        Vue.nextTick(function () {
          currentHighlightLayerElm.value = dialogTooltipRef.value;
          scrollToParentVisibleArea(currentHighlightLayerElm.value);
          setHighlightLayerPosition(highlightLayerRef.value);
          scrollToElm(currentHighlightLayerElm.value);
        });
      };
      var destroyDialogTooltipElm = function destroyDialogTooltipElm() {
        var _dialogTooltipRef$val, _dialogWrapperRef$val;
        (_dialogTooltipRef$val = dialogTooltipRef.value) === null || _dialogTooltipRef$val === void 0 || _dialogTooltipRef$val.parentNode.removeChild(dialogTooltipRef.value);
        (_dialogWrapperRef$val = dialogWrapperRef.value) === null || _dialogWrapperRef$val === void 0 || _dialogWrapperRef$val.parentNode.removeChild(dialogWrapperRef.value);
      };
      var showGuide = function showGuide() {
        if (isPopup.value) {
          destroyDialogTooltipElm();
          showPopupGuide();
        } else {
          destroyTooltipElm();
          showDialogGuide();
        }
        popupVisible.value = true;
      };
      var destroyGuide = function destroyGuide() {
        var _highlightLayerRef$va2, _overlayLayerRef$valu;
        destroyTooltipElm();
        destroyDialogTooltipElm();
        (_highlightLayerRef$va2 = highlightLayerRef.value) === null || _highlightLayerRef$va2 === void 0 || _highlightLayerRef$va2.parentNode.removeChild(highlightLayerRef.value);
        (_overlayLayerRef$valu = overlayLayerRef.value) === null || _overlayLayerRef$valu === void 0 || _overlayLayerRef$valu.parentNode.removeChild(overlayLayerRef.value);
        removeClass(document.body, LOCK_CLASS.value);
      };
      var handleSkip = function handleSkip(e) {
        var _props2$onSkip;
        var total = stepsTotal.value;
        actived.value = false;
        setInnerCurrent(-1, {
          e: e,
          total: total
        });
        (_props2$onSkip = props2.onSkip) === null || _props2$onSkip === void 0 || _props2$onSkip.call(props2, {
          e: e,
          current: innerCurrent.value,
          total: total
        });
      };
      var handlePrev = function handlePrev(e) {
        var _props2$onPrevStepCli;
        var total = stepsTotal.value;
        setInnerCurrent(innerCurrent.value - 1, {
          e: e,
          total: total
        });
        (_props2$onPrevStepCli = props2.onPrevStepClick) === null || _props2$onPrevStepCli === void 0 || _props2$onPrevStepCli.call(props2, {
          e: e,
          prev: innerCurrent.value - 1,
          current: innerCurrent.value,
          total: total
        });
      };
      var handleNext = function handleNext(e) {
        var _props2$onNextStepCli;
        var total = stepsTotal.value;
        setInnerCurrent(innerCurrent.value + 1, {
          e: e,
          total: total
        });
        (_props2$onNextStepCli = props2.onNextStepClick) === null || _props2$onNextStepCli === void 0 || _props2$onNextStepCli.call(props2, {
          e: e,
          next: innerCurrent.value + 1,
          current: innerCurrent.value,
          total: total
        });
      };
      var handleFinish = function handleFinish(e) {
        var _props2$onFinish;
        var total = stepsTotal.value;
        actived.value = false;
        setInnerCurrent(-1, {
          e: e,
          total: total
        });
        (_props2$onFinish = props2.onFinish) === null || _props2$onFinish === void 0 || _props2$onFinish.call(props2, {
          e: e,
          current: innerCurrent.value,
          total: total
        });
      };
      var initGuide = function initGuide() {
        if (innerCurrent.value >= 0 && innerCurrent.value < steps.value.length) {
          if (!actived.value) {
            actived.value = true;
            addClass(document.body, LOCK_CLASS.value);
          }
          showGuide();
        }
      };
      Vue.watch(innerCurrent, function (val) {
        if (val >= 0 && val < steps.value.length) {
          popupVisible.value = false;
          initGuide();
        } else {
          actived.value = false;
          destroyGuide();
        }
      });
      Vue.onMounted(function () {
        initGuide();
      });
      return function () {
        var renderOverlayLayer = function renderOverlayLayer() {
          return Vue.createVNode("div", {
            "ref": overlayLayerRef,
            "class": "".concat(COMPONENT_NAME.value, "__overlay"),
            "style": {
              zIndex: zIndex.value - 2
            }
          }, null);
        };
        var renderHighlightLayer = function renderHighlightLayer() {
          var style = {
            zIndex: zIndex.value - 1
          };
          var highlightClass = ["".concat(COMPONENT_NAME.value, "__highlight"), "".concat(COMPONENT_NAME.value, "__highlight--").concat(isPopup.value ? "popup" : "dialog"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value && isPopup.value ? "fixed" : "absolute")];
          var showOverlay = getCurrentCrossProps("showOverlay");
          var maskClass = ["".concat(COMPONENT_NAME.value, "__highlight--").concat(showOverlay ? "mask" : "nomask")];
          return Vue.createVNode("div", {
            "ref": highlightLayerRef,
            "class": [].concat(highlightClass, maskClass),
            "style": style
          }, [showCustomHighlightContent.value && currentCustomHighlightContent.value]);
        };
        var renderCounter = function renderCounter() {
          var popupSlotCounter = renderTNodeJSX("counter", {
            params: {
              total: stepsTotal.value,
              current: innerCurrent.value
            }
          });
          var popupDefaultCounter = Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__counter")
          }, [popupSlotCounter || "".concat(innerCurrent.value + 1, "/").concat(stepsTotal.value)]);
          return Vue.createVNode(Vue.Fragment, null, [!hideCounter.value && popupDefaultCounter]);
        };
        var renderAction = function renderAction(mode) {
          var _getCurrentCrossProps, _getCurrentCrossProps2, _getCurrentCrossProps3, _props2$finishButtonP;
          var isLast = innerCurrent.value === stepsTotal.value - 1;
          var isFirst = innerCurrent.value === 0;
          var buttonSize = mode === "popup" ? "small" : "medium";
          return Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__action")
          }, [!hideSkip.value && !isLast && Vue.createVNode(Button, Vue.mergeProps({
            "key": "skip",
            "class": "".concat(COMPONENT_NAME.value, "__skip"),
            "theme": "default",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleSkip
          }, (_getCurrentCrossProps = getCurrentCrossProps("skipButtonProps")) !== null && _getCurrentCrossProps !== void 0 ? _getCurrentCrossProps : globalConfig.value.skipButtonProps), null), !hidePrev.value && !isFirst && Vue.createVNode(Button, Vue.mergeProps({
            "key": "prev",
            "class": "".concat(COMPONENT_NAME.value, "__prev"),
            "theme": "default",
            "size": buttonSize,
            "variant": "base",
            "onClick": handlePrev
          }, (_getCurrentCrossProps2 = getCurrentCrossProps("prevButtonProps")) !== null && _getCurrentCrossProps2 !== void 0 ? _getCurrentCrossProps2 : globalConfig.value.prevButtonProps), null), !isLast && Vue.createVNode(Button, Vue.mergeProps({
            "key": "next",
            "class": "".concat(COMPONENT_NAME.value, "__next"),
            "theme": "primary",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleNext
          }, (_getCurrentCrossProps3 = getCurrentCrossProps("nextButtonProps")) !== null && _getCurrentCrossProps3 !== void 0 ? _getCurrentCrossProps3 : globalConfig.value.nextButtonProps), null), isLast && Vue.createVNode(Button, Vue.mergeProps({
            "key": "finish",
            "class": "".concat(COMPONENT_NAME.value, "__finish"),
            "theme": "primary",
            "size": buttonSize,
            "variant": "base",
            "onClick": handleFinish
          }, (_props2$finishButtonP = props2.finishButtonProps) !== null && _props2$finishButtonP !== void 0 ? _props2$finishButtonP : globalConfig.value.finishButtonProps), null)]);
        };
        var renderTitle = function renderTitle() {
          var functionTitle = isFunction(currentStepInfo.value.title) ? currentStepInfo.value.title() : void 0;
          var slotTitle = context.slots.title ? context.slots.title(hWithParams()) : void 0;
          return functionTitle || slotTitle || currentStepInfo.value.title;
        };
        var renderTooltipBody = function renderTooltipBody() {
          var title = Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__title")
          }, [renderTitle()]);
          var bodyRender = currentStepInfo.value.body;
          var descBody;
          if (isFunction(bodyRender)) {
            descBody = bodyRender(hWithParams());
          } else if (context.slots.body) {
            descBody = context.slots.body({
              currentStepInfo: currentStepInfo.value
            });
          } else if (typeof bodyRender === "string") {
            descBody = bodyRender;
          } else {
            descBody = Vue.createVNode(bodyRender, null, null);
          }
          var desc = Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__desc")
          }, [descBody]);
          return Vue.createVNode(Vue.Fragment, null, [title, desc]);
        };
        var renderPopupContent = function renderPopupContent() {
          var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
          var action = Vue.createVNode("div", {
            "class": footerClasses
          }, [renderCounter(), renderAction("popup")]);
          return Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__tooltip")
          }, [renderTooltipBody(), action]);
        };
        var renderPopupGuide = function renderPopupGuide() {
          var _currentStepInfo$valu2;
          var content = currentStepInfo.value.content;
          var contentProps = {
            handlePrev: handlePrev,
            handleNext: handleNext,
            handleSkip: handleSkip,
            handleFinish: handleFinish,
            current: innerCurrent.value,
            total: stepsTotal.value
          };
          var renderBody;
          if (isFunction(content)) {
            renderBody = function renderBody() {
              return content(hWithParams(contentProps));
            };
          } else if (context.slots.content) {
            renderBody = function renderBody() {
              return context.slots.content(hWithParams(contentProps));
            };
          } else if (content) {
            renderBody = function renderBody() {
              return Vue.createVNode(content, contentProps, null);
            };
          } else {
            renderBody = renderPopupContent;
          }
          var classes = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--").concat(currentElmIsFixed.value ? "fixed" : "absolute")];
          var innerClassName = [_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__popup--content"), !!content)];
          return Vue.createVNode(Popup, Vue.mergeProps({
            "ref": popupTooltipRef,
            "visible": popupVisible.value,
            "show-arrow": !content,
            "zIndex": zIndex.value,
            "placement": currentStepInfo.value.placement
          }, currentStepInfo.value.popupProps, {
            "content": renderBody,
            "overlayClassName": ["".concat(COMPONENT_NAME.value, "__popup"), currentStepInfo.value.stepOverlayClass],
            "overlayInnerClassName": innerClassName.concat((_currentStepInfo$valu2 = currentStepInfo.value.popupProps) === null || _currentStepInfo$valu2 === void 0 ? void 0 : _currentStepInfo$valu2.overlayInnerClassName)
          }), {
            "default": function _default() {
              return [Vue.createVNode("div", {
                "ref": referenceLayerRef,
                "class": classes
              }, null)];
            }
          });
        };
        var renderDialogGuide = function renderDialogGuide() {
          var style = {
            zIndex: zIndex.value
          };
          var wrapperClasses = ["".concat(COMPONENT_NAME.value, "__wrapper"), _defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__wrapper--center"), currentStepInfo.value.placement === "center")];
          var dialogClasses = ["".concat(COMPONENT_NAME.value, "__reference"), "".concat(COMPONENT_NAME.value, "--absolute"), "".concat(COMPONENT_NAME.value, "__dialog"), _defineProperty$2(_defineProperty$2({}, "".concat(COMPONENT_NAME.value, "__dialog--nomask"), !getCurrentCrossProps("showOverlay")), currentStepInfo.value.stepOverlayClass, !!currentStepInfo.value.stepOverlayClass)];
          var footerClasses = ["".concat(COMPONENT_NAME.value, "__footer"), "".concat(COMPONENT_NAME.value, "__footer--popup")];
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("div", {
            "ref": dialogWrapperRef,
            "class": wrapperClasses,
            "style": style
          }, [Vue.createVNode("div", {
            "ref": dialogTooltipRef,
            "class": dialogClasses
          }, [renderTooltipBody(), Vue.createVNode("div", {
            "class": footerClasses
          }, [renderCounter(), renderAction("dialog")])])])]);
        };
        var renderGuide = function renderGuide() {
          return Vue.createVNode(Vue.Fragment, null, [Vue.createVNode(Vue.Teleport, {
            "to": "body"
          }, {
            "default": function _default() {
              return [renderOverlayLayer(), renderHighlightLayer(), isPopup.value ? renderPopupGuide() : renderDialogGuide()];
            }
          })]);
        };
        return Vue.createVNode(Vue.Fragment, null, [actived.value && renderGuide()]);
      };
    }
  });

  var Guide = withInstall$1(_Guide);

  var Message = withInstall$1(_Message);

  var props$3 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    footer: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        if (!val) return true;
        return ["info", "success", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var DEFAULT_Z_INDEX = 6e3;
  var DISTANCE = "16px";
  var PLACEMENT_OFFSET = {
    "top-left": {
      left: DISTANCE,
      top: DISTANCE
    },
    "top-right": {
      right: DISTANCE,
      top: DISTANCE
    },
    "bottom-right": {
      right: DISTANCE,
      bottom: DISTANCE
    },
    "bottom-left": {
      left: DISTANCE,
      bottom: DISTANCE
    }
  };
  var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET);

  var ANIMATION_OPTION = {
    duration: 200,
    easing: "linear"
  };
  var getFadeInKeyframes = function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;
    if (placement === "top-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "bottom-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "top-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
    if (placement === "bottom-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
  };
  var getFadeOutKeyframes = function getFadeOutKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;
    if (placement === "top-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }
    if (placement === "bottom-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }];
    }
    if (placement === "top-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }
    if (placement === "bottom-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }];
    }
  };
  var fadeIn = function fadeIn(dom, placement) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return;
    dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
  };
  var fadeOut = function fadeOut(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeOutKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return onFinish();
    var animate = dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
    if (animate) {
      animate.onfinish = function () {
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  };

  function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Notification = Vue.defineComponent({
    name: "TNotification",
    props: _objectSpread$c(_objectSpread$c({}, props$3), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification");
      var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: TdInfoCircleFilledIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          CloseIcon: TdCloseIcon
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        CloseIcon = _useGlobalIcon.CloseIcon;
      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var timer = Vue.ref(null);
      var notificationRef = Vue.ref(null);
      var close = function close(e) {
        var dom = notificationRef.value;
        fadeOut(dom, props2.placement, function () {
          var _props2$onCloseBtnCli;
          (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, {
            e: e
          });
        });
      };
      var renderIcon = function renderIcon() {
        var iconContent;
        if (props2.icon === false) return null;
        if (isFunction(props2.icon)) {
          iconContent = props2.icon(Vue.h);
        } else if (slots.icon) {
          iconContent = slots.icon(null);
        } else if (props2.theme) {
          var iconType = props2.theme === "success" ? Vue.createVNode(CheckCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-").concat(props2.theme)
          }, null) : Vue.createVNode(InfoCircleFilledIcon, {
            "class": "".concat(classPrefix.value, "-is-").concat(props2.theme)
          }, null);
          iconContent = Vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-notification__icon")
          }, [iconType]);
        }
        return iconContent;
      };
      var renderClose = function renderClose() {
        var defaultClose = Vue.createVNode(CloseIcon, null, null);
        return Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-message__close"),
          "onClick": close
        }, [renderTNode("closeBtn", defaultClose)]);
      };
      var renderMainContent = function renderMainContent() {
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderContent("default", "content")]);
      };
      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };
      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }
        timer.value = Number(setTimeout(function () {
          clearTimer();
          var dom = notificationRef.value;
          fadeOut(dom, props2.placement, function () {
            var _props2$onDurationEnd;
            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 || _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };
      Vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      Vue.onMounted(function () {
        var dom = notificationRef.value;
        fadeIn(dom, props2.placement);
      });
      expose({
        close: close
      });
      return function () {
        return Vue.createVNode("div", {
          "ref": notificationRef,
          "class": "".concat(COMPONENT_NAME.value),
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__main")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title__wrap")
        }, [Vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNode("title")]), renderClose()]), renderMainContent(), renderTNode("footer")])]);
      };
    }
  });

  function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var NotificationList = Vue.defineComponent({
    props: {
      placement: {
        type: String,
        "default": "top-right",
        validator: function validator(v) {
          return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
        }
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification-list");
      var placement = props.placement;
      var list = Vue.ref([]);
      var notificationList = Vue.ref([]);
      var styles = Vue.computed(function () {
        return _objectSpread$b({
          zIndex: DEFAULT_Z_INDEX
        }, PLACEMENT_OFFSET[placement]);
      });
      var add = function add(options) {
        list.value.push(options);
        return list.value.length - 1;
      };
      var remove = function remove(index) {
        list.value.splice(index, 1);
      };
      var removeAll = function removeAll() {
        list.value = [];
      };
      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };
      var notificationStyles = function notificationStyles(item) {
        var styles2 = {
          marginBottom: DISTANCE
        };
        if (item.offset) {
          styles2.position = "relative";
          styles2.left = getOffset(item.offset[0]);
          styles2.top = getOffset(item.offset[1]);
        }
        if (item.zIndex) styles2["z-index"] = item.zIndex;
        return styles2;
      };
      var getProps = function getProps(index, item) {
        return _objectSpread$b(_objectSpread$b({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }
            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }
            return remove(index);
          }
        });
      };
      var addChild = function addChild(el) {
        if (el) {
          notificationList.value.push(el);
        }
      };
      expose({
        add: add,
        remove: remove,
        removeAll: removeAll,
        list: list,
        notificationList: notificationList
      });
      return function () {
        if (!list.value.length) return;
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__show"),
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return Vue.createVNode(_Notification, Vue.mergeProps({
            "ref": addChild,
            "key": item.id,
            "style": notificationStyles(item)
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var seed = 0;
  var instanceMap = /* @__PURE__ */new Map();
  var NotificationFunction = function NotificationFunction(options, context) {
    seed += 1;
    var hackOptions = _objectSpread$a({
      placement: "top-right",
      zIndex: 6e3,
      attach: "body",
      id: seed
    }, options);
    hackOptions.content = options.content ? options.content : "";
    var attachEl = getAttach(hackOptions.attach);
    if (!instanceMap.get(attachEl)) {
      instanceMap.set(attachEl, {});
    }
    var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
    if (!tmpInstance) {
      var wrapper = document.createElement("div");
      var instance = Vue.createVNode(NotificationList, {
        placement: hackOptions.placement
      });
      if (context !== null && context !== void 0 ? context : NotificationPlugin._context) {
        instance.appContext = context !== null && context !== void 0 ? context : NotificationPlugin._context;
      }
      attachEl.appendChild(wrapper);
      Vue.render(instance, wrapper);
      instance.component.exposed.add(hackOptions);
      instanceMap.get(attachEl)[hackOptions.placement] = instance;
      tmpInstance = instance;
    } else {
      tmpInstance.component.exposed.add(hackOptions);
    }
    return new Promise(function (resolve) {
      var ins = instanceMap.get(attachEl)[hackOptions.placement];
      Vue.nextTick(function () {
        var _ins$component$expose;
        var notificationList = (_ins$component$expose = ins.component.exposed.notificationList.value) !== null && _ins$component$expose !== void 0 ? _ins$component$expose : [];
        resolve(notificationList === null || notificationList === void 0 ? void 0 : notificationList.find(function (notify) {
          var _notify$$;
          return ((_notify$$ = notify.$) === null || _notify$$ === void 0 || (_notify$$ = _notify$$.vnode) === null || _notify$$ === void 0 ? void 0 : _notify$$.key) === hackOptions.id;
        }));
      });
    });
  };
  var showThemeNotification = function showThemeNotification(theme, options, context) {
    var hackOptions = _objectSpread$a(_objectSpread$a({}, options), {}, {
      theme: theme
    });
    return NotificationFunction(hackOptions, context);
  };
  var extraApi = {
    info: function info(options, context) {
      return showThemeNotification("info", options, context);
    },
    success: function success(options, context) {
      return showThemeNotification("success", options, context);
    },
    warning: function warning(options, context) {
      return showThemeNotification("warning", options, context);
    },
    error: function error(options, context) {
      return showThemeNotification("error", options, context);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          attach[placement].component.exposed.removeAll();
        });
      });
    }
  };
  var NotificationPlugin = showThemeNotification;
  NotificationPlugin.install = function (app) {
    app.config.globalProperties.$notify = showThemeNotification;
    Object.keys(extraApi).forEach(function (funcName) {
      app.config.globalProperties.$notify[funcName] = extraApi[funcName];
    });
    NotificationPlugin._context = app._context;
  };
  Object.keys(extraApi).forEach(function (funcName) {
    NotificationPlugin[funcName] = extraApi[funcName];
  });

  var Notification = withInstall$1(_Notification);

  var props$2 = {
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: Function
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "warning", "danger"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    onCancel: Function,
    onConfirm: Function,
    onVisibleChange: Function
  };

  function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Popconfirm = Vue.defineComponent({
    name: "TPopconfirm",
    props: props$2,
    setup: function setup(props2) {
      var _useConfig = useConfig("popconfirm"),
        globalConfig = _useConfig.globalConfig;
      var COMPONENT_NAME = usePrefixClass("popconfirm");
      var _useGlobalIcon = useGlobalIcon({
          InfoCircleFilledIcon: TdInfoCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon
        }),
        InfoCircleFilledIcon = _useGlobalIcon.InfoCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var _toRefs = Vue.toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;
      var _useVModel = useVModel$1(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];
      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;
        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e,
          trigger: "confirm"
        });
      };
      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;
        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e,
          trigger: "cancel"
        });
      };
      var _useAction = useAction({
          confirmBtnAction: confirmBtnAction,
          cancelBtnAction: cancelBtnAction
        }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;
      var renderTNodeJSX = useTNodeJSX();
      var innerPopupProps = Vue.computed(function () {
        return _objectSpread$9({
          showArrow: props2.showArrow,
          overlayClassName: COMPONENT_NAME.value,
          trigger: "click",
          destroyOnClose: props2.destroyOnClose,
          placement: props2.placement
        }, props2.popupProps);
      });
      var renderTNodeDefault = useTNodeDefault();
      var renderContent = function renderContent() {
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: globalConfig.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel"),
          size: "small"
        });
        var confirmBtn = getConfirmBtn({
          theme: props2.theme,
          confirmBtn: props2.confirmBtn,
          globalConfirm: globalConfig.value.confirm,
          globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm"),
          size: "small"
        });
        var renderIcon = function renderIcon() {
          var Icon = {
            "default": InfoCircleFilledIcon,
            warning: ErrorCircleFilledIcon,
            danger: ErrorCircleFilledIcon
          }[props2.theme];
          var theme = props2.theme || "default";
          return renderTNodeDefault("icon", Vue.createVNode(Icon, {
            "class": "".concat(COMPONENT_NAME.value, "__icon--").concat(theme)
          }, null));
        };
        return Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__body")
        }, [renderIcon(), Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("content")])]), Boolean(cancelBtn || confirmBtn) && Vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__buttons")
        }, [cancelBtn, confirmBtn])]);
      };
      var onPopupVisibleChange = function onPopupVisibleChange(val, context) {
        setInnerVisible(val, context);
      };
      var renderTNodeContent = useContent();
      return function () {
        return Vue.createVNode(Popup, Vue.mergeProps({
          "visible": innerVisible.value
        }, innerPopupProps.value, {
          "onVisibleChange": onPopupVisibleChange
        }), {
          "default": function _default() {
            return [renderTNodeContent("default", "triggerElement")];
          },
          content: renderContent
        });
      };
    }
  });

  var Popconfirm = withInstall$1(_Popconfirm);

  var props$1 = {
    abridgeName: {
      type: Array
    },
    accept: {
      type: String,
      "default": ""
    },
    action: {
      type: String,
      "default": ""
    },
    allowUploadDuplicateFile: Boolean,
    autoUpload: {
      type: Boolean,
      "default": true
    },
    beforeAllFilesUpload: {
      type: Function
    },
    beforeUpload: {
      type: Function
    },
    cancelUploadButton: {
      type: [Object, Function]
    },
    data: {
      type: [Object, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    dragContent: {
      type: [String, Function]
    },
    draggable: {
      type: Boolean,
      "default": void 0
    },
    fileListDisplay: {
      type: Function
    },
    files: {
      type: Array,
      "default": void 0
    },
    defaultFiles: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    format: {
      type: Function
    },
    formatRequest: {
      type: Function
    },
    formatResponse: {
      type: Function
    },
    headers: {
      type: Object
    },
    imageViewerProps: {
      type: Object
    },
    inputAttributes: {
      type: Object
    },
    isBatchUpload: Boolean,
    locale: {
      type: Object
    },
    max: {
      type: Number,
      "default": 0
    },
    method: {
      type: String,
      "default": "POST",
      validator: function validator(val) {
        if (!val) return true;
        return ["POST", "GET", "PUT", "OPTION", "PATCH", "post", "get", "put", "option", "patch"].includes(val);
      }
    },
    mockProgressDuration: {
      type: Number
    },
    multiple: Boolean,
    name: {
      type: String,
      "default": "file"
    },
    placeholder: {
      type: String,
      "default": ""
    },
    requestMethod: {
      type: Function
    },
    showImageFileName: {
      type: Boolean,
      "default": true
    },
    showThumbnail: Boolean,
    showUploadProgress: {
      type: Boolean,
      "default": true
    },
    sizeLimit: {
      type: [Number, Object]
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "file",
      validator: function validator(val) {
        if (!val) return true;
        return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    trigger: {
      type: Function
    },
    triggerButtonProps: {
      type: Object
    },
    uploadAllFilesInOneRequest: Boolean,
    uploadButton: {
      type: [Object, Function]
    },
    uploadPastedFiles: {
      type: Boolean,
      "default": true
    },
    useMockProgress: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    withCredentials: Boolean,
    onCancelUpload: Function,
    onChange: Function,
    onDragenter: Function,
    onDragleave: Function,
    onDrop: Function,
    onFail: Function,
    onOneFileFail: Function,
    onOneFileSuccess: Function,
    onPreview: Function,
    onProgress: Function,
    onRemove: Function,
    onSelectChange: Function,
    onSuccess: Function,
    onValidate: Function,
    onWaitingUploadFilesChange: Function
  };

  var commonProps = {
    accept: String,
    files: Array,
    toUploadFiles: Array,
    displayFiles: Array,
    theme: String,
    abridgeName: Array,
    placeholder: String,
    classPrefix: String,
    tips: [String, Function],
    status: String,
    locale: Object,
    sizeOverLimitMessage: String,
    autoUpload: Boolean,
    uploadPastedFiles: Boolean,
    onPasteFileChange: Function,
    disabled: Boolean,
    uploading: Boolean,
    tipsClasses: [String, Array, Object],
    errorClasses: [String, Array, Object],
    placeholderClass: [String, Array, Object],
    showUploadProgress: Boolean,
    "default": Function,
    fileListDisplay: Function,
    onRemove: Function,
    imageViewerProps: Object
  };

  function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$2(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var NormalFile = Vue.defineComponent({
    name: "UploadNormalFile",
    props: _objectSpread$8({
      multiple: Boolean
    }, commonProps),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props),
        theme = _toRefs.theme,
        disabled = _toRefs.disabled,
        classPrefix = _toRefs.classPrefix;
      var locale = Vue.computed(function () {
        return props.locale;
      });
      var _useGlobalIcon = useGlobalIcon({
          CloseIcon: TdCloseIcon,
          TimeFilledIcon: TdTimeFilledIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
          CloseCircleFilledIcon: TdCloseCircleFilledIcon
        }),
        CloseIcon = _useGlobalIcon.CloseIcon,
        TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;
      var renderTNodeJSX = useTNodeJSX();
      var uploadPrefix = "".concat(classPrefix.value, "-upload");
      var renderProgress = function renderProgress(percent) {
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__single-progress")
        }, [Vue.createVNode(Loading, null, null), props.showUploadProgress && Vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__single-percent")
        }, [percent || 0, "%"])]);
      };
      var renderFilePreviewAsText = function renderFilePreviewAsText(files) {
        var _files$;
        if (theme.value !== "file") return null;
        if (!props.multiple && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "fail" && props.autoUpload) {
          return null;
        }
        return files.map(function (file, index) {
          var fileName = props.abridgeName && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
          return Vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__single-display-text ").concat(uploadPrefix, "__display-text--margin"),
            "key": file.name + index + file.percent + file.status
          }, [file.url ? Vue.createVNode(Link, {
            "href": file.url,
            "target": "_blank",
            "hover": "color",
            "size": "small",
            "class": "".concat(uploadPrefix, "__single-name"),
            "disabled": false
          }, _isSlot$2(fileName) ? fileName : {
            "default": function _default() {
              return [fileName];
            }
          }) : Vue.createVNode("span", {
            "class": "".concat(uploadPrefix, "__single-name")
          }, [fileName]), file.status === "fail" && Vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-fail")
          }, [Vue.createVNode(ErrorCircleFilledIcon, null, null)]), file.status === "waiting" && Vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__flow-status ").concat(uploadPrefix, "__file-waiting")
          }, [Vue.createVNode(TimeFilledIcon, null, null)]), file.status === "progress" && renderProgress(file.percent), !disabled.value && file.status !== "progress" && Vue.createVNode(CloseIcon, {
            "class": "".concat(uploadPrefix, "__icon-delete"),
            "onClick": function onClick(_ref2) {
              var e = _ref2.e;
              return props.onRemove({
                e: e,
                file: file,
                index: index
              });
            }
          }, null)]);
        });
      };
      var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
        var _props$abridgeName;
        if (theme.value !== "file-input") return;
        var file = props.displayFiles[0] || [];
        var inputTextClass = ["".concat(classPrefix.value, "-input__inner"), _defineProperty$2({}, "".concat(uploadPrefix, "__placeholder"), !props.displayFiles[0])];
        var disabledClass = disabled.value ? "".concat(classPrefix.value, "-is-disabled") : "";
        var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length && file !== null && file !== void 0 && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file === null || file === void 0 ? void 0 : file.name;
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__single-input-preview ").concat(classPrefix.value, "-input ").concat(disabledClass)
        }, [Vue.createVNode("div", {
          "class": inputTextClass
        }, [Vue.createVNode("span", {
          "class": ["".concat(uploadPrefix, "__single-input-text"), _defineProperty$2({}, props.placeholderClass, props.placeholder && !(file !== null && file !== void 0 && file.name))]
        }, [file !== null && file !== void 0 && file.name ? fileName : props.placeholder]), (file === null || file === void 0 ? void 0 : file.status) === "progress" && renderProgress(file.percent), (file === null || file === void 0 ? void 0 : file.status) === "waiting" && Vue.createVNode(TimeFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-waiting")
        }, null), file.status === "success" && Vue.createVNode(CheckCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon")
        }, null), (file === null || file === void 0 ? void 0 : file.name) && file.status === "fail" && Vue.createVNode(ErrorCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__status-icon ").concat(uploadPrefix, "__file-fail")
        }, null), Boolean(!disabled.value && file.name) && Vue.createVNode(CloseCircleFilledIcon, {
          "class": "".concat(uploadPrefix, "__single-input-clear"),
          "onClick": function onClick(_ref5) {
            var e = _ref5.e;
            return props.onRemove({
              e: e,
              file: file,
              index: 0
            });
          }
        }, null)])]);
      };
      return function () {
        var _slots$default, _displayFiles$, _displayFiles$0$respo;
        var classes = ["".concat(uploadPrefix, "__single"), "".concat(uploadPrefix, "__single-").concat(theme.value)];
        var fileListDisplay = renderTNodeJSX("fileListDisplay", {
          params: {
            onRemove: props.onRemove,
            toUploadFiles: props.toUploadFiles,
            sizeOverLimitMessage: props.sizeOverLimitMessage,
            locale: props.locale,
            files: props.displayFiles
          }
        });
        if (props.fileListDisplay === null || fileListDisplay === null) {
          fileListDisplay = null;
        }
        var displayFiles = props.displayFiles;
        return Vue.createVNode("div", {
          "class": classes
        }, [theme.value === "file-input" && renderFilePreviewAsInput(), (_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), theme.value === "file" && props.placeholder && !displayFiles[0] && Vue.createVNode("small", {
          "class": [props.tipsClasses, props.placeholderClass]
        }, [props.placeholder]), fileListDisplay === null ? null : fileListDisplay || renderFilePreviewAsText(displayFiles), !props.multiple && ((_displayFiles$ = displayFiles[0]) === null || _displayFiles$ === void 0 ? void 0 : _displayFiles$.status) === "fail" && theme.value === "file" ? Vue.createVNode("small", {
          "class": [props.errorClasses, props.placeholderClass]
        }, [((_displayFiles$0$respo = displayFiles[0].response) === null || _displayFiles$0$respo === void 0 ? void 0 : _displayFiles$0$respo.error) || locale.value.progress.failText]) : null]);
      };
    }
  });

  function useDrag(props, accept) {
    var target = Vue.ref(null);
    var dragActive = Vue.ref(false);
    var handleDrop = function handleDrop(event) {
      var _props$onDrop;
      event.preventDefault();
      dragActive.value = false;
      var files = event.dataTransfer.files;
      var dragFiles = getFileList(files, accept.value);
      (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 || _props$onDrop.call(props, {
        e: event
      });
      if (dragFiles !== null && dragFiles !== void 0 && dragFiles.length) {
        var _props$onDragFileChan;
        (_props$onDragFileChan = props.onDragFileChange) === null || _props$onDragFileChan === void 0 || _props$onDragFileChan.call(props, dragFiles);
      }
    };
    var handleDragenter = function handleDragenter(event) {
      var _props$onDragenter;
      event.preventDefault();
      target.value = event.target;
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 || _props$onDragenter.call(props, {
        e: event
      });
      dragActive.value = true;
    };
    var handleDragleave = function handleDragleave(event) {
      var _props$onDragleave;
      if (event.target !== target.value) return;
      event.preventDefault();
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 || _props$onDragleave.call(props, {
        e: event
      });
      dragActive.value = false;
    };
    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };
    return {
      target: target,
      dragActive: dragActive,
      handleDrop: handleDrop,
      handleDragenter: handleDragenter,
      handleDragleave: handleDragleave,
      handleDragover: handleDragover
    };
  }

  function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var DraggerFile = Vue.defineComponent({
    name: "UploadDraggerFile",
    props: _objectSpread$7(_objectSpread$7({}, commonProps), {}, {
      trigger: Function,
      triggerUpload: Function,
      uploadFiles: Function,
      cancelUpload: Function,
      dragEvents: Object
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props),
        displayFiles = _toRefs.displayFiles,
        disabled = _toRefs.disabled,
        accept = _toRefs.accept;
      var locale = Vue.computed(function () {
        return props.locale;
      });
      var renderTNodeJSX = useTNodeJSX();
      var _useCommonClassName = useCommonClassName$1(),
        SIZE = _useCommonClassName.SIZE;
      var uploadPrefix = "".concat(props.classPrefix, "-upload");
      var drag = useDrag(props.dragEvents, accept);
      var dragActive = drag.dragActive;
      var draggerFileRef = Vue.ref();
      var classes = Vue.computed(function () {
        var _displayFiles$value$;
        return ["".concat(uploadPrefix, "__dragger"), _defineProperty$2({}, "".concat(uploadPrefix, "__dragger-center"), !displayFiles.value[0]), _defineProperty$2({}, "".concat(uploadPrefix, "__dragger-error"), ((_displayFiles$value$ = displayFiles.value[0]) === null || _displayFiles$value$ === void 0 ? void 0 : _displayFiles$value$.status) === "fail")];
      });
      var _useGlobalIcon = useGlobalIcon({
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon
        }),
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var renderImage = function renderImage() {
        var _file$response;
        if (!props.displayFiles.length) return;
        var file = displayFiles.value[0];
        if (!file) return null;
        var url = (file === null || file === void 0 ? void 0 : file.url) || (file === null || file === void 0 || (_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.url);
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-img-wrap")
        }, [Vue.createVNode(ImageViewer, Vue.mergeProps({
          "images": [url],
          "trigger": function trigger(h2, _ref4) {
            var open = _ref4.open;
            return Vue.createVNode(Image$1, {
              "src": url || file.raw,
              "onClick": open,
              "error": "",
              "loading": ""
            }, null);
          }
        }, props.imageViewerProps), null)]);
      };
      var renderUploading = function renderUploading() {
        if (!props.displayFiles.length) return;
        var file = displayFiles.value[0];
        if (!file) return null;
        if ((file === null || file === void 0 ? void 0 : file.status) === "progress") {
          return Vue.createVNode("div", {
            "class": "".concat(uploadPrefix, "__single-progress")
          }, [Vue.createVNode(Loading, null, null), props.showUploadProgress && Vue.createVNode("span", {
            "class": "".concat(uploadPrefix, "__single-percent")
          }, [file.percent, "%"])]);
        }
      };
      var renderMainPreview = function renderMainPreview() {
        var _locale$value;
        var file = displayFiles.value[0];
        var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        var fileInfo = [Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-text"),
          "key": "info"
        }, [Vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "__single-name")
        }, [fileName]), file.status === "progress" && renderUploading(), file.status === "success" && Vue.createVNode(CheckCircleFilledIcon, null, null), file.status === "fail" && Vue.createVNode(ErrorCircleFilledIcon, null, null)]), Vue.createVNode("small", {
          "class": "".concat(SIZE.value.small),
          "key": "size"
        }, [locale.value.file.fileSizeText, "\uFF1A", getFileSizeText(file.size)]), Vue.createVNode("small", {
          "class": "".concat(SIZE.value.small),
          "key": "time"
        }, [locale.value.file.fileOperationDateText, "\uFF1A", file.uploadTime || "-"])];
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-progress")
        }, [props.theme === "image" && renderImage(), Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-progress-info")
        }, [renderTNodeJSX("fileListDisplay", {
          params: {
            files: props.displayFiles
          }
        }) || fileInfo, Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-btns")
        }, [["progress", "waiting"].includes(file.status) && !disabled.value && Vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "class": "".concat(uploadPrefix, "__dragger-progress-cancel"),
          "onClick": function onClick(e) {
            var _props$cancelUpload;
            return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
              e: e,
              file: props.toUploadFiles[0] || props.files[0]
            });
          }
        }, {
          "default": function _default() {
            return [(_locale$value = locale.value) === null || _locale$value === void 0 ? void 0 : _locale$value.cancelUploadText];
          }
        }), !props.autoUpload && file.status === "waiting" && Vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "disabled": disabled.value,
          "onClick": function onClick() {
            var _props$uploadFiles;
            return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
          },
          "class": "".concat(uploadPrefix, "__dragger-upload-btn")
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText.normal];
          }
        })]), ["fail", "success"].includes(file === null || file === void 0 ? void 0 : file.status) && !disabled.value && Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__dragger-btns")
        }, [Vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "disabled": disabled.value,
          "class": "".concat(uploadPrefix, "__dragger-progress-cancel"),
          "onClick": props.triggerUpload
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText.reupload];
          }
        }), Vue.createVNode(Button, {
          "theme": "danger",
          "variant": "text",
          "disabled": disabled.value,
          "class": "".concat(uploadPrefix, "__dragger-delete-btn"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: 0,
              file: file
            });
          }
        }, {
          "default": function _default() {
            return [locale.value.triggerUploadText["delete"]];
          }
        })])])]);
      };
      var renderDefaultDragElement = function renderDefaultDragElement() {
        var _locale$value$trigger;
        var unActiveElement = Vue.createVNode("div", null, [Vue.createVNode("span", {
          "class": "".concat(uploadPrefix, "--highlight")
        }, [(_locale$value$trigger = locale.value.triggerUploadText) === null || _locale$value$trigger === void 0 ? void 0 : _locale$value$trigger.normal]), Vue.createVNode("span", null, ["\xA0\xA0/\xA0\xA0", locale.value.dragger.draggingText])]);
        var activeElement = Vue.createVNode("div", null, [locale.value.dragger.dragDropText]);
        return dragActive.value ? activeElement : unActiveElement;
      };
      var getContent = function getContent() {
        var _slots$default;
        var file = displayFiles.value[0];
        if (file && (["progress", "success", "fail", "waiting"].includes(file.status) || !file.status)) {
          return renderMainPreview();
        }
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix, "__trigger"),
          "onClick": props.triggerUpload
        }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)) || renderDefaultDragElement()]);
      };
      return function () {
        var _props$trigger;
        return Vue.createVNode("div", {
          "ref": draggerFileRef,
          "class": classes.value,
          "onDrop": drag.handleDrop,
          "onDragenter": drag.handleDragenter,
          "onDragover": drag.handleDragover,
          "onDragleave": drag.handleDragleave
        }, [((_props$trigger = props.trigger) === null || _props$trigger === void 0 ? void 0 : _props$trigger.call(props, Vue.h, {
          files: displayFiles.value,
          dragActive: dragActive.value
        })) || getContent()]);
      };
    }
  });

  function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot$1(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var ImageCard = Vue.defineComponent({
    name: "UploadImageCard",
    props: _objectSpread$6(_objectSpread$6({}, commonProps), {}, {
      multiple: Boolean,
      max: Number,
      disabled: Boolean,
      showUploadProgress: Boolean,
      triggerUpload: Function,
      uploadFiles: Function,
      cancelUpload: Function,
      onPreview: Function,
      showImageFileName: Boolean
    }),
    setup: function setup(props) {
      var _toRefs = Vue.toRefs(props),
        displayFiles = _toRefs.displayFiles,
        classPrefix = _toRefs.classPrefix,
        multiple = _toRefs.multiple,
        max = _toRefs.max;
      var locale = Vue.computed(function () {
        return props.locale;
      });
      var _useGlobalIcon = useGlobalIcon({
          AddIcon: TdAddIcon,
          BrowseIcon: TdBrowseIcon,
          DeleteIcon: TdDeleteIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        AddIcon = _useGlobalIcon.AddIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon;
      var renderTNodeJSX = useTNodeJSX();
      var showTrigger = Vue.computed(function () {
        var _displayFiles$value;
        if (multiple.value) {
          return !max.value || displayFiles.value.length < max.value;
        }
        return !((_displayFiles$value = displayFiles.value) !== null && _displayFiles$value !== void 0 && _displayFiles$value[0]);
      });
      var renderMainContent = function renderMainContent(file, index) {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-content ").concat(classPrefix.value, "-upload__card-box")
        }, [Vue.createVNode(Image$1, {
          "class": "".concat(classPrefix.value, "-upload__card-image"),
          "src": file.url || file.raw,
          "error": "",
          "fit": "contain"
        }, null), Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-mask")
        }, [Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [Vue.createVNode(ImageViewer, Vue.mergeProps({
          "images": displayFiles.value.map(function (t) {
            return t.url || t.raw;
          }),
          "defaultIndex": index,
          "trigger": function trigger(h, _ref) {
            var open = _ref.open;
            return Vue.createVNode(BrowseIcon, {
              "onClick": function onClick(_ref2) {
                var _props$onPreview;
                var e = _ref2.e;
                (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
                  file: file,
                  index: index,
                  e: e
                });
                open();
              }
            }, null);
          }
        }, props.imageViewerProps), null)]), !props.disabled && Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item-divider")
        }, null), Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [Vue.createVNode(DeleteIcon, {
          "onClick": function onClick(_ref3) {
            var _props$onRemove;
            var e = _ref3.e;
            return props === null || props === void 0 || (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, {
              e: e,
              file: file,
              index: index
            });
          }
        }, null)])])])]);
      };
      var renderProgressFile = function renderProgressFile(file, loadCard) {
        var _locale$value;
        return Vue.createVNode("div", {
          "class": [loadCard, "".concat(classPrefix.value, "-upload__").concat(props.theme, "-").concat(file.status)]
        }, [Vue.createVNode(Loading, {
          "loading": true,
          "size": "medium"
        }, null), Vue.createVNode("p", null, [(_locale$value = locale.value) === null || _locale$value === void 0 || (_locale$value = _locale$value.progress) === null || _locale$value === void 0 ? void 0 : _locale$value.uploadingText, props.showUploadProgress ? " ".concat(file.percent, "%") : ""])]);
      };
      var renderFailFile = function renderFailFile(file, index, loadCard) {
        var _file$response, _locale$value2;
        return Vue.createVNode("div", {
          "class": loadCard
        }, [Vue.createVNode(ErrorCircleFilledIcon, null, null), Vue.createVNode("p", null, [((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || ((_locale$value2 = locale.value) === null || _locale$value2 === void 0 || (_locale$value2 = _locale$value2.progress) === null || _locale$value2 === void 0 ? void 0 : _locale$value2.failText)]), Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__card-mask")
        }, [Vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-upload__card-mask-item"),
          "onClick": function onClick(e) {
            return e.stopPropagation();
          }
        }, [Vue.createVNode(DeleteIcon, {
          "onClick": function onClick(_ref4) {
            var _props$onRemove2;
            var e = _ref4.e;
            return props === null || props === void 0 || (_props$onRemove2 = props.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props, {
              e: e,
              file: file,
              index: index
            });
          }
        }, null)])])]);
      };
      return function () {
        var _displayFiles$value2;
        var customList = renderTNodeJSX("fileListDisplay", {
          params: {
            triggerUpload: props.triggerUpload,
            uploadFiles: props.uploadFiles,
            cancelUpload: props.cancelUpload,
            onPreview: props.onPreview,
            onRemove: props.onRemove,
            toUploadFiles: props.toUploadFiles,
            sizeOverLimitMessage: props.sizeOverLimitMessage,
            locale: props.locale,
            files: displayFiles.value
          }
        });
        if (customList) return customList;
        var cardItemClasses = "".concat(classPrefix.value, "-upload__card-item ").concat(classPrefix.value, "-is-background");
        var renderTrigger = function renderTrigger() {
          var _locale$value3;
          return renderTNodeJSX("trigger", {
            params: {
              triggerUpload: props.triggerUpload
            }
          }) || Vue.createVNode("li", {
            "class": cardItemClasses,
            "onClick": props.triggerUpload
          }, [Vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-upload__image-add"), "".concat(classPrefix.value, "-upload__card-container"), "".concat(classPrefix.value, "-upload__card-box"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-disabled"), props.disabled)]
          }, [Vue.createVNode(AddIcon, null, null), Vue.createVNode("p", {
            "class": ["".concat(classPrefix.value, "-size-s"), "".concat(classPrefix.value, "-upload__add-text")]
          }, [(_locale$value3 = locale.value) === null || _locale$value3 === void 0 || (_locale$value3 = _locale$value3.triggerUploadText) === null || _locale$value3 === void 0 ? void 0 : _locale$value3.image])])]);
        };
        return Vue.createVNode("div", null, [Vue.createVNode("ul", {
          "class": "".concat(classPrefix.value, "-upload__card")
        }, [(_displayFiles$value2 = displayFiles.value) === null || _displayFiles$value2 === void 0 ? void 0 : _displayFiles$value2.map(function (file, index) {
          var fileNameClassName = "".concat(classPrefix.value, "-upload__card-name");
          var loadCard = "".concat(classPrefix.value, "-upload__card-container ").concat(classPrefix.value, "-upload__card-box");
          var fileName = props.abridgeName ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
          return Vue.createVNode("li", {
            "class": cardItemClasses,
            "key": index
          }, [file.status === "progress" && renderProgressFile(file, loadCard), file.status === "fail" && renderFailFile(file, index, loadCard), !["progress", "fail"].includes(file.status) && renderMainContent(file, index), Boolean(fileName && props.showImageFileName) && (file.url ? Vue.createVNode(Link, {
            "href": file.url,
            "class": fileNameClassName,
            "target": "_blank",
            "hover": "color",
            "size": "small",
            "disabled": false
          }, _isSlot$1(fileName) ? fileName : {
            "default": function _default() {
              return [fileName];
            }
          }) : Vue.createVNode("span", {
            "class": fileNameClassName
          }, [fileName]))]);
        }), showTrigger.value && renderTrigger()])]);
      };
    }
  });

  function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _isSlot(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
  }
  var MultipleFlowList = Vue.defineComponent({
    name: "UploadMultipleFlowList",
    props: _objectSpread$5(_objectSpread$5({}, commonProps), {}, {
      showThumbnail: Boolean,
      uploadFiles: Function,
      cancelUpload: Function,
      dragEvents: Object,
      disabled: Boolean,
      isBatchUpload: Boolean,
      draggable: Boolean,
      showImageFileName: Boolean,
      uploadButton: Object,
      cancelUploadButton: Object,
      onPreview: Function
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props),
        uploading = _toRefs.uploading,
        disabled = _toRefs.disabled,
        displayFiles = _toRefs.displayFiles,
        classPrefix = _toRefs.classPrefix,
        accept = _toRefs.accept;
      var uploadPrefix = Vue.computed(function () {
        return "".concat(classPrefix.value, "-upload");
      });
      var locale = Vue.computed(function () {
        return props.locale;
      });
      var renderTNodeJSX = useTNodeJSX();
      var _useGlobalIcon = useGlobalIcon({
          BrowseIcon: TdBrowseIcon,
          DeleteIcon: TdDeleteIcon,
          CheckCircleFilledIcon: TdCheckCircleFilledIcon,
          ErrorCircleFilledIcon: TdErrorCircleFilledIcon,
          TimeFilledIcon: TdTimeFilledIcon,
          FileExcelIcon: TdFileExcelIcon,
          FilePdfIcon: TdFilePdfIcon,
          FileWordIcon: TdFileWordIcon,
          FilePowerpointIcon: TdFilePowerpointIcon,
          FileIcon: TdFileIcon,
          VideoIcon: TdVideoIcon
        }),
        BrowseIcon = _useGlobalIcon.BrowseIcon,
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
        FileExcelIcon = _useGlobalIcon.FileExcelIcon,
        FilePdfIcon = _useGlobalIcon.FilePdfIcon,
        FileWordIcon = _useGlobalIcon.FileWordIcon,
        FilePowerpointIcon = _useGlobalIcon.FilePowerpointIcon,
        FileIcon = _useGlobalIcon.FileIcon,
        VideoIcon = _useGlobalIcon.VideoIcon;
      var drag = useDrag(props.dragEvents, accept);
      var currentPreviewFile = Vue.ref([]);
      var previewIndex = Vue.ref(0);
      var uploadText = Vue.computed(function () {
        if (uploading.value) return "".concat(locale.value.progress.uploadingText);
        return locale.value.triggerUploadText.normal;
      });
      var innerDragEvents = Vue.computed(function () {
        var draggable = props.draggable === void 0 ? true : props.draggable;
        return draggable ? {
          onDrop: drag.handleDrop,
          onDragenter: drag.handleDragenter,
          onDragover: drag.handleDragover,
          onDragleave: drag.handleDragleave
        } : {};
      });
      var getStatusMap = function getStatusMap() {
        var iconMap = {
          success: Vue.createVNode(CheckCircleFilledIcon, null, null),
          fail: Vue.createVNode(ErrorCircleFilledIcon, null, null),
          progress: Vue.createVNode(Loading, null, null),
          waiting: Vue.createVNode(TimeFilledIcon, null, null)
        };
        var progress = locale.value.progress;
        var textMap = {
          success: progress === null || progress === void 0 ? void 0 : progress.successText,
          fail: progress === null || progress === void 0 ? void 0 : progress.failText,
          progress: progress === null || progress === void 0 ? void 0 : progress.uploadingText,
          waiting: progress === null || progress === void 0 ? void 0 : progress.waitingText
        };
        return {
          iconMap: iconMap,
          textMap: textMap
        };
      };
      var renderEmpty = function renderEmpty() {
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__flow-empty")
        }, [drag.dragActive.value ? locale.value.dragger.dragDropText : locale.value.dragger.clickAndDragText]);
      };
      var renderImgItem = function renderImgItem(file, index) {
        var _file$response;
        var _getStatusMap = getStatusMap(),
          iconMap = _getStatusMap.iconMap,
          textMap = _getStatusMap.textMap;
        var fileName = props.abridgeName && file.name ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
        return Vue.createVNode("li", {
          "class": "".concat(uploadPrefix.value, "__card-item"),
          "key": file.name + index + file.percent + file.status || "0"
        }, [Vue.createVNode("div", {
          "class": ["".concat(uploadPrefix.value, "__card-content"), _defineProperty$2({}, "".concat(classPrefix.value, "-is-bordered"), file.status !== "waiting")]
        }, [file.status === "progress" && Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__card-status-wrap ").concat(uploadPrefix.value, "__").concat(props.theme, "-progress")
        }, [iconMap[file.status], Vue.createVNode("p", null, [textMap[file.status], props.showUploadProgress && " ".concat(file.percent, "%")])]), file.status === "fail" && Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__card-status-wrap ").concat(uploadPrefix.value, "__").concat(props.theme, "-fail")
        }, [iconMap[file.status], Vue.createVNode("p", null, [((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && Vue.createVNode(Image$1, {
          "class": "".concat(uploadPrefix.value, "__card-image"),
          "src": file.url || file.raw,
          "error": "",
          "loading": "",
          "fit": "contain"
        }, null), Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__card-mask")
        }, [(file.url || file.raw) && !["progress", "fail"].includes(file.status) && Vue.createVNode("span", {
          "class": "".concat(uploadPrefix.value, "__card-mask-item")
        }, [Vue.createVNode(BrowseIcon, {
          "onClick": function onClick(_ref3) {
            var _props$onPreview;
            var e = _ref3.e;
            previewIndex.value = index;
            currentPreviewFile.value = displayFiles.value;
            (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
              file: file,
              index: index,
              e: e
            });
          }
        }, null), Vue.createVNode("span", {
          "class": "".concat(uploadPrefix.value, "__card-mask-item-divider")
        }, null)]), !disabled.value && Vue.createVNode("span", {
          "class": "".concat(uploadPrefix.value, "__card-mask-item ").concat(uploadPrefix.value, "__delete"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, [Vue.createVNode(DeleteIcon, null, null)])])]), props.showImageFileName && Vue.createVNode("p", {
          "class": ["".concat(uploadPrefix.value, "__card-name"), "".concat(uploadPrefix.value, "__flow-status")]
        }, [["success", "waiting"].includes(file.status) && iconMap[file.status], fileName])]);
      };
      var renderStatus = function renderStatus(file) {
        var _file$response2, _file$response3;
        var _getStatusMap2 = getStatusMap(),
          iconMap = _getStatusMap2.iconMap,
          textMap = _getStatusMap2.textMap;
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__flow-status")
        }, [iconMap[file.status], Vue.createVNode("span", {
          "class": "".concat(uploadPrefix.value, "__").concat(props.theme, "-").concat(file.status)
        }, [(_file$response2 = file.response) !== null && _file$response2 !== void 0 && _file$response2.error ? ((_file$response3 = file.response) === null || _file$response3 === void 0 ? void 0 : _file$response3.error) || textMap[file.status] : textMap[file.status], props.showUploadProgress && file.status === "progress" ? " ".concat(file.percent || 0, "%") : ""])]);
      };
      var renderNormalActionCol = function renderNormalActionCol(file, index) {
        var _locale$value;
        return Vue.createVNode("td", null, [Vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "content": (_locale$value = locale.value) === null || _locale$value === void 0 || (_locale$value = _locale$value.triggerUploadText) === null || _locale$value === void 0 ? void 0 : _locale$value["delete"],
          "class": "".concat(uploadPrefix.value, "__delete"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, null)]);
      };
      var renderBatchActionCol = function renderBatchActionCol(index) {
        var _locale$value2;
        return index === 0 ? Vue.createVNode("td", {
          "rowspan": displayFiles.value.length,
          "class": "".concat(uploadPrefix.value, "__flow-table__batch-row")
        }, [Vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "content": (_locale$value2 = locale.value) === null || _locale$value2 === void 0 || (_locale$value2 = _locale$value2.triggerUploadText) === null || _locale$value2 === void 0 ? void 0 : _locale$value2["delete"],
          "class": "".concat(uploadPrefix.value, "__delete"),
          "onClick": function onClick(e) {
            return props.onRemove({
              e: e,
              index: -1,
              file: void 0
            });
          }
        }, null)]) : null;
      };
      var getFileThumbnailIcon = function getFileThumbnailIcon(fileType) {
        if (FILE_PDF_REGEXP.test(fileType)) {
          return Vue.createVNode(FilePdfIcon, null, null);
        }
        if (FILE_EXCEL_REGEXP.test(fileType)) {
          return Vue.createVNode(FileExcelIcon, null, null);
        }
        if (FILE_WORD_REGEXP.test(fileType)) {
          return Vue.createVNode(FileWordIcon, null, null);
        }
        if (FILE_PPT_REGEXP.test(fileType)) {
          return Vue.createVNode(FilePowerpointIcon, null, null);
        }
        if (VIDEO_REGEXP.test(fileType)) {
          return Vue.createVNode(VideoIcon, null, null);
        }
        return Vue.createVNode(FileIcon, null, null);
      };
      var renderFileThumbnail = function renderFileThumbnail(file) {
        if (!file || !file.raw && file.url) return null;
        var fileType = file.raw.type;
        var className = "".concat(uploadPrefix.value, "__file-thumbnail");
        if (IMAGE_REGEXP.test(fileType)) {
          return Vue.createVNode(Image$1, {
            "class": className,
            "src": file.url || file.raw,
            "fit": "scale-down",
            "error": "",
            "loading": "",
            "onClick": function onClick(e) {
              var _props$onPreview2;
              e.preventDefault();
              currentPreviewFile.value = [file];
              previewIndex.value = 0;
              (_props$onPreview2 = props.onPreview) === null || _props$onPreview2 === void 0 || _props$onPreview2.call(props, {
                file: file,
                index: 0,
                e: e
              });
            }
          }, null);
        }
        return Vue.createVNode("div", {
          "class": className
        }, [getFileThumbnailIcon(fileType)]);
      };
      var renderFileList = function renderFileList() {
        var _locale$value$file, _locale$value$file2, _locale$value$file3, _locale$value$file4;
        var customList = renderTNodeJSX("fileListDisplay", {
          params: {
            cancelUpload: props.cancelUpload,
            uploadFiles: props.uploadFiles,
            onPreview: props.onPreview,
            onRemove: props.onRemove,
            toUploadFiles: props.toUploadFiles,
            sizeOverLimitMessage: props.sizeOverLimitMessage,
            locale: props.locale,
            files: props.displayFiles,
            dragEvents: innerDragEvents.value
          }
        });
        if (customList || props.fileListDisplay) return customList;
        return Vue.createVNode("table", Vue.mergeProps({
          "class": "".concat(uploadPrefix.value, "__flow-table")
        }, innerDragEvents.value), [Vue.createVNode("thead", null, [Vue.createVNode("tr", null, [Vue.createVNode("th", null, [(_locale$value$file = locale.value.file) === null || _locale$value$file === void 0 ? void 0 : _locale$value$file.fileNameText]), Vue.createVNode("th", {
          "style": {
            minWidth: "120px"
          }
        }, [(_locale$value$file2 = locale.value.file) === null || _locale$value$file2 === void 0 ? void 0 : _locale$value$file2.fileSizeText]), Vue.createVNode("th", {
          "style": {
            minWidth: "120px"
          }
        }, [(_locale$value$file3 = locale.value.file) === null || _locale$value$file3 === void 0 ? void 0 : _locale$value$file3.fileStatusText]), disabled.value ? null : Vue.createVNode("th", null, [(_locale$value$file4 = locale.value.file) === null || _locale$value$file4 === void 0 ? void 0 : _locale$value$file4.fileOperationText])])]), Vue.createVNode("tbody", null, [!displayFiles.value.length && Vue.createVNode("tr", null, [Vue.createVNode("td", {
          "colspan": 4
        }, [renderEmpty()])]), displayFiles.value.map(function (file, index) {
          var _props$abridgeName;
          var showBatchUploadAction = props.isBatchUpload;
          var deleteNode = showBatchUploadAction && displayFiles.value.every(function (item) {
            return item.status === "success" || !item.status;
          }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
          var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length ? abridgeName.apply(void 0, [file.name].concat(_toConsumableArray(props.abridgeName))) : file.name;
          var thumbnailNode = props.showThumbnail ? Vue.createVNode("div", {
            "class": "".concat(uploadPrefix.value, "__file-info")
          }, [renderFileThumbnail(file), fileName]) : fileName;
          var fileNameNode = file.url ? Vue.createVNode(Link, {
            "href": file.url,
            "target": "_blank",
            "hover": "color",
            "disabled": false
          }, _isSlot(thumbnailNode) ? thumbnailNode : {
            "default": function _default() {
              return [thumbnailNode];
            }
          }) : thumbnailNode;
          return Vue.createVNode("tr", {
            "key": file.name + index + file.size
          }, [Vue.createVNode("td", {
            "class": "".concat(uploadPrefix.value, "__file-name"),
            "key": file.name + file.url
          }, [fileNameNode]), Vue.createVNode("td", null, [returnFileSize(file.size)]), Vue.createVNode("td", null, [renderStatus(file)]), disabled.value ? null : deleteNode]);
        })])]);
      };
      var renderImageList = function renderImageList() {
        var customList = renderTNodeJSX("fileListDisplay", {
          params: {
            cancelUpload: props.cancelUpload,
            uploadFiles: props.uploadFiles,
            onRemove: props.onRemove,
            onPreview: props.onPreview,
            toUploadFiles: props.toUploadFiles,
            sizeOverLimitMessage: props.sizeOverLimitMessage,
            locale: props.locale,
            files: props.displayFiles,
            dragEvents: innerDragEvents.value
          }
        });
        if (customList || props.fileListDisplay) return customList;
        return Vue.createVNode("ul", {
          "class": "".concat(uploadPrefix.value, "__card clearfix")
        }, [props.displayFiles.map(function (file, index) {
          return renderImgItem(file, index);
        })]);
      };
      return function () {
        var _slots$default, _locale$value3, _locale$value4;
        var cardClassName = "".concat(uploadPrefix.value, "__flow-card-area");
        var cancelUploadDisabled = disabled.value || !uploading.value;
        var hasCancelUploadTNode = slots.uploadButton || isFunction(props.uploadButton);
        var uploadButtonDisabled = Boolean(disabled.value || uploading.value || !displayFiles.value.length);
        var hasUploadButtonTNode = slots.cancelUploadButton || isFunction(props.cancelUploadButton);
        return Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__flow ").concat(uploadPrefix.value, "__flow-").concat(props.theme)
        }, [Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__flow-op")
        }, [(_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), props.placeholder && Vue.createVNode("small", {
          "class": "".concat(uploadPrefix.value, "__flow-placeholder ").concat(uploadPrefix.value, "__placeholder")
        }, [props.placeholder])]), props.theme === "image-flow" && Vue.createVNode("div", Vue.mergeProps({
          "class": cardClassName
        }, innerDragEvents.value), [displayFiles.value.length ? renderImageList() : renderEmpty()]), props.theme === "file-flow" && (displayFiles.value.length ? renderFileList() : Vue.createVNode("div", Vue.mergeProps({
          "class": cardClassName
        }, innerDragEvents.value), [renderEmpty()])), !props.autoUpload && (props.uploadButton !== null || props.cancelUploadButton !== null) && Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__flow-bottom")
        }, [props.cancelUploadButton !== null && (hasCancelUploadTNode ? renderTNodeJSX("cancelUploadButton", {
          params: {
            disabled: cancelUploadDisabled,
            cancelUploadText: (_locale$value3 = locale.value) === null || _locale$value3 === void 0 ? void 0 : _locale$value3.cancelUploadText,
            cancelUpload: props.cancelUpload
          }
        }) : Vue.createVNode(Button, Vue.mergeProps({
          "theme": "default",
          "disabled": cancelUploadDisabled,
          "content": (_locale$value4 = locale.value) === null || _locale$value4 === void 0 ? void 0 : _locale$value4.cancelUploadText,
          "class": "".concat(uploadPrefix.value, "__cancel"),
          "onClick": function onClick(e) {
            var _props$cancelUpload;
            return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
              e: e
            });
          }
        }, isObject(props.cancelUploadButton) ? props.cancelUploadButton : {}), null)), props.uploadButton !== null && (hasUploadButtonTNode ? renderTNodeJSX("uploadButton", {
          params: {
            disabled: uploadButtonDisabled,
            uploading: uploading.value,
            uploadText: uploadText.value,
            uploadFiles: props.uploadFiles
          }
        }) : Vue.createVNode(Button, Vue.mergeProps({
          "disabled": uploadButtonDisabled,
          "theme": "primary",
          "loading": uploading.value,
          "class": "".concat(uploadPrefix.value, "__continue"),
          "content": uploadText.value,
          "onClick": function onClick() {
            var _props$uploadFiles;
            return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
          }
        }, isObject(props.uploadButton) ? props.uploadButton : {}), null))]), Vue.createVNode(ImageViewer, Vue.mergeProps({
          "images": currentPreviewFile.value.map(function (t) {
            return t.url || t.raw;
          }),
          "visible": !!currentPreviewFile.value.length,
          "onClose": function onClose() {
            currentPreviewFile.value = [];
          },
          "index": previewIndex.value,
          "onIndexChange": function onIndexChange(val) {
            return previewIndex.value = val;
          }
        }, props.imageViewerProps), null)]);
      };
    }
  });

  function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var CustomFile = Vue.defineComponent({
    name: "UploadCustomFile",
    props: _objectSpread$4(_objectSpread$4({}, commonProps), {}, {
      dragEvents: Object,
      draggable: Boolean,
      dragContent: Function,
      trigger: Function,
      triggerUpload: Function,
      childrenNode: [String, Function]
    }),
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var _toRefs = Vue.toRefs(props),
        classPrefix = _toRefs.classPrefix,
        displayFiles = _toRefs.displayFiles,
        accept = _toRefs.accept;
      var drag = useDrag(props.dragEvents, accept);
      var dragActive = drag.dragActive;
      var renderContent = useContent();
      var renderDragContent = function renderDragContent() {
        var _props$childrenNode;
        var params = {
          dragActive: dragActive.value || false,
          files: displayFiles.value
        };
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__dragger ").concat(classPrefix.value, "-upload__dragger-center"),
          "onDrop": drag.handleDrop,
          "onDragenter": drag.handleDragenter,
          "onDragover": drag.handleDragover,
          "onDragleave": drag.handleDragleave,
          "onClick": props.triggerUpload
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__trigger")
        }, [renderContent("dragContent", "trigger", {
          params: params
        }) || ((_props$childrenNode = props.childrenNode) === null || _props$childrenNode === void 0 ? void 0 : _props$childrenNode.call(props, params))])]);
      };
      return function () {
        var _props$childrenNode2, _slots$default;
        return Vue.createVNode(Vue.Fragment, null, [props.draggable ? renderDragContent() : Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-upload__trigger"),
          "onClick": props.triggerUpload
        }, [((_props$childrenNode2 = props.childrenNode) === null || _props$childrenNode2 === void 0 ? void 0 : _props$childrenNode2.call(props, {
          files: displayFiles.value
        })) || ((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots))])]);
      };
    }
  });

  function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function xhr(_ref) {
    var _files$;
    var _ref$method = _ref.method,
      method = _ref$method === void 0 ? "POST" : _ref$method,
      action = _ref.action,
      _ref$withCredentials = _ref.withCredentials,
      withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
      _ref$headers = _ref.headers,
      headers = _ref$headers === void 0 ? {} : _ref$headers,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? {} : _ref$data,
      file = _ref.file,
      _ref$files = _ref.files,
      files = _ref$files === void 0 ? [] : _ref$files,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? "file" : _ref$name,
      _ref$useMockProgress = _ref.useMockProgress,
      useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,
      _ref$mockProgressDura = _ref.mockProgressDuration,
      mockProgressDuration = _ref$mockProgressDura === void 0 ? 300 : _ref$mockProgressDura,
      formatRequest = _ref.formatRequest,
      onError = _ref.onError,
      onProgress = _ref.onProgress,
      onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var percent = 0;
    var xhr2 = new XMLHttpRequest();
    if (withCredentials) {
      xhr2.withCredentials = true;
    }
    var timer1;
    var timer2;
    if (useMockProgress && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === "progress") {
      var timer22 = setTimeout(function () {
        timer1 = setInterval(function () {
          if (percent + 10 < 100) {
            percent = Math.max(percent + 10, percent);
            if (files[0] && percent !== files[0].percent) {
              files[0].percent = percent;
              onProgress({
                percent: percent,
                file: file || innerFiles[0],
                files: innerFiles.map(function (file2) {
                  return _objectSpread$3(_objectSpread$3({}, file2), {}, {
                    percent: percent
                  });
                }),
                type: "mock",
                XMLHttpRequest: xhr2
              });
            }
          } else {
            clearInterval(timer1);
          }
        }, mockProgressDuration);
        clearTimeout(timer22);
      }, mockProgressDuration);
    }
    var requestData = {};
    if (data) {
      var extraData = isFunction(data) ? data(innerFiles) : data;
      Object.assign(requestData, extraData);
    }
    innerFiles.forEach(function (file2, index) {
      var fileField = innerFiles.length > 1 ? "".concat(name, "[").concat(index, "]") : name;
      requestData[fileField] = file2.raw;
    });
    if (innerFiles.length === 1) {
      requestData[name] = innerFiles[0].raw;
    } else {
      requestData[name] = innerFiles.map(function (file2) {
        return file2.raw;
      });
    }
    requestData.length = innerFiles.length;
    if (formatRequest) {
      requestData = formatRequest(requestData);
    }
    var formData = new FormData();
    Object.keys(requestData).forEach(function (key) {
      formData.append(key, requestData[key]);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });
    xhr2.onerror = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles,
        XMLHttpRequest: xhr2
      });
      clearInterval(timer1);
      clearTimeout(timer2);
    };
    xhr2.ontimeout = function (event) {
      onError({
        event: event,
        file: file,
        files: innerFiles,
        XMLHttpRequest: xhr2
      });
    };
    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var _innerFiles$;
        var realPercent = 0;
        if (event.total > 0) {
          realPercent = Math.round(event.loaded / event.total * 100);
        }
        percent = Math.max(realPercent, percent);
        if (percent !== realPercent && ((_innerFiles$ = innerFiles[0]) === null || _innerFiles$ === void 0 ? void 0 : _innerFiles$.percent) !== percent) {
          var progressFiles = innerFiles.map(function (item) {
            return _objectSpread$3(_objectSpread$3({}, item), {}, {
              percent: percent
            });
          });
          onProgress({
            event: event,
            percent: percent,
            file: file || progressFiles[0],
            files: progressFiles,
            type: "real",
            XMLHttpRequest: xhr2
          });
        }
      };
    }
    xhr2.onload = function (event) {
      var response = {};
      response.XMLHttpRequest = xhr2;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;
      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response,
          XMLHttpRequest: xhr2
        });
      }
      var text = xhr2.responseText || xhr2.response;
      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
        log.error("Upload", "response does not a valid json");
      }
      clearInterval(timer1);
      clearTimeout(timer2);
      innerFiles.forEach(function (file2) {
        var _response;
        file2.percent = 100;
        file2.status = "success";
        file2.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();
      });
      if (_typeof$3(response) === "object") {
        response.XMLHttpRequest = xhr2;
      }
      onSuccess({
        event: event,
        file: file || innerFiles[0],
        files: _toConsumableArray(innerFiles),
        XMLHttpRequest: xhr2,
        response: response
      });
    };
    xhr2.send(formData);
    xhr2.upload.requestParams = requestData;
    xhr2.upload.requestHeaders = headers;
    return xhr2;
  }

  function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function handleBeforeUpload(file, params) {
    var sizeLimit = params.sizeLimit,
      beforeUpload = params.beforeUpload;
    var sizePromise = new Promise(function (resolve) {
      var result = null;
      if (sizeLimit) {
        var sizeLimitObj = isNumber(sizeLimit) ? {
          size: sizeLimit,
          unit: "KB"
        } : sizeLimit;
        var limit = isOverSizeLimit(file.size, sizeLimitObj.size, sizeLimitObj.unit);
        if (limit) {
          result = sizeLimitObj;
        }
      }
      resolve(result);
    });
    var promiseList = [sizePromise, void 0];
    if (isFunction(beforeUpload)) {
      var r = beforeUpload(file);
      var p = r instanceof Promise ? r : new Promise(function (resolve) {
        return resolve(r);
      });
      promiseList[1] = p;
    }
    return new Promise(function (resolve) {
      Promise.all(promiseList).then(function (r) {
        resolve(r);
      });
    });
  }
  function handleError(options) {
    var event = options.event,
      files = options.files,
      response = options.response,
      XMLHttpRequest = options.XMLHttpRequest,
      formatResponse = options.formatResponse;
    var res = response;
    if (isFunction(formatResponse)) {
      res = formatResponse(response, {
        file: files[0],
        currentFiles: files
      });
    }
    files.forEach(function (file) {
      file.status = "fail";
      file.response = res;
    });
    return {
      response: res,
      event: event,
      files: files,
      XMLHttpRequest: XMLHttpRequest
    };
  }
  function handleSuccess(params) {
    var event = params.event,
      files = params.files,
      response = params.response,
      XMLHttpRequest = params.XMLHttpRequest;
    if ((files === null || files === void 0 ? void 0 : files.length) <= 0) {
      log.error("Upload", "Empty File in Success Callback");
    }
    files.forEach(function (file) {
      var _file$response;
      file.percent = 100;
      file.status = "success";
      (_file$response = file.response) === null || _file$response === void 0 || delete _file$response.error;
    });
    var res = response;
    files[0].url = res.url || files[0].url;
    return {
      response: res,
      event: event,
      files: files,
      XMLHttpRequest: XMLHttpRequest
    };
  }
  function handleRequestMethodResponse(res) {
    if (!res) {
      log.error("Upload", "`requestMethodResponse` is required.");
      return false;
    }
    if (!res.status) {
      log.error("Upload", "`requestMethodResponse.status` is missing, which value only can be `success` or `fail`");
      return false;
    }
    if (!["success", "fail"].includes(res.status)) {
      log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`, examples `{ status: 'success', response: { url: '' } }`");
      return false;
    }
    if (res.status === "success" && (!res.response || !res.response.url && !res.response.files)) {
      log.warn("Upload", "`requestMethodResponse.response.url` or `requestMethodResponse.response.files` is required if `status` is `success`");
    }
    return true;
  }
  function uploadOneRequest(params) {
    var action = params.action,
      toUploadFiles = params.toUploadFiles,
      requestMethod = params.requestMethod;
    return new Promise(function (resolve) {
      if (!action && !requestMethod) {
        log.error("Upload", "one of action and requestMethod must be exist.");
        resolve({});
        return;
      }
      if (!toUploadFiles || !toUploadFiles.length) {
        log.warn("Upload", "No files need to be uploaded");
        resolve({});
        return;
      }
      toUploadFiles.forEach(function (file) {
        file.status = "progress";
      });
      if (requestMethod) {
        requestMethod(params.multiple ? toUploadFiles : toUploadFiles[0]).then(function (res) {
          if (!handleRequestMethodResponse(res)) {
            resolve({});
            return;
          }
          var response = res.response || {};
          if (isFunction(params.formatResponse)) {
            response = params.formatResponse(response, {
              file: toUploadFiles[0],
              currentFiles: toUploadFiles
            });
          }
          if (res.status === "fail") {
            response.error = res.error || response.error;
          }
          var resultFiles = [];
          if (res.status === "success" && response.files) {
            resultFiles = response.files.map(function (file) {
              var fileInfo = toUploadFiles.find(function (toFile) {
                return file.name && toFile.name === file.name || file.raw && toFile.raw === file.raw;
              });
              return _objectSpread$2(_objectSpread$2(_objectSpread$2({}, fileInfo), file), {}, {
                status: res.status,
                response: response
              });
            });
          } else {
            toUploadFiles.forEach(function (file) {
              var _response;
              file.status = res.status;
              file.response = response;
              file.url = response.url;
              file.percent = res.status === "success" ? 100 : 0;
              file.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();
            });
            resultFiles = toUploadFiles;
          }
          var result = {
            response: response,
            file: resultFiles[0],
            files: resultFiles
          };
          if (res.status === "success") {
            var _params$onResponseSuc;
            (_params$onResponseSuc = params.onResponseSuccess) === null || _params$onResponseSuc === void 0 || _params$onResponseSuc.call(params, result);
          } else if (res.status === "fail") {
            var _params$onResponseErr;
            (_params$onResponseErr = params.onResponseError) === null || _params$onResponseErr === void 0 || _params$onResponseErr.call(params, result);
          }
          resolve({
            status: res.status,
            data: result
          });
        });
      } else {
        var _params$setXhrObject;
        var xhrReq = xhr({
          action: params.action,
          files: params.toUploadFiles,
          useMockProgress: params.useMockProgress,
          mockProgressDuration: params.mockProgressDuration,
          onError: function onError(p) {
            var _params$onResponseErr2;
            var r = handleError(_objectSpread$2(_objectSpread$2({}, p), {}, {
              formatResponse: params.formatResponse
            }));
            (_params$onResponseErr2 = params.onResponseError) === null || _params$onResponseErr2 === void 0 || _params$onResponseErr2.call(params, r);
            resolve({
              status: "fail",
              data: r
            });
          },
          onProgress: params.onResponseProgress,
          onSuccess: function onSuccess(p) {
            var formatResponse = params.formatResponse;
            var res = p.response;
            if (isFunction(formatResponse)) {
              res = formatResponse(p.response, {
                file: p.file,
                currentFiles: p.files
              });
            }
            if (res.error) {
              var _params$onResponseErr3;
              var r = handleError(_objectSpread$2(_objectSpread$2({}, p), {}, {
                response: res
              }));
              (_params$onResponseErr3 = params.onResponseError) === null || _params$onResponseErr3 === void 0 || _params$onResponseErr3.call(params, r);
              resolve({
                status: "fail",
                data: r
              });
            } else {
              var _params$onResponseSuc2;
              p.file.response = res;
              p.files[0].response = res;
              var _r = handleSuccess(_objectSpread$2(_objectSpread$2({}, p), {}, {
                response: res
              }));
              (_params$onResponseSuc2 = params.onResponseSuccess) === null || _params$onResponseSuc2 === void 0 || _params$onResponseSuc2.call(params, _r);
              resolve({
                status: "success",
                data: _r
              });
            }
          },
          formatRequest: params.formatRequest,
          data: params.data,
          name: params.name,
          headers: params.headers,
          withCredentials: params.withCredentials,
          method: params.method
        });
        (_params$setXhrObject = params.setXhrObject) === null || _params$setXhrObject === void 0 || _params$setXhrObject.call(params, {
          files: params.toUploadFiles,
          xhrReq: xhrReq
        });
      }
    });
  }
  function updateUploadedFiles(uploadFiles, resultFiles) {
    var existFiles = uploadFiles.filter(function (t) {
      return t.url;
    });
    var newFiles = existFiles;
    var _loop = function _loop() {
      var file = resultFiles[i];
      var index = uploadFiles.findIndex(function (item) {
        return item.raw && item.raw === file.raw || item.name && item.name === file.name;
      });
      var tmpFile = index >= 0 ? _objectSpread$2(_objectSpread$2({}, uploadFiles[index]), file) : file;
      newFiles.push(tmpFile);
    };
    for (var i = 0, len = resultFiles.length; i < len; i++) {
      _loop();
    }
    return newFiles;
  }
  function upload(params) {
    var uploadAllFilesInOneRequest = params.uploadAllFilesInOneRequest,
      toUploadFiles = params.toUploadFiles,
      uploadedFiles = params.uploadedFiles,
      isBatchUpload = params.isBatchUpload;
    var thisUploadFiles = toUploadFiles.filter(function (t) {
      return !t.response || t.response && !t.response.error;
    });
    return new Promise(function (resolve) {
      if (uploadAllFilesInOneRequest || !params.multiple) {
        uploadOneRequest(params).then(function (r) {
          if (r.status === "success") {
            r.data.files = isBatchUpload || !params.multiple ? r.data.files : updateUploadedFiles(uploadedFiles, r.data.files);
          }
          var failedFiles = r.status === "fail" ? r.data.files : [];
          resolve(_objectSpread$2(_objectSpread$2({}, r), {}, {
            failedFiles: failedFiles
          }));
        });
        return;
      }
      var list = thisUploadFiles.map(function (file) {
        return uploadOneRequest(_objectSpread$2(_objectSpread$2({}, params), {}, {
          toUploadFiles: [file]
        }));
      });
      Promise.all(list).then(function (arr) {
        var files = [];
        var failedFiles = [];
        arr.forEach(function (one) {
          if (one.status === "success") {
            files.push(one.data.files[0]);
          } else if (one.status === "fail") {
            failedFiles.push(one.data.files[0]);
          }
        });
        var tFiles = params.autoUpload ? uploadedFiles.concat(files) : uploadedFiles;
        var newFiles = isBatchUpload || !params.multiple ? files : tFiles;
        resolve({
          status: files.length ? "success" : "fail",
          data: {
            files: newFiles
          },
          failedFiles: failedFiles,
          list: arr
        });
      });
    });
  }
  function formatToUploadFile(files, format) {
    var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : void 0;
    var percent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return files.map(function (fileRaw) {
      var file = fileRaw;
      if (isFunction(format)) {
        file = format(fileRaw);
      }
      var uploadFile = _objectSpread$2({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: percent,
        status: status
      }, file);
      return uploadFile;
    });
  }
  function validateFile(params) {
    var files = params.files,
      uploadValue = params.uploadValue,
      max = params.max,
      allowUploadDuplicateFile = params.allowUploadDuplicateFile;
    return new Promise(function (resolve) {
      var tmpFiles = files.filter(function (file) {
        var sameNameFile = uploadValue.find(function (t) {
          return t.name === file.name;
        });
        return allowUploadDuplicateFile || !sameNameFile;
      });
      var hasSameNameFile = false;
      if (tmpFiles.length < files.length) {
        hasSameNameFile = true;
      }
      if (!tmpFiles.length) {
        var tFiles = formatToUploadFile(files, params.format, params.autoUpload ? "progress" : "waiting");
        resolve({
          hasSameNameFile: hasSameNameFile,
          file: tFiles === null || tFiles === void 0 ? void 0 : tFiles[0],
          files: tFiles,
          validateResult: {
            type: "FILTER_FILE_SAME_NAME"
          }
        });
        return;
      }
      var lengthOverLimit = false;
      if (max && tmpFiles.length && !params.isBatchUpload) {
        var tmpFilesLenToBeAdded = tmpFiles.length;
        tmpFiles = tmpFiles.slice(0, max - uploadValue.length);
        if (tmpFilesLenToBeAdded + uploadValue.length > max) {
          lengthOverLimit = true;
        }
      }
      var formattedFiles = formatToUploadFile(tmpFiles, params.format, params.autoUpload ? "progress" : "waiting");
      var allFileValidatePromise;
      if (params.beforeAllFilesUpload) {
        var _params$beforeAllFile;
        var r = (_params$beforeAllFile = params.beforeAllFilesUpload) === null || _params$beforeAllFile === void 0 ? void 0 : _params$beforeAllFile.call(params, formattedFiles);
        allFileValidatePromise = r instanceof Promise ? r : new Promise(function (resolve2) {
          return resolve2(r);
        });
      }
      var promiseList = formattedFiles.map(function (file) {
        return new Promise(function (resolve2) {
          handleBeforeUpload(file, {
            beforeUpload: params.beforeUpload,
            sizeLimit: params.sizeLimit
          }).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
              sizeResult = _ref2[0],
              customResult = _ref2[1];
            if (sizeResult) {
              resolve2({
                file: file,
                validateResult: {
                  type: "FILE_OVER_SIZE_LIMIT",
                  extra: sizeResult
                }
              });
            } else if (customResult === false) {
              resolve2({
                file: file,
                validateResult: {
                  type: "CUSTOM_BEFORE_UPLOAD"
                }
              });
            }
            resolve2({
              file: file
            });
          });
        });
      });
      Promise.all([allFileValidatePromise].concat(promiseList)).then(function (results) {
        var _results = _toArray(results),
          allFilesResult = _results[0],
          others = _results.slice(1);
        if (allFilesResult === false) {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            validateResult: {
              type: "BEFORE_ALL_FILES_UPLOAD"
            },
            files: formattedFiles
          });
        } else {
          resolve({
            lengthOverLimit: lengthOverLimit,
            hasSameNameFile: hasSameNameFile,
            fileValidateList: others,
            files: formattedFiles
          });
        }
      });
    });
  }
  function getFilesAndErrors(fileValidateList, getError) {
    var sizeLimitErrors = [];
    var beforeUploadErrorFiles = [];
    var toFiles = [];
    fileValidateList.forEach(function (oneFile) {
      var _oneFile$validateResu, _oneFile$validateResu2;
      if (((_oneFile$validateResu = oneFile.validateResult) === null || _oneFile$validateResu === void 0 ? void 0 : _oneFile$validateResu.type) === "CUSTOM_BEFORE_UPLOAD") {
        beforeUploadErrorFiles.push(oneFile.file);
        return;
      }
      if (((_oneFile$validateResu2 = oneFile.validateResult) === null || _oneFile$validateResu2 === void 0 ? void 0 : _oneFile$validateResu2.type) === "FILE_OVER_SIZE_LIMIT") {
        if (!oneFile.file.response) {
          oneFile.file.response = {};
        }
        oneFile.file.response.error = oneFile.file.response.error || getError(oneFile.validateResult.extra);
        sizeLimitErrors.push(oneFile);
        return;
      }
      toFiles.push(oneFile.file);
    });
    return {
      sizeLimitErrors: sizeLimitErrors,
      beforeUploadErrorFiles: beforeUploadErrorFiles,
      toFiles: toFiles
    };
  }
  function getTriggerTextField(p) {
    if (p.isBatchUpload && p.status) return "reupload";
    if (p.status === "fail") return "reupload";
    if (p.status === "progress") return "uploading";
    if (p.status === "success" || !p.autoUpload && p.status === "waiting") {
      return p.multiple ? "continueUpload" : "reupload";
    }
    return "fileInput";
  }
  function getDisplayFiles(params) {
    var multiple = params.multiple,
      uploadValue = params.uploadValue,
      toUploadFiles = params.toUploadFiles,
      autoUpload = params.autoUpload;
    var waitingUploadFiles = autoUpload ? toUploadFiles : toUploadFiles.filter(function (file) {
      return file.status !== "success";
    });
    if (multiple && !params.isBatchUpload) {
      if (!autoUpload) return uploadValue;
      return (waitingUploadFiles.length ? uploadValue.concat(waitingUploadFiles) : uploadValue) || [];
    }
    return (waitingUploadFiles.length ? waitingUploadFiles : uploadValue) || [];
  }

  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useUpload(props) {
    var inputRef = Vue.ref();
    var _toRefs = Vue.toRefs(props),
      disabled = _toRefs.disabled,
      autoUpload = _toRefs.autoUpload,
      isBatchUpload = _toRefs.isBatchUpload,
      multiple = _toRefs.multiple,
      files = _toRefs.files,
      modelValue = _toRefs.modelValue,
      defaultFiles = _toRefs.defaultFiles;
    var _useConfig = useConfig("upload"),
      globalConfig = _useConfig.globalConfig,
      t = _useConfig.t,
      classPrefix = _useConfig.classPrefix;
    var _useVModel = useVModel$1(files, modelValue, defaultFiles.value, props.onChange, "files"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      uploadValue = _useVModel2[0],
      setUploadValue = _useVModel2[1];
    var xhrReq = Vue.ref([]);
    var toUploadFiles = Vue.ref([]);
    var sizeOverLimitMessage = Vue.ref("");
    var locale = Vue.computed(function () {
      return merge$2({}, globalConfig.value, props.locale);
    });
    var tipsClasses = "".concat(classPrefix.value, "-upload__tips ").concat(classPrefix.value, "-size-s");
    var errorClasses = [tipsClasses].concat("".concat(classPrefix.value, "-upload__tips-error"));
    var placeholderClass = "".concat(classPrefix.value, "-upload__placeholder");
    var triggerUploadText = Vue.computed(function () {
      var _uploadValue$value;
      var field = getTriggerTextField({
        isBatchUpload: isBatchUpload.value,
        multiple: multiple.value,
        status: (_uploadValue$value = uploadValue.value) === null || _uploadValue$value === void 0 || (_uploadValue$value = _uploadValue$value[0]) === null || _uploadValue$value === void 0 ? void 0 : _uploadValue$value.status,
        autoUpload: autoUpload.value
      });
      return locale.value.triggerUploadText[field];
    });
    var uploading = Vue.ref(false);
    var displayFiles = Vue.computed(function () {
      return getDisplayFiles({
        multiple: props.multiple,
        toUploadFiles: toUploadFiles.value,
        uploadValue: uploadValue.value,
        autoUpload: autoUpload.value,
        isBatchUpload: isBatchUpload.value
      });
    });
    var uploadFilePercent = function uploadFilePercent(params) {
      var file = params.file,
        percent = params.percent;
      var operationUploadFiles = autoUpload.value ? toUploadFiles : uploadValue;
      var index = operationUploadFiles.value.findIndex(function (item) {
        return file.raw === item.raw;
      });
      operationUploadFiles.value[index] = _objectSpread$1(_objectSpread$1({}, operationUploadFiles.value[index]), {}, {
        percent: percent
      });
    };
    var updateFilesProgress = function updateFilesProgress() {
      if (props.autoUpload) {
        toUploadFiles.value = _toConsumableArray(toUploadFiles.value);
      }
    };
    var onResponseError = function onResponseError(p) {
      var _props$onOneFileFail;
      if (!p || !p.files || !p.files[0]) return;
      var response = p.response,
        event = p.event,
        files2 = p.files;
      updateFilesProgress();
      (_props$onOneFileFail = props.onOneFileFail) === null || _props$onOneFileFail === void 0 || _props$onOneFileFail.call(props, {
        e: event,
        file: files2 === null || files2 === void 0 ? void 0 : files2[0],
        currentFiles: files2,
        failedFiles: files2,
        response: response
      });
      if (!props.multiple || props.isBatchUpload) {
        setUploadValue([], {
          trigger: "progress-fail",
          e: p.event,
          file: p.files[0]
        });
      }
    };
    var onResponseProgress = function onResponseProgress(p) {
      var _props$onProgress;
      updateFilesProgress();
      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 || _props$onProgress.call(props, {
        e: p.event,
        file: p.file,
        currentFiles: p.files,
        percent: p.percent,
        type: p.type,
        XMLHttpRequest: p.XMLHttpRequest
      });
    };
    var onResponseSuccess = function onResponseSuccess(p) {
      if (props.multiple && !props.uploadAllFilesInOneRequest) {
        var _props$onOneFileSucce;
        updateFilesProgress();
        (_props$onOneFileSucce = props.onOneFileSuccess) === null || _props$onOneFileSucce === void 0 || _props$onOneFileSucce.call(props, {
          e: p.event,
          file: p.files[0],
          response: p.response
        });
      }
    };
    function getSizeLimitError(sizeLimitObj) {
      var limit = sizeLimitObj;
      return limit.message ? t(limit.message, {
        sizeLimit: limit.size
      }) : "".concat(t(locale.value.sizeLimitMessage, {
        sizeLimit: limit.size
      }), " ").concat(limit.unit);
    }
    var handleNotAutoUpload = function handleNotAutoUpload(toFiles) {
      var tmpFiles = props.multiple && !isBatchUpload.value ? uploadValue.value.concat(toFiles) : toFiles;
      if (!tmpFiles.length) return;
      setUploadValue(tmpFiles, {
        trigger: "add",
        index: uploadValue.value.length,
        file: toFiles[0],
        files: toFiles
      });
      toUploadFiles.value = [];
    };
    var onFileChange = function onFileChange(files2) {
      var _props$onSelectChange;
      if (disabled.value) return;
      var params = {
        currentSelectedFiles: formatToUploadFile(_toConsumableArray(files2), props.format)
      };
      (_props$onSelectChange = props.onSelectChange) === null || _props$onSelectChange === void 0 || _props$onSelectChange.call(props, _toConsumableArray(files2), params);
      validateFile({
        uploadValue: uploadValue.value,
        files: _toConsumableArray(files2),
        allowUploadDuplicateFile: props.allowUploadDuplicateFile,
        max: props.multiple ? props.max : 0,
        sizeLimit: props.sizeLimit,
        isBatchUpload: isBatchUpload.value,
        autoUpload: autoUpload.value,
        format: props.format,
        beforeUpload: props.beforeUpload,
        beforeAllFilesUpload: props.beforeAllFilesUpload
      }).then(function (args) {
        var _args$validateResult;
        if (((_args$validateResult = args.validateResult) === null || _args$validateResult === void 0 ? void 0 : _args$validateResult.type) === "BEFORE_ALL_FILES_UPLOAD") {
          var _props$onValidate;
          var params2 = {
            type: "BEFORE_ALL_FILES_UPLOAD",
            files: args.files
          };
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, params2);
          return;
        }
        if (args.lengthOverLimit) {
          var _props$onValidate2;
          var _params = {
            type: "FILES_OVER_LENGTH_LIMIT",
            files: args.files
          };
          (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 || _props$onValidate2.call(props, _params);
          if (!args.files.length) return;
        }
        if (args.hasSameNameFile) {
          var _props$onValidate3;
          var _params2 = {
            type: "FILTER_FILE_SAME_NAME",
            files: args.files
          };
          (_props$onValidate3 = props.onValidate) === null || _props$onValidate3 === void 0 || _props$onValidate3.call(props, _params2);
        }
        if (args.fileValidateList instanceof Array) {
          var _props$onWaitingUploa;
          var _getFilesAndErrors = getFilesAndErrors(args.fileValidateList, getSizeLimitError),
            sizeLimitErrors = _getFilesAndErrors.sizeLimitErrors,
            beforeUploadErrorFiles = _getFilesAndErrors.beforeUploadErrorFiles,
            toFiles = _getFilesAndErrors.toFiles;
          var tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);
          toUploadFiles.value = tmpWaitingFiles;
          (_props$onWaitingUploa = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa === void 0 || _props$onWaitingUploa.call(props, {
            files: tmpWaitingFiles,
            trigger: "validate"
          });
          if (sizeLimitErrors[0]) {
            var _props$onValidate4;
            sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;
            (_props$onValidate4 = props.onValidate) === null || _props$onValidate4 === void 0 || _props$onValidate4.call(props, {
              type: "FILE_OVER_SIZE_LIMIT",
              files: sizeLimitErrors.map(function (t2) {
                return t2.file;
              })
            });
          } else {
            sizeOverLimitMessage.value = "";
            if (beforeUploadErrorFiles.length) {
              var _props$onValidate5;
              var _params3 = {
                type: "CUSTOM_BEFORE_UPLOAD",
                files: beforeUploadErrorFiles
              };
              (_props$onValidate5 = props.onValidate) === null || _props$onValidate5 === void 0 || _props$onValidate5.call(props, _params3);
            }
          }
          if (autoUpload.value) {
            uploadFiles(tmpWaitingFiles);
          } else {
            handleNotAutoUpload(tmpWaitingFiles);
          }
        }
      });
      inputRef.value.value = null;
    };
    var onNormalFileChange = function onNormalFileChange(e) {
      var fileList = getFileList(e.target.files);
      onFileChange === null || onFileChange === void 0 || onFileChange(fileList);
    };
    function onDragFileChange(files2) {
      onFileChange === null || onFileChange === void 0 || onFileChange(files2);
    }
    function onPasteFileChange(e) {
      onFileChange === null || onFileChange === void 0 || onFileChange(_toConsumableArray(e.clipboardData.files));
    }
    function uploadFiles(toFiles) {
      var notUploadedFiles = uploadValue.value.filter(function (t2) {
        return t2.status !== "success";
      });
      var files2 = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;
      if (!files2 || !files2.length) return;
      uploading.value = true;
      xhrReq.value = [];
      upload({
        action: props.action,
        headers: props.headers,
        method: props.method,
        name: props.name,
        withCredentials: props.withCredentials,
        uploadedFiles: uploadValue.value,
        toUploadFiles: files2,
        multiple: props.multiple,
        isBatchUpload: isBatchUpload.value,
        autoUpload: props.autoUpload,
        uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,
        useMockProgress: props.useMockProgress,
        data: props.data,
        mockProgressDuration: props.mockProgressDuration,
        requestMethod: props.requestMethod,
        formatRequest: props.formatRequest,
        formatResponse: props.formatResponse,
        onResponseProgress: onResponseProgress,
        onResponseSuccess: onResponseSuccess,
        onResponseError: onResponseError,
        setXhrObject: function setXhrObject(xhr) {
          var _xhr$files$;
          if ((_xhr$files$ = xhr.files[0]) !== null && _xhr$files$ !== void 0 && _xhr$files$.raw && xhrReq.value.find(function (item) {
            var _item$files$;
            return ((_item$files$ = item.files[0]) === null || _item$files$ === void 0 ? void 0 : _item$files$.raw) === xhr.files[0].raw;
          })) return;
          xhrReq.value = xhrReq.value.concat(xhr);
        }
      }).then(function (_ref) {
        var status = _ref.status,
          data = _ref.data,
          list = _ref.list,
          failedFiles = _ref.failedFiles;
        uploading.value = false;
        if (status === "success") {
          var _props$onSuccess;
          setUploadValue(_toConsumableArray(data.files), {
            trigger: "add",
            file: data.files[0]
          });
          xhrReq.value = [];
          (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 || _props$onSuccess.call(props, {
            fileList: data.files,
            currentFiles: files2,
            file: files2[0],
            results: list === null || list === void 0 ? void 0 : list.map(function (t2) {
              return t2.data;
            }),
            response: data.response || list.map(function (t2) {
              return t2.data.response;
            }),
            XMLHttpRequest: data.XMLHttpRequest
          });
        } else if (failedFiles !== null && failedFiles !== void 0 && failedFiles[0]) {
          var _props$onFail;
          (_props$onFail = props.onFail) === null || _props$onFail === void 0 || _props$onFail.call(props, {
            e: data.event,
            file: failedFiles[0],
            failedFiles: failedFiles,
            currentFiles: files2,
            response: data.response,
            XMLHttpRequest: data.XMLHttpRequest
          });
        }
        if (autoUpload.value) {
          var _props$onWaitingUploa2;
          toUploadFiles.value = failedFiles;
          (_props$onWaitingUploa2 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa2 === void 0 || _props$onWaitingUploa2.call(props, {
            files: failedFiles,
            trigger: "uploaded"
          });
        }
      });
    }
    function onInnerRemove(p) {
      var _p$e$stopPropagation, _p$e, _props$onRemove;
      sizeOverLimitMessage.value = "";
      (_p$e$stopPropagation = (_p$e = p.e).stopPropagation) === null || _p$e$stopPropagation === void 0 || _p$e$stopPropagation.call(_p$e);
      var changePrams = {
        e: p.e,
        trigger: "remove",
        index: p.index,
        file: p.file
      };
      if (props.isBatchUpload || !props.multiple) {
        var _props$onWaitingUploa3;
        toUploadFiles.value = [];
        (_props$onWaitingUploa3 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa3 === void 0 || _props$onWaitingUploa3.call(props, {
          files: [],
          trigger: "remove"
        });
        setUploadValue([], changePrams);
      } else if (!props.autoUpload) {
        uploadValue.value.splice(p.index, 1);
        setUploadValue(_toConsumableArray(uploadValue.value), changePrams);
      } else {
        if (p.index < uploadValue.value.length) {
          uploadValue.value.splice(p.index, 1);
          setUploadValue(_toConsumableArray(uploadValue.value), changePrams);
        } else {
          var _props$onWaitingUploa4;
          toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);
          toUploadFiles.value = _toConsumableArray(toUploadFiles.value);
          (_props$onWaitingUploa4 = props.onWaitingUploadFilesChange) === null || _props$onWaitingUploa4 === void 0 || _props$onWaitingUploa4.call(props, {
            files: _toConsumableArray(toUploadFiles.value),
            trigger: "remove"
          });
        }
      }
      (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 || _props$onRemove.call(props, p);
    }
    var triggerUpload = function triggerUpload(e) {
      var _e$stopPropagation;
      if (disabled.value || !inputRef.value) return;
      e === null || e === void 0 || (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 || _e$stopPropagation.call(e);
      inputRef.value.click();
    };
    var cancelUpload = function cancelUpload(context) {
      var _xhrReq$value, _props$onCancelUpload;
      (_xhrReq$value = xhrReq.value) === null || _xhrReq$value === void 0 || _xhrReq$value.forEach(function (item) {
        var _item$xhrReq;
        (_item$xhrReq = item.xhrReq) === null || _item$xhrReq === void 0 || _item$xhrReq.abort();
      });
      uploading.value = false;
      if (autoUpload.value) {
        toUploadFiles.value = [];
      } else {
        setUploadValue(uploadValue.value.map(function (item) {
          if (item.status !== "success") {
            return _objectSpread$1(_objectSpread$1({}, item), {}, {
              status: "waiting"
            });
          }
          return item;
        }), {
          trigger: "abort"
        });
      }
      if (context !== null && context !== void 0 && context.file && !autoUpload.value) {
        onInnerRemove === null || onInnerRemove === void 0 || onInnerRemove({
          file: context.file,
          e: context.e,
          index: 0
        });
      }
      (_props$onCancelUpload = props.onCancelUpload) === null || _props$onCancelUpload === void 0 || _props$onCancelUpload.call(props);
    };
    return {
      t: t,
      locale: locale,
      classPrefix: classPrefix,
      triggerUploadText: triggerUploadText,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      tipsClasses: tipsClasses,
      errorClasses: errorClasses,
      placeholderClass: placeholderClass,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      uploadFilePercent: uploadFilePercent,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onDragFileChange: onDragFileChange,
      onPasteFileChange: onPasteFileChange,
      onInnerRemove: onInnerRemove,
      triggerUpload: triggerUpload,
      cancelUpload: cancelUpload
    };
  }

  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var _Upload = Vue.defineComponent({
    name: "TUpload",
    props: props$1,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
        expose = _ref.expose;
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var _useUpload = useUpload(props2),
        locale = _useUpload.locale,
        classPrefix = _useUpload.classPrefix,
        triggerUploadText = _useUpload.triggerUploadText,
        toUploadFiles = _useUpload.toUploadFiles,
        displayFiles = _useUpload.displayFiles,
        uploadValue = _useUpload.uploadValue,
        sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
        uploading = _useUpload.uploading,
        tipsClasses = _useUpload.tipsClasses,
        errorClasses = _useUpload.errorClasses,
        placeholderClass = _useUpload.placeholderClass,
        inputRef = _useUpload.inputRef,
        onInnerRemove = _useUpload.onInnerRemove,
        uploadFiles = _useUpload.uploadFiles,
        onNormalFileChange = _useUpload.onNormalFileChange,
        onDragFileChange = _useUpload.onDragFileChange,
        onPasteFileChange = _useUpload.onPasteFileChange,
        triggerUpload = _useUpload.triggerUpload,
        cancelUpload = _useUpload.cancelUpload,
        uploadFilePercent = _useUpload.uploadFilePercent;
      var disabled = useDisabled();
      var _useGlobalIcon = useGlobalIcon({
          UploadIcon: TdUploadIcon
        }),
        UploadIcon = _useGlobalIcon.UploadIcon;
      var triggerUploadButtonText = Vue.computed(function () {
        var _props2$triggerButton, _props2$triggerButton2;
        return ((_props2$triggerButton = props2.triggerButtonProps) === null || _props2$triggerButton === void 0 ? void 0 : _props2$triggerButton["default"]) || ((_props2$triggerButton2 = props2.triggerButtonProps) === null || _props2$triggerButton2 === void 0 ? void 0 : _props2$triggerButton2.content) || triggerUploadText.value;
      });
      expose({
        upload: inputRef.value,
        uploading: uploading,
        triggerUpload: triggerUpload,
        uploadFiles: uploadFiles,
        cancelUpload: cancelUpload,
        uploadFilePercent: uploadFilePercent
      });
      var renderTrigger = function renderTrigger() {
        var getDefaultTrigger = function getDefaultTrigger() {
          if (props2.theme === "file-input") {
            return Vue.createVNode(Button, Vue.mergeProps({
              "disabled": disabled.value,
              "variant": "outline"
            }, props2.triggerButtonProps), {
              "default": function _default() {
                return [triggerUploadButtonText.value];
              }
            });
          }
          return Vue.createVNode(Button, Vue.mergeProps({
            "disabled": disabled.value,
            "variant": "outline",
            "icon": function icon() {
              return Vue.createVNode(UploadIcon, null, null);
            }
          }, props2.triggerButtonProps), {
            "default": function _default() {
              return [triggerUploadButtonText.value];
            }
          });
        };
        return renderContent("default", "trigger", {
          params: {
            dragActive: false,
            files: uploadValue.value
          }
        }) || getDefaultTrigger();
      };
      var commonDisplayFileProps = Vue.computed(function () {
        return {
          accept: props2.accept,
          files: uploadValue.value,
          toUploadFiles: toUploadFiles.value,
          displayFiles: displayFiles.value,
          theme: props2.theme,
          placeholder: props2.placeholder,
          disabled: disabled.value,
          tips: props2.tips,
          status: props2.status,
          sizeOverLimitMessage: sizeOverLimitMessage.value,
          uploading: uploading.value,
          classPrefix: classPrefix.value,
          tipsClasses: tipsClasses,
          errorClasses: errorClasses,
          placeholderClass: placeholderClass,
          locale: locale.value,
          autoUpload: props2.autoUpload,
          abridgeName: props2.abridgeName,
          showUploadProgress: props2.showUploadProgress,
          fileListDisplay: props2.fileListDisplay,
          onRemove: onInnerRemove,
          uploadPastedFiles: props2.uploadPastedFiles,
          onPasteFileChange: onPasteFileChange,
          imageViewerProps: props2.imageViewerProps
        };
      });
      var dragProps = {
        onDragFileChange: onDragFileChange,
        onDragenter: props2.onDragenter,
        onDragleave: props2.onDragleave,
        onDrop: props2.onDrop
      };
      var uploadClasses = Vue.computed(function () {
        return ["".concat(classPrefix.value, "-upload"), _defineProperty$2({}, "".concat(classPrefix.value, "-upload--theme-").concat(props2.theme), props2.theme === "file-input")];
      });
      var getNormalFileNode = function getNormalFileNode() {
        return Vue.createVNode(NormalFile, Vue.mergeProps(commonDisplayFileProps.value, {
          "multiple": props2.multiple
        }), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-upload__trigger"),
              "onClick": triggerUpload
            }, [renderTrigger()])];
          },
          fileListDisplay: slots.fileListDisplay,
          "file-list-display": slots["file-list-display"]
        });
      };
      var getSingleFileDraggerUploadNode = function getSingleFileDraggerUploadNode() {
        return Vue.createVNode(DraggerFile, Vue.mergeProps(commonDisplayFileProps.value, {
          "dragEvents": dragProps,
          "trigger": props2.trigger,
          "cancelUpload": cancelUpload,
          "triggerUpload": triggerUpload,
          "uploadFiles": uploadFiles,
          "onCancelUpload": props2.onCancelUpload
        }), {
          fileListDisplay: slots.fileListDisplay,
          "file-list-display": slots["file-list-display"]
        });
      };
      var getImageCardUploadNode = function getImageCardUploadNode() {
        return Vue.createVNode(ImageCard, Vue.mergeProps(commonDisplayFileProps.value, {
          "multiple": props2.multiple,
          "max": props2.max,
          "showUploadProgress": props2.showUploadProgress,
          "triggerUpload": triggerUpload,
          "uploadFiles": uploadFiles,
          "cancelUpload": cancelUpload,
          "onPreview": props2.onPreview,
          "showImageFileName": props2.showImageFileName
        }), {
          fileListDisplay: slots.fileListDisplay,
          "file-list-display": slots["file-list-display"],
          trigger: slots.trigger
        });
      };
      var getFlowListNode = function getFlowListNode() {
        return Vue.createVNode(MultipleFlowList, Vue.mergeProps(commonDisplayFileProps.value, {
          "isBatchUpload": props2.isBatchUpload,
          "draggable": props2.draggable,
          "dragEvents": dragProps,
          "uploadFiles": uploadFiles,
          "cancelUpload": cancelUpload,
          "onPreview": props2.onPreview,
          "showImageFileName": props2.showImageFileName,
          "showThumbnail": props2.showThumbnail,
          "uploadButton": props2.uploadButton,
          "cancelUploadButton": props2.cancelUploadButton
        }), {
          "default": function _default() {
            return [Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-upload__trigger"),
              "onClick": triggerUpload
            }, [!props2.draggable && renderTrigger()])];
          },
          fileListDisplay: slots.fileListDisplay,
          "file-list-display": slots["file-list-display"],
          uploadButton: slots.uploadButton,
          "upload-button": slots["upload-button"],
          cancelUploadButton: slots.cancelUploadButton,
          "cancel-upload-button": slots["cancel-upload-button"]
        });
      };
      var getCustomFile = function getCustomFile() {
        return Vue.createVNode(CustomFile, Vue.mergeProps(commonDisplayFileProps.value, {
          "draggable": props2.draggable,
          "dragContent": props2.dragContent,
          "dragEvents": dragProps,
          "triggerUpload": triggerUpload,
          "trigger": props2.trigger,
          "childrenNode": slots["default"]
        }), {
          "default": function _default() {
            return [renderTrigger()];
          },
          dragContent: slots.dragContent,
          "drag-content": slots["drag-content"],
          trigger: slots.trigger
        });
      };
      return function () {
        return Vue.createVNode("div", {
          "class": uploadClasses.value,
          "onPaste": props2.uploadPastedFiles ? onPasteFileChange : void 0
        }, [Vue.createVNode("input", Vue.mergeProps({
          "ref": inputRef,
          "type": "file",
          "disabled": disabled.value,
          "onChange": onNormalFileChange,
          "multiple": props2.multiple,
          "accept": props2.accept,
          "hidden": true
        }, props2.inputAttributes ? _objectSpread({}, props2.inputAttributes) : {}), null), ["file", "file-input"].includes(props2.theme) && !props2.draggable && getNormalFileNode(), ["file", "image"].includes(props2.theme) && props2.draggable && getSingleFileDraggerUploadNode(), props2.theme === "image" && !props2.draggable && getImageCardUploadNode(), ["image-flow", "file-flow"].includes(props2.theme) && getFlowListNode(), props2.theme === "custom" && getCustomFile(), Boolean(props2.tips || slots.tips) && Vue.createVNode("small", {
          "class": [tipsClasses, _defineProperty$2({}, "".concat(classPrefix.value, "-upload__tips-").concat(props2.status), props2.status)]
        }, [renderTNodeJSX("tips")]), sizeOverLimitMessage.value && Vue.createVNode("small", {
          "class": errorClasses
        }, [sizeOverLimitMessage.value])]);
      };
    }
  });

  var Upload = withInstall$1(_Upload);

  var props = {
    globalConfig: {
      type: Object
    }
  };

  var _ConfigProvider = Vue.defineComponent({
    name: "TConfigProvider",
    props: props,
    setup: function setup(props2) {
      provideConfig(props2);
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return Vue.createVNode(Vue.Fragment, null, [renderTNodeJSX("default")]);
      };
    }
  });

  var ConfigProvider = withInstall$1(_ConfigProvider);

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Button: Button,
    Icon: Icon,
    Link: Link,
    Row: Row,
    Col: Col,
    Aside: Aside,
    Layout: Layout,
    Header: Header,
    Footer: Footer,
    Content: Content$1,
    Divider: Divider,
    Space: Space,
    Descriptions: Descriptions,
    DescriptionsItem: DescriptionsItem,
    Affix: Affix,
    Anchor: Anchor,
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget,
    Breadcrumb: Breadcrumb,
    BreadcrumbItem: BreadcrumbItem,
    Dropdown: Dropdown,
    DropdownItem: DropdownItem,
    DropdownMenu: DropdownMenu,
    Menu: Menu,
    HeadMenu: HeadMenu,
    Submenu: Submenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup,
    Pagination: Pagination,
    PaginationMini: PaginationMini,
    Steps: Steps,
    StepItem: StepItem,
    Tabs: Tabs,
    TabPanel: TabPanel,
    StickyItem: StickyItem,
    StickyTool: StickyTool,
    BackTop: BackTop,
    AutoComplete: AutoComplete,
    HighlightOption: HighlightOption,
    Cascader: Cascader,
    CascaderPanel: CascaderPanel,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    DatePicker: DatePicker,
    DatePickerPanel: DatePickerPanel,
    DateRangePicker: DateRangePicker,
    DateRangePickerPanel: DateRangePickerPanel,
    Form: Form,
    FormItem: FormItem,
    InputAdornment: InputAdornment,
    Input: Input,
    InputGroup: InputGroup,
    InputNumber: InputNumber,
    Radio: Radio,
    RadioGroup: RadioGroup,
    RadioButton: RadioButton,
    Select: Select,
    Option: Option,
    OptionGroup: OptionGroup,
    Slider: Slider,
    SliderButton: SliderButton,
    Switch: Switch,
    TagInput: TagInput,
    SelectInput: SelectInput,
    Textarea: Textarea,
    Transfer: Transfer,
    TimePicker: TimePicker,
    TimeRangePicker: TimeRangePicker,
    TimePickerPanel: TimePickerPanel,
    TreeSelect: TreeSelect,
    ColorPickerPanel: ColorPickerPanel,
    ColorPicker: ColorPicker,
    RangeInput: RangeInput,
    RangeInputPopup: RangeInputPopup,
    Avatar: Avatar,
    AvatarGroup: AvatarGroup,
    Badge: Badge,
    Calendar: Calendar,
    Card: Card,
    Comment: Comment,
    Empty: Empty,
    Image: Image$1,
    ImageViewer: ImageViewer,
    List: List,
    ListItem: ListItem,
    ListItemMeta: ListItemMeta,
    Progress: Progress,
    Skeleton: Skeleton,
    Statistic: Statistic,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    BaseTable: BaseTable,
    PrimaryTable: PrimaryTable,
    EnhancedTable: EnhancedTable,
    Table: Table,
    Tag: Tag,
    CheckTag: CheckTag,
    CheckTagGroup: CheckTagGroup,
    Timeline: Timeline,
    TimelineItem: TimelineItem,
    Tooltip: Tooltip,
    Tree: Tree,
    Collapse: Collapse,
    CollapsePanel: CollapsePanel,
    Watermark: Watermark,
    Rate: Rate,
    Typography: Typography,
    Text: Text,
    Title: Title,
    Paragraph: Paragraph,
    QRCode: QRCode,
    Alert: Alert,
    DialogPlugin: DialogPlugin,
    Dialog: Dialog,
    DialogCard: DialogCard,
    DrawerPlugin: DrawerPlugin,
    Drawer: Drawer,
    Guide: Guide,
    LoadingPlugin: LoadingPlugin,
    LoadingDirective: vLoading,
    Loading: Loading,
    MessagePlugin: MessagePlugin,
    Message: Message,
    NotifyPlugin: NotificationPlugin,
    Notification: Notification,
    Popconfirm: Popconfirm,
    Popup: Popup,
    Upload: Upload,
    ConfigProvider: ConfigProvider
  });

  function install(app, config) {
    Object.keys(components).forEach(function (key) {
      if (/directive/i.test(key)) return;
      /plugin/i.test(key) ? app.use(components[key]) : app.use(components[key], config);
    });
  }
  var tdesign = {
    install: install,
    version: "1.15.2"
  };

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AnchorItem = AnchorItem;
  exports.AnchorTarget = AnchorTarget;
  exports.Aside = Aside;
  exports.AutoComplete = AutoComplete;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.BackTop = BackTop;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.BreadcrumbItem = BreadcrumbItem;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CascaderPanel = CascaderPanel;
  exports.CheckTag = CheckTag;
  exports.CheckTagGroup = CheckTagGroup;
  exports.Checkbox = Checkbox;
  exports.CheckboxGroup = CheckboxGroup;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.CollapsePanel = CollapsePanel;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment;
  exports.ConfigProvider = ConfigProvider;
  exports.Content = Content$1;
  exports.DatePicker = DatePicker;
  exports.DatePickerPanel = DatePickerPanel;
  exports.DateRangePicker = DateRangePicker;
  exports.DateRangePickerPanel = DateRangePickerPanel;
  exports.Descriptions = Descriptions;
  exports.DescriptionsItem = DescriptionsItem;
  exports.Dialog = Dialog;
  exports.DialogCard = DialogCard;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.DrawerPlugin = DrawerPlugin;
  exports.Dropdown = Dropdown;
  exports.DropdownItem = DropdownItem;
  exports.DropdownMenu = DropdownMenu;
  exports.Empty = Empty;
  exports.EnhancedTable = EnhancedTable;
  exports.Footer = Footer;
  exports.Form = Form;
  exports.FormItem = FormItem;
  exports.Guide = Guide;
  exports.HeadMenu = HeadMenu;
  exports.Header = Header;
  exports.HighlightOption = HighlightOption;
  exports.Icon = Icon;
  exports.Image = Image$1;
  exports.ImageViewer = ImageViewer;
  exports.Input = Input;
  exports.InputAdornment = InputAdornment;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.Layout = Layout;
  exports.Link = Link;
  exports.List = List;
  exports.ListItem = ListItem;
  exports.ListItemMeta = ListItemMeta;
  exports.Loading = Loading;
  exports.LoadingDirective = vLoading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.MenuGroup = MenuGroup;
  exports.MenuItem = MenuItem;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotifyPlugin = NotificationPlugin;
  exports.Option = Option;
  exports.OptionGroup = OptionGroup;
  exports.Pagination = Pagination;
  exports.PaginationMini = PaginationMini;
  exports.Paragraph = Paragraph;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.QRCode = QRCode;
  exports.Radio = Radio;
  exports.RadioButton = RadioButton;
  exports.RadioGroup = RadioGroup;
  exports.RangeInput = RangeInput;
  exports.RangeInputPopup = RangeInputPopup;
  exports.Rate = Rate;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.SliderButton = SliderButton;
  exports.Space = Space;
  exports.Statistic = Statistic;
  exports.StepItem = StepItem;
  exports.Steps = Steps;
  exports.StickyItem = StickyItem;
  exports.StickyTool = StickyTool;
  exports.Submenu = Submenu;
  exports.Swiper = Swiper;
  exports.SwiperItem = SwiperItem;
  exports.Switch = Switch;
  exports.TabPanel = TabPanel;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Text = Text;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimePickerPanel = TimePickerPanel;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Timeline = Timeline;
  exports.TimelineItem = TimelineItem;
  exports.Title = Title;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Typography = Typography;
  exports.Upload = Upload;
  exports.Watermark = Watermark;
  exports["default"] = tdesign;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map

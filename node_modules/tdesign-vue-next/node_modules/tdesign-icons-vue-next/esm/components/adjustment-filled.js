import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M5.17071 4C5.58254 2.83481 6.69378 2 8 2C9.30622 2 10.4175 2.83481 10.8293 4L22 4V6L10.8293 6C10.4175 7.16519 9.30622 8 8 8C6.69378 8 5.58254 7.16519 5.17071 6L2 6L2 4L5.17071 4ZM13.1707 11C13.5825 9.83481 14.6938 9 16 9C17.3062 9 18.4175 9.83481 18.8293 11H22V13H18.8293C18.4175 14.1652 17.3062 15 16 15C14.6938 15 13.5825 14.1652 13.1707 13L2 13L2 11L13.1707 11ZM5.17071 18C5.58254 16.8348 6.69378 16 8 16C9.30622 16 10.4175 16.8348 10.8293 18L22 18V20L10.8293 20C10.4175 21.1652 9.30622 22 8 22C6.69378 22 5.58254 21.1652 5.17071 20H2V18H5.17071Z"
    }
  }]
};
var adjustmentFilled = defineComponent({
  name: "AdjustmentFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-adjustment-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default adjustmentFilled;
//# sourceMappingURL=adjustment-filled.js.map

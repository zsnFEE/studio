import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M4.96077 3.54632L9.61383 8.19938C11.0678 7.28457 12.9326 7.28457 14.3866 8.19938L19.0394 3.5465C14.9717.151228 9.02856.151168 4.96077 3.54632zM20.4536 4.96072L15.8008 9.61359C16.7156 11.0676 16.7156 12.9323 15.8008 14.3863L20.4537 19.0392C23.8488 14.9715 23.8488 9.02844 20.4536 4.96072zM19.0395 20.4535L14.3866 15.8005C12.9326 16.7153 11.0678 16.7153 9.61383 15.8005L4.96072 20.4536C9.02853 23.8488 14.9718 23.8488 19.0395 20.4535zM3.5465 19.0394L8.19962 14.3863C7.28482 12.9323 7.28482 11.0676 8.19962 9.61359L3.54654 4.96051C.151168 9.0283.151155 14.9716 3.5465 19.0394z"
    }
  }]
};
var supportFilled = defineComponent({
  name: "SupportFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-support-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default supportFilled;
//# sourceMappingURL=support-filled.js.map

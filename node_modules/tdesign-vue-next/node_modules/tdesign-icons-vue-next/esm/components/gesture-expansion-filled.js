import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10.74 7.07006C10.74 5.8219 11.7518 4.81006 13 4.81006 14.2482 4.81006 15.26 5.8219 15.26 7.07006V10.5195H16.9138C17.4021 10.5195 17.8817 10.6492 18.3035 10.8954L21.9282 13.0111C23.0547 13.6687 23.5662 15.0257 23.1539 16.2632L21.3715 21.6138C20.9964 22.7397 19.9428 23.4992 18.7561 23.4992H11.6706C10.8144 23.4992 10.0068 23.1014 9.48499 22.4227L5.18666 16.8314 6.13621 15.4062C6.55747 14.7739 7.31812 14.4577 8.06347 14.6049L10.74 15.1337V7.07006zM6 0H11V5H9V3.41421L5.41421 7H7V9H2V4H4V5.58579L7.58579 2H6V0z"
    }
  }]
};
var gestureExpansionFilled = defineComponent({
  name: "GestureExpansionFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-gesture-expansion-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default gestureExpansionFilled;
//# sourceMappingURL=gesture-expansion-filled.js.map

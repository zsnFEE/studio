import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M14.0895 4.09377L13.9187 6.54954C14.8458 7.49654 15.3498 8.56778 15.5453 9.71293 16.2136 9.25045 16.9804 8.90181 17.7613 8.71021 17.7879 8.7037 17.8148 8.69738 17.8421 8.69125L16.6292 6.6516 18.3482 5.62937 20.1357 8.63536C20.9311 8.74885 21.7584 9.00045 22.4934 9.43493 22.5476 9.46698 22.6015 9.50011 22.6549 9.53432 22.312 8.22324 21.7292 6.87987 20.9769 5.71586 20.0975 4.35536 18.8775 3.08145 17.3916 2.48472 15.7974 1.84446 14.2023 2.44446 14.0938 4.04297 14.0926 4.06011 14.0912 4.07704 14.0895 4.09377zM12.0828 4.12142L11.8567 7.37184 12.226 7.69846C13.3908 8.72867 13.7816 9.99212 13.6032 11.6109 13.2756 11.6193 12.9378 11.6567 12.6083 11.728 12.5979 11.7104 12.5874 11.6929 12.5768 11.6757 12.3329 11.2798 11.984 10.8898 11.5463 10.5827 10.7562 10.0283 9.6745 9.75252 8.50491 10.1899 7.89886 9.84157 7.3278 9.57095 6.79019 9.3726 6.71087 9.34333 6.63141 9.31551 6.55186 9.28911L9.40605 5.75618 7.85031 4.49933 4.2882 8.90852C3.33658 8.89926 2.4296 9.08004 1.6426 9.41917 1.50962 9.47647 1.37879 9.53907 1.25084 9.60684 1.91299 6.51974 3.84217 3.97327 6.50926 2.47939 7.55491 1.8937 8.65203 1.59787 9.68412 1.62473 11.4345 1.67028 12.1822 2.53539 12.086 4 12.0833 4.04151 12.0822 4.08199 12.0828 4.12142zM1.02417 12.7407C1.34205 17.6054 4.76961 21.5252 9.31327 22.6665 9.04876 21.6545 8.82129 20.465 8.72426 19.2518L3.58556 14.0575 5.00737 12.6509 8.79177 16.4763C9.03455 15.0038 9.67209 13.5583 10.8 12.6152 10.695 12.4723 10.5577 12.3322 10.3974 12.2198 10.0324 11.9636 9.55665 11.8409 8.93371 12.1908L8.41805 12.4803 7.91587 12.168C7.22494 11.7382 6.62057 11.4418 6.0979 11.249 4.7492 10.7513 3.40425 10.8378 2.43406 11.2559 1.58123 11.6234 1.12933 12.1779 1.02417 12.7407zM13.4274 19.054L11.1122 21.6055C10.8297 20.3724 10.6341 18.9528 10.6811 17.6442 10.7442 15.8896 11.4455 14.4469 12.4822 13.8757 12.9126 13.6386 13.6715 13.5466 14.2717 13.6516L15.1608 13.8072 15.4064 12.9386C15.5344 12.4856 15.8736 11.9997 16.4035 11.5677 16.9282 11.14 17.5832 10.8132 18.2379 10.6526 19.0033 10.4648 20.4267 10.5365 21.4757 11.1566 21.9741 11.4513 22.3601 11.8521 22.5794 12.3879 22.7995 12.9257 22.8899 13.6934 22.6305 14.786L22.6483 14.7903C21.4649 19.3738 17.4276 22.7439 12.5607 22.9855L19.8559 14.9456 18.3747 13.6016 15.4432 16.8324 15.4504 15.8183 13.4505 15.8041 13.4274 19.054z"
    }
  }]
};
var cabbageFilled = defineComponent({
  name: "CabbageFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-cabbage-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default cabbageFilled;
//# sourceMappingURL=cabbage-filled.js.map

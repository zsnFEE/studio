import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6.79282 3.79284C7.6927 2.89296 8.80428 2.19989 10.0054 1.71779C10.146 5.21095 13.0223 7.99971 16.55 7.99971C18.8312 7.99971 20.8388 6.8332 22.0107 5.06786C22.8791 6.69798 23.2002 8.63579 23.0764 10.5053C22.2979 10.1796 21.4438 10 20.55 10C16.9325 10 14 12.9325 14 16.55C14 16.6035 14.0006 16.6569 14.0019 16.7102C13.8305 16.5485 13.6516 16.3745 13.4738 16.1972C13.3187 16.3707 13.145 16.5678 12.9602 16.7821C12.268 17.5852 11.445 18.6025 10.8499 19.527C10.8321 19.5569 10.8118 19.5916 10.789 19.6307C10.4914 20.1401 9.76707 21.3801 8.61184 22.0503C7.93475 22.4431 7.09724 22.6539 6.13792 22.4477C5.20497 22.2472 4.26031 21.6745 3.29281 20.707C2.32531 19.7395 1.75267 18.7949 1.55213 17.8619C1.34592 16.9026 1.5568 16.0651 1.9496 15.388C2.61979 14.2328 3.85966 13.5085 4.36906 13.2109L4.36997 13.2104C4.40869 13.1878 4.44318 13.1677 4.47285 13.15C5.39733 12.5549 6.41464 11.7319 7.21773 11.0396C7.43098 10.8558 7.6271 10.683 7.79998 10.5285C7.57391 10.303 7.3551 10.0764 7.15301 9.85484C6.74062 9.40277 6.33392 8.904 6.1055 8.44717C5.68589 7.60794 5.49857 6.76436 5.63098 5.92916C5.76367 5.09217 6.19774 4.38792 6.79282 3.79284ZM12.069 14.7681L9.23177 11.9309C9.02794 12.1142 8.7884 12.3262 8.52351 12.5545C7.69401 13.2695 6.58705 14.1694 5.54014 14.8415L5.5274 14.8497L5.51442 14.8574L5.41008 14.9198C4.85611 15.2502 4.06955 15.7194 3.67956 16.3916C3.50026 16.7007 3.41992 17.0344 3.50747 17.4416C3.60067 17.8753 3.90676 18.4926 4.70702 19.2928C5.50729 20.0931 6.12461 20.3992 6.55824 20.4924C6.9655 20.5799 7.29916 20.4996 7.60823 20.3203C8.28047 19.9303 8.74965 19.1437 9.08008 18.5898L9.14243 18.4854L9.15022 18.4725L9.1584 18.4597C9.83046 17.4128 10.7303 16.3059 11.4453 15.4764C11.6736 15.2115 11.8857 14.9719 12.069 14.7681Z"
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M16.2343 18.1844C16.852 18.3971 17.4704 18.4698 18.0838 18.3693 18.916 18.233 19.6161 17.798 20.207 17.2071 21.461 15.9531 22.3154 14.3187 22.755 12.5606L22.5251 12.4496C21.9289 12.1618 21.2598 12 20.55 12 18.0371 12 16 14.0371 16 16.55 16 16.8556 16.03 17.1533 16.0869 17.4404L16.2343 18.1844zM20.707 3.29284L20.7219 3.30781 20.5404 3.63801C19.7652 5.04787 18.2681 5.99971 16.55 5.99971 14.0371 5.99971 12 3.9626 12 1.44971V1.12448C15.0566.509443 18.4974 1.08326 20.707 3.29284z"
    }
  }]
};
var mushroomFilled = defineComponent({
  name: "MushroomFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-mushroom-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default mushroomFilled;
//# sourceMappingURL=mushroom-filled.js.map

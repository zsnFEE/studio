import { _ as _defineProperty } from '../_chunks/dep-931ef437.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2 18C2 19.933 3.567 21.5 5.5 21.5C7.433 21.5 9 19.933 9 18C9 16.4761 8.02611 15.1797 6.66677 14.6992C6.97558 13.9933 7.68018 13.5 8.5 13.5H15.5C17.7091 13.5 19.5 11.7091 19.5 9.5V9.35506C20.9457 8.92479 22 7.58551 22 6C22 4.067 20.433 2.5 18.5 2.5C16.567 2.5 15 4.067 15 6C15 7.58551 16.0543 8.92479 17.5 9.35506V9.5C17.5 10.6046 16.6046 11.5 15.5 11.5H8.5C7.77143 11.5 7.08835 11.6948 6.5 12.0351V9.35506C7.94574 8.92479 9 7.58551 9 6C9 4.067 7.433 2.5 5.5 2.5C3.567 2.5 2 4.067 2 6C2 7.58551 3.05426 8.92479 4.5 9.35506V14.6449C3.05426 15.0752 2 16.4145 2 18Z"
    }
  }]
};
var gitBranchFilled = defineComponent({
  name: "GitBranchFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-git-branch-filled", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default gitBranchFilled;
//# sourceMappingURL=git-branch-filled.js.map

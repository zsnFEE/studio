'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-304d0f8c.js');
var vue = require('vue');
var utils_renderFn = require('../utils/render-fn.js');
var utils_useSizeProps = require('../utils/use-size-props.js');
require('../utils/use-common-classname.js');
require('../utils/config-context.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M17.5 7C17.5 7.90672 17.3143 8.77007 16.979 9.55412C16.3475 9.20375 15.6368 9.01952 14.9137 9.01952H14.7599V7.07006C14.7599 4.99347 13.0765 3.31006 10.9999 3.31006C8.92326 3.31006 7.23986 4.99347 7.23986 7.07006V12.3027C5.58179 11.1248 4.5 9.18872 4.5 7C4.5 3.41015 7.41015 0.5 11 0.5C14.5899 0.5 17.5 3.41015 17.5 7Z"
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M14.9137 10.5195C15.3752 10.5195 15.8289 10.6354 16.2333 10.8559C16.2568 10.8687 16.2802 10.8819 16.3033 10.8954L19.928 13.0111C21.0545 13.6687 21.566 15.0257 21.1538 16.2632L19.3714 21.6138C18.9963 22.7397 17.9427 23.4993 16.7559 23.4993H9.67042C8.81424 23.4993 8.00666 23.1014 7.48485 22.4227L3.18652 16.8314L4.13607 15.4062C4.55733 14.7739 5.31798 14.4577 6.06333 14.6049L8.73986 15.1337V7.07006C8.73986 5.8219 9.75169 4.81006 10.9999 4.81006C12.248 4.81006 13.2599 5.8219 13.2599 7.07006V10.5195H14.9137Z"
    }
  }]
};
var gesturePressFilled = vue.defineComponent({
  name: "GesturePressFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = vue.computed(() => props.size);
    var {
      className,
      style
    } = utils_useSizeProps['default'](propsSize);
    var finalCls = vue.computed(() => ["t-icon", "t-icon-gesture-press-filled", className.value]);
    var finalStyle = vue.computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = vue.computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => utils_renderFn['default'](element, finalProps.value);
  }
});

exports.default = gesturePressFilled;
//# sourceMappingURL=gesture-press-filled.js.map

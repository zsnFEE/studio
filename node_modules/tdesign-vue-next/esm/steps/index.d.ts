import { TdStepsProps, TdStepItemProps } from './type';
import './style';
export * from './type';
export type StepsProps = TdStepsProps;
export type StepItemProps = TdStepItemProps;
export declare const Steps: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        modelValue: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        defaultCurrent: {
            type: import("vue").PropType<TdStepsProps["defaultCurrent"]>;
        };
        layout: {
            type: import("vue").PropType<TdStepsProps["layout"]>;
            default: TdStepsProps["layout"];
            validator(val: TdStepsProps["layout"]): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepsProps["options"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdStepsProps["separator"]>;
            default: TdStepsProps["separator"];
            validator(val: TdStepsProps["separator"]): boolean;
        };
        sequence: {
            type: import("vue").PropType<TdStepsProps["sequence"]>;
            default: TdStepsProps["sequence"];
            validator(val: TdStepsProps["sequence"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdStepsProps["theme"]>;
            default: TdStepsProps["theme"];
            validator(val: TdStepsProps["theme"]): boolean;
        };
        onChange: import("vue").PropType<TdStepsProps["onChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        modelValue: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        defaultCurrent: {
            type: import("vue").PropType<TdStepsProps["defaultCurrent"]>;
        };
        layout: {
            type: import("vue").PropType<TdStepsProps["layout"]>;
            default: TdStepsProps["layout"];
            validator(val: TdStepsProps["layout"]): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepsProps["options"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdStepsProps["separator"]>;
            default: TdStepsProps["separator"];
            validator(val: TdStepsProps["separator"]): boolean;
        };
        sequence: {
            type: import("vue").PropType<TdStepsProps["sequence"]>;
            default: TdStepsProps["sequence"];
            validator(val: TdStepsProps["sequence"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdStepsProps["theme"]>;
            default: TdStepsProps["theme"];
            validator(val: TdStepsProps["theme"]): boolean;
        };
        onChange: import("vue").PropType<TdStepsProps["onChange"]>;
    }>>, {
        layout: "vertical" | "horizontal";
        theme: "default" | "dot";
        modelValue: string | number;
        readonly: boolean;
        current: string | number;
        separator: "line" | "dashed" | "arrow";
        sequence: "reverse" | "positive";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        modelValue: {
            type: import("vue").PropType<TdStepsProps["current"]>;
            default: TdStepsProps["current"];
        };
        defaultCurrent: {
            type: import("vue").PropType<TdStepsProps["defaultCurrent"]>;
        };
        layout: {
            type: import("vue").PropType<TdStepsProps["layout"]>;
            default: TdStepsProps["layout"];
            validator(val: TdStepsProps["layout"]): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepsProps["options"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        separator: {
            type: import("vue").PropType<TdStepsProps["separator"]>;
            default: TdStepsProps["separator"];
            validator(val: TdStepsProps["separator"]): boolean;
        };
        sequence: {
            type: import("vue").PropType<TdStepsProps["sequence"]>;
            default: TdStepsProps["sequence"];
            validator(val: TdStepsProps["sequence"]): boolean;
        };
        theme: {
            type: import("vue").PropType<TdStepsProps["theme"]>;
            default: TdStepsProps["theme"];
            validator(val: TdStepsProps["theme"]): boolean;
        };
        onChange: import("vue").PropType<TdStepsProps["onChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        layout: "vertical" | "horizontal";
        theme: "default" | "dot";
        modelValue: string | number;
        readonly: boolean;
        current: string | number;
        separator: "line" | "dashed" | "arrow";
        sequence: "reverse" | "positive";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<TdStepsProps["current"]>;
        default: TdStepsProps["current"];
    };
    modelValue: {
        type: import("vue").PropType<TdStepsProps["current"]>;
        default: TdStepsProps["current"];
    };
    defaultCurrent: {
        type: import("vue").PropType<TdStepsProps["defaultCurrent"]>;
    };
    layout: {
        type: import("vue").PropType<TdStepsProps["layout"]>;
        default: TdStepsProps["layout"];
        validator(val: TdStepsProps["layout"]): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepsProps["options"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    separator: {
        type: import("vue").PropType<TdStepsProps["separator"]>;
        default: TdStepsProps["separator"];
        validator(val: TdStepsProps["separator"]): boolean;
    };
    sequence: {
        type: import("vue").PropType<TdStepsProps["sequence"]>;
        default: TdStepsProps["sequence"];
        validator(val: TdStepsProps["sequence"]): boolean;
    };
    theme: {
        type: import("vue").PropType<TdStepsProps["theme"]>;
        default: TdStepsProps["theme"];
        validator(val: TdStepsProps["theme"]): boolean;
    };
    onChange: import("vue").PropType<TdStepsProps["onChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    layout: "vertical" | "horizontal";
    theme: "default" | "dot";
    modelValue: string | number;
    readonly: boolean;
    current: string | number;
    separator: "line" | "dashed" | "arrow";
    sequence: "reverse" | "positive";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const StepItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<TdStepItemProps["content"]>;
            default: TdStepItemProps["content"];
        };
        default: {
            type: import("vue").PropType<TdStepItemProps["default"]>;
        };
        extra: {
            type: import("vue").PropType<TdStepItemProps["extra"]>;
        };
        icon: {
            type: import("vue").PropType<TdStepItemProps["icon"]>;
            default: TdStepItemProps["icon"];
        };
        status: {
            type: import("vue").PropType<TdStepItemProps["status"]>;
            default: TdStepItemProps["status"];
            validator(val: TdStepItemProps["status"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdStepItemProps["title"]>;
            default: TdStepItemProps["title"];
        };
        value: {
            type: import("vue").PropType<TdStepItemProps["value"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<TdStepItemProps["content"]>;
            default: TdStepItemProps["content"];
        };
        default: {
            type: import("vue").PropType<TdStepItemProps["default"]>;
        };
        extra: {
            type: import("vue").PropType<TdStepItemProps["extra"]>;
        };
        icon: {
            type: import("vue").PropType<TdStepItemProps["icon"]>;
            default: TdStepItemProps["icon"];
        };
        status: {
            type: import("vue").PropType<TdStepItemProps["status"]>;
            default: TdStepItemProps["status"];
            validator(val: TdStepItemProps["status"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdStepItemProps["title"]>;
            default: TdStepItemProps["title"];
        };
        value: {
            type: import("vue").PropType<TdStepItemProps["value"]>;
        };
    }>>, {
        icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        status: import("./type").StepStatus;
        title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        content: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<TdStepItemProps["content"]>;
            default: TdStepItemProps["content"];
        };
        default: {
            type: import("vue").PropType<TdStepItemProps["default"]>;
        };
        extra: {
            type: import("vue").PropType<TdStepItemProps["extra"]>;
        };
        icon: {
            type: import("vue").PropType<TdStepItemProps["icon"]>;
            default: TdStepItemProps["icon"];
        };
        status: {
            type: import("vue").PropType<TdStepItemProps["status"]>;
            default: TdStepItemProps["status"];
            validator(val: TdStepItemProps["status"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdStepItemProps["title"]>;
            default: TdStepItemProps["title"];
        };
        value: {
            type: import("vue").PropType<TdStepItemProps["value"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        status: import("./type").StepStatus;
        title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        content: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: NumberConstructor;
    content: {
        type: import("vue").PropType<TdStepItemProps["content"]>;
        default: TdStepItemProps["content"];
    };
    default: {
        type: import("vue").PropType<TdStepItemProps["default"]>;
    };
    extra: {
        type: import("vue").PropType<TdStepItemProps["extra"]>;
    };
    icon: {
        type: import("vue").PropType<TdStepItemProps["icon"]>;
        default: TdStepItemProps["icon"];
    };
    status: {
        type: import("vue").PropType<TdStepItemProps["status"]>;
        default: TdStepItemProps["status"];
        validator(val: TdStepItemProps["status"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdStepItemProps["title"]>;
        default: TdStepItemProps["title"];
    };
    value: {
        type: import("vue").PropType<TdStepItemProps["value"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    icon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    status: import("./type").StepStatus;
    title: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    content: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Steps;

import { TdTreeSelectProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<TdTreeSelectProps["collapsedItems"]>;
    };
    data: {
        type: PropType<TdTreeSelectProps["data"]>;
        default: () => TdTreeSelectProps["data"];
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: PropType<TdTreeSelectProps["empty"]>;
        default: string;
    };
    filter: {
        type: PropType<TdTreeSelectProps["filter"]>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<TdTreeSelectProps["inputProps"]>;
    };
    inputValue: {
        type: PropType<TdTreeSelectProps["inputValue"]>;
        default: any;
    };
    defaultInputValue: {
        type: PropType<TdTreeSelectProps["defaultInputValue"]>;
    };
    keys: {
        type: PropType<TdTreeSelectProps["keys"]>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<TdTreeSelectProps["loadingText"]>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panelBottomContent: {
        type: PropType<TdTreeSelectProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: PropType<TdTreeSelectProps["panelTopContent"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<TdTreeSelectProps["popupProps"]>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<TdTreeSelectProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: PropType<TdTreeSelectProps["selectInputProps"]>;
    };
    size: {
        type: PropType<TdTreeSelectProps["size"]>;
        default: TdTreeSelectProps["size"];
        validator(val: TdTreeSelectProps["size"]): boolean;
    };
    suffix: {
        type: PropType<TdTreeSelectProps["suffix"]>;
    };
    suffixIcon: {
        type: PropType<TdTreeSelectProps["suffixIcon"]>;
    };
    tagProps: {
        type: PropType<TdTreeSelectProps["tagProps"]>;
    };
    treeProps: {
        type: PropType<TdTreeSelectProps["treeProps"]>;
    };
    value: {
        type: PropType<TdTreeSelectProps["value"]>;
        default: TdTreeSelectProps["value"];
    };
    modelValue: {
        type: PropType<TdTreeSelectProps["value"]>;
        default: TdTreeSelectProps["value"];
    };
    defaultValue: {
        type: PropType<TdTreeSelectProps["defaultValue"]>;
    };
    valueDisplay: {
        type: PropType<TdTreeSelectProps["valueDisplay"]>;
    };
    valueType: {
        type: PropType<TdTreeSelectProps["valueType"]>;
        default: TdTreeSelectProps["valueType"];
        validator(val: TdTreeSelectProps["valueType"]): boolean;
    };
    onBlur: PropType<TdTreeSelectProps["onBlur"]>;
    onChange: PropType<TdTreeSelectProps["onChange"]>;
    onClear: PropType<TdTreeSelectProps["onClear"]>;
    onFocus: PropType<TdTreeSelectProps["onFocus"]>;
    onInputChange: PropType<TdTreeSelectProps["onInputChange"]>;
    onPopupVisibleChange: PropType<TdTreeSelectProps["onPopupVisibleChange"]>;
    onRemove: PropType<TdTreeSelectProps["onRemove"]>;
    onSearch: PropType<TdTreeSelectProps["onSearch"]>;
};
export default _default;

import { TdSwiperProps } from './type';
import './style';
export * from './type';
export type SwiperProps = TdSwiperProps;
export declare const Swiper: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>> & {
        "onUpdate:current"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:current"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>> & {
        "onUpdate:current"?: (...args: any[]) => any;
    }, {
        type: "default" | "card";
        direction: "vertical" | "horizontal";
        duration: number;
        theme: "dark" | "light";
        animation: "fade" | "slide";
        current: number;
        trigger: "click" | "hover";
        defaultCurrent: number;
        autoplay: boolean;
        interval: number;
        loop: boolean;
        stopOnHover: boolean;
        cardScale: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>> & {
        "onUpdate:current"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        type: "default" | "card";
        direction: "vertical" | "horizontal";
        duration: number;
        theme: "dark" | "light";
        animation: "fade" | "slide";
        current: number;
        trigger: "click" | "hover";
        defaultCurrent: number;
        autoplay: boolean;
        interval: number;
        loop: boolean;
        stopOnHover: boolean;
        cardScale: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<TdSwiperProps["animation"]>;
        default: TdSwiperProps["animation"];
        validator(val: TdSwiperProps["animation"]): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<TdSwiperProps["direction"]>;
        default: TdSwiperProps["direction"];
        validator(val: TdSwiperProps["direction"]): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<TdSwiperProps["navigation"]>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<TdSwiperProps["theme"]>;
        default: TdSwiperProps["theme"];
        validator(val: TdSwiperProps["theme"]): boolean;
    };
    trigger: {
        type: import("vue").PropType<TdSwiperProps["trigger"]>;
        default: TdSwiperProps["trigger"];
        validator(val: TdSwiperProps["trigger"]): boolean;
    };
    type: {
        type: import("vue").PropType<TdSwiperProps["type"]>;
        default: TdSwiperProps["type"];
        validator(val: TdSwiperProps["type"]): boolean;
    };
    cardScale: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
}>> & {
    "onUpdate:current"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:current"[], "update:current", {
    type: "default" | "card";
    direction: "vertical" | "horizontal";
    duration: number;
    theme: "dark" | "light";
    animation: "fade" | "slide";
    current: number;
    trigger: "click" | "hover";
    defaultCurrent: number;
    autoplay: boolean;
    interval: number;
    loop: boolean;
    stopOnHover: boolean;
    cardScale: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const SwiperItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        currentIndex: {
            type: NumberConstructor;
        };
        isSwitching: {
            type: BooleanConstructor;
            default: boolean;
        };
        getWrapAttribute: {
            type: FunctionConstructor;
        };
        swiperItemLength: {
            type: NumberConstructor;
            default: number;
        };
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        currentIndex: {
            type: NumberConstructor;
        };
        isSwitching: {
            type: BooleanConstructor;
            default: boolean;
        };
        getWrapAttribute: {
            type: FunctionConstructor;
        };
        swiperItemLength: {
            type: NumberConstructor;
            default: number;
        };
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>>, {
        type: "default" | "card";
        direction: "vertical" | "horizontal";
        duration: number;
        theme: "dark" | "light";
        animation: "fade" | "slide";
        current: number;
        trigger: "click" | "hover";
        defaultCurrent: number;
        autoplay: boolean;
        isSwitching: boolean;
        swiperItemLength: number;
        interval: number;
        loop: boolean;
        stopOnHover: boolean;
        cardScale: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        currentIndex: {
            type: NumberConstructor;
        };
        isSwitching: {
            type: BooleanConstructor;
            default: boolean;
        };
        getWrapAttribute: {
            type: FunctionConstructor;
        };
        swiperItemLength: {
            type: NumberConstructor;
            default: number;
        };
        animation: {
            type: import("vue").PropType<TdSwiperProps["animation"]>;
            default: TdSwiperProps["animation"];
            validator(val: TdSwiperProps["animation"]): boolean;
        };
        autoplay: {
            type: BooleanConstructor;
            default: boolean;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        direction: {
            type: import("vue").PropType<TdSwiperProps["direction"]>;
            default: TdSwiperProps["direction"];
            validator(val: TdSwiperProps["direction"]): boolean;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        height: {
            type: NumberConstructor;
        };
        interval: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        navigation: {
            type: import("vue").PropType<TdSwiperProps["navigation"]>;
        };
        stopOnHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdSwiperProps["theme"]>;
            default: TdSwiperProps["theme"];
            validator(val: TdSwiperProps["theme"]): boolean;
        };
        trigger: {
            type: import("vue").PropType<TdSwiperProps["trigger"]>;
            default: TdSwiperProps["trigger"];
            validator(val: TdSwiperProps["trigger"]): boolean;
        };
        type: {
            type: import("vue").PropType<TdSwiperProps["type"]>;
            default: TdSwiperProps["type"];
            validator(val: TdSwiperProps["type"]): boolean;
        };
        cardScale: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "default" | "card";
        direction: "vertical" | "horizontal";
        duration: number;
        theme: "dark" | "light";
        animation: "fade" | "slide";
        current: number;
        trigger: "click" | "hover";
        defaultCurrent: number;
        autoplay: boolean;
        isSwitching: boolean;
        swiperItemLength: number;
        interval: number;
        loop: boolean;
        stopOnHover: boolean;
        cardScale: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: NumberConstructor;
    };
    currentIndex: {
        type: NumberConstructor;
    };
    isSwitching: {
        type: BooleanConstructor;
        default: boolean;
    };
    getWrapAttribute: {
        type: FunctionConstructor;
    };
    swiperItemLength: {
        type: NumberConstructor;
        default: number;
    };
    animation: {
        type: import("vue").PropType<TdSwiperProps["animation"]>;
        default: TdSwiperProps["animation"];
        validator(val: TdSwiperProps["animation"]): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<TdSwiperProps["direction"]>;
        default: TdSwiperProps["direction"];
        validator(val: TdSwiperProps["direction"]): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<TdSwiperProps["navigation"]>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<TdSwiperProps["theme"]>;
        default: TdSwiperProps["theme"];
        validator(val: TdSwiperProps["theme"]): boolean;
    };
    trigger: {
        type: import("vue").PropType<TdSwiperProps["trigger"]>;
        default: TdSwiperProps["trigger"];
        validator(val: TdSwiperProps["trigger"]): boolean;
    };
    type: {
        type: import("vue").PropType<TdSwiperProps["type"]>;
        default: TdSwiperProps["type"];
        validator(val: TdSwiperProps["type"]): boolean;
    };
    cardScale: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<TdSwiperProps["onChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "default" | "card";
    direction: "vertical" | "horizontal";
    duration: number;
    theme: "dark" | "light";
    animation: "fade" | "slide";
    current: number;
    trigger: "click" | "hover";
    defaultCurrent: number;
    autoplay: boolean;
    isSwitching: boolean;
    swiperItemLength: number;
    interval: number;
    loop: boolean;
    stopOnHover: boolean;
    cardScale: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Swiper;

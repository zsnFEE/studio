import { TdCollapseProps, TdCollapsePanelProps } from './type';
import './style';
export * from './type';
export type CollapseProps = TdCollapseProps;
export type CollapsePanelProps = TdCollapsePanelProps;
export declare const Collapse: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        disabled: BooleanConstructor;
        expandIcon: {
            type: import("vue").PropType<TdCollapseProps["expandIcon"]>;
            default: boolean;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdCollapseProps["expandIconPlacement"]>;
            default: TdCollapseProps["expandIconPlacement"];
            validator(val: TdCollapseProps["expandIconPlacement"]): boolean;
        };
        expandMutex: BooleanConstructor;
        expandOnRowClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCollapseProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdCollapseProps["onChange"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        disabled: BooleanConstructor;
        expandIcon: {
            type: import("vue").PropType<TdCollapseProps["expandIcon"]>;
            default: boolean;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdCollapseProps["expandIconPlacement"]>;
            default: TdCollapseProps["expandIconPlacement"];
            validator(val: TdCollapseProps["expandIconPlacement"]): boolean;
        };
        expandMutex: BooleanConstructor;
        expandOnRowClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCollapseProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdCollapseProps["onChange"]>;
    }>>, {
        disabled: boolean;
        value: import("./type").CollapseValue;
        expandMutex: boolean;
        modelValue: import("./type").CollapseValue;
        borderless: boolean;
        expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandIconPlacement: "left" | "right";
        defaultExpandAll: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        borderless: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        disabled: BooleanConstructor;
        expandIcon: {
            type: import("vue").PropType<TdCollapseProps["expandIcon"]>;
            default: boolean;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdCollapseProps["expandIconPlacement"]>;
            default: TdCollapseProps["expandIconPlacement"];
            validator(val: TdCollapseProps["expandIconPlacement"]): boolean;
        };
        expandMutex: BooleanConstructor;
        expandOnRowClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdCollapseProps["value"]>;
            default: TdCollapseProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdCollapseProps["defaultValue"]>;
        };
        onChange: import("vue").PropType<TdCollapseProps["onChange"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: import("./type").CollapseValue;
        expandMutex: boolean;
        modelValue: import("./type").CollapseValue;
        borderless: boolean;
        expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandIconPlacement: "left" | "right";
        defaultExpandAll: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    borderless: BooleanConstructor;
    defaultExpandAll: BooleanConstructor;
    disabled: BooleanConstructor;
    expandIcon: {
        type: import("vue").PropType<TdCollapseProps["expandIcon"]>;
        default: boolean;
    };
    expandIconPlacement: {
        type: import("vue").PropType<TdCollapseProps["expandIconPlacement"]>;
        default: TdCollapseProps["expandIconPlacement"];
        validator(val: TdCollapseProps["expandIconPlacement"]): boolean;
    };
    expandMutex: BooleanConstructor;
    expandOnRowClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<TdCollapseProps["value"]>;
        default: TdCollapseProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdCollapseProps["value"]>;
        default: TdCollapseProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdCollapseProps["defaultValue"]>;
    };
    onChange: import("vue").PropType<TdCollapseProps["onChange"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: import("./type").CollapseValue;
    expandMutex: boolean;
    modelValue: import("./type").CollapseValue;
    borderless: boolean;
    expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandIconPlacement: "left" | "right";
    defaultExpandAll: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const CollapsePanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdCollapsePanelProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCollapsePanelProps["default"]>;
        };
        destroyOnCollapse: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        expandIcon: {
            type: import("vue").PropType<TdCollapsePanelProps["expandIcon"]>;
            default: any;
        };
        header: {
            type: import("vue").PropType<TdCollapsePanelProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdCollapsePanelProps["headerRightContent"]>;
        };
        value: {
            type: import("vue").PropType<TdCollapsePanelProps["value"]>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdCollapsePanelProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCollapsePanelProps["default"]>;
        };
        destroyOnCollapse: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        expandIcon: {
            type: import("vue").PropType<TdCollapsePanelProps["expandIcon"]>;
            default: any;
        };
        header: {
            type: import("vue").PropType<TdCollapsePanelProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdCollapsePanelProps["headerRightContent"]>;
        };
        value: {
            type: import("vue").PropType<TdCollapsePanelProps["value"]>;
        };
    }>>, {
        disabled: boolean;
        expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        destroyOnCollapse: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<TdCollapsePanelProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdCollapsePanelProps["default"]>;
        };
        destroyOnCollapse: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        expandIcon: {
            type: import("vue").PropType<TdCollapsePanelProps["expandIcon"]>;
            default: any;
        };
        header: {
            type: import("vue").PropType<TdCollapsePanelProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdCollapsePanelProps["headerRightContent"]>;
        };
        value: {
            type: import("vue").PropType<TdCollapsePanelProps["value"]>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        destroyOnCollapse: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<TdCollapsePanelProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdCollapsePanelProps["default"]>;
    };
    destroyOnCollapse: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<TdCollapsePanelProps["expandIcon"]>;
        default: any;
    };
    header: {
        type: import("vue").PropType<TdCollapsePanelProps["header"]>;
    };
    headerRightContent: {
        type: import("vue").PropType<TdCollapsePanelProps["headerRightContent"]>;
    };
    value: {
        type: import("vue").PropType<TdCollapsePanelProps["value"]>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    expandIcon: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    destroyOnCollapse: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Collapse;

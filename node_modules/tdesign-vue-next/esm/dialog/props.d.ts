import { TdDialogProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    attach: {
        type: PropType<TdDialogProps["attach"]>;
    };
    body: {
        type: PropType<TdDialogProps["body"]>;
    };
    cancelBtn: {
        type: PropType<TdDialogProps["cancelBtn"]>;
    };
    closeBtn: {
        type: PropType<TdDialogProps["closeBtn"]>;
        default: TdDialogProps["closeBtn"];
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: PropType<TdDialogProps["confirmBtn"]>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: PropType<TdDialogProps["default"]>;
    };
    destroyOnClose: BooleanConstructor;
    dialogClassName: {
        type: StringConstructor;
        default: string;
    };
    dialogStyle: {
        type: PropType<TdDialogProps["dialogStyle"]>;
    };
    draggable: BooleanConstructor;
    footer: {
        type: PropType<TdDialogProps["footer"]>;
        default: TdDialogProps["footer"];
    };
    header: {
        type: PropType<TdDialogProps["header"]>;
        default: TdDialogProps["header"];
    };
    lazy: BooleanConstructor;
    mode: {
        type: PropType<TdDialogProps["mode"]>;
        default: TdDialogProps["mode"];
        validator(val: TdDialogProps["mode"]): boolean;
    };
    placement: {
        type: PropType<TdDialogProps["placement"]>;
        default: TdDialogProps["placement"];
        validator(val: TdDialogProps["placement"]): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: PropType<TdDialogProps["theme"]>;
        default: TdDialogProps["theme"];
        validator(val: TdDialogProps["theme"]): boolean;
    };
    top: {
        type: PropType<TdDialogProps["top"]>;
    };
    visible: BooleanConstructor;
    width: {
        type: PropType<TdDialogProps["width"]>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onBeforeClose: PropType<TdDialogProps["onBeforeClose"]>;
    onBeforeOpen: PropType<TdDialogProps["onBeforeOpen"]>;
    onCancel: PropType<TdDialogProps["onCancel"]>;
    onClose: PropType<TdDialogProps["onClose"]>;
    onCloseBtnClick: PropType<TdDialogProps["onCloseBtnClick"]>;
    onClosed: PropType<TdDialogProps["onClosed"]>;
    onConfirm: PropType<TdDialogProps["onConfirm"]>;
    onEscKeydown: PropType<TdDialogProps["onEscKeydown"]>;
    onOpened: PropType<TdDialogProps["onOpened"]>;
    onOverlayClick: PropType<TdDialogProps["onOverlayClick"]>;
};
export default _default;

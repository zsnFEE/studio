import { TdDialogProps } from './type';
import './style';
export * from './type';
export type DialogProps = TdDialogProps;
export declare const Dialog: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        body: {
            type: import("vue").PropType<TdDialogProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<TdDialogProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<TdDialogProps["closeBtn"]>;
            default: TdDialogProps["closeBtn"];
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmBtn: {
            type: import("vue").PropType<TdDialogProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        footer: {
            type: import("vue").PropType<TdDialogProps["footer"]>;
            default: TdDialogProps["footer"];
        };
        header: {
            type: import("vue").PropType<TdDialogProps["header"]>;
            default: TdDialogProps["header"];
        };
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdDialogProps["theme"]>;
            default: TdDialogProps["theme"];
            validator(val: TdDialogProps["theme"]): boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onCancel: import("vue").PropType<TdDialogProps["onCancel"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onCloseBtnClick: import("vue").PropType<TdDialogProps["onCloseBtnClick"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onConfirm: import("vue").PropType<TdDialogProps["onConfirm"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>> & {
        "onUpdate:visible"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        body: {
            type: import("vue").PropType<TdDialogProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<TdDialogProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<TdDialogProps["closeBtn"]>;
            default: TdDialogProps["closeBtn"];
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmBtn: {
            type: import("vue").PropType<TdDialogProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        footer: {
            type: import("vue").PropType<TdDialogProps["footer"]>;
            default: TdDialogProps["footer"];
        };
        header: {
            type: import("vue").PropType<TdDialogProps["header"]>;
            default: TdDialogProps["header"];
        };
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdDialogProps["theme"]>;
            default: TdDialogProps["theme"];
            validator(val: TdDialogProps["theme"]): boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onCancel: import("vue").PropType<TdDialogProps["onCancel"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onCloseBtnClick: import("vue").PropType<TdDialogProps["onCloseBtnClick"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onConfirm: import("vue").PropType<TdDialogProps["onConfirm"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>> & {
        "onUpdate:visible"?: (...args: any[]) => any;
    }, {
        footer: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        mode: "normal" | "modal" | "modeless" | "full-screen";
        draggable: boolean;
        visible: boolean;
        lazy: boolean;
        header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "default" | "success" | "warning" | "danger" | "info";
        placement: "center" | "top";
        destroyOnClose: boolean;
        preventScrollThrough: boolean;
        showOverlay: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        confirmLoading: boolean;
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        confirmOnEnter: boolean;
        dialogClassName: string;
        showInAttachedElement: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        body: {
            type: import("vue").PropType<TdDialogProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<TdDialogProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<TdDialogProps["closeBtn"]>;
            default: TdDialogProps["closeBtn"];
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmBtn: {
            type: import("vue").PropType<TdDialogProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        footer: {
            type: import("vue").PropType<TdDialogProps["footer"]>;
            default: TdDialogProps["footer"];
        };
        header: {
            type: import("vue").PropType<TdDialogProps["header"]>;
            default: TdDialogProps["header"];
        };
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<TdDialogProps["theme"]>;
            default: TdDialogProps["theme"];
            validator(val: TdDialogProps["theme"]): boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onCancel: import("vue").PropType<TdDialogProps["onCancel"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onCloseBtnClick: import("vue").PropType<TdDialogProps["onCloseBtnClick"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onConfirm: import("vue").PropType<TdDialogProps["onConfirm"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>> & {
        "onUpdate:visible"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        footer: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        mode: "normal" | "modal" | "modeless" | "full-screen";
        draggable: boolean;
        visible: boolean;
        lazy: boolean;
        header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "default" | "success" | "warning" | "danger" | "info";
        placement: "center" | "top";
        destroyOnClose: boolean;
        preventScrollThrough: boolean;
        showOverlay: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        confirmLoading: boolean;
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        confirmOnEnter: boolean;
        dialogClassName: string;
        showInAttachedElement: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<TdDialogProps["attach"]>;
    };
    body: {
        type: import("vue").PropType<TdDialogProps["body"]>;
    };
    cancelBtn: {
        type: import("vue").PropType<TdDialogProps["cancelBtn"]>;
    };
    closeBtn: {
        type: import("vue").PropType<TdDialogProps["closeBtn"]>;
        default: TdDialogProps["closeBtn"];
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<TdDialogProps["confirmBtn"]>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<TdDialogProps["default"]>;
    };
    destroyOnClose: BooleanConstructor;
    dialogClassName: {
        type: StringConstructor;
        default: string;
    };
    dialogStyle: {
        type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
    };
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<TdDialogProps["footer"]>;
        default: TdDialogProps["footer"];
    };
    header: {
        type: import("vue").PropType<TdDialogProps["header"]>;
        default: TdDialogProps["header"];
    };
    lazy: BooleanConstructor;
    mode: {
        type: import("vue").PropType<TdDialogProps["mode"]>;
        default: TdDialogProps["mode"];
        validator(val: TdDialogProps["mode"]): boolean;
    };
    placement: {
        type: import("vue").PropType<TdDialogProps["placement"]>;
        default: TdDialogProps["placement"];
        validator(val: TdDialogProps["placement"]): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<TdDialogProps["theme"]>;
        default: TdDialogProps["theme"];
        validator(val: TdDialogProps["theme"]): boolean;
    };
    top: {
        type: import("vue").PropType<TdDialogProps["top"]>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<TdDialogProps["width"]>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
    onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
    onCancel: import("vue").PropType<TdDialogProps["onCancel"]>;
    onClose: import("vue").PropType<TdDialogProps["onClose"]>;
    onCloseBtnClick: import("vue").PropType<TdDialogProps["onCloseBtnClick"]>;
    onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
    onConfirm: import("vue").PropType<TdDialogProps["onConfirm"]>;
    onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
    onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
    onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], "update:visible", {
    footer: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    mode: "normal" | "modal" | "modeless" | "full-screen";
    draggable: boolean;
    visible: boolean;
    lazy: boolean;
    header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: "default" | "success" | "warning" | "danger" | "info";
    placement: "center" | "top";
    destroyOnClose: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    confirmLoading: boolean;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmOnEnter: boolean;
    dialogClassName: string;
    showInAttachedElement: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const DialogCard: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        body: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["closeBtn"]>;
            default: import("./type").TdDialogCardProps["closeBtn"];
        };
        confirmBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        footer: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["header"]>;
            default: import("./type").TdDialogCardProps["header"];
        };
        theme: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["theme"]>;
            default: import("./type").TdDialogCardProps["theme"];
            validator(val: import("./type").TdDialogCardProps["theme"]): boolean;
        };
        onCancel: import("vue").PropType<import("./type").TdDialogCardProps["onCancel"]>;
        onCloseBtnClick: import("vue").PropType<import("./type").TdDialogCardProps["onCloseBtnClick"]>;
        onConfirm: import("vue").PropType<import("./type").TdDialogCardProps["onConfirm"]>;
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        body: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["closeBtn"]>;
            default: import("./type").TdDialogCardProps["closeBtn"];
        };
        confirmBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        footer: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["header"]>;
            default: import("./type").TdDialogCardProps["header"];
        };
        theme: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["theme"]>;
            default: import("./type").TdDialogCardProps["theme"];
            validator(val: import("./type").TdDialogCardProps["theme"]): boolean;
        };
        onCancel: import("vue").PropType<import("./type").TdDialogCardProps["onCancel"]>;
        onCloseBtnClick: import("vue").PropType<import("./type").TdDialogCardProps["onCloseBtnClick"]>;
        onConfirm: import("vue").PropType<import("./type").TdDialogCardProps["onConfirm"]>;
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>>, {
        mode: "normal" | "modal" | "modeless" | "full-screen";
        draggable: boolean;
        visible: boolean;
        lazy: boolean;
        header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "default" | "success" | "warning" | "danger" | "info";
        placement: "center" | "top";
        destroyOnClose: boolean;
        preventScrollThrough: boolean;
        showOverlay: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        confirmLoading: boolean;
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        confirmOnEnter: boolean;
        dialogClassName: string;
        showInAttachedElement: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        body: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["body"]>;
        };
        cancelBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["cancelBtn"]>;
        };
        closeBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["closeBtn"]>;
            default: import("./type").TdDialogCardProps["closeBtn"];
        };
        confirmBtn: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["confirmBtn"]>;
        };
        confirmLoading: {
            type: BooleanConstructor;
            default: any;
        };
        footer: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["footer"]>;
        };
        header: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["header"]>;
            default: import("./type").TdDialogCardProps["header"];
        };
        theme: {
            type: import("vue").PropType<import("./type").TdDialogCardProps["theme"]>;
            default: import("./type").TdDialogCardProps["theme"];
            validator(val: import("./type").TdDialogCardProps["theme"]): boolean;
        };
        onCancel: import("vue").PropType<import("./type").TdDialogCardProps["onCancel"]>;
        onCloseBtnClick: import("vue").PropType<import("./type").TdDialogCardProps["onCloseBtnClick"]>;
        onConfirm: import("vue").PropType<import("./type").TdDialogCardProps["onConfirm"]>;
        attach: {
            type: import("vue").PropType<TdDialogProps["attach"]>;
        };
        closeOnEscKeydown: {
            type: BooleanConstructor;
            default: any;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: any;
        };
        confirmOnEnter: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdDialogProps["default"]>;
        };
        destroyOnClose: BooleanConstructor;
        dialogClassName: {
            type: StringConstructor;
            default: string;
        };
        dialogStyle: {
            type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
        };
        draggable: BooleanConstructor;
        lazy: BooleanConstructor;
        mode: {
            type: import("vue").PropType<TdDialogProps["mode"]>;
            default: TdDialogProps["mode"];
            validator(val: TdDialogProps["mode"]): boolean;
        };
        placement: {
            type: import("vue").PropType<TdDialogProps["placement"]>;
            default: TdDialogProps["placement"];
            validator(val: TdDialogProps["placement"]): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showInAttachedElement: BooleanConstructor;
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: import("vue").PropType<TdDialogProps["top"]>;
        };
        visible: BooleanConstructor;
        width: {
            type: import("vue").PropType<TdDialogProps["width"]>;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
        onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
        onClose: import("vue").PropType<TdDialogProps["onClose"]>;
        onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
        onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
        onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
        onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        mode: "normal" | "modal" | "modeless" | "full-screen";
        draggable: boolean;
        visible: boolean;
        lazy: boolean;
        header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        theme: "default" | "success" | "warning" | "danger" | "info";
        placement: "center" | "top";
        destroyOnClose: boolean;
        preventScrollThrough: boolean;
        showOverlay: boolean;
        closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        confirmLoading: boolean;
        closeOnEscKeydown: boolean;
        closeOnOverlayClick: boolean;
        confirmOnEnter: boolean;
        dialogClassName: string;
        showInAttachedElement: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    body: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["body"]>;
    };
    cancelBtn: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["cancelBtn"]>;
    };
    closeBtn: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["closeBtn"]>;
        default: import("./type").TdDialogCardProps["closeBtn"];
    };
    confirmBtn: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["confirmBtn"]>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    footer: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["footer"]>;
    };
    header: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["header"]>;
        default: import("./type").TdDialogCardProps["header"];
    };
    theme: {
        type: import("vue").PropType<import("./type").TdDialogCardProps["theme"]>;
        default: import("./type").TdDialogCardProps["theme"];
        validator(val: import("./type").TdDialogCardProps["theme"]): boolean;
    };
    onCancel: import("vue").PropType<import("./type").TdDialogCardProps["onCancel"]>;
    onCloseBtnClick: import("vue").PropType<import("./type").TdDialogCardProps["onCloseBtnClick"]>;
    onConfirm: import("vue").PropType<import("./type").TdDialogCardProps["onConfirm"]>;
    attach: {
        type: import("vue").PropType<TdDialogProps["attach"]>;
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<TdDialogProps["default"]>;
    };
    destroyOnClose: BooleanConstructor;
    dialogClassName: {
        type: StringConstructor;
        default: string;
    };
    dialogStyle: {
        type: import("vue").PropType<TdDialogProps["dialogStyle"]>;
    };
    draggable: BooleanConstructor;
    lazy: BooleanConstructor;
    mode: {
        type: import("vue").PropType<TdDialogProps["mode"]>;
        default: TdDialogProps["mode"];
        validator(val: TdDialogProps["mode"]): boolean;
    };
    placement: {
        type: import("vue").PropType<TdDialogProps["placement"]>;
        default: TdDialogProps["placement"];
        validator(val: TdDialogProps["placement"]): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: import("vue").PropType<TdDialogProps["top"]>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<TdDialogProps["width"]>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onBeforeClose: import("vue").PropType<TdDialogProps["onBeforeClose"]>;
    onBeforeOpen: import("vue").PropType<TdDialogProps["onBeforeOpen"]>;
    onClose: import("vue").PropType<TdDialogProps["onClose"]>;
    onClosed: import("vue").PropType<TdDialogProps["onClosed"]>;
    onEscKeydown: import("vue").PropType<TdDialogProps["onEscKeydown"]>;
    onOpened: import("vue").PropType<TdDialogProps["onOpened"]>;
    onOverlayClick: import("vue").PropType<TdDialogProps["onOverlayClick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    mode: "normal" | "modal" | "modeless" | "full-screen";
    draggable: boolean;
    visible: boolean;
    lazy: boolean;
    header: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    theme: "default" | "success" | "warning" | "danger" | "info";
    placement: "center" | "top";
    destroyOnClose: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    confirmLoading: boolean;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmOnEnter: boolean;
    dialogClassName: string;
    showInAttachedElement: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export { default as DialogPlugin } from './plugin';
export default Dialog;

import { TdTransferProps } from './type';
import './style';
export type TransferProps = TdTransferProps;
export declare const Transfer: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<TdTransferProps["checkboxProps"]>;
        };
        checked: {
            type: import("vue").PropType<TdTransferProps["checked"]>;
            default: TdTransferProps["checked"];
        };
        defaultChecked: {
            type: import("vue").PropType<TdTransferProps["defaultChecked"]>;
            default: () => TdTransferProps["defaultChecked"];
        };
        data: {
            type: import("vue").PropType<TdTransferProps["data"]>;
            default: () => TdTransferProps["data"];
        };
        direction: {
            type: import("vue").PropType<TdTransferProps["direction"]>;
            default: TdTransferProps["direction"];
            validator(val: TdTransferProps["direction"]): boolean;
        };
        disabled: {
            type: import("vue").PropType<TdTransferProps["disabled"]>;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdTransferProps["empty"]>;
            default: TdTransferProps["empty"];
        };
        footer: {
            type: import("vue").PropType<TdTransferProps["footer"]>;
        };
        keys: {
            type: import("vue").PropType<TdTransferProps["keys"]>;
        };
        operation: {
            type: import("vue").PropType<TdTransferProps["operation"]>;
        };
        pagination: {
            type: import("vue").PropType<TdTransferProps["pagination"]>;
        };
        search: {
            type: import("vue").PropType<TdTransferProps["search"]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<TdTransferProps["showCheckAll"]>;
            default: TdTransferProps["showCheckAll"];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<TdTransferProps["targetSort"]>;
            default: TdTransferProps["targetSort"];
            validator(val: TdTransferProps["targetSort"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdTransferProps["title"]>;
            default: () => TdTransferProps["title"];
        };
        transferItem: {
            type: import("vue").PropType<TdTransferProps["transferItem"]>;
        };
        value: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTransferProps["defaultValue"]>;
            default: () => TdTransferProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdTransferProps["onChange"]>;
        onCheckedChange: import("vue").PropType<TdTransferProps["onCheckedChange"]>;
        onPageChange: import("vue").PropType<TdTransferProps["onPageChange"]>;
        onScroll: import("vue").PropType<TdTransferProps["onScroll"]>;
        onSearch: import("vue").PropType<TdTransferProps["onSearch"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<TdTransferProps["checkboxProps"]>;
        };
        checked: {
            type: import("vue").PropType<TdTransferProps["checked"]>;
            default: TdTransferProps["checked"];
        };
        defaultChecked: {
            type: import("vue").PropType<TdTransferProps["defaultChecked"]>;
            default: () => TdTransferProps["defaultChecked"];
        };
        data: {
            type: import("vue").PropType<TdTransferProps["data"]>;
            default: () => TdTransferProps["data"];
        };
        direction: {
            type: import("vue").PropType<TdTransferProps["direction"]>;
            default: TdTransferProps["direction"];
            validator(val: TdTransferProps["direction"]): boolean;
        };
        disabled: {
            type: import("vue").PropType<TdTransferProps["disabled"]>;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdTransferProps["empty"]>;
            default: TdTransferProps["empty"];
        };
        footer: {
            type: import("vue").PropType<TdTransferProps["footer"]>;
        };
        keys: {
            type: import("vue").PropType<TdTransferProps["keys"]>;
        };
        operation: {
            type: import("vue").PropType<TdTransferProps["operation"]>;
        };
        pagination: {
            type: import("vue").PropType<TdTransferProps["pagination"]>;
        };
        search: {
            type: import("vue").PropType<TdTransferProps["search"]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<TdTransferProps["showCheckAll"]>;
            default: TdTransferProps["showCheckAll"];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<TdTransferProps["targetSort"]>;
            default: TdTransferProps["targetSort"];
            validator(val: TdTransferProps["targetSort"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdTransferProps["title"]>;
            default: () => TdTransferProps["title"];
        };
        transferItem: {
            type: import("vue").PropType<TdTransferProps["transferItem"]>;
        };
        value: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTransferProps["defaultValue"]>;
            default: () => TdTransferProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdTransferProps["onChange"]>;
        onCheckedChange: import("vue").PropType<TdTransferProps["onCheckedChange"]>;
        onPageChange: import("vue").PropType<TdTransferProps["onPageChange"]>;
        onScroll: import("vue").PropType<TdTransferProps["onScroll"]>;
        onSearch: import("vue").PropType<TdTransferProps["onSearch"]>;
    }>>, {
        disabled: boolean | boolean[];
        data: import("./type").DataOption[];
        value: import("./type").TransferValue[];
        search: boolean;
        empty: import("./type").EmptyType | import("./type").EmptyType[];
        direction: "left" | "right" | "both";
        checked: import("./type").TransferValue[];
        title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").TNodeReturnValue);
        defaultChecked: import("./type").TransferValue[];
        defaultValue: import("./type").TransferValue[];
        modelValue: import("./type").TransferValue[];
        showCheckAll: boolean | boolean[];
        targetSort: "push" | "unshift" | "original";
        targetDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<TdTransferProps["checkboxProps"]>;
        };
        checked: {
            type: import("vue").PropType<TdTransferProps["checked"]>;
            default: TdTransferProps["checked"];
        };
        defaultChecked: {
            type: import("vue").PropType<TdTransferProps["defaultChecked"]>;
            default: () => TdTransferProps["defaultChecked"];
        };
        data: {
            type: import("vue").PropType<TdTransferProps["data"]>;
            default: () => TdTransferProps["data"];
        };
        direction: {
            type: import("vue").PropType<TdTransferProps["direction"]>;
            default: TdTransferProps["direction"];
            validator(val: TdTransferProps["direction"]): boolean;
        };
        disabled: {
            type: import("vue").PropType<TdTransferProps["disabled"]>;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdTransferProps["empty"]>;
            default: TdTransferProps["empty"];
        };
        footer: {
            type: import("vue").PropType<TdTransferProps["footer"]>;
        };
        keys: {
            type: import("vue").PropType<TdTransferProps["keys"]>;
        };
        operation: {
            type: import("vue").PropType<TdTransferProps["operation"]>;
        };
        pagination: {
            type: import("vue").PropType<TdTransferProps["pagination"]>;
        };
        search: {
            type: import("vue").PropType<TdTransferProps["search"]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<TdTransferProps["showCheckAll"]>;
            default: TdTransferProps["showCheckAll"];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<TdTransferProps["targetSort"]>;
            default: TdTransferProps["targetSort"];
            validator(val: TdTransferProps["targetSort"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdTransferProps["title"]>;
            default: () => TdTransferProps["title"];
        };
        transferItem: {
            type: import("vue").PropType<TdTransferProps["transferItem"]>;
        };
        value: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTransferProps["value"]>;
            default: TdTransferProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTransferProps["defaultValue"]>;
            default: () => TdTransferProps["defaultValue"];
        };
        onChange: import("vue").PropType<TdTransferProps["onChange"]>;
        onCheckedChange: import("vue").PropType<TdTransferProps["onCheckedChange"]>;
        onPageChange: import("vue").PropType<TdTransferProps["onPageChange"]>;
        onScroll: import("vue").PropType<TdTransferProps["onScroll"]>;
        onSearch: import("vue").PropType<TdTransferProps["onSearch"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean | boolean[];
        data: import("./type").DataOption[];
        value: import("./type").TransferValue[];
        search: boolean;
        empty: import("./type").EmptyType | import("./type").EmptyType[];
        direction: "left" | "right" | "both";
        checked: import("./type").TransferValue[];
        title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").TNodeReturnValue);
        defaultChecked: import("./type").TransferValue[];
        defaultValue: import("./type").TransferValue[];
        modelValue: import("./type").TransferValue[];
        showCheckAll: boolean | boolean[];
        targetSort: "push" | "unshift" | "original";
        targetDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checkboxProps: {
        type: import("vue").PropType<TdTransferProps["checkboxProps"]>;
    };
    checked: {
        type: import("vue").PropType<TdTransferProps["checked"]>;
        default: TdTransferProps["checked"];
    };
    defaultChecked: {
        type: import("vue").PropType<TdTransferProps["defaultChecked"]>;
        default: () => TdTransferProps["defaultChecked"];
    };
    data: {
        type: import("vue").PropType<TdTransferProps["data"]>;
        default: () => TdTransferProps["data"];
    };
    direction: {
        type: import("vue").PropType<TdTransferProps["direction"]>;
        default: TdTransferProps["direction"];
        validator(val: TdTransferProps["direction"]): boolean;
    };
    disabled: {
        type: import("vue").PropType<TdTransferProps["disabled"]>;
        default: any;
    };
    empty: {
        type: import("vue").PropType<TdTransferProps["empty"]>;
        default: TdTransferProps["empty"];
    };
    footer: {
        type: import("vue").PropType<TdTransferProps["footer"]>;
    };
    keys: {
        type: import("vue").PropType<TdTransferProps["keys"]>;
    };
    operation: {
        type: import("vue").PropType<TdTransferProps["operation"]>;
    };
    pagination: {
        type: import("vue").PropType<TdTransferProps["pagination"]>;
    };
    search: {
        type: import("vue").PropType<TdTransferProps["search"]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<TdTransferProps["showCheckAll"]>;
        default: TdTransferProps["showCheckAll"];
    };
    targetDraggable: BooleanConstructor;
    targetSort: {
        type: import("vue").PropType<TdTransferProps["targetSort"]>;
        default: TdTransferProps["targetSort"];
        validator(val: TdTransferProps["targetSort"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdTransferProps["title"]>;
        default: () => TdTransferProps["title"];
    };
    transferItem: {
        type: import("vue").PropType<TdTransferProps["transferItem"]>;
    };
    value: {
        type: import("vue").PropType<TdTransferProps["value"]>;
        default: TdTransferProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdTransferProps["value"]>;
        default: TdTransferProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdTransferProps["defaultValue"]>;
        default: () => TdTransferProps["defaultValue"];
    };
    onChange: import("vue").PropType<TdTransferProps["onChange"]>;
    onCheckedChange: import("vue").PropType<TdTransferProps["onCheckedChange"]>;
    onPageChange: import("vue").PropType<TdTransferProps["onPageChange"]>;
    onScroll: import("vue").PropType<TdTransferProps["onScroll"]>;
    onSearch: import("vue").PropType<TdTransferProps["onSearch"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean | boolean[];
    data: import("./type").DataOption[];
    value: import("./type").TransferValue[];
    search: boolean;
    empty: import("./type").EmptyType | import("./type").EmptyType[];
    direction: "left" | "right" | "both";
    checked: import("./type").TransferValue[];
    title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
        type: import("./type").TransferListType;
    }) => import("..").TNodeReturnValue);
    defaultChecked: import("./type").TransferValue[];
    defaultValue: import("./type").TransferValue[];
    modelValue: import("./type").TransferValue[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
    targetDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Transfer;

import { AutoCompleteOption, TdAutoCompleteProps } from './type';
import './style';
export * from './type';
export type AutoCompleteProps<T extends AutoCompleteOption = AutoCompleteOption> = TdAutoCompleteProps<T>;
export declare const AutoComplete: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdAutoCompleteProps["default"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdAutoCompleteProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdAutoCompleteProps["filter"]>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdAutoCompleteProps["inputProps"]>;
        };
        options: {
            type: import("vue").PropType<TdAutoCompleteProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdAutoCompleteProps["popupProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdAutoCompleteProps["size"]>;
            default: TdAutoCompleteProps["size"];
            validator(val: TdAutoCompleteProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdAutoCompleteProps["status"]>;
            default: TdAutoCompleteProps["status"];
            validator(val: TdAutoCompleteProps["status"]): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<TdAutoCompleteProps["textareaProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdAutoCompleteProps["tips"]>;
        };
        triggerElement: {
            type: import("vue").PropType<TdAutoCompleteProps["triggerElement"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<TdAutoCompleteProps["onBlur"]>;
        onChange: import("vue").PropType<TdAutoCompleteProps["onChange"]>;
        onClear: import("vue").PropType<TdAutoCompleteProps["onClear"]>;
        onCompositionend: import("vue").PropType<TdAutoCompleteProps["onCompositionend"]>;
        onCompositionstart: import("vue").PropType<TdAutoCompleteProps["onCompositionstart"]>;
        onEnter: import("vue").PropType<TdAutoCompleteProps["onEnter"]>;
        onFocus: import("vue").PropType<TdAutoCompleteProps["onFocus"]>;
        onSelect: import("vue").PropType<TdAutoCompleteProps["onSelect"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdAutoCompleteProps["default"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdAutoCompleteProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdAutoCompleteProps["filter"]>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdAutoCompleteProps["inputProps"]>;
        };
        options: {
            type: import("vue").PropType<TdAutoCompleteProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdAutoCompleteProps["popupProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdAutoCompleteProps["size"]>;
            default: TdAutoCompleteProps["size"];
            validator(val: TdAutoCompleteProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdAutoCompleteProps["status"]>;
            default: TdAutoCompleteProps["status"];
            validator(val: TdAutoCompleteProps["status"]): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<TdAutoCompleteProps["textareaProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdAutoCompleteProps["tips"]>;
        };
        triggerElement: {
            type: import("vue").PropType<TdAutoCompleteProps["triggerElement"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<TdAutoCompleteProps["onBlur"]>;
        onChange: import("vue").PropType<TdAutoCompleteProps["onChange"]>;
        onClear: import("vue").PropType<TdAutoCompleteProps["onClear"]>;
        onCompositionend: import("vue").PropType<TdAutoCompleteProps["onCompositionend"]>;
        onCompositionstart: import("vue").PropType<TdAutoCompleteProps["onCompositionstart"]>;
        onEnter: import("vue").PropType<TdAutoCompleteProps["onEnter"]>;
        onFocus: import("vue").PropType<TdAutoCompleteProps["onFocus"]>;
        onSelect: import("vue").PropType<TdAutoCompleteProps["onSelect"]>;
    }>>, {
        disabled: boolean;
        value: string;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: string;
        placeholder: string;
        modelValue: string;
        readonly: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        filterable: boolean;
        highlightKeyword: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<TdAutoCompleteProps["default"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdAutoCompleteProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdAutoCompleteProps["filter"]>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdAutoCompleteProps["inputProps"]>;
        };
        options: {
            type: import("vue").PropType<TdAutoCompleteProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdAutoCompleteProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdAutoCompleteProps["popupProps"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdAutoCompleteProps["size"]>;
            default: TdAutoCompleteProps["size"];
            validator(val: TdAutoCompleteProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdAutoCompleteProps["status"]>;
            default: TdAutoCompleteProps["status"];
            validator(val: TdAutoCompleteProps["status"]): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<TdAutoCompleteProps["textareaProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdAutoCompleteProps["tips"]>;
        };
        triggerElement: {
            type: import("vue").PropType<TdAutoCompleteProps["triggerElement"]>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<TdAutoCompleteProps["onBlur"]>;
        onChange: import("vue").PropType<TdAutoCompleteProps["onChange"]>;
        onClear: import("vue").PropType<TdAutoCompleteProps["onClear"]>;
        onCompositionend: import("vue").PropType<TdAutoCompleteProps["onCompositionend"]>;
        onCompositionstart: import("vue").PropType<TdAutoCompleteProps["onCompositionstart"]>;
        onEnter: import("vue").PropType<TdAutoCompleteProps["onEnter"]>;
        onFocus: import("vue").PropType<TdAutoCompleteProps["onFocus"]>;
        onSelect: import("vue").PropType<TdAutoCompleteProps["onSelect"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: string;
        placeholder: string;
        modelValue: string;
        readonly: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        filterable: boolean;
        highlightKeyword: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: import("vue").PropType<TdAutoCompleteProps["default"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<TdAutoCompleteProps["empty"]>;
    };
    filter: {
        type: import("vue").PropType<TdAutoCompleteProps["filter"]>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdAutoCompleteProps["inputProps"]>;
    };
    options: {
        type: import("vue").PropType<TdAutoCompleteProps["options"]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<TdAutoCompleteProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: import("vue").PropType<TdAutoCompleteProps["panelTopContent"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<TdAutoCompleteProps["popupProps"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    size: {
        type: import("vue").PropType<TdAutoCompleteProps["size"]>;
        default: TdAutoCompleteProps["size"];
        validator(val: TdAutoCompleteProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdAutoCompleteProps["status"]>;
        default: TdAutoCompleteProps["status"];
        validator(val: TdAutoCompleteProps["status"]): boolean;
    };
    textareaProps: {
        type: import("vue").PropType<TdAutoCompleteProps["textareaProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdAutoCompleteProps["tips"]>;
    };
    triggerElement: {
        type: import("vue").PropType<TdAutoCompleteProps["triggerElement"]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<TdAutoCompleteProps["onBlur"]>;
    onChange: import("vue").PropType<TdAutoCompleteProps["onChange"]>;
    onClear: import("vue").PropType<TdAutoCompleteProps["onClear"]>;
    onCompositionend: import("vue").PropType<TdAutoCompleteProps["onCompositionend"]>;
    onCompositionstart: import("vue").PropType<TdAutoCompleteProps["onCompositionstart"]>;
    onEnter: import("vue").PropType<TdAutoCompleteProps["onEnter"]>;
    onFocus: import("vue").PropType<TdAutoCompleteProps["onFocus"]>;
    onSelect: import("vue").PropType<TdAutoCompleteProps["onSelect"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: string;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: string;
    placeholder: string;
    modelValue: string;
    readonly: boolean;
    autofocus: boolean;
    borderless: boolean;
    clearable: boolean;
    filterable: boolean;
    highlightKeyword: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const HighlightOption: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["content"]>;
        keyword: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["keyword"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["content"]>;
        keyword: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["keyword"]>;
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["content"]>;
        keyword: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["keyword"]>;
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["content"]>;
    keyword: import("vue").PropType<import("./components/highlight-option").HighlightOptionProps["keyword"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default AutoComplete;

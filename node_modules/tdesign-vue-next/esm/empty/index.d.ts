import type { TdEmptyProps } from './type';
import './style';
export * from './type';
export type EmptyProps = TdEmptyProps;
export declare const Empty: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdEmptyProps["action"]>;
        };
        description: {
            type: import("vue").PropType<TdEmptyProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdEmptyProps["image"]>;
        };
        imageStyle: {
            type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
        };
        size: {
            type: import("vue").PropType<TdEmptyProps["size"]>;
            default: TdEmptyProps["size"];
            validator(val: TdEmptyProps["size"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdEmptyProps["title"]>;
        };
        type: {
            type: import("vue").PropType<TdEmptyProps["type"]>;
            default: TdEmptyProps["type"];
            validator(val: TdEmptyProps["type"]): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdEmptyProps["action"]>;
        };
        description: {
            type: import("vue").PropType<TdEmptyProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdEmptyProps["image"]>;
        };
        imageStyle: {
            type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
        };
        size: {
            type: import("vue").PropType<TdEmptyProps["size"]>;
            default: TdEmptyProps["size"];
            validator(val: TdEmptyProps["size"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdEmptyProps["title"]>;
        };
        type: {
            type: import("vue").PropType<TdEmptyProps["type"]>;
            default: TdEmptyProps["type"];
            validator(val: TdEmptyProps["type"]): boolean;
        };
    }>>, {
        type: "empty" | "success" | "fail" | "network-error" | "maintenance";
        size: import("..").SizeEnum;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: import("vue").PropType<TdEmptyProps["action"]>;
        };
        description: {
            type: import("vue").PropType<TdEmptyProps["description"]>;
        };
        image: {
            type: import("vue").PropType<TdEmptyProps["image"]>;
        };
        imageStyle: {
            type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
        };
        size: {
            type: import("vue").PropType<TdEmptyProps["size"]>;
            default: TdEmptyProps["size"];
            validator(val: TdEmptyProps["size"]): boolean;
        };
        title: {
            type: import("vue").PropType<TdEmptyProps["title"]>;
        };
        type: {
            type: import("vue").PropType<TdEmptyProps["type"]>;
            default: TdEmptyProps["type"];
            validator(val: TdEmptyProps["type"]): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "empty" | "success" | "fail" | "network-error" | "maintenance";
        size: import("..").SizeEnum;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<TdEmptyProps["action"]>;
    };
    description: {
        type: import("vue").PropType<TdEmptyProps["description"]>;
    };
    image: {
        type: import("vue").PropType<TdEmptyProps["image"]>;
    };
    imageStyle: {
        type: import("vue").PropType<TdEmptyProps["imageStyle"]>;
    };
    size: {
        type: import("vue").PropType<TdEmptyProps["size"]>;
        default: TdEmptyProps["size"];
        validator(val: TdEmptyProps["size"]): boolean;
    };
    title: {
        type: import("vue").PropType<TdEmptyProps["title"]>;
    };
    type: {
        type: import("vue").PropType<TdEmptyProps["type"]>;
        default: TdEmptyProps["type"];
        validator(val: TdEmptyProps["type"]): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "empty" | "success" | "fail" | "network-error" | "maintenance";
    size: import("..").SizeEnum;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Empty;

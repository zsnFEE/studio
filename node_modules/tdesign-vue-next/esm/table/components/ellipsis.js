/**
 * tdesign v1.15.2
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, computed, onMounted, onUpdated, createVNode, isVNode } from 'vue';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { debounce } from 'lodash-es';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import { e as isTextEllipsis } from '../../_chunks/dep-1f7ad104.js';
import { a as useContent } from '../../_chunks/dep-1d44782f.js';
import '../../config-provider/hooks/useConfig.js';
import '@babel/runtime/helpers/slicedToArray';
import '../../_chunks/dep-7324137b.js';
import { Tooltip } from '../../tooltip/index.js';
import '../../_chunks/dep-e604a5ce.js';
import '../../_chunks/dep-7fac49fa.js';
import '../../_chunks/dep-6c13cc0e.js';
import '../../config-provider/utils/context.js';
import '../../_chunks/dep-3b49fbbe.js';
import 'dayjs';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/classCallCheck';
import '../../tooltip/tooltip.js';
import '../../tooltip/props.js';
import '../../popup/props.js';
import '../../popup/index.js';
import '../../popup/popup.js';
import '@popperjs/core';
import '../../_chunks/dep-b9ab7399.js';
import '../../_chunks/dep-79c44a11.js';
import '../../_chunks/dep-3ba91e12.js';
import '../../_chunks/dep-34e44a4e.js';
import '../../popup/container.js';
import '../../_chunks/dep-82e44120.js';
import '../../_chunks/dep-37a2e7c8.js';
import 'tdesign-vue-next/esm/common/style/web/components/popup/_index.less';
import '../../tooltip/utils/index.js';
import 'tdesign-vue-next/esm/common/style/web/components/tooltip/_index.less';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var TEllipsis = defineComponent({
  name: "TEllipsis",
  props: {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    tooltipContent: {
      type: [String, Number, Function]
    },
    placement: String,
    attach: [String, Function],
    tooltipProps: Object,
    zIndex: Number,
    overlayClassName: String,
    classPrefix: {
      type: String,
      "default": "t"
    }
  },
  setup: function setup(props) {
    var root = ref();
    var flag = ref(false);
    var isOverflow = ref(false);
    var renderContent = useContent();
    var ellipsisClasses = computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis"), "".concat(props.classPrefix, "-text-ellipsis")];
    });
    var innerEllipsisClassName = computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis-content"), props.overlayClassName];
    });
    onMounted(function () {
      isOverflow.value = isTextEllipsis(root.value);
    });
    onUpdated(function () {
      isOverflow.value = isTextEllipsis(root.value);
    });
    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.value) return;
      flag.value = true;
    };
    var onTriggerMouseleave = function onTriggerMouseleave() {
      if (!root.value) return;
    };
    var handleVisibleChange = function handleVisibleChange(v) {
      if (!v) flag.value = false;
    };
    var onMouseAround = debounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    return function () {
      var cellNode = renderContent("default", "content");
      var ellipsisContent = createVNode("div", {
        "ref": root,
        "class": ellipsisClasses.value,
        "onMouseenter": onMouseAround,
        "onMouseleave": onMouseAround,
        "style": {
          textOverflow: isOverflow.value ? "ellipsis" : "clip"
        }
      }, [cellNode]);
      var content = null;
      var tooltipProps = props.tooltipProps;
      if (isOverflow.value && flag.value) {
        var rProps = _objectSpread({
          content: props.tooltipContent || function () {
            return cellNode;
          },
          destroyOnClose: true,
          zIndex: props.zIndex,
          attach: props.attach,
          placement: props.placement,
          overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? innerEllipsisClassName.value.concat(tooltipProps.overlayClassName) : innerEllipsisClassName.value,
          onVisibleChange: handleVisibleChange
        }, tooltipProps);
        content = createVNode(Tooltip, rProps, _isSlot(ellipsisContent) ? ellipsisContent : {
          "default": function _default() {
            return [ellipsisContent];
          }
        });
      } else {
        content = ellipsisContent;
      }
      return content;
    };
  }
});

export { TEllipsis as default };
//# sourceMappingURL=ellipsis.js.map

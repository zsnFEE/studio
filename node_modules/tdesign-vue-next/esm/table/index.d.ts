import { InfinityScroll } from '../common';
import { BaseTableInstanceFunctions, EnhancedTableInstanceFunctions, PrimaryTableInstanceFunctions } from './type';
import './style';
export * from './type';
export * from './types';
export type AllTableInstanceFunctions = EnhancedTableInstanceFunctions & PrimaryTableInstanceFunctions & BaseTableInstanceFunctions;
export type TableScroll = InfinityScroll;
export declare const BaseTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./types").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./types").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./types").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./types").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<import("./types").BaseTableProps["renderExpandedRow"]>;
        onLeafColumnsChange: import("vue").PropType<import("./types").BaseTableProps["onLeafColumnsChange"]>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
            default: () => import("./type").TdBaseTableProps["columns"];
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: import("vue").PropType<import("./types").BaseTableProps["renderExpandedRow"]>;
    onLeafColumnsChange: import("vue").PropType<import("./types").BaseTableProps["onLeafColumnsChange"]>;
    thDraggable: BooleanConstructor;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["columns"]>;
        default: () => import("./type").TdBaseTableProps["columns"];
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onCellClick: import("vue").PropType<import("./type").TdBaseTableProps["onCellClick"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "show-element-change", {
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    thDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const PrimaryTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const EnhancedTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
            default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
            default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
        };
        tree: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
        };
        onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
        onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
        onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    beforeDragSort: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["beforeDragSort"]>;
    };
    expandedTreeNodes: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["expandedTreeNodes"]>;
        default: import("./type").TdEnhancedTableProps["expandedTreeNodes"];
    };
    defaultExpandedTreeNodes: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"]>;
        default: () => import("./type").TdEnhancedTableProps["defaultExpandedTreeNodes"];
    };
    tree: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["tree"]>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<import("./type").TdEnhancedTableProps["treeExpandAndFoldIcon"]>;
    };
    onAbnormalDragSort: import("vue").PropType<import("./type").TdEnhancedTableProps["onAbnormalDragSort"]>;
    onExpandedTreeNodesChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onExpandedTreeNodesChange"]>;
    onTreeExpandChange: import("vue").PropType<import("./type").TdEnhancedTableProps["onTreeExpandChange"]>;
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
    expandedTreeNodes: (string | number)[];
    defaultExpandedTreeNodes: (string | number)[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const Table: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
            default: () => import("./type").TdPrimaryTableProps["columns"];
        };
        displayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
            default: import("./type").TdPrimaryTableProps["displayColumns"];
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
        };
        dragSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
            validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
        };
        editableRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
        };
        expandIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
            default: import("./type").TdPrimaryTableProps["expandIcon"];
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
        };
        filterIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
        };
        filterRow: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
            default: import("./type").TdPrimaryTableProps["filterValue"];
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
            validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
            default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
            default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
            default: import("./type").TdPrimaryTableProps["sort"];
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
        };
        sortIcon: {
            type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
        onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
        onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
        onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
        onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
        onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
        onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
        onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
        onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
        onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
        onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
        onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
        onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
        onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
        onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
        activeRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
            default: import("./type").TdBaseTableProps["activeRowKeys"];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
            default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
        };
        activeRowType: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
            default: import("./type").TdBaseTableProps["activeRowType"];
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
        };
        data: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
            default: () => import("./type").TdBaseTableProps["data"];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
            default: import("./type").TdBaseTableProps["empty"];
        };
        firstFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
        };
        fixedRows: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
            default: () => import("./type").TdBaseTableProps["footData"];
        };
        footerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
            default: import("./type").TdBaseTableProps["footerAffixedBottom"];
        };
        footerSummary: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
        };
        headerAffixProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
            default: import("./type").TdBaseTableProps["headerAffixedTop"];
        };
        height: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
            default: import("./type").TdBaseTableProps["loading"];
        };
        loadingProps: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
        };
        locale: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
        };
        maxHeight: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
        };
        pagination: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
        };
        rowClassName: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
        };
        scroll: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
            validator(val: import("./type").TdBaseTableProps["size"]): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
            default: import("./type").TdBaseTableProps["tableLayout"];
            validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
        };
        topContent: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
        };
        verticalAlign: {
            type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
            default: import("./type").TdBaseTableProps["verticalAlign"];
            validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
        };
        onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
        onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
        onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
        onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
        onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
        onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
        onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
        onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
        onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
        onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
        onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
        onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
        onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
        onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
        hover: boolean;
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "middle" | "bottom";
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "single" | "multiple";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["asyncLoading"]>;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columnController"]>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["columns"]>;
        default: () => import("./type").TdPrimaryTableProps["columns"];
    };
    displayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["displayColumns"]>;
        default: import("./type").TdPrimaryTableProps["displayColumns"];
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultDisplayColumns"]>;
    };
    dragSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSort"]>;
        validator(val: import("./type").TdPrimaryTableProps["dragSort"]): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["dragSortOptions"]>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableCellState"]>;
    };
    editableRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["editableRowKeys"]>;
    };
    expandIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandIcon"]>;
        default: import("./type").TdPrimaryTableProps["expandIcon"];
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRow"]>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["expandedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["expandedRowKeys"];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultExpandedRowKeys"];
    };
    filterIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterIcon"]>;
    };
    filterRow: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterRow"]>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["filterValue"]>;
        default: import("./type").TdPrimaryTableProps["filterValue"];
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultFilterValue"]>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["indeterminateSelectedRowKeys"]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["rowSelectionType"]>;
        validator(val: import("./type").TdPrimaryTableProps["rowSelectionType"]): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["selectedRowKeys"]>;
        default: import("./type").TdPrimaryTableProps["selectedRowKeys"];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"]>;
        default: () => import("./type").TdPrimaryTableProps["defaultSelectedRowKeys"];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sort"]>;
        default: import("./type").TdPrimaryTableProps["sort"];
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["defaultSort"]>;
    };
    sortIcon: {
        type: import("vue").PropType<import("./type").TdPrimaryTableProps["sortIcon"]>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onAsyncLoadingClick"]>;
    onCellClick: import("vue").PropType<import("./type").TdPrimaryTableProps["onCellClick"]>;
    onChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onChange"]>;
    onColumnChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnChange"]>;
    onColumnControllerVisibleChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onColumnControllerVisibleChange"]>;
    onDataChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDataChange"]>;
    onDisplayColumnsChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onDisplayColumnsChange"]>;
    onDragSort: import("vue").PropType<import("./type").TdPrimaryTableProps["onDragSort"]>;
    onExpandChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onExpandChange"]>;
    onFilterChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onFilterChange"]>;
    onRowEdit: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowEdit"]>;
    onRowValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onRowValidate"]>;
    onSelectChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSelectChange"]>;
    onSortChange: import("vue").PropType<import("./type").TdPrimaryTableProps["onSortChange"]>;
    onValidate: import("vue").PropType<import("./type").TdPrimaryTableProps["onValidate"]>;
    activeRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowKeys"]>;
        default: import("./type").TdBaseTableProps["activeRowKeys"];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["defaultActiveRowKeys"]>;
        default: () => import("./type").TdBaseTableProps["defaultActiveRowKeys"];
    };
    activeRowType: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["activeRowType"]>;
        default: import("./type").TdBaseTableProps["activeRowType"];
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["attach"]>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["bottomContent"]>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["cellEmptyContent"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["data"]>;
        default: () => import("./type").TdBaseTableProps["data"];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["empty"]>;
        default: import("./type").TdBaseTableProps["empty"];
    };
    firstFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["firstFullRow"]>;
    };
    fixedRows: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["fixedRows"]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footData"]>;
        default: () => import("./type").TdBaseTableProps["footData"];
    };
    footerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixProps"]>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerAffixedBottom"]>;
        default: import("./type").TdBaseTableProps["footerAffixedBottom"];
    };
    footerSummary: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["footerSummary"]>;
    };
    headerAffixProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixProps"]>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["headerAffixedTop"]>;
        default: import("./type").TdBaseTableProps["headerAffixedTop"];
    };
    height: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["height"]>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["horizontalScrollAffixedBottom"]>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["lastFullRow"]>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loading"]>;
        default: import("./type").TdBaseTableProps["loading"];
    };
    loadingProps: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["loadingProps"]>;
    };
    locale: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["locale"]>;
    };
    maxHeight: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["maxHeight"]>;
    };
    pagination: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["pagination"]>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["paginationAffixedBottom"]>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowAttributes"]>;
    };
    rowClassName: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowClassName"]>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspan"]>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["rowspanAndColspanInFooter"]>;
    };
    scroll: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["scroll"]>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["size"]>;
        validator(val: import("./type").TdBaseTableProps["size"]): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["tableLayout"]>;
        default: import("./type").TdBaseTableProps["tableLayout"];
        validator(val: import("./type").TdBaseTableProps["tableLayout"]): boolean;
    };
    topContent: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["topContent"]>;
    };
    verticalAlign: {
        type: import("vue").PropType<import("./type").TdBaseTableProps["verticalAlign"]>;
        default: import("./type").TdBaseTableProps["verticalAlign"];
        validator(val: import("./type").TdBaseTableProps["verticalAlign"]): boolean;
    };
    onActiveChange: import("vue").PropType<import("./type").TdBaseTableProps["onActiveChange"]>;
    onActiveRowAction: import("vue").PropType<import("./type").TdBaseTableProps["onActiveRowAction"]>;
    onColumnResizeChange: import("vue").PropType<import("./type").TdBaseTableProps["onColumnResizeChange"]>;
    onPageChange: import("vue").PropType<import("./type").TdBaseTableProps["onPageChange"]>;
    onRowClick: import("vue").PropType<import("./type").TdBaseTableProps["onRowClick"]>;
    onRowDblclick: import("vue").PropType<import("./type").TdBaseTableProps["onRowDblclick"]>;
    onRowMousedown: import("vue").PropType<import("./type").TdBaseTableProps["onRowMousedown"]>;
    onRowMouseenter: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseenter"]>;
    onRowMouseleave: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseleave"]>;
    onRowMouseover: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseover"]>;
    onRowMouseup: import("vue").PropType<import("./type").TdBaseTableProps["onRowMouseup"]>;
    onScroll: import("vue").PropType<import("./type").TdBaseTableProps["onScroll"]>;
    onScrollX: import("vue").PropType<import("./type").TdBaseTableProps["onScrollX"]>;
    onScrollY: import("vue").PropType<import("./type").TdBaseTableProps["onScrollY"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    empty: string | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    loading: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    hover: boolean;
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "single" | "multiple";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("..").TNodeReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Table;

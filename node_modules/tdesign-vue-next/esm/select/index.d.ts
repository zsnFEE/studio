import { TdSelectProps, TdOptionProps, TdOptionGroupProps, SelectOption } from './type';
import './style';
export * from './type';
export type SelectProps<T = SelectOption> = TdSelectProps<T>;
export type OptionProps = TdOptionProps;
export type OptionGroupProps = TdOptionGroupProps;
export declare const Select: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/hooks").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectProps["collapsedItems"]>;
        };
        creatable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdSelectProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<TdSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectProps["inputValue"]>;
            default: TdSelectProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectProps["label"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<TdSelectProps["loadingText"]>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdSelectProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<TdSelectProps["scroll"]>;
        };
        selectInputProps: {
            type: import("vue").PropType<TdSelectProps["selectInputProps"]>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdSelectProps["size"]>;
            default: TdSelectProps["size"];
            validator(val: TdSelectProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectProps["status"]>;
            default: TdSelectProps["status"];
            validator(val: TdSelectProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectProps["suffixIcon"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdSelectProps["defaultValue"]>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdSelectProps["valueType"]>;
            default: TdSelectProps["valueType"];
            validator(val: TdSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdSelectProps["onBlur"]>;
        onChange: import("vue").PropType<TdSelectProps["onChange"]>;
        onClear: import("vue").PropType<TdSelectProps["onClear"]>;
        onCreate: import("vue").PropType<TdSelectProps["onCreate"]>;
        onEnter: import("vue").PropType<TdSelectProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<TdSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<TdSelectProps["onSearch"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/hooks").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectProps["collapsedItems"]>;
        };
        creatable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdSelectProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<TdSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectProps["inputValue"]>;
            default: TdSelectProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectProps["label"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<TdSelectProps["loadingText"]>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdSelectProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<TdSelectProps["scroll"]>;
        };
        selectInputProps: {
            type: import("vue").PropType<TdSelectProps["selectInputProps"]>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdSelectProps["size"]>;
            default: TdSelectProps["size"];
            validator(val: TdSelectProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectProps["status"]>;
            default: TdSelectProps["status"];
            validator(val: TdSelectProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectProps["suffixIcon"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdSelectProps["defaultValue"]>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdSelectProps["valueType"]>;
            default: TdSelectProps["valueType"];
            validator(val: TdSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdSelectProps["onBlur"]>;
        onChange: import("vue").PropType<TdSelectProps["onChange"]>;
        onClear: import("vue").PropType<TdSelectProps["onClear"]>;
        onCreate: import("vue").PropType<TdSelectProps["onCreate"]>;
        onEnter: import("vue").PropType<TdSelectProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<TdSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<TdSelectProps["onSearch"]>;
    }>>, {
        disabled: boolean;
        value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        loading: boolean;
        valueType: "object" | "value";
        multiple: boolean;
        max: number;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: any;
        placeholder: string;
        modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        readonly: boolean;
        showArrow: boolean;
        autoWidth: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
        creatable: boolean;
        filterable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/hooks").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<TdSelectProps["collapsedItems"]>;
        };
        creatable: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<TdSelectProps["empty"]>;
        };
        filter: {
            type: import("vue").PropType<TdSelectProps["filter"]>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<TdSelectProps["inputProps"]>;
        };
        inputValue: {
            type: import("vue").PropType<TdSelectProps["inputValue"]>;
            default: TdSelectProps["inputValue"];
        };
        defaultInputValue: {
            type: import("vue").PropType<TdSelectProps["defaultInputValue"]>;
        };
        keys: {
            type: import("vue").PropType<TdSelectProps["keys"]>;
        };
        label: {
            type: import("vue").PropType<TdSelectProps["label"]>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<TdSelectProps["loadingText"]>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<TdSelectProps["options"]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<TdSelectProps["panelBottomContent"]>;
        };
        panelTopContent: {
            type: import("vue").PropType<TdSelectProps["panelTopContent"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdSelectProps["popupProps"]>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<TdSelectProps["prefixIcon"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<TdSelectProps["scroll"]>;
        };
        selectInputProps: {
            type: import("vue").PropType<TdSelectProps["selectInputProps"]>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<TdSelectProps["size"]>;
            default: TdSelectProps["size"];
            validator(val: TdSelectProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdSelectProps["status"]>;
            default: TdSelectProps["status"];
            validator(val: TdSelectProps["status"]): boolean;
        };
        suffix: {
            type: import("vue").PropType<TdSelectProps["suffix"]>;
        };
        suffixIcon: {
            type: import("vue").PropType<TdSelectProps["suffixIcon"]>;
        };
        tagInputProps: {
            type: import("vue").PropType<TdSelectProps["tagInputProps"]>;
        };
        tagProps: {
            type: import("vue").PropType<TdSelectProps["tagProps"]>;
        };
        tips: {
            type: import("vue").PropType<TdSelectProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdSelectProps["value"]>;
            default: TdSelectProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdSelectProps["defaultValue"]>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<TdSelectProps["valueDisplay"]>;
        };
        valueType: {
            type: import("vue").PropType<TdSelectProps["valueType"]>;
            default: TdSelectProps["valueType"];
            validator(val: TdSelectProps["valueType"]): boolean;
        };
        onBlur: import("vue").PropType<TdSelectProps["onBlur"]>;
        onChange: import("vue").PropType<TdSelectProps["onChange"]>;
        onClear: import("vue").PropType<TdSelectProps["onClear"]>;
        onCreate: import("vue").PropType<TdSelectProps["onCreate"]>;
        onEnter: import("vue").PropType<TdSelectProps["onEnter"]>;
        onFocus: import("vue").PropType<TdSelectProps["onFocus"]>;
        onInputChange: import("vue").PropType<TdSelectProps["onInputChange"]>;
        onPopupVisibleChange: import("vue").PropType<TdSelectProps["onPopupVisibleChange"]>;
        onRemove: import("vue").PropType<TdSelectProps["onRemove"]>;
        onSearch: import("vue").PropType<TdSelectProps["onSearch"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        loading: boolean;
        valueType: "object" | "value";
        multiple: boolean;
        max: number;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        defaultValue: any;
        placeholder: string;
        modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        readonly: boolean;
        showArrow: boolean;
        autoWidth: boolean;
        autofocus: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
        creatable: boolean;
        filterable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: import("vue").PropType<import("../select-input/hooks").SelectInputValueDisplayOptions>;
    };
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<TdSelectProps["collapsedItems"]>;
    };
    creatable: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<TdSelectProps["empty"]>;
    };
    filter: {
        type: import("vue").PropType<TdSelectProps["filter"]>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<TdSelectProps["inputProps"]>;
    };
    inputValue: {
        type: import("vue").PropType<TdSelectProps["inputValue"]>;
        default: TdSelectProps["inputValue"];
    };
    defaultInputValue: {
        type: import("vue").PropType<TdSelectProps["defaultInputValue"]>;
    };
    keys: {
        type: import("vue").PropType<TdSelectProps["keys"]>;
    };
    label: {
        type: import("vue").PropType<TdSelectProps["label"]>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<TdSelectProps["loadingText"]>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<TdSelectProps["options"]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<TdSelectProps["panelBottomContent"]>;
    };
    panelTopContent: {
        type: import("vue").PropType<TdSelectProps["panelTopContent"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<TdSelectProps["popupProps"]>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<TdSelectProps["prefixIcon"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: import("vue").PropType<TdSelectProps["scroll"]>;
    };
    selectInputProps: {
        type: import("vue").PropType<TdSelectProps["selectInputProps"]>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdSelectProps["size"]>;
        default: TdSelectProps["size"];
        validator(val: TdSelectProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdSelectProps["status"]>;
        default: TdSelectProps["status"];
        validator(val: TdSelectProps["status"]): boolean;
    };
    suffix: {
        type: import("vue").PropType<TdSelectProps["suffix"]>;
    };
    suffixIcon: {
        type: import("vue").PropType<TdSelectProps["suffixIcon"]>;
    };
    tagInputProps: {
        type: import("vue").PropType<TdSelectProps["tagInputProps"]>;
    };
    tagProps: {
        type: import("vue").PropType<TdSelectProps["tagProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdSelectProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdSelectProps["value"]>;
        default: TdSelectProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdSelectProps["value"]>;
        default: TdSelectProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdSelectProps["defaultValue"]>;
        default: any;
    };
    valueDisplay: {
        type: import("vue").PropType<TdSelectProps["valueDisplay"]>;
    };
    valueType: {
        type: import("vue").PropType<TdSelectProps["valueType"]>;
        default: TdSelectProps["valueType"];
        validator(val: TdSelectProps["valueType"]): boolean;
    };
    onBlur: import("vue").PropType<TdSelectProps["onBlur"]>;
    onChange: import("vue").PropType<TdSelectProps["onChange"]>;
    onClear: import("vue").PropType<TdSelectProps["onClear"]>;
    onCreate: import("vue").PropType<TdSelectProps["onCreate"]>;
    onEnter: import("vue").PropType<TdSelectProps["onEnter"]>;
    onFocus: import("vue").PropType<TdSelectProps["onFocus"]>;
    onInputChange: import("vue").PropType<TdSelectProps["onInputChange"]>;
    onPopupVisibleChange: import("vue").PropType<TdSelectProps["onPopupVisibleChange"]>;
    onRemove: import("vue").PropType<TdSelectProps["onRemove"]>;
    onSearch: import("vue").PropType<TdSelectProps["onSearch"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
    loading: boolean;
    valueType: "object" | "value";
    multiple: boolean;
    max: number;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: any;
    placeholder: string;
    modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
    readonly: boolean;
    showArrow: boolean;
    autoWidth: boolean;
    autofocus: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
    creatable: boolean;
    filterable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const Option: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdOptionProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdOptionProps["default"]>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<TdOptionProps["value"]>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdOptionProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdOptionProps["default"]>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<TdOptionProps["value"]>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, {
        disabled: boolean;
        multiple: boolean;
        label: string;
        title: string;
        checkAll: boolean;
        createAble: boolean;
        isVirtual: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<TdOptionProps["content"]>;
        };
        default: {
            type: import("vue").PropType<TdOptionProps["default"]>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<TdOptionProps["value"]>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        multiple: boolean;
        label: string;
        title: string;
        checkAll: boolean;
        createAble: boolean;
        isVirtual: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    createAble: BooleanConstructor;
    multiple: BooleanConstructor;
    index: NumberConstructor;
    rowIndex: NumberConstructor;
    trs: MapConstructor;
    scrollType: StringConstructor;
    isVirtual: BooleanConstructor;
    bufferSize: NumberConstructor;
    checkAll: BooleanConstructor;
    content: {
        type: import("vue").PropType<TdOptionProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdOptionProps["default"]>;
    };
    disabled: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<TdOptionProps["value"]>;
    };
}>> & {
    "onRow-mounted"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], "row-mounted", {
    disabled: boolean;
    multiple: boolean;
    label: string;
    title: string;
    checkAll: boolean;
    createAble: boolean;
    isVirtual: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const OptionGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
    }>>, {
        divider: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        divider: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    divider: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    divider: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Select;

import type { TdDatePickerProps, DateMultipleValue, DateValue } from './type';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdDatePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<TdDatePickerProps["mode"]>;
        default: TdDatePickerProps["mode"];
        validator(val: TdDatePickerProps["mode"]): boolean;
    };
    multiple: BooleanConstructor;
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
        default: TdDatePickerProps["placeholder"];
    };
    popupProps: {
        type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
        default: TdDatePickerProps["presetsPlacement"];
        validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
    };
    size: {
        type: import("vue").PropType<TdDatePickerProps["size"]>;
        default: TdDatePickerProps["size"];
        validator(val: TdDatePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdDatePickerProps["status"]>;
        default: TdDatePickerProps["status"];
        validator(val: TdDatePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdDatePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
        default: TdDatePickerProps["defaultValue"];
    };
    valueDisplay: {
        type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
    };
    valueType: {
        type: import("vue").PropType<TdDatePickerProps["valueType"]>;
        default: TdDatePickerProps["valueType"];
    };
    onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
    onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<TdDatePickerProps["disableDate"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDatePickerProps["firstDayOfWeek"]): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<TdDatePickerProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdDatePickerProps["label"]>;
    };
    mode: {
        type: import("vue").PropType<TdDatePickerProps["mode"]>;
        default: TdDatePickerProps["mode"];
        validator(val: TdDatePickerProps["mode"]): boolean;
    };
    multiple: BooleanConstructor;
    needConfirm: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<TdDatePickerProps["placeholder"]>;
        default: TdDatePickerProps["placeholder"];
    };
    popupProps: {
        type: import("vue").PropType<TdDatePickerProps["popupProps"]>;
    };
    prefixIcon: {
        type: import("vue").PropType<TdDatePickerProps["prefixIcon"]>;
    };
    presets: {
        type: import("vue").PropType<TdDatePickerProps["presets"]>;
    };
    presetsPlacement: {
        type: import("vue").PropType<TdDatePickerProps["presetsPlacement"]>;
        default: TdDatePickerProps["presetsPlacement"];
        validator(val: TdDatePickerProps["presetsPlacement"]): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<TdDatePickerProps["selectInputProps"]>;
    };
    size: {
        type: import("vue").PropType<TdDatePickerProps["size"]>;
        default: TdDatePickerProps["size"];
        validator(val: TdDatePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdDatePickerProps["status"]>;
        default: TdDatePickerProps["status"];
        validator(val: TdDatePickerProps["status"]): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<TdDatePickerProps["suffixIcon"]>;
    };
    timePickerProps: {
        type: import("vue").PropType<TdDatePickerProps["timePickerProps"]>;
    };
    tips: {
        type: import("vue").PropType<TdDatePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdDatePickerProps["value"]>;
        default: TdDatePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdDatePickerProps["defaultValue"]>;
        default: TdDatePickerProps["defaultValue"];
    };
    valueDisplay: {
        type: import("vue").PropType<TdDatePickerProps["valueDisplay"]>;
    };
    valueType: {
        type: import("vue").PropType<TdDatePickerProps["valueType"]>;
        default: TdDatePickerProps["valueType"];
    };
    onBlur: import("vue").PropType<TdDatePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdDatePickerProps["onChange"]>;
    onConfirm: import("vue").PropType<TdDatePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<TdDatePickerProps["onFocus"]>;
    onPick: import("vue").PropType<TdDatePickerProps["onPick"]>;
    onPresetClick: import("vue").PropType<TdDatePickerProps["onPresetClick"]>;
}>>, {
    disabled: boolean;
    value: DateValue | DateMultipleValue;
    format: string;
    mode: "date" | "month" | "year" | "quarter" | "week";
    valueType: import("./type").DatePickerValueType;
    enableTimePicker: boolean;
    multiple: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    defaultValue: DateValue | DateMultipleValue;
    placeholder: string;
    modelValue: DateValue | DateMultipleValue;
    readonly: boolean;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    presetsPlacement: "left" | "right" | "top" | "bottom";
    needConfirm: boolean;
    defaultTime: string;
}, {}>;
export default _default;

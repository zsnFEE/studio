import type { TdPaginationProps } from '../pagination/type';
declare const _default: import("vue").DefineComponent<{
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    foldedMaxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    maxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    pageEllipsisMode: {
        type: import("vue").PropType<TdPaginationProps["pageEllipsisMode"]>;
        default: TdPaginationProps["pageEllipsisMode"];
        validator(val: TdPaginationProps["pageEllipsisMode"]): boolean;
    };
    pageSize: {
        type: NumberConstructor;
        default: any;
    };
    defaultPageSize: {
        type: NumberConstructor;
        default: number;
    };
    pageSizeOptions: {
        type: import("vue").PropType<TdPaginationProps["pageSizeOptions"]>;
        default: () => TdPaginationProps["pageSizeOptions"];
    };
    selectProps: {
        type: import("vue").PropType<TdPaginationProps["selectProps"]>;
    };
    showFirstAndLastPageBtn: BooleanConstructor;
    showJumper: BooleanConstructor;
    showPageNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPageSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPreviousAndNextBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdPaginationProps["size"]>;
        default: TdPaginationProps["size"];
        validator(val: TdPaginationProps["size"]): boolean;
    };
    theme: {
        type: import("vue").PropType<TdPaginationProps["theme"]>;
        default: TdPaginationProps["theme"];
        validator(val: TdPaginationProps["theme"]): boolean;
    };
    total: {
        type: NumberConstructor;
        default: number;
    };
    totalContent: {
        type: import("vue").PropType<TdPaginationProps["totalContent"]>;
        default: boolean;
    };
    onChange: import("vue").PropType<TdPaginationProps["onChange"]>;
    onCurrentChange: import("vue").PropType<TdPaginationProps["onCurrentChange"]>;
    onPageSizeChange: import("vue").PropType<TdPaginationProps["onPageSizeChange"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    foldedMaxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    maxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    pageEllipsisMode: {
        type: import("vue").PropType<TdPaginationProps["pageEllipsisMode"]>;
        default: TdPaginationProps["pageEllipsisMode"];
        validator(val: TdPaginationProps["pageEllipsisMode"]): boolean;
    };
    pageSize: {
        type: NumberConstructor;
        default: any;
    };
    defaultPageSize: {
        type: NumberConstructor;
        default: number;
    };
    pageSizeOptions: {
        type: import("vue").PropType<TdPaginationProps["pageSizeOptions"]>;
        default: () => TdPaginationProps["pageSizeOptions"];
    };
    selectProps: {
        type: import("vue").PropType<TdPaginationProps["selectProps"]>;
    };
    showFirstAndLastPageBtn: BooleanConstructor;
    showJumper: BooleanConstructor;
    showPageNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPageSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPreviousAndNextBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<TdPaginationProps["size"]>;
        default: TdPaginationProps["size"];
        validator(val: TdPaginationProps["size"]): boolean;
    };
    theme: {
        type: import("vue").PropType<TdPaginationProps["theme"]>;
        default: TdPaginationProps["theme"];
        validator(val: TdPaginationProps["theme"]): boolean;
    };
    total: {
        type: NumberConstructor;
        default: number;
    };
    totalContent: {
        type: import("vue").PropType<TdPaginationProps["totalContent"]>;
        default: boolean;
    };
    onChange: import("vue").PropType<TdPaginationProps["onChange"]>;
    onCurrentChange: import("vue").PropType<TdPaginationProps["onCurrentChange"]>;
    onPageSizeChange: import("vue").PropType<TdPaginationProps["onPageSizeChange"]>;
}>>, {
    disabled: boolean;
    size: "small" | "medium";
    theme: "default" | "simple";
    modelValue: number;
    current: number;
    total: number;
    pageEllipsisMode: "mid" | "both-ends";
    pageSizeOptions: (number | {
        label: string;
        value: number;
    })[];
    totalContent: boolean | ((h: typeof import("vue").h) => import("..").TNodeReturnValue);
    defaultCurrent: number;
    foldedMaxPageBtn: number;
    maxPageBtn: number;
    pageSize: number;
    defaultPageSize: number;
    showFirstAndLastPageBtn: boolean;
    showJumper: boolean;
    showPageNumber: boolean;
    showPageSize: boolean;
    showPreviousAndNextBtn: boolean;
}, {}>;
export default _default;

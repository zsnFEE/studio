import { TdTimePickerProps, TdTimeRangePickerProps } from './type';
import './style';
export * from './type';
export type TimePickerProps = TdTimePickerProps;
export type TimeRangePickerProps = TdTimeRangePickerProps;
export type TimePickerPanelProps = TdTimePickerProps;
export declare const TimePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimePickerProps["disableTime"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdTimePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdTimePickerProps["label"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdTimePickerProps["popupProps"]>;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdTimePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdTimePickerProps["size"]>;
            default: TdTimePickerProps["size"];
            validator(val: TdTimePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimePickerProps["status"]>;
            default: TdTimePickerProps["status"];
            validator(val: TdTimePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimePickerProps["steps"]>;
            default: () => TdTimePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimePickerProps["defaultValue"]>;
            default: TdTimePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdTimePickerProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdTimePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimePickerProps["onChange"]>;
        onClear: import("vue").PropType<TdTimePickerProps["onClear"]>;
        onClose: import("vue").PropType<TdTimePickerProps["onClose"]>;
        onConfirm: import("vue").PropType<TdTimePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdTimePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimePickerProps["onInput"]>;
        onOpen: import("vue").PropType<TdTimePickerProps["onOpen"]>;
        onPick: import("vue").PropType<TdTimePickerProps["onPick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimePickerProps["disableTime"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdTimePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdTimePickerProps["label"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdTimePickerProps["popupProps"]>;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdTimePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdTimePickerProps["size"]>;
            default: TdTimePickerProps["size"];
            validator(val: TdTimePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimePickerProps["status"]>;
            default: TdTimePickerProps["status"];
            validator(val: TdTimePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimePickerProps["steps"]>;
            default: () => TdTimePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimePickerProps["defaultValue"]>;
            default: TdTimePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdTimePickerProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdTimePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimePickerProps["onChange"]>;
        onClear: import("vue").PropType<TdTimePickerProps["onClear"]>;
        onClose: import("vue").PropType<TdTimePickerProps["onClose"]>;
        onConfirm: import("vue").PropType<TdTimePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdTimePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimePickerProps["onInput"]>;
        onOpen: import("vue").PropType<TdTimePickerProps["onOpen"]>;
        onPick: import("vue").PropType<TdTimePickerProps["onPick"]>;
    }>>, {
        disabled: boolean;
        value: string;
        format: string;
        steps: (string | number)[];
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        defaultValue: string;
        placeholder: string;
        modelValue: string;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimePickerProps["disableTime"]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<TdTimePickerProps["inputProps"]>;
        };
        label: {
            type: import("vue").PropType<TdTimePickerProps["label"]>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<TdTimePickerProps["popupProps"]>;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        selectInputProps: {
            type: import("vue").PropType<TdTimePickerProps["selectInputProps"]>;
        };
        size: {
            type: import("vue").PropType<TdTimePickerProps["size"]>;
            default: TdTimePickerProps["size"];
            validator(val: TdTimePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimePickerProps["status"]>;
            default: TdTimePickerProps["status"];
            validator(val: TdTimePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimePickerProps["steps"]>;
            default: () => TdTimePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimePickerProps["value"]>;
            default: TdTimePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimePickerProps["defaultValue"]>;
            default: TdTimePickerProps["defaultValue"];
        };
        valueDisplay: {
            type: import("vue").PropType<TdTimePickerProps["valueDisplay"]>;
        };
        onBlur: import("vue").PropType<TdTimePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimePickerProps["onChange"]>;
        onClear: import("vue").PropType<TdTimePickerProps["onClear"]>;
        onClose: import("vue").PropType<TdTimePickerProps["onClose"]>;
        onConfirm: import("vue").PropType<TdTimePickerProps["onConfirm"]>;
        onFocus: import("vue").PropType<TdTimePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimePickerProps["onInput"]>;
        onOpen: import("vue").PropType<TdTimePickerProps["onOpen"]>;
        onPick: import("vue").PropType<TdTimePickerProps["onPick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string;
        format: string;
        steps: (string | number)[];
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        defaultValue: string;
        placeholder: string;
        modelValue: string;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<TdTimePickerProps["disableTime"]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<TdTimePickerProps["inputProps"]>;
    };
    label: {
        type: import("vue").PropType<TdTimePickerProps["label"]>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<TdTimePickerProps["popupProps"]>;
    };
    presets: {
        type: import("vue").PropType<TdTimePickerProps["presets"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    selectInputProps: {
        type: import("vue").PropType<TdTimePickerProps["selectInputProps"]>;
    };
    size: {
        type: import("vue").PropType<TdTimePickerProps["size"]>;
        default: TdTimePickerProps["size"];
        validator(val: TdTimePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdTimePickerProps["status"]>;
        default: TdTimePickerProps["status"];
        validator(val: TdTimePickerProps["status"]): boolean;
    };
    steps: {
        type: import("vue").PropType<TdTimePickerProps["steps"]>;
        default: () => TdTimePickerProps["steps"];
    };
    tips: {
        type: import("vue").PropType<TdTimePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdTimePickerProps["value"]>;
        default: TdTimePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdTimePickerProps["value"]>;
        default: TdTimePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdTimePickerProps["defaultValue"]>;
        default: TdTimePickerProps["defaultValue"];
    };
    valueDisplay: {
        type: import("vue").PropType<TdTimePickerProps["valueDisplay"]>;
    };
    onBlur: import("vue").PropType<TdTimePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdTimePickerProps["onChange"]>;
    onClear: import("vue").PropType<TdTimePickerProps["onClear"]>;
    onClose: import("vue").PropType<TdTimePickerProps["onClose"]>;
    onConfirm: import("vue").PropType<TdTimePickerProps["onConfirm"]>;
    onFocus: import("vue").PropType<TdTimePickerProps["onFocus"]>;
    onInput: import("vue").PropType<TdTimePickerProps["onInput"]>;
    onOpen: import("vue").PropType<TdTimePickerProps["onOpen"]>;
    onPick: import("vue").PropType<TdTimePickerProps["onPick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: string;
    format: string;
    steps: (string | number)[];
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    defaultValue: string;
    placeholder: string;
    modelValue: string;
    readonly: boolean;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const TimeRangePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        autoSwap: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimeRangePickerProps["disableTime"]>;
        };
        disabled: {
            type: import("vue").PropType<TdTimeRangePickerProps["disabled"]>;
            default: TdTimeRangePickerProps["disabled"];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<TdTimeRangePickerProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdTimeRangePickerProps["placeholder"]>;
            default: TdTimeRangePickerProps["placeholder"];
        };
        presets: {
            type: import("vue").PropType<TdTimeRangePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdTimeRangePickerProps["size"]>;
            default: TdTimeRangePickerProps["size"];
            validator(val: TdTimeRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimeRangePickerProps["status"]>;
            default: TdTimeRangePickerProps["status"];
            validator(val: TdTimeRangePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimeRangePickerProps["steps"]>;
            default: () => TdTimeRangePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimeRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdTimeRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimeRangePickerProps["onChange"]>;
        onFocus: import("vue").PropType<TdTimeRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimeRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdTimeRangePickerProps["onPick"]>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        autoSwap: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimeRangePickerProps["disableTime"]>;
        };
        disabled: {
            type: import("vue").PropType<TdTimeRangePickerProps["disabled"]>;
            default: TdTimeRangePickerProps["disabled"];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<TdTimeRangePickerProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdTimeRangePickerProps["placeholder"]>;
            default: TdTimeRangePickerProps["placeholder"];
        };
        presets: {
            type: import("vue").PropType<TdTimeRangePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdTimeRangePickerProps["size"]>;
            default: TdTimeRangePickerProps["size"];
            validator(val: TdTimeRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimeRangePickerProps["status"]>;
            default: TdTimeRangePickerProps["status"];
            validator(val: TdTimeRangePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimeRangePickerProps["steps"]>;
            default: () => TdTimeRangePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimeRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdTimeRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimeRangePickerProps["onChange"]>;
        onFocus: import("vue").PropType<TdTimeRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimeRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdTimeRangePickerProps["onPick"]>;
    }>>, {
        disabled: boolean | boolean[];
        value: import("./type").TimeRangeValue;
        format: string;
        steps: (string | number)[];
        autoSwap: boolean;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string | string[];
        modelValue: import("./type").TimeRangeValue;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        autoSwap: {
            type: BooleanConstructor;
            default: boolean;
        };
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<TdTimeRangePickerProps["disableTime"]>;
        };
        disabled: {
            type: import("vue").PropType<TdTimeRangePickerProps["disabled"]>;
            default: TdTimeRangePickerProps["disabled"];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<TdTimeRangePickerProps["label"]>;
        };
        placeholder: {
            type: import("vue").PropType<TdTimeRangePickerProps["placeholder"]>;
            default: TdTimeRangePickerProps["placeholder"];
        };
        presets: {
            type: import("vue").PropType<TdTimeRangePickerProps["presets"]>;
        };
        readonly: {
            type: BooleanConstructor;
            default: any;
        };
        size: {
            type: import("vue").PropType<TdTimeRangePickerProps["size"]>;
            default: TdTimeRangePickerProps["size"];
            validator(val: TdTimeRangePickerProps["size"]): boolean;
        };
        status: {
            type: import("vue").PropType<TdTimeRangePickerProps["status"]>;
            default: TdTimeRangePickerProps["status"];
            validator(val: TdTimeRangePickerProps["status"]): boolean;
        };
        steps: {
            type: import("vue").PropType<TdTimeRangePickerProps["steps"]>;
            default: () => TdTimeRangePickerProps["steps"];
        };
        tips: {
            type: import("vue").PropType<TdTimeRangePickerProps["tips"]>;
        };
        value: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
            default: TdTimeRangePickerProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdTimeRangePickerProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdTimeRangePickerProps["onBlur"]>;
        onChange: import("vue").PropType<TdTimeRangePickerProps["onChange"]>;
        onFocus: import("vue").PropType<TdTimeRangePickerProps["onFocus"]>;
        onInput: import("vue").PropType<TdTimeRangePickerProps["onInput"]>;
        onPick: import("vue").PropType<TdTimeRangePickerProps["onPick"]>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean | boolean[];
        value: import("./type").TimeRangeValue;
        format: string;
        steps: (string | number)[];
        autoSwap: boolean;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string | string[];
        modelValue: import("./type").TimeRangeValue;
        readonly: boolean;
        borderless: boolean;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    rangeInputProps: ObjectConstructor;
    popupProps: ObjectConstructor;
    allowInput: BooleanConstructor;
    autoSwap: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<TdTimeRangePickerProps["disableTime"]>;
    };
    disabled: {
        type: import("vue").PropType<TdTimeRangePickerProps["disabled"]>;
        default: TdTimeRangePickerProps["disabled"];
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<TdTimeRangePickerProps["label"]>;
    };
    placeholder: {
        type: import("vue").PropType<TdTimeRangePickerProps["placeholder"]>;
        default: TdTimeRangePickerProps["placeholder"];
    };
    presets: {
        type: import("vue").PropType<TdTimeRangePickerProps["presets"]>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    size: {
        type: import("vue").PropType<TdTimeRangePickerProps["size"]>;
        default: TdTimeRangePickerProps["size"];
        validator(val: TdTimeRangePickerProps["size"]): boolean;
    };
    status: {
        type: import("vue").PropType<TdTimeRangePickerProps["status"]>;
        default: TdTimeRangePickerProps["status"];
        validator(val: TdTimeRangePickerProps["status"]): boolean;
    };
    steps: {
        type: import("vue").PropType<TdTimeRangePickerProps["steps"]>;
        default: () => TdTimeRangePickerProps["steps"];
    };
    tips: {
        type: import("vue").PropType<TdTimeRangePickerProps["tips"]>;
    };
    value: {
        type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
        default: TdTimeRangePickerProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdTimeRangePickerProps["value"]>;
        default: TdTimeRangePickerProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdTimeRangePickerProps["defaultValue"]>;
    };
    onBlur: import("vue").PropType<TdTimeRangePickerProps["onBlur"]>;
    onChange: import("vue").PropType<TdTimeRangePickerProps["onChange"]>;
    onFocus: import("vue").PropType<TdTimeRangePickerProps["onFocus"]>;
    onInput: import("vue").PropType<TdTimeRangePickerProps["onInput"]>;
    onPick: import("vue").PropType<TdTimeRangePickerProps["onPick"]>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean | boolean[];
    value: import("./type").TimeRangeValue;
    format: string;
    steps: (string | number)[];
    autoSwap: boolean;
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    placeholder: string | string[];
    modelValue: import("./type").TimeRangeValue;
    readonly: boolean;
    borderless: boolean;
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const TimePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<Array<string | number>>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"] | TdTimeRangePickerProps["presets"]>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<Array<string | number>>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"] | TdTimeRangePickerProps["presets"]>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, {
        disabled: boolean;
        value: string;
        format: string;
        steps: (string | number)[];
        isFocus: boolean;
        isShowPanel: boolean;
        hideDisabledTime: boolean;
        isFooterDisplay: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<Array<string | number>>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<TdTimePickerProps["presets"] | TdTimeRangePickerProps["presets"]>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string;
        format: string;
        steps: (string | number)[];
        isFocus: boolean;
        isShowPanel: boolean;
        hideDisabledTime: boolean;
        isFooterDisplay: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isFooterDisplay: BooleanConstructor;
    handleConfirmClick: FunctionConstructor;
    onChange: FunctionConstructor;
    disabled: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    isFocus: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    steps: {
        default: number[];
        type: import("vue").PropType<Array<string | number>>;
    };
    isShowPanel: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    activeIndex: {
        type: NumberConstructor;
    };
    presets: {
        type: import("vue").PropType<TdTimePickerProps["presets"] | TdTimeRangePickerProps["presets"]>;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: FunctionConstructor;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    value: string;
    format: string;
    steps: (string | number)[];
    isFocus: boolean;
    isShowPanel: boolean;
    hideDisabledTime: boolean;
    isFooterDisplay: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default TimePicker;

import type { TdBackTopProps } from './type';
declare const _default: import("vue").DefineComponent<{
    container: {
        type: import("vue").PropType<TdBackTopProps["container"]>;
        default: TdBackTopProps["container"];
    };
    content: {
        type: import("vue").PropType<TdBackTopProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdBackTopProps["default"]>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<TdBackTopProps["offset"]>;
        default: () => TdBackTopProps["offset"];
    };
    shape: {
        type: import("vue").PropType<TdBackTopProps["shape"]>;
        default: TdBackTopProps["shape"];
        validator(val: TdBackTopProps["shape"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdBackTopProps["size"]>;
        default: TdBackTopProps["size"];
        validator(val: TdBackTopProps["size"]): boolean;
    };
    target: {
        type: import("vue").PropType<TdBackTopProps["target"]>;
        default: TdBackTopProps["target"];
    };
    theme: {
        type: import("vue").PropType<TdBackTopProps["theme"]>;
        default: TdBackTopProps["theme"];
        validator(val: TdBackTopProps["theme"]): boolean;
    };
    visibleHeight: {
        type: import("vue").PropType<TdBackTopProps["visibleHeight"]>;
        default: TdBackTopProps["visibleHeight"];
    };
    onClick: import("vue").PropType<TdBackTopProps["onClick"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: import("vue").PropType<TdBackTopProps["container"]>;
        default: TdBackTopProps["container"];
    };
    content: {
        type: import("vue").PropType<TdBackTopProps["content"]>;
    };
    default: {
        type: import("vue").PropType<TdBackTopProps["default"]>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<TdBackTopProps["offset"]>;
        default: () => TdBackTopProps["offset"];
    };
    shape: {
        type: import("vue").PropType<TdBackTopProps["shape"]>;
        default: TdBackTopProps["shape"];
        validator(val: TdBackTopProps["shape"]): boolean;
    };
    size: {
        type: import("vue").PropType<TdBackTopProps["size"]>;
        default: TdBackTopProps["size"];
        validator(val: TdBackTopProps["size"]): boolean;
    };
    target: {
        type: import("vue").PropType<TdBackTopProps["target"]>;
        default: TdBackTopProps["target"];
    };
    theme: {
        type: import("vue").PropType<TdBackTopProps["theme"]>;
        default: TdBackTopProps["theme"];
        validator(val: TdBackTopProps["theme"]): boolean;
    };
    visibleHeight: {
        type: import("vue").PropType<TdBackTopProps["visibleHeight"]>;
        default: TdBackTopProps["visibleHeight"];
    };
    onClick: import("vue").PropType<TdBackTopProps["onClick"]>;
}>>, {
    target: import("..").AttachNode;
    size: "small" | "medium";
    duration: number;
    theme: "primary" | "dark" | "light";
    container: import("..").AttachNode;
    shape: import("./type").BackTopShapeEnum;
    offset: (string | number)[];
    visibleHeight: string | number;
}, {}>;
export default _default;

{"version":3,"file":"qrcode-svg.js","sources":["../../../../components/qrcode/components/qrcode-svg.tsx"],"sourcesContent":["import { computed, defineComponent } from 'vue';\nimport { QRCodeSubComponentProps } from './props';\nimport {\n  DEFAULT_NEED_MARGIN,\n  DEFAULT_MINVERSION,\n  excavateModules,\n  generatePath,\n} from '@tdesign/common-js/qrcode/utils';\nimport { useQRCode } from '../hooks/useQRCode';\n\nexport default defineComponent({\n  name: 'QRCodeSVG',\n  props: QRCodeSubComponentProps,\n  setup(props) {\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value: props.value,\n      level: props.level,\n      minVersion: DEFAULT_MINVERSION,\n      includeMargin: DEFAULT_NEED_MARGIN,\n      marginSize: props.marginSize,\n      imageSettings: props.imageSettings,\n      size: props.size,\n    });\n\n    const cellsToDraw = computed(() => {\n      if (props.imageSettings && calculatedImageSettings.value?.excavation != null) {\n        return excavateModules(cells.value, calculatedImageSettings.value.excavation);\n      }\n      return cells.value;\n    });\n\n    const imageNode = computed(() => {\n      if (!props.imageSettings || !calculatedImageSettings.value) return null;\n\n      return (\n        <image\n          href={props.imageSettings.src}\n          height={calculatedImageSettings.value.h}\n          width={calculatedImageSettings.value.w}\n          x={calculatedImageSettings.value.x + margin.value}\n          y={calculatedImageSettings.value.y + margin.value}\n          crossOrigin={calculatedImageSettings.value.crossOrigin}\n        />\n      );\n    });\n\n    return () => {\n      const fgPath = generatePath(cellsToDraw.value, margin.value);\n      return (\n        <svg\n          height={props.size}\n          width={props.size}\n          viewBox={`0 0 ${numCells.value} ${numCells.value}`}\n          role=\"img\"\n          style={props.style}\n        >\n          {!!props.title && <title>{props.title}</title>}\n          <path fill={props.bgColor} d={`M0,0 h${numCells.value}v${numCells.value}H0z`} shape-rendering=\"crispEdges\" />\n          <path fill={props.fgColor} d={fgPath} shape-rendering=\"crispEdges\" />\n          {imageNode.value}\n        </svg>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","QRCodeSubComponentProps","setup","_useQRCode","useQRCode","value","level","minVersion","DEFAULT_MINVERSION","includeMargin","DEFAULT_NEED_MARGIN","marginSize","imageSettings","size","margin","cells","numCells","calculatedImageSettings","cellsToDraw","computed","_calculatedImageSetti","excavation","excavateModules","imageNode","_createVNode","src","h","w","x","y","crossOrigin","fgPath","generatePath","concat","style","title","bgColor","fgColor"],"mappings":"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"}